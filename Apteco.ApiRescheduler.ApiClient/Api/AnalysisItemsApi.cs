/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAnalysisItemsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// EXPERIMENTAL: Get the statuses of running calculate analysis item jobs
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system that the calculate jobs are running for.</param>
        /// <param name="analysisItemType">The type of analysis item the calculate jobs are for, e.g. Check, Export.</param>
        /// <param name="body">Any array of the jobIds to get the statuses for. (optional)</param>
        /// <returns>List&lt;AnalysisItemCalculateJobDetail&gt;</returns>
        List<AnalysisItemCalculateJobDetail> AnalysisItemsBatchGetAnalysisItemCalculateJobs (string dataViewName, string systemName, string analysisItemType, List<int?> body = null);

        /// <summary>
        /// EXPERIMENTAL: Get the statuses of running calculate analysis item jobs
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system that the calculate jobs are running for.</param>
        /// <param name="analysisItemType">The type of analysis item the calculate jobs are for, e.g. Check, Export.</param>
        /// <param name="body">Any array of the jobIds to get the statuses for. (optional)</param>
        /// <returns>ApiResponse of List&lt;AnalysisItemCalculateJobDetail&gt;</returns>
        ApiResponse<List<AnalysisItemCalculateJobDetail>> AnalysisItemsBatchGetAnalysisItemCalculateJobsWithHttpInfo (string dataViewName, string systemName, string analysisItemType, List<int?> body = null);
        /// <summary>
        /// EXPERIMENTAL: Create new job(s) to calculate data for the analysis item using the details given.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to calculate against</param>
        /// <param name="body">The details for calculating the results for the analysis item. (optional)</param>
        /// <returns>List&lt;AnalysisItemCalculateJobDetail&gt;</returns>
        List<AnalysisItemCalculateJobDetail> AnalysisItemsCreateAnalysisItemCalculateJobs (string dataViewName, string systemName, AnalysisItemCalculateDetails body = null);

        /// <summary>
        /// EXPERIMENTAL: Create new job(s) to calculate data for the analysis item using the details given.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to calculate against</param>
        /// <param name="body">The details for calculating the results for the analysis item. (optional)</param>
        /// <returns>ApiResponse of List&lt;AnalysisItemCalculateJobDetail&gt;</returns>
        ApiResponse<List<AnalysisItemCalculateJobDetail>> AnalysisItemsCreateAnalysisItemCalculateJobsWithHttpInfo (string dataViewName, string systemName, AnalysisItemCalculateDetails body = null);
        /// <summary>
        /// EXPERIMENTAL: Get the status of a running calculate analysis item job
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <param name="analysisItemType">The type of analysis item the calculate job is for, e.g. Check, Export.</param>
        /// <returns>AnalysisItemCalculateJobDetail</returns>
        AnalysisItemCalculateJobDetail AnalysisItemsGetAnalysisItemCalculateJob (string dataViewName, string systemName, int? jobId, string analysisItemType);

        /// <summary>
        /// EXPERIMENTAL: Get the status of a running calculate analysis item job
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <param name="analysisItemType">The type of analysis item the calculate job is for, e.g. Check, Export.</param>
        /// <returns>ApiResponse of AnalysisItemCalculateJobDetail</returns>
        ApiResponse<AnalysisItemCalculateJobDetail> AnalysisItemsGetAnalysisItemCalculateJobWithHttpInfo (string dataViewName, string systemName, int? jobId, string analysisItemType);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// EXPERIMENTAL: Get the statuses of running calculate analysis item jobs
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system that the calculate jobs are running for.</param>
        /// <param name="analysisItemType">The type of analysis item the calculate jobs are for, e.g. Check, Export.</param>
        /// <param name="body">Any array of the jobIds to get the statuses for. (optional)</param>
        /// <returns>Task of List&lt;AnalysisItemCalculateJobDetail&gt;</returns>
        System.Threading.Tasks.Task<List<AnalysisItemCalculateJobDetail>> AnalysisItemsBatchGetAnalysisItemCalculateJobsAsync (string dataViewName, string systemName, string analysisItemType, List<int?> body = null);

        /// <summary>
        /// EXPERIMENTAL: Get the statuses of running calculate analysis item jobs
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system that the calculate jobs are running for.</param>
        /// <param name="analysisItemType">The type of analysis item the calculate jobs are for, e.g. Check, Export.</param>
        /// <param name="body">Any array of the jobIds to get the statuses for. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AnalysisItemCalculateJobDetail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AnalysisItemCalculateJobDetail>>> AnalysisItemsBatchGetAnalysisItemCalculateJobsAsyncWithHttpInfo (string dataViewName, string systemName, string analysisItemType, List<int?> body = null);
        /// <summary>
        /// EXPERIMENTAL: Create new job(s) to calculate data for the analysis item using the details given.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to calculate against</param>
        /// <param name="body">The details for calculating the results for the analysis item. (optional)</param>
        /// <returns>Task of List&lt;AnalysisItemCalculateJobDetail&gt;</returns>
        System.Threading.Tasks.Task<List<AnalysisItemCalculateJobDetail>> AnalysisItemsCreateAnalysisItemCalculateJobsAsync (string dataViewName, string systemName, AnalysisItemCalculateDetails body = null);

        /// <summary>
        /// EXPERIMENTAL: Create new job(s) to calculate data for the analysis item using the details given.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to calculate against</param>
        /// <param name="body">The details for calculating the results for the analysis item. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AnalysisItemCalculateJobDetail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AnalysisItemCalculateJobDetail>>> AnalysisItemsCreateAnalysisItemCalculateJobsAsyncWithHttpInfo (string dataViewName, string systemName, AnalysisItemCalculateDetails body = null);
        /// <summary>
        /// EXPERIMENTAL: Get the status of a running calculate analysis item job
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <param name="analysisItemType">The type of analysis item the calculate job is for, e.g. Check, Export.</param>
        /// <returns>Task of AnalysisItemCalculateJobDetail</returns>
        System.Threading.Tasks.Task<AnalysisItemCalculateJobDetail> AnalysisItemsGetAnalysisItemCalculateJobAsync (string dataViewName, string systemName, int? jobId, string analysisItemType);

        /// <summary>
        /// EXPERIMENTAL: Get the status of a running calculate analysis item job
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <param name="analysisItemType">The type of analysis item the calculate job is for, e.g. Check, Export.</param>
        /// <returns>Task of ApiResponse (AnalysisItemCalculateJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnalysisItemCalculateJobDetail>> AnalysisItemsGetAnalysisItemCalculateJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId, string analysisItemType);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AnalysisItemsApi : IAnalysisItemsApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalysisItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnalysisItemsApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalysisItemsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AnalysisItemsApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalysisItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnalysisItemsApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// EXPERIMENTAL: Get the statuses of running calculate analysis item jobs EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system that the calculate jobs are running for.</param>
        /// <param name="analysisItemType">The type of analysis item the calculate jobs are for, e.g. Check, Export.</param>
        /// <param name="body">Any array of the jobIds to get the statuses for. (optional)</param>
        /// <returns>List&lt;AnalysisItemCalculateJobDetail&gt;</returns>
        public List<AnalysisItemCalculateJobDetail> AnalysisItemsBatchGetAnalysisItemCalculateJobs (string dataViewName, string systemName, string analysisItemType, List<int?> body = null)
        {
             ApiResponse<List<AnalysisItemCalculateJobDetail>> localVarResponse = AnalysisItemsBatchGetAnalysisItemCalculateJobsWithHttpInfo(dataViewName, systemName, analysisItemType, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// EXPERIMENTAL: Get the statuses of running calculate analysis item jobs EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system that the calculate jobs are running for.</param>
        /// <param name="analysisItemType">The type of analysis item the calculate jobs are for, e.g. Check, Export.</param>
        /// <param name="body">Any array of the jobIds to get the statuses for. (optional)</param>
        /// <returns>ApiResponse of List&lt;AnalysisItemCalculateJobDetail&gt;</returns>
        public ApiResponse< List<AnalysisItemCalculateJobDetail> > AnalysisItemsBatchGetAnalysisItemCalculateJobsWithHttpInfo (string dataViewName, string systemName, string analysisItemType, List<int?> body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AnalysisItemsApi->AnalysisItemsBatchGetAnalysisItemCalculateJobs");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling AnalysisItemsApi->AnalysisItemsBatchGetAnalysisItemCalculateJobs");
            // verify the required parameter 'analysisItemType' is set
            if (analysisItemType == null)
                throw new ApiException(400, "Missing required parameter 'analysisItemType' when calling AnalysisItemsApi->AnalysisItemsBatchGetAnalysisItemCalculateJobs");

            var localVarPath = "./{dataViewName}/AnalysisItems/{systemName}/CalculateJobs/{analysisItemType}/Results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (analysisItemType != null) localVarPathParams.Add("analysisItemType", this.Configuration.ApiClient.ParameterToString(analysisItemType)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalysisItemsBatchGetAnalysisItemCalculateJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AnalysisItemCalculateJobDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AnalysisItemCalculateJobDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AnalysisItemCalculateJobDetail>)));
        }

        /// <summary>
        /// EXPERIMENTAL: Get the statuses of running calculate analysis item jobs EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system that the calculate jobs are running for.</param>
        /// <param name="analysisItemType">The type of analysis item the calculate jobs are for, e.g. Check, Export.</param>
        /// <param name="body">Any array of the jobIds to get the statuses for. (optional)</param>
        /// <returns>Task of List&lt;AnalysisItemCalculateJobDetail&gt;</returns>
        public async System.Threading.Tasks.Task<List<AnalysisItemCalculateJobDetail>> AnalysisItemsBatchGetAnalysisItemCalculateJobsAsync (string dataViewName, string systemName, string analysisItemType, List<int?> body = null)
        {
             ApiResponse<List<AnalysisItemCalculateJobDetail>> localVarResponse = await AnalysisItemsBatchGetAnalysisItemCalculateJobsAsyncWithHttpInfo(dataViewName, systemName, analysisItemType, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// EXPERIMENTAL: Get the statuses of running calculate analysis item jobs EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system that the calculate jobs are running for.</param>
        /// <param name="analysisItemType">The type of analysis item the calculate jobs are for, e.g. Check, Export.</param>
        /// <param name="body">Any array of the jobIds to get the statuses for. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AnalysisItemCalculateJobDetail&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AnalysisItemCalculateJobDetail>>> AnalysisItemsBatchGetAnalysisItemCalculateJobsAsyncWithHttpInfo (string dataViewName, string systemName, string analysisItemType, List<int?> body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AnalysisItemsApi->AnalysisItemsBatchGetAnalysisItemCalculateJobs");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling AnalysisItemsApi->AnalysisItemsBatchGetAnalysisItemCalculateJobs");
            // verify the required parameter 'analysisItemType' is set
            if (analysisItemType == null)
                throw new ApiException(400, "Missing required parameter 'analysisItemType' when calling AnalysisItemsApi->AnalysisItemsBatchGetAnalysisItemCalculateJobs");

            var localVarPath = "./{dataViewName}/AnalysisItems/{systemName}/CalculateJobs/{analysisItemType}/Results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (analysisItemType != null) localVarPathParams.Add("analysisItemType", this.Configuration.ApiClient.ParameterToString(analysisItemType)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalysisItemsBatchGetAnalysisItemCalculateJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AnalysisItemCalculateJobDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AnalysisItemCalculateJobDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AnalysisItemCalculateJobDetail>)));
        }

        /// <summary>
        /// EXPERIMENTAL: Create new job(s) to calculate data for the analysis item using the details given. EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to calculate against</param>
        /// <param name="body">The details for calculating the results for the analysis item. (optional)</param>
        /// <returns>List&lt;AnalysisItemCalculateJobDetail&gt;</returns>
        public List<AnalysisItemCalculateJobDetail> AnalysisItemsCreateAnalysisItemCalculateJobs (string dataViewName, string systemName, AnalysisItemCalculateDetails body = null)
        {
             ApiResponse<List<AnalysisItemCalculateJobDetail>> localVarResponse = AnalysisItemsCreateAnalysisItemCalculateJobsWithHttpInfo(dataViewName, systemName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// EXPERIMENTAL: Create new job(s) to calculate data for the analysis item using the details given. EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to calculate against</param>
        /// <param name="body">The details for calculating the results for the analysis item. (optional)</param>
        /// <returns>ApiResponse of List&lt;AnalysisItemCalculateJobDetail&gt;</returns>
        public ApiResponse< List<AnalysisItemCalculateJobDetail> > AnalysisItemsCreateAnalysisItemCalculateJobsWithHttpInfo (string dataViewName, string systemName, AnalysisItemCalculateDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AnalysisItemsApi->AnalysisItemsCreateAnalysisItemCalculateJobs");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling AnalysisItemsApi->AnalysisItemsCreateAnalysisItemCalculateJobs");

            var localVarPath = "./{dataViewName}/AnalysisItems/{systemName}/CalculateJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalysisItemsCreateAnalysisItemCalculateJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AnalysisItemCalculateJobDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AnalysisItemCalculateJobDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AnalysisItemCalculateJobDetail>)));
        }

        /// <summary>
        /// EXPERIMENTAL: Create new job(s) to calculate data for the analysis item using the details given. EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to calculate against</param>
        /// <param name="body">The details for calculating the results for the analysis item. (optional)</param>
        /// <returns>Task of List&lt;AnalysisItemCalculateJobDetail&gt;</returns>
        public async System.Threading.Tasks.Task<List<AnalysisItemCalculateJobDetail>> AnalysisItemsCreateAnalysisItemCalculateJobsAsync (string dataViewName, string systemName, AnalysisItemCalculateDetails body = null)
        {
             ApiResponse<List<AnalysisItemCalculateJobDetail>> localVarResponse = await AnalysisItemsCreateAnalysisItemCalculateJobsAsyncWithHttpInfo(dataViewName, systemName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// EXPERIMENTAL: Create new job(s) to calculate data for the analysis item using the details given. EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to calculate against</param>
        /// <param name="body">The details for calculating the results for the analysis item. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AnalysisItemCalculateJobDetail&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AnalysisItemCalculateJobDetail>>> AnalysisItemsCreateAnalysisItemCalculateJobsAsyncWithHttpInfo (string dataViewName, string systemName, AnalysisItemCalculateDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AnalysisItemsApi->AnalysisItemsCreateAnalysisItemCalculateJobs");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling AnalysisItemsApi->AnalysisItemsCreateAnalysisItemCalculateJobs");

            var localVarPath = "./{dataViewName}/AnalysisItems/{systemName}/CalculateJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalysisItemsCreateAnalysisItemCalculateJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AnalysisItemCalculateJobDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AnalysisItemCalculateJobDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AnalysisItemCalculateJobDetail>)));
        }

        /// <summary>
        /// EXPERIMENTAL: Get the status of a running calculate analysis item job EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <param name="analysisItemType">The type of analysis item the calculate job is for, e.g. Check, Export.</param>
        /// <returns>AnalysisItemCalculateJobDetail</returns>
        public AnalysisItemCalculateJobDetail AnalysisItemsGetAnalysisItemCalculateJob (string dataViewName, string systemName, int? jobId, string analysisItemType)
        {
             ApiResponse<AnalysisItemCalculateJobDetail> localVarResponse = AnalysisItemsGetAnalysisItemCalculateJobWithHttpInfo(dataViewName, systemName, jobId, analysisItemType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// EXPERIMENTAL: Get the status of a running calculate analysis item job EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <param name="analysisItemType">The type of analysis item the calculate job is for, e.g. Check, Export.</param>
        /// <returns>ApiResponse of AnalysisItemCalculateJobDetail</returns>
        public ApiResponse< AnalysisItemCalculateJobDetail > AnalysisItemsGetAnalysisItemCalculateJobWithHttpInfo (string dataViewName, string systemName, int? jobId, string analysisItemType)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AnalysisItemsApi->AnalysisItemsGetAnalysisItemCalculateJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling AnalysisItemsApi->AnalysisItemsGetAnalysisItemCalculateJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AnalysisItemsApi->AnalysisItemsGetAnalysisItemCalculateJob");
            // verify the required parameter 'analysisItemType' is set
            if (analysisItemType == null)
                throw new ApiException(400, "Missing required parameter 'analysisItemType' when calling AnalysisItemsApi->AnalysisItemsGetAnalysisItemCalculateJob");

            var localVarPath = "./{dataViewName}/AnalysisItems/{systemName}/CalculateJobs/{jobId}/{analysisItemType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (analysisItemType != null) localVarPathParams.Add("analysisItemType", this.Configuration.ApiClient.ParameterToString(analysisItemType)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalysisItemsGetAnalysisItemCalculateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnalysisItemCalculateJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AnalysisItemCalculateJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnalysisItemCalculateJobDetail)));
        }

        /// <summary>
        /// EXPERIMENTAL: Get the status of a running calculate analysis item job EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <param name="analysisItemType">The type of analysis item the calculate job is for, e.g. Check, Export.</param>
        /// <returns>Task of AnalysisItemCalculateJobDetail</returns>
        public async System.Threading.Tasks.Task<AnalysisItemCalculateJobDetail> AnalysisItemsGetAnalysisItemCalculateJobAsync (string dataViewName, string systemName, int? jobId, string analysisItemType)
        {
             ApiResponse<AnalysisItemCalculateJobDetail> localVarResponse = await AnalysisItemsGetAnalysisItemCalculateJobAsyncWithHttpInfo(dataViewName, systemName, jobId, analysisItemType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// EXPERIMENTAL: Get the status of a running calculate analysis item job EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <param name="analysisItemType">The type of analysis item the calculate job is for, e.g. Check, Export.</param>
        /// <returns>Task of ApiResponse (AnalysisItemCalculateJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnalysisItemCalculateJobDetail>> AnalysisItemsGetAnalysisItemCalculateJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId, string analysisItemType)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AnalysisItemsApi->AnalysisItemsGetAnalysisItemCalculateJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling AnalysisItemsApi->AnalysisItemsGetAnalysisItemCalculateJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AnalysisItemsApi->AnalysisItemsGetAnalysisItemCalculateJob");
            // verify the required parameter 'analysisItemType' is set
            if (analysisItemType == null)
                throw new ApiException(400, "Missing required parameter 'analysisItemType' when calling AnalysisItemsApi->AnalysisItemsGetAnalysisItemCalculateJob");

            var localVarPath = "./{dataViewName}/AnalysisItems/{systemName}/CalculateJobs/{jobId}/{analysisItemType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (analysisItemType != null) localVarPathParams.Add("analysisItemType", this.Configuration.ApiClient.ParameterToString(analysisItemType)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalysisItemsGetAnalysisItemCalculateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnalysisItemCalculateJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AnalysisItemCalculateJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnalysisItemCalculateJobDetail)));
        }

    }
}
