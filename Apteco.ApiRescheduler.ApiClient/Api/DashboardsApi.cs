/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDashboardsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Return data needed to render visualisation for dashboard item(s) or the status of the job(s) if not complete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the results for</param>
        /// <param name="body">An array of the jobIds to get the results for (optional)</param>
        /// <returns>List&lt;DashboardItemDataJobDetail&gt;</returns>
        List<DashboardItemDataJobDetail> DashboardsBatchGetDashboardJobResults (string dataViewName, int? dashboardId, List<int?> body = null);

        /// <summary>
        /// Return data needed to render visualisation for dashboard item(s) or the status of the job(s) if not complete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the results for</param>
        /// <param name="body">An array of the jobIds to get the results for (optional)</param>
        /// <returns>ApiResponse of List&lt;DashboardItemDataJobDetail&gt;</returns>
        ApiResponse<List<DashboardItemDataJobDetail>> DashboardsBatchGetDashboardJobResultsWithHttpInfo (string dataViewName, int? dashboardId, List<int?> body = null);
        /// <summary>
        /// Asynchronously request data needed to render an array of dashboard items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        List<CalculateDashboardItemJobCreatedResult> DashboardsCalculateDashboardData (string dataViewName, int? dashboardId, CalculateDashboardData body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Asynchronously request data needed to render an array of dashboard items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        ApiResponse<List<CalculateDashboardItemJobCreatedResult>> DashboardsCalculateDashboardDataWithHttpInfo (string dataViewName, int? dashboardId, CalculateDashboardData body = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Aysyncrounously request data needed to render an array of dashboard items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        List<CalculateDashboardItemJobCreatedResult> DashboardsCalculateDashboardDataV2 (string dataViewName, int? dashboardId, CalculateDashboardData body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Aysyncrounously request data needed to render an array of dashboard items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        ApiResponse<List<CalculateDashboardItemJobCreatedResult>> DashboardsCalculateDashboardDataV2WithHttpInfo (string dataViewName, int? dashboardId, CalculateDashboardData body = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Aysyncrounously request data needed to render an array of dashboard items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        List<CalculateDashboardItemJobCreatedResult> DashboardsCalculateDashboardDataWithFilters (string dataViewName, int? dashboardId, CalculateDashboardDataWithFilters body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Aysyncrounously request data needed to render an array of dashboard items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        ApiResponse<List<CalculateDashboardItemJobCreatedResult>> DashboardsCalculateDashboardDataWithFiltersWithHttpInfo (string dataViewName, int? dashboardId, CalculateDashboardDataWithFilters body = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Cancel a running calculate dashboard data job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        void DashboardsCancelCalculateDashboardDataJob (string dataViewName, int? dashboardId, int? jobId);

        /// <summary>
        /// Cancel a running calculate dashboard data job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DashboardsCancelCalculateDashboardDataJobWithHttpInfo (string dataViewName, int? dashboardId, int? jobId);
        /// <summary>
        /// Cancel a running dashboard item preview job
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        void DashboardsCancelDashboardItemPreviewDataJob (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// Cancel a running dashboard item preview job
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DashboardsCancelDashboardItemPreviewDataJobWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass additional filter query and the name for the new audience (optional)</param>
        /// <returns>ConvertDashboardToAudienceResult</returns>
        ConvertDashboardToAudienceResult DashboardsConvertToAudience (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null);

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass additional filter query and the name for the new audience (optional)</param>
        /// <returns>ApiResponse of ConvertDashboardToAudienceResult</returns>
        ApiResponse<ConvertDashboardToAudienceResult> DashboardsConvertToAudienceWithHttpInfo (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null);
        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass the Dashboard query and the name for the new audience (optional)</param>
        /// <returns>ConvertDashboardToAudienceResult</returns>
        ConvertDashboardToAudienceResult DashboardsConvertToAudienceV2 (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null);

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass the Dashboard query and the name for the new audience (optional)</param>
        /// <returns>ApiResponse of ConvertDashboardToAudienceResult</returns>
        ApiResponse<ConvertDashboardToAudienceResult> DashboardsConvertToAudienceV2WithHttpInfo (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null);
        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass the Dashboard query and the name for the new audience (optional)</param>
        /// <returns>ConvertDashboardToAudienceResult</returns>
        ConvertDashboardToAudienceResult DashboardsConvertToAudienceWithFilters (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null);

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass the Dashboard query and the name for the new audience (optional)</param>
        /// <returns>ApiResponse of ConvertDashboardToAudienceResult</returns>
        ApiResponse<ConvertDashboardToAudienceResult> DashboardsConvertToAudienceWithFiltersWithHttpInfo (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null);
        /// <summary>
        /// Copies an existing dashboard for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to copy</param>
        /// <param name="body">The details used to create the new dashboard (optional)</param>
        /// <returns>DashboardDetail</returns>
        DashboardDetail DashboardsCopyDashboard (string dataViewName, int? dashboardId, CopyDashboardDetail body = null);

        /// <summary>
        /// Copies an existing dashboard for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to copy</param>
        /// <param name="body">The details used to create the new dashboard (optional)</param>
        /// <returns>ApiResponse of DashboardDetail</returns>
        ApiResponse<DashboardDetail> DashboardsCopyDashboardWithHttpInfo (string dataViewName, int? dashboardId, CopyDashboardDetail body = null);
        /// <summary>
        /// Creates a new dashboard from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the dashboard to create.  If you want to update a specific dashboard then POST to the /Dashboards/{dashboardId} URL (optional)</param>
        /// <returns>DashboardDetail</returns>
        DashboardDetail DashboardsCreateDashboard (string dataViewName, CreateDashboardDetail body = null);

        /// <summary>
        /// Creates a new dashboard from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the dashboard to create.  If you want to update a specific dashboard then POST to the /Dashboards/{dashboardId} URL (optional)</param>
        /// <returns>ApiResponse of DashboardDetail</returns>
        ApiResponse<DashboardDetail> DashboardsCreateDashboardWithHttpInfo (string dataViewName, CreateDashboardDetail body = null);
        /// <summary>
        /// Register a hit (view) for the given dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to register the hit for</param>
        /// <param name="body">Details to register the hit with (optional)</param>
        /// <returns>DashboardHitDetail</returns>
        DashboardHitDetail DashboardsCreateDashboardHitForDashboard (string dataViewName, int? dashboardId, CreateDashboardHitDetails body = null);

        /// <summary>
        /// Register a hit (view) for the given dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to register the hit for</param>
        /// <param name="body">Details to register the hit with (optional)</param>
        /// <returns>ApiResponse of DashboardHitDetail</returns>
        ApiResponse<DashboardHitDetail> DashboardsCreateDashboardHitForDashboardWithHttpInfo (string dataViewName, int? dashboardId, CreateDashboardHitDetails body = null);
        /// <summary>
        /// Submit an array of jobs to calculate the data needed to render visualisation previews
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The data required to process the request (optional)</param>
        /// <returns></returns>
        void DashboardsCreateDashboardItemPreviewDataJobs (string dataViewName, string systemName, List<DashboardItemPreviewData> body = null);

        /// <summary>
        /// Submit an array of jobs to calculate the data needed to render visualisation previews
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The data required to process the request (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DashboardsCreateDashboardItemPreviewDataJobsWithHttpInfo (string dataViewName, string systemName, List<DashboardItemPreviewData> body = null);
        /// <summary>
        /// Updates the details of a particular dashboard.  If you don&#x27;t have an id for the  dashboard then POST to the /Dashboards URL to create a new dashboard.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to add/update</param>
        /// <param name="body">The details for the dashboard to add/update (optional)</param>
        /// <returns>DashboardDetail</returns>
        DashboardDetail DashboardsCreateDashboardUpdate (string dataViewName, int? dashboardId, CreateDashboardUpdateDetail body = null);

        /// <summary>
        /// Updates the details of a particular dashboard.  If you don&#x27;t have an id for the  dashboard then POST to the /Dashboards URL to create a new dashboard.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to add/update</param>
        /// <param name="body">The details for the dashboard to add/update (optional)</param>
        /// <returns>ApiResponse of DashboardDetail</returns>
        ApiResponse<DashboardDetail> DashboardsCreateDashboardUpdateWithHttpInfo (string dataViewName, int? dashboardId, CreateDashboardUpdateDetail body = null);
        /// <summary>
        /// Deletes the specified dashboard
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to delete</param>
        /// <returns></returns>
        void DashboardsDeleteDashboard (string dataViewName, int? dashboardId);

        /// <summary>
        /// Deletes the specified dashboard
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DashboardsDeleteDashboardWithHttpInfo (string dataViewName, int? dashboardId);
        /// <summary>
        /// Return export data needed to view the underlying data for a dashboard
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>DashboardExportDataResult</returns>
        DashboardExportDataResult DashboardsGetDashboardExportSync (string dataViewName, int? dashboardId, DashboardExportData body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Return export data needed to view the underlying data for a dashboard
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of DashboardExportDataResult</returns>
        ApiResponse<DashboardExportDataResult> DashboardsGetDashboardExportSyncWithHttpInfo (string dataViewName, int? dashboardId, DashboardExportData body = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Returns details for a given dashboard hit for this dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the hit information for</param>
        /// <param name="dashboardHitId">The id of the hit</param>
        /// <returns>DashboardHitDetail</returns>
        DashboardHitDetail DashboardsGetDashboardHitForDashboard (string dataViewName, int? dashboardId, int? dashboardHitId);

        /// <summary>
        /// Returns details for a given dashboard hit for this dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the hit information for</param>
        /// <param name="dashboardHitId">The id of the hit</param>
        /// <returns>ApiResponse of DashboardHitDetail</returns>
        ApiResponse<DashboardHitDetail> DashboardsGetDashboardHitForDashboardWithHttpInfo (string dataViewName, int? dashboardId, int? dashboardHitId);
        /// <summary>
        /// Returns a summary of the hits for this dashboard - i.e. information about when users have viewed the dashboard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDashboardHitSummary</returns>
        PagedResultsDashboardHitSummary DashboardsGetDashboardHitsForDashboard (string dataViewName, int? dashboardId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the hits for this dashboard - i.e. information about when users have viewed the dashboard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDashboardHitSummary</returns>
        ApiResponse<PagedResultsDashboardHitSummary> DashboardsGetDashboardHitsForDashboardWithHttpInfo (string dataViewName, int? dashboardId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Return data needed to render visualisation for dashboard item
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="dashboardItemId">The id of the dashboard item to calculate the results for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>DashboardItemDataResultDetail</returns>
        DashboardItemDataResultDetail DashboardsGetDashboardItemDataSync (string dataViewName, int? dashboardId, string dashboardItemId, DashboardItemData body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Return data needed to render visualisation for dashboard item
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="dashboardItemId">The id of the dashboard item to calculate the results for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of DashboardItemDataResultDetail</returns>
        ApiResponse<DashboardItemDataResultDetail> DashboardsGetDashboardItemDataSyncWithHttpInfo (string dataViewName, int? dashboardId, string dashboardItemId, DashboardItemData body = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Return data needed to render visualisation for dashboard item when previewing
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the dashboard item to calculate the results for</param>
        /// <returns>DashboardItemDataJobDetail</returns>
        DashboardItemDataJobDetail DashboardsGetDashboardItemPreviewDataJob (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// Return data needed to render visualisation for dashboard item when previewing
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the dashboard item to calculate the results for</param>
        /// <returns>ApiResponse of DashboardItemDataJobDetail</returns>
        ApiResponse<DashboardItemDataJobDetail> DashboardsGetDashboardItemPreviewDataJobWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Return data needed to render visualisation for dashboard preview item (s) or the status of the job(s) if not complete
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">An array of the jobIds to get the results for (optional)</param>
        /// <returns>List&lt;DashboardItemDataJobDetail&gt;</returns>
        List<DashboardItemDataJobDetail> DashboardsGetDashboardItemPreviewDataJobs (string dataViewName, string systemName, List<int?> body = null);

        /// <summary>
        /// Return data needed to render visualisation for dashboard preview item (s) or the status of the job(s) if not complete
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">An array of the jobIds to get the results for (optional)</param>
        /// <returns>ApiResponse of List&lt;DashboardItemDataJobDetail&gt;</returns>
        ApiResponse<List<DashboardItemDataJobDetail>> DashboardsGetDashboardItemPreviewDataJobsWithHttpInfo (string dataViewName, string systemName, List<int?> body = null);
        /// <summary>
        /// Return data needed to render visualisation for dashboard item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="jobId">The id of the dashboard item to calculate the results for</param>
        /// <returns>DashboardItemDataJobDetail</returns>
        DashboardItemDataJobDetail DashboardsGetDashboardJobResults (string dataViewName, int? dashboardId, int? jobId);

        /// <summary>
        /// Return data needed to render visualisation for dashboard item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="jobId">The id of the dashboard item to calculate the results for</param>
        /// <returns>ApiResponse of DashboardItemDataJobDetail</returns>
        ApiResponse<DashboardItemDataJobDetail> DashboardsGetDashboardJobResultsWithHttpInfo (string dataViewName, int? dashboardId, int? jobId);
        /// <summary>
        /// Returns a list of dashboard maps for the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>List&lt;DashboardMapSettings&gt;</returns>
        List<DashboardMapSettings> DashboardsGetDashboardMapSettings (string dataViewName, string systemName);

        /// <summary>
        /// Returns a list of dashboard maps for the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of List&lt;DashboardMapSettings&gt;</returns>
        ApiResponse<List<DashboardMapSettings>> DashboardsGetDashboardMapSettingsWithHttpInfo (string dataViewName, string systemName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Return data needed to render visualisation for dashboard item(s) or the status of the job(s) if not complete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the results for</param>
        /// <param name="body">An array of the jobIds to get the results for (optional)</param>
        /// <returns>Task of List&lt;DashboardItemDataJobDetail&gt;</returns>
        System.Threading.Tasks.Task<List<DashboardItemDataJobDetail>> DashboardsBatchGetDashboardJobResultsAsync (string dataViewName, int? dashboardId, List<int?> body = null);

        /// <summary>
        /// Return data needed to render visualisation for dashboard item(s) or the status of the job(s) if not complete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the results for</param>
        /// <param name="body">An array of the jobIds to get the results for (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DashboardItemDataJobDetail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DashboardItemDataJobDetail>>> DashboardsBatchGetDashboardJobResultsAsyncWithHttpInfo (string dataViewName, int? dashboardId, List<int?> body = null);
        /// <summary>
        /// Asynchronously request data needed to render an array of dashboard items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        System.Threading.Tasks.Task<List<CalculateDashboardItemJobCreatedResult>> DashboardsCalculateDashboardDataAsync (string dataViewName, int? dashboardId, CalculateDashboardData body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Asynchronously request data needed to render an array of dashboard items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CalculateDashboardItemJobCreatedResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CalculateDashboardItemJobCreatedResult>>> DashboardsCalculateDashboardDataAsyncWithHttpInfo (string dataViewName, int? dashboardId, CalculateDashboardData body = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Aysyncrounously request data needed to render an array of dashboard items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        System.Threading.Tasks.Task<List<CalculateDashboardItemJobCreatedResult>> DashboardsCalculateDashboardDataV2Async (string dataViewName, int? dashboardId, CalculateDashboardData body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Aysyncrounously request data needed to render an array of dashboard items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CalculateDashboardItemJobCreatedResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CalculateDashboardItemJobCreatedResult>>> DashboardsCalculateDashboardDataV2AsyncWithHttpInfo (string dataViewName, int? dashboardId, CalculateDashboardData body = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Aysyncrounously request data needed to render an array of dashboard items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        System.Threading.Tasks.Task<List<CalculateDashboardItemJobCreatedResult>> DashboardsCalculateDashboardDataWithFiltersAsync (string dataViewName, int? dashboardId, CalculateDashboardDataWithFilters body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Aysyncrounously request data needed to render an array of dashboard items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CalculateDashboardItemJobCreatedResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CalculateDashboardItemJobCreatedResult>>> DashboardsCalculateDashboardDataWithFiltersAsyncWithHttpInfo (string dataViewName, int? dashboardId, CalculateDashboardDataWithFilters body = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Cancel a running calculate dashboard data job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DashboardsCancelCalculateDashboardDataJobAsync (string dataViewName, int? dashboardId, int? jobId);

        /// <summary>
        /// Cancel a running calculate dashboard data job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DashboardsCancelCalculateDashboardDataJobAsyncWithHttpInfo (string dataViewName, int? dashboardId, int? jobId);
        /// <summary>
        /// Cancel a running dashboard item preview job
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DashboardsCancelDashboardItemPreviewDataJobAsync (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// Cancel a running dashboard item preview job
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DashboardsCancelDashboardItemPreviewDataJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass additional filter query and the name for the new audience (optional)</param>
        /// <returns>Task of ConvertDashboardToAudienceResult</returns>
        System.Threading.Tasks.Task<ConvertDashboardToAudienceResult> DashboardsConvertToAudienceAsync (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null);

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass additional filter query and the name for the new audience (optional)</param>
        /// <returns>Task of ApiResponse (ConvertDashboardToAudienceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertDashboardToAudienceResult>> DashboardsConvertToAudienceAsyncWithHttpInfo (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null);
        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass the Dashboard query and the name for the new audience (optional)</param>
        /// <returns>Task of ConvertDashboardToAudienceResult</returns>
        System.Threading.Tasks.Task<ConvertDashboardToAudienceResult> DashboardsConvertToAudienceV2Async (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null);

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass the Dashboard query and the name for the new audience (optional)</param>
        /// <returns>Task of ApiResponse (ConvertDashboardToAudienceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertDashboardToAudienceResult>> DashboardsConvertToAudienceV2AsyncWithHttpInfo (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null);
        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass the Dashboard query and the name for the new audience (optional)</param>
        /// <returns>Task of ConvertDashboardToAudienceResult</returns>
        System.Threading.Tasks.Task<ConvertDashboardToAudienceResult> DashboardsConvertToAudienceWithFiltersAsync (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null);

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass the Dashboard query and the name for the new audience (optional)</param>
        /// <returns>Task of ApiResponse (ConvertDashboardToAudienceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertDashboardToAudienceResult>> DashboardsConvertToAudienceWithFiltersAsyncWithHttpInfo (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null);
        /// <summary>
        /// Copies an existing dashboard for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to copy</param>
        /// <param name="body">The details used to create the new dashboard (optional)</param>
        /// <returns>Task of DashboardDetail</returns>
        System.Threading.Tasks.Task<DashboardDetail> DashboardsCopyDashboardAsync (string dataViewName, int? dashboardId, CopyDashboardDetail body = null);

        /// <summary>
        /// Copies an existing dashboard for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to copy</param>
        /// <param name="body">The details used to create the new dashboard (optional)</param>
        /// <returns>Task of ApiResponse (DashboardDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DashboardDetail>> DashboardsCopyDashboardAsyncWithHttpInfo (string dataViewName, int? dashboardId, CopyDashboardDetail body = null);
        /// <summary>
        /// Creates a new dashboard from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the dashboard to create.  If you want to update a specific dashboard then POST to the /Dashboards/{dashboardId} URL (optional)</param>
        /// <returns>Task of DashboardDetail</returns>
        System.Threading.Tasks.Task<DashboardDetail> DashboardsCreateDashboardAsync (string dataViewName, CreateDashboardDetail body = null);

        /// <summary>
        /// Creates a new dashboard from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the dashboard to create.  If you want to update a specific dashboard then POST to the /Dashboards/{dashboardId} URL (optional)</param>
        /// <returns>Task of ApiResponse (DashboardDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DashboardDetail>> DashboardsCreateDashboardAsyncWithHttpInfo (string dataViewName, CreateDashboardDetail body = null);
        /// <summary>
        /// Register a hit (view) for the given dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to register the hit for</param>
        /// <param name="body">Details to register the hit with (optional)</param>
        /// <returns>Task of DashboardHitDetail</returns>
        System.Threading.Tasks.Task<DashboardHitDetail> DashboardsCreateDashboardHitForDashboardAsync (string dataViewName, int? dashboardId, CreateDashboardHitDetails body = null);

        /// <summary>
        /// Register a hit (view) for the given dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to register the hit for</param>
        /// <param name="body">Details to register the hit with (optional)</param>
        /// <returns>Task of ApiResponse (DashboardHitDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DashboardHitDetail>> DashboardsCreateDashboardHitForDashboardAsyncWithHttpInfo (string dataViewName, int? dashboardId, CreateDashboardHitDetails body = null);
        /// <summary>
        /// Submit an array of jobs to calculate the data needed to render visualisation previews
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The data required to process the request (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DashboardsCreateDashboardItemPreviewDataJobsAsync (string dataViewName, string systemName, List<DashboardItemPreviewData> body = null);

        /// <summary>
        /// Submit an array of jobs to calculate the data needed to render visualisation previews
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The data required to process the request (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DashboardsCreateDashboardItemPreviewDataJobsAsyncWithHttpInfo (string dataViewName, string systemName, List<DashboardItemPreviewData> body = null);
        /// <summary>
        /// Updates the details of a particular dashboard.  If you don&#x27;t have an id for the  dashboard then POST to the /Dashboards URL to create a new dashboard.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to add/update</param>
        /// <param name="body">The details for the dashboard to add/update (optional)</param>
        /// <returns>Task of DashboardDetail</returns>
        System.Threading.Tasks.Task<DashboardDetail> DashboardsCreateDashboardUpdateAsync (string dataViewName, int? dashboardId, CreateDashboardUpdateDetail body = null);

        /// <summary>
        /// Updates the details of a particular dashboard.  If you don&#x27;t have an id for the  dashboard then POST to the /Dashboards URL to create a new dashboard.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to add/update</param>
        /// <param name="body">The details for the dashboard to add/update (optional)</param>
        /// <returns>Task of ApiResponse (DashboardDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DashboardDetail>> DashboardsCreateDashboardUpdateAsyncWithHttpInfo (string dataViewName, int? dashboardId, CreateDashboardUpdateDetail body = null);
        /// <summary>
        /// Deletes the specified dashboard
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DashboardsDeleteDashboardAsync (string dataViewName, int? dashboardId);

        /// <summary>
        /// Deletes the specified dashboard
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DashboardsDeleteDashboardAsyncWithHttpInfo (string dataViewName, int? dashboardId);
        /// <summary>
        /// Return export data needed to view the underlying data for a dashboard
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of DashboardExportDataResult</returns>
        System.Threading.Tasks.Task<DashboardExportDataResult> DashboardsGetDashboardExportSyncAsync (string dataViewName, int? dashboardId, DashboardExportData body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Return export data needed to view the underlying data for a dashboard
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (DashboardExportDataResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DashboardExportDataResult>> DashboardsGetDashboardExportSyncAsyncWithHttpInfo (string dataViewName, int? dashboardId, DashboardExportData body = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Returns details for a given dashboard hit for this dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the hit information for</param>
        /// <param name="dashboardHitId">The id of the hit</param>
        /// <returns>Task of DashboardHitDetail</returns>
        System.Threading.Tasks.Task<DashboardHitDetail> DashboardsGetDashboardHitForDashboardAsync (string dataViewName, int? dashboardId, int? dashboardHitId);

        /// <summary>
        /// Returns details for a given dashboard hit for this dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the hit information for</param>
        /// <param name="dashboardHitId">The id of the hit</param>
        /// <returns>Task of ApiResponse (DashboardHitDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DashboardHitDetail>> DashboardsGetDashboardHitForDashboardAsyncWithHttpInfo (string dataViewName, int? dashboardId, int? dashboardHitId);
        /// <summary>
        /// Returns a summary of the hits for this dashboard - i.e. information about when users have viewed the dashboard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDashboardHitSummary</returns>
        System.Threading.Tasks.Task<PagedResultsDashboardHitSummary> DashboardsGetDashboardHitsForDashboardAsync (string dataViewName, int? dashboardId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the hits for this dashboard - i.e. information about when users have viewed the dashboard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDashboardHitSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsDashboardHitSummary>> DashboardsGetDashboardHitsForDashboardAsyncWithHttpInfo (string dataViewName, int? dashboardId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Return data needed to render visualisation for dashboard item
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="dashboardItemId">The id of the dashboard item to calculate the results for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of DashboardItemDataResultDetail</returns>
        System.Threading.Tasks.Task<DashboardItemDataResultDetail> DashboardsGetDashboardItemDataSyncAsync (string dataViewName, int? dashboardId, string dashboardItemId, DashboardItemData body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Return data needed to render visualisation for dashboard item
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="dashboardItemId">The id of the dashboard item to calculate the results for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (DashboardItemDataResultDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DashboardItemDataResultDetail>> DashboardsGetDashboardItemDataSyncAsyncWithHttpInfo (string dataViewName, int? dashboardId, string dashboardItemId, DashboardItemData body = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Return data needed to render visualisation for dashboard item when previewing
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the dashboard item to calculate the results for</param>
        /// <returns>Task of DashboardItemDataJobDetail</returns>
        System.Threading.Tasks.Task<DashboardItemDataJobDetail> DashboardsGetDashboardItemPreviewDataJobAsync (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// Return data needed to render visualisation for dashboard item when previewing
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the dashboard item to calculate the results for</param>
        /// <returns>Task of ApiResponse (DashboardItemDataJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DashboardItemDataJobDetail>> DashboardsGetDashboardItemPreviewDataJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Return data needed to render visualisation for dashboard preview item (s) or the status of the job(s) if not complete
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">An array of the jobIds to get the results for (optional)</param>
        /// <returns>Task of List&lt;DashboardItemDataJobDetail&gt;</returns>
        System.Threading.Tasks.Task<List<DashboardItemDataJobDetail>> DashboardsGetDashboardItemPreviewDataJobsAsync (string dataViewName, string systemName, List<int?> body = null);

        /// <summary>
        /// Return data needed to render visualisation for dashboard preview item (s) or the status of the job(s) if not complete
        /// </summary>
        /// <remarks>
        /// Requires licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">An array of the jobIds to get the results for (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DashboardItemDataJobDetail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DashboardItemDataJobDetail>>> DashboardsGetDashboardItemPreviewDataJobsAsyncWithHttpInfo (string dataViewName, string systemName, List<int?> body = null);
        /// <summary>
        /// Return data needed to render visualisation for dashboard item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="jobId">The id of the dashboard item to calculate the results for</param>
        /// <returns>Task of DashboardItemDataJobDetail</returns>
        System.Threading.Tasks.Task<DashboardItemDataJobDetail> DashboardsGetDashboardJobResultsAsync (string dataViewName, int? dashboardId, int? jobId);

        /// <summary>
        /// Return data needed to render visualisation for dashboard item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="jobId">The id of the dashboard item to calculate the results for</param>
        /// <returns>Task of ApiResponse (DashboardItemDataJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DashboardItemDataJobDetail>> DashboardsGetDashboardJobResultsAsyncWithHttpInfo (string dataViewName, int? dashboardId, int? jobId);
        /// <summary>
        /// Returns a list of dashboard maps for the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of List&lt;DashboardMapSettings&gt;</returns>
        System.Threading.Tasks.Task<List<DashboardMapSettings>> DashboardsGetDashboardMapSettingsAsync (string dataViewName, string systemName);

        /// <summary>
        /// Returns a list of dashboard maps for the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse (List&lt;DashboardMapSettings&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DashboardMapSettings>>> DashboardsGetDashboardMapSettingsAsyncWithHttpInfo (string dataViewName, string systemName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DashboardsApi : IDashboardsApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DashboardsApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardsApi"/> class
        /// </summary>
        /// <returns></returns>
        public DashboardsApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DashboardsApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard item(s) or the status of the job(s) if not complete 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the results for</param>
        /// <param name="body">An array of the jobIds to get the results for (optional)</param>
        /// <returns>List&lt;DashboardItemDataJobDetail&gt;</returns>
        public List<DashboardItemDataJobDetail> DashboardsBatchGetDashboardJobResults (string dataViewName, int? dashboardId, List<int?> body = null)
        {
             ApiResponse<List<DashboardItemDataJobDetail>> localVarResponse = DashboardsBatchGetDashboardJobResultsWithHttpInfo(dataViewName, dashboardId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard item(s) or the status of the job(s) if not complete 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the results for</param>
        /// <param name="body">An array of the jobIds to get the results for (optional)</param>
        /// <returns>ApiResponse of List&lt;DashboardItemDataJobDetail&gt;</returns>
        public ApiResponse< List<DashboardItemDataJobDetail> > DashboardsBatchGetDashboardJobResultsWithHttpInfo (string dataViewName, int? dashboardId, List<int?> body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsBatchGetDashboardJobResults");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsBatchGetDashboardJobResults");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Items/CalculateJobs/Results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsBatchGetDashboardJobResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DashboardItemDataJobDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<DashboardItemDataJobDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DashboardItemDataJobDetail>)));
        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard item(s) or the status of the job(s) if not complete 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the results for</param>
        /// <param name="body">An array of the jobIds to get the results for (optional)</param>
        /// <returns>Task of List&lt;DashboardItemDataJobDetail&gt;</returns>
        public async System.Threading.Tasks.Task<List<DashboardItemDataJobDetail>> DashboardsBatchGetDashboardJobResultsAsync (string dataViewName, int? dashboardId, List<int?> body = null)
        {
             ApiResponse<List<DashboardItemDataJobDetail>> localVarResponse = await DashboardsBatchGetDashboardJobResultsAsyncWithHttpInfo(dataViewName, dashboardId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard item(s) or the status of the job(s) if not complete 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the results for</param>
        /// <param name="body">An array of the jobIds to get the results for (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DashboardItemDataJobDetail&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DashboardItemDataJobDetail>>> DashboardsBatchGetDashboardJobResultsAsyncWithHttpInfo (string dataViewName, int? dashboardId, List<int?> body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsBatchGetDashboardJobResults");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsBatchGetDashboardJobResults");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Items/CalculateJobs/Results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsBatchGetDashboardJobResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DashboardItemDataJobDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<DashboardItemDataJobDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DashboardItemDataJobDetail>)));
        }

        /// <summary>
        /// Asynchronously request data needed to render an array of dashboard items 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        public List<CalculateDashboardItemJobCreatedResult> DashboardsCalculateDashboardData (string dataViewName, int? dashboardId, CalculateDashboardData body = null, int? timeoutInSeconds = null)
        {
             ApiResponse<List<CalculateDashboardItemJobCreatedResult>> localVarResponse = DashboardsCalculateDashboardDataWithHttpInfo(dataViewName, dashboardId, body, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Asynchronously request data needed to render an array of dashboard items 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        public ApiResponse< List<CalculateDashboardItemJobCreatedResult> > DashboardsCalculateDashboardDataWithHttpInfo (string dataViewName, int? dashboardId, CalculateDashboardData body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCalculateDashboardData");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsCalculateDashboardData");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Items/CalculateJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCalculateDashboardData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CalculateDashboardItemJobCreatedResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<CalculateDashboardItemJobCreatedResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CalculateDashboardItemJobCreatedResult>)));
        }

        /// <summary>
        /// Asynchronously request data needed to render an array of dashboard items 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<CalculateDashboardItemJobCreatedResult>> DashboardsCalculateDashboardDataAsync (string dataViewName, int? dashboardId, CalculateDashboardData body = null, int? timeoutInSeconds = null)
        {
             ApiResponse<List<CalculateDashboardItemJobCreatedResult>> localVarResponse = await DashboardsCalculateDashboardDataAsyncWithHttpInfo(dataViewName, dashboardId, body, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Asynchronously request data needed to render an array of dashboard items 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CalculateDashboardItemJobCreatedResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CalculateDashboardItemJobCreatedResult>>> DashboardsCalculateDashboardDataAsyncWithHttpInfo (string dataViewName, int? dashboardId, CalculateDashboardData body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCalculateDashboardData");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsCalculateDashboardData");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Items/CalculateJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCalculateDashboardData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CalculateDashboardItemJobCreatedResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<CalculateDashboardItemJobCreatedResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CalculateDashboardItemJobCreatedResult>)));
        }

        /// <summary>
        /// Aysyncrounously request data needed to render an array of dashboard items 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        public List<CalculateDashboardItemJobCreatedResult> DashboardsCalculateDashboardDataV2 (string dataViewName, int? dashboardId, CalculateDashboardData body = null, int? timeoutInSeconds = null)
        {
             ApiResponse<List<CalculateDashboardItemJobCreatedResult>> localVarResponse = DashboardsCalculateDashboardDataV2WithHttpInfo(dataViewName, dashboardId, body, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Aysyncrounously request data needed to render an array of dashboard items 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        public ApiResponse< List<CalculateDashboardItemJobCreatedResult> > DashboardsCalculateDashboardDataV2WithHttpInfo (string dataViewName, int? dashboardId, CalculateDashboardData body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCalculateDashboardDataV2");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsCalculateDashboardDataV2");

            var localVarPath = "./{dataViewName}/Dashboards/V2/{dashboardId}/Items/CalculateJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCalculateDashboardDataV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CalculateDashboardItemJobCreatedResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<CalculateDashboardItemJobCreatedResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CalculateDashboardItemJobCreatedResult>)));
        }

        /// <summary>
        /// Aysyncrounously request data needed to render an array of dashboard items 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<CalculateDashboardItemJobCreatedResult>> DashboardsCalculateDashboardDataV2Async (string dataViewName, int? dashboardId, CalculateDashboardData body = null, int? timeoutInSeconds = null)
        {
             ApiResponse<List<CalculateDashboardItemJobCreatedResult>> localVarResponse = await DashboardsCalculateDashboardDataV2AsyncWithHttpInfo(dataViewName, dashboardId, body, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Aysyncrounously request data needed to render an array of dashboard items 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CalculateDashboardItemJobCreatedResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CalculateDashboardItemJobCreatedResult>>> DashboardsCalculateDashboardDataV2AsyncWithHttpInfo (string dataViewName, int? dashboardId, CalculateDashboardData body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCalculateDashboardDataV2");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsCalculateDashboardDataV2");

            var localVarPath = "./{dataViewName}/Dashboards/V2/{dashboardId}/Items/CalculateJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCalculateDashboardDataV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CalculateDashboardItemJobCreatedResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<CalculateDashboardItemJobCreatedResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CalculateDashboardItemJobCreatedResult>)));
        }

        /// <summary>
        /// Aysyncrounously request data needed to render an array of dashboard items 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        public List<CalculateDashboardItemJobCreatedResult> DashboardsCalculateDashboardDataWithFilters (string dataViewName, int? dashboardId, CalculateDashboardDataWithFilters body = null, int? timeoutInSeconds = null)
        {
             ApiResponse<List<CalculateDashboardItemJobCreatedResult>> localVarResponse = DashboardsCalculateDashboardDataWithFiltersWithHttpInfo(dataViewName, dashboardId, body, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Aysyncrounously request data needed to render an array of dashboard items 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        public ApiResponse< List<CalculateDashboardItemJobCreatedResult> > DashboardsCalculateDashboardDataWithFiltersWithHttpInfo (string dataViewName, int? dashboardId, CalculateDashboardDataWithFilters body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCalculateDashboardDataWithFilters");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsCalculateDashboardDataWithFilters");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Items/CalculateJobsWithFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCalculateDashboardDataWithFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CalculateDashboardItemJobCreatedResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<CalculateDashboardItemJobCreatedResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CalculateDashboardItemJobCreatedResult>)));
        }

        /// <summary>
        /// Aysyncrounously request data needed to render an array of dashboard items 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of List&lt;CalculateDashboardItemJobCreatedResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<CalculateDashboardItemJobCreatedResult>> DashboardsCalculateDashboardDataWithFiltersAsync (string dataViewName, int? dashboardId, CalculateDashboardDataWithFilters body = null, int? timeoutInSeconds = null)
        {
             ApiResponse<List<CalculateDashboardItemJobCreatedResult>> localVarResponse = await DashboardsCalculateDashboardDataWithFiltersAsyncWithHttpInfo(dataViewName, dashboardId, body, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Aysyncrounously request data needed to render an array of dashboard items 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CalculateDashboardItemJobCreatedResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CalculateDashboardItemJobCreatedResult>>> DashboardsCalculateDashboardDataWithFiltersAsyncWithHttpInfo (string dataViewName, int? dashboardId, CalculateDashboardDataWithFilters body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCalculateDashboardDataWithFilters");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsCalculateDashboardDataWithFilters");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Items/CalculateJobsWithFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCalculateDashboardDataWithFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CalculateDashboardItemJobCreatedResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<CalculateDashboardItemJobCreatedResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CalculateDashboardItemJobCreatedResult>)));
        }

        /// <summary>
        /// Cancel a running calculate dashboard data job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        public void DashboardsCancelCalculateDashboardDataJob (string dataViewName, int? dashboardId, int? jobId)
        {
             DashboardsCancelCalculateDashboardDataJobWithHttpInfo(dataViewName, dashboardId, jobId);
        }

        /// <summary>
        /// Cancel a running calculate dashboard data job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DashboardsCancelCalculateDashboardDataJobWithHttpInfo (string dataViewName, int? dashboardId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCancelCalculateDashboardDataJob");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsCancelCalculateDashboardDataJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DashboardsApi->DashboardsCancelCalculateDashboardDataJob");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Items/CalculateJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCancelCalculateDashboardDataJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel a running calculate dashboard data job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DashboardsCancelCalculateDashboardDataJobAsync (string dataViewName, int? dashboardId, int? jobId)
        {
             await DashboardsCancelCalculateDashboardDataJobAsyncWithHttpInfo(dataViewName, dashboardId, jobId);

        }

        /// <summary>
        /// Cancel a running calculate dashboard data job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DashboardsCancelCalculateDashboardDataJobAsyncWithHttpInfo (string dataViewName, int? dashboardId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCancelCalculateDashboardDataJob");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsCancelCalculateDashboardDataJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DashboardsApi->DashboardsCancelCalculateDashboardDataJob");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Items/CalculateJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCancelCalculateDashboardDataJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel a running dashboard item preview job Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        public void DashboardsCancelDashboardItemPreviewDataJob (string dataViewName, string systemName, int? jobId)
        {
             DashboardsCancelDashboardItemPreviewDataJobWithHttpInfo(dataViewName, systemName, jobId);
        }

        /// <summary>
        /// Cancel a running dashboard item preview job Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DashboardsCancelDashboardItemPreviewDataJobWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCancelDashboardItemPreviewDataJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DashboardsApi->DashboardsCancelDashboardItemPreviewDataJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DashboardsApi->DashboardsCancelDashboardItemPreviewDataJob");

            var localVarPath = "./{dataViewName}/Dashboards/{systemName}/DashboardItemPreviewJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCancelDashboardItemPreviewDataJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel a running dashboard item preview job Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DashboardsCancelDashboardItemPreviewDataJobAsync (string dataViewName, string systemName, int? jobId)
        {
             await DashboardsCancelDashboardItemPreviewDataJobAsyncWithHttpInfo(dataViewName, systemName, jobId);

        }

        /// <summary>
        /// Cancel a running dashboard item preview job Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DashboardsCancelDashboardItemPreviewDataJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCancelDashboardItemPreviewDataJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DashboardsApi->DashboardsCancelDashboardItemPreviewDataJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DashboardsApi->DashboardsCancelDashboardItemPreviewDataJob");

            var localVarPath = "./{dataViewName}/Dashboards/{systemName}/DashboardItemPreviewJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCancelDashboardItemPreviewDataJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass additional filter query and the name for the new audience (optional)</param>
        /// <returns>ConvertDashboardToAudienceResult</returns>
        public ConvertDashboardToAudienceResult DashboardsConvertToAudience (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null)
        {
             ApiResponse<ConvertDashboardToAudienceResult> localVarResponse = DashboardsConvertToAudienceWithHttpInfo(dataViewName, dashboardId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass additional filter query and the name for the new audience (optional)</param>
        /// <returns>ApiResponse of ConvertDashboardToAudienceResult</returns>
        public ApiResponse< ConvertDashboardToAudienceResult > DashboardsConvertToAudienceWithHttpInfo (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsConvertToAudience");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsConvertToAudience");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/ConvertToAudience";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsConvertToAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertDashboardToAudienceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ConvertDashboardToAudienceResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertDashboardToAudienceResult)));
        }

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass additional filter query and the name for the new audience (optional)</param>
        /// <returns>Task of ConvertDashboardToAudienceResult</returns>
        public async System.Threading.Tasks.Task<ConvertDashboardToAudienceResult> DashboardsConvertToAudienceAsync (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null)
        {
             ApiResponse<ConvertDashboardToAudienceResult> localVarResponse = await DashboardsConvertToAudienceAsyncWithHttpInfo(dataViewName, dashboardId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass additional filter query and the name for the new audience (optional)</param>
        /// <returns>Task of ApiResponse (ConvertDashboardToAudienceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConvertDashboardToAudienceResult>> DashboardsConvertToAudienceAsyncWithHttpInfo (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsConvertToAudience");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsConvertToAudience");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/ConvertToAudience";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsConvertToAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertDashboardToAudienceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ConvertDashboardToAudienceResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertDashboardToAudienceResult)));
        }

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass the Dashboard query and the name for the new audience (optional)</param>
        /// <returns>ConvertDashboardToAudienceResult</returns>
        public ConvertDashboardToAudienceResult DashboardsConvertToAudienceV2 (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null)
        {
             ApiResponse<ConvertDashboardToAudienceResult> localVarResponse = DashboardsConvertToAudienceV2WithHttpInfo(dataViewName, dashboardId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass the Dashboard query and the name for the new audience (optional)</param>
        /// <returns>ApiResponse of ConvertDashboardToAudienceResult</returns>
        public ApiResponse< ConvertDashboardToAudienceResult > DashboardsConvertToAudienceV2WithHttpInfo (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsConvertToAudienceV2");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsConvertToAudienceV2");

            var localVarPath = "./{dataViewName}/Dashboards/V2/{dashboardId}/ConvertToAudience";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsConvertToAudienceV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertDashboardToAudienceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ConvertDashboardToAudienceResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertDashboardToAudienceResult)));
        }

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass the Dashboard query and the name for the new audience (optional)</param>
        /// <returns>Task of ConvertDashboardToAudienceResult</returns>
        public async System.Threading.Tasks.Task<ConvertDashboardToAudienceResult> DashboardsConvertToAudienceV2Async (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null)
        {
             ApiResponse<ConvertDashboardToAudienceResult> localVarResponse = await DashboardsConvertToAudienceV2AsyncWithHttpInfo(dataViewName, dashboardId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass the Dashboard query and the name for the new audience (optional)</param>
        /// <returns>Task of ApiResponse (ConvertDashboardToAudienceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConvertDashboardToAudienceResult>> DashboardsConvertToAudienceV2AsyncWithHttpInfo (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsConvertToAudienceV2");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsConvertToAudienceV2");

            var localVarPath = "./{dataViewName}/Dashboards/V2/{dashboardId}/ConvertToAudience";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsConvertToAudienceV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertDashboardToAudienceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ConvertDashboardToAudienceResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertDashboardToAudienceResult)));
        }

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass the Dashboard query and the name for the new audience (optional)</param>
        /// <returns>ConvertDashboardToAudienceResult</returns>
        public ConvertDashboardToAudienceResult DashboardsConvertToAudienceWithFilters (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null)
        {
             ApiResponse<ConvertDashboardToAudienceResult> localVarResponse = DashboardsConvertToAudienceWithFiltersWithHttpInfo(dataViewName, dashboardId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass the Dashboard query and the name for the new audience (optional)</param>
        /// <returns>ApiResponse of ConvertDashboardToAudienceResult</returns>
        public ApiResponse< ConvertDashboardToAudienceResult > DashboardsConvertToAudienceWithFiltersWithHttpInfo (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsConvertToAudienceWithFilters");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsConvertToAudienceWithFilters");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/ConvertToAudienceWithFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsConvertToAudienceWithFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertDashboardToAudienceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ConvertDashboardToAudienceResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertDashboardToAudienceResult)));
        }

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass the Dashboard query and the name for the new audience (optional)</param>
        /// <returns>Task of ConvertDashboardToAudienceResult</returns>
        public async System.Threading.Tasks.Task<ConvertDashboardToAudienceResult> DashboardsConvertToAudienceWithFiltersAsync (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null)
        {
             ApiResponse<ConvertDashboardToAudienceResult> localVarResponse = await DashboardsConvertToAudienceWithFiltersAsyncWithHttpInfo(dataViewName, dashboardId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts a dashboard (including any global filters applied) to an Audience Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to pass the Dashboard query and the name for the new audience (optional)</param>
        /// <returns>Task of ApiResponse (ConvertDashboardToAudienceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConvertDashboardToAudienceResult>> DashboardsConvertToAudienceWithFiltersAsyncWithHttpInfo (string dataViewName, int? dashboardId, ConvertDashboardToAudience body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsConvertToAudienceWithFilters");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsConvertToAudienceWithFilters");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/ConvertToAudienceWithFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsConvertToAudienceWithFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertDashboardToAudienceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ConvertDashboardToAudienceResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertDashboardToAudienceResult)));
        }

        /// <summary>
        /// Copies an existing dashboard for the logged in user. Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to copy</param>
        /// <param name="body">The details used to create the new dashboard (optional)</param>
        /// <returns>DashboardDetail</returns>
        public DashboardDetail DashboardsCopyDashboard (string dataViewName, int? dashboardId, CopyDashboardDetail body = null)
        {
             ApiResponse<DashboardDetail> localVarResponse = DashboardsCopyDashboardWithHttpInfo(dataViewName, dashboardId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copies an existing dashboard for the logged in user. Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to copy</param>
        /// <param name="body">The details used to create the new dashboard (optional)</param>
        /// <returns>ApiResponse of DashboardDetail</returns>
        public ApiResponse< DashboardDetail > DashboardsCopyDashboardWithHttpInfo (string dataViewName, int? dashboardId, CopyDashboardDetail body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCopyDashboard");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsCopyDashboard");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCopyDashboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardDetail)));
        }

        /// <summary>
        /// Copies an existing dashboard for the logged in user. Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to copy</param>
        /// <param name="body">The details used to create the new dashboard (optional)</param>
        /// <returns>Task of DashboardDetail</returns>
        public async System.Threading.Tasks.Task<DashboardDetail> DashboardsCopyDashboardAsync (string dataViewName, int? dashboardId, CopyDashboardDetail body = null)
        {
             ApiResponse<DashboardDetail> localVarResponse = await DashboardsCopyDashboardAsyncWithHttpInfo(dataViewName, dashboardId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copies an existing dashboard for the logged in user. Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to copy</param>
        /// <param name="body">The details used to create the new dashboard (optional)</param>
        /// <returns>Task of ApiResponse (DashboardDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DashboardDetail>> DashboardsCopyDashboardAsyncWithHttpInfo (string dataViewName, int? dashboardId, CopyDashboardDetail body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCopyDashboard");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsCopyDashboard");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCopyDashboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardDetail)));
        }

        /// <summary>
        /// Creates a new dashboard from the given details for the logged in user. Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the dashboard to create.  If you want to update a specific dashboard then POST to the /Dashboards/{dashboardId} URL (optional)</param>
        /// <returns>DashboardDetail</returns>
        public DashboardDetail DashboardsCreateDashboard (string dataViewName, CreateDashboardDetail body = null)
        {
             ApiResponse<DashboardDetail> localVarResponse = DashboardsCreateDashboardWithHttpInfo(dataViewName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new dashboard from the given details for the logged in user. Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the dashboard to create.  If you want to update a specific dashboard then POST to the /Dashboards/{dashboardId} URL (optional)</param>
        /// <returns>ApiResponse of DashboardDetail</returns>
        public ApiResponse< DashboardDetail > DashboardsCreateDashboardWithHttpInfo (string dataViewName, CreateDashboardDetail body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCreateDashboard");

            var localVarPath = "./{dataViewName}/Dashboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCreateDashboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardDetail)));
        }

        /// <summary>
        /// Creates a new dashboard from the given details for the logged in user. Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the dashboard to create.  If you want to update a specific dashboard then POST to the /Dashboards/{dashboardId} URL (optional)</param>
        /// <returns>Task of DashboardDetail</returns>
        public async System.Threading.Tasks.Task<DashboardDetail> DashboardsCreateDashboardAsync (string dataViewName, CreateDashboardDetail body = null)
        {
             ApiResponse<DashboardDetail> localVarResponse = await DashboardsCreateDashboardAsyncWithHttpInfo(dataViewName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new dashboard from the given details for the logged in user. Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the dashboard to create.  If you want to update a specific dashboard then POST to the /Dashboards/{dashboardId} URL (optional)</param>
        /// <returns>Task of ApiResponse (DashboardDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DashboardDetail>> DashboardsCreateDashboardAsyncWithHttpInfo (string dataViewName, CreateDashboardDetail body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCreateDashboard");

            var localVarPath = "./{dataViewName}/Dashboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCreateDashboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardDetail)));
        }

        /// <summary>
        /// Register a hit (view) for the given dashboard 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to register the hit for</param>
        /// <param name="body">Details to register the hit with (optional)</param>
        /// <returns>DashboardHitDetail</returns>
        public DashboardHitDetail DashboardsCreateDashboardHitForDashboard (string dataViewName, int? dashboardId, CreateDashboardHitDetails body = null)
        {
             ApiResponse<DashboardHitDetail> localVarResponse = DashboardsCreateDashboardHitForDashboardWithHttpInfo(dataViewName, dashboardId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register a hit (view) for the given dashboard 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to register the hit for</param>
        /// <param name="body">Details to register the hit with (optional)</param>
        /// <returns>ApiResponse of DashboardHitDetail</returns>
        public ApiResponse< DashboardHitDetail > DashboardsCreateDashboardHitForDashboardWithHttpInfo (string dataViewName, int? dashboardId, CreateDashboardHitDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCreateDashboardHitForDashboard");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsCreateDashboardHitForDashboard");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCreateDashboardHitForDashboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardHitDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardHitDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardHitDetail)));
        }

        /// <summary>
        /// Register a hit (view) for the given dashboard 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to register the hit for</param>
        /// <param name="body">Details to register the hit with (optional)</param>
        /// <returns>Task of DashboardHitDetail</returns>
        public async System.Threading.Tasks.Task<DashboardHitDetail> DashboardsCreateDashboardHitForDashboardAsync (string dataViewName, int? dashboardId, CreateDashboardHitDetails body = null)
        {
             ApiResponse<DashboardHitDetail> localVarResponse = await DashboardsCreateDashboardHitForDashboardAsyncWithHttpInfo(dataViewName, dashboardId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register a hit (view) for the given dashboard 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to register the hit for</param>
        /// <param name="body">Details to register the hit with (optional)</param>
        /// <returns>Task of ApiResponse (DashboardHitDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DashboardHitDetail>> DashboardsCreateDashboardHitForDashboardAsyncWithHttpInfo (string dataViewName, int? dashboardId, CreateDashboardHitDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCreateDashboardHitForDashboard");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsCreateDashboardHitForDashboard");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCreateDashboardHitForDashboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardHitDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardHitDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardHitDetail)));
        }

        /// <summary>
        /// Submit an array of jobs to calculate the data needed to render visualisation previews Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The data required to process the request (optional)</param>
        /// <returns></returns>
        public void DashboardsCreateDashboardItemPreviewDataJobs (string dataViewName, string systemName, List<DashboardItemPreviewData> body = null)
        {
             DashboardsCreateDashboardItemPreviewDataJobsWithHttpInfo(dataViewName, systemName, body);
        }

        /// <summary>
        /// Submit an array of jobs to calculate the data needed to render visualisation previews Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The data required to process the request (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DashboardsCreateDashboardItemPreviewDataJobsWithHttpInfo (string dataViewName, string systemName, List<DashboardItemPreviewData> body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCreateDashboardItemPreviewDataJobs");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DashboardsApi->DashboardsCreateDashboardItemPreviewDataJobs");

            var localVarPath = "./{dataViewName}/Dashboards/{systemName}/DashboardItemPreviewJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCreateDashboardItemPreviewDataJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Submit an array of jobs to calculate the data needed to render visualisation previews Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The data required to process the request (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DashboardsCreateDashboardItemPreviewDataJobsAsync (string dataViewName, string systemName, List<DashboardItemPreviewData> body = null)
        {
             await DashboardsCreateDashboardItemPreviewDataJobsAsyncWithHttpInfo(dataViewName, systemName, body);

        }

        /// <summary>
        /// Submit an array of jobs to calculate the data needed to render visualisation previews Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The data required to process the request (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DashboardsCreateDashboardItemPreviewDataJobsAsyncWithHttpInfo (string dataViewName, string systemName, List<DashboardItemPreviewData> body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCreateDashboardItemPreviewDataJobs");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DashboardsApi->DashboardsCreateDashboardItemPreviewDataJobs");

            var localVarPath = "./{dataViewName}/Dashboards/{systemName}/DashboardItemPreviewJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCreateDashboardItemPreviewDataJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the details of a particular dashboard.  If you don&#x27;t have an id for the  dashboard then POST to the /Dashboards URL to create a new dashboard. Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to add/update</param>
        /// <param name="body">The details for the dashboard to add/update (optional)</param>
        /// <returns>DashboardDetail</returns>
        public DashboardDetail DashboardsCreateDashboardUpdate (string dataViewName, int? dashboardId, CreateDashboardUpdateDetail body = null)
        {
             ApiResponse<DashboardDetail> localVarResponse = DashboardsCreateDashboardUpdateWithHttpInfo(dataViewName, dashboardId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the details of a particular dashboard.  If you don&#x27;t have an id for the  dashboard then POST to the /Dashboards URL to create a new dashboard. Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to add/update</param>
        /// <param name="body">The details for the dashboard to add/update (optional)</param>
        /// <returns>ApiResponse of DashboardDetail</returns>
        public ApiResponse< DashboardDetail > DashboardsCreateDashboardUpdateWithHttpInfo (string dataViewName, int? dashboardId, CreateDashboardUpdateDetail body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCreateDashboardUpdate");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsCreateDashboardUpdate");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCreateDashboardUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardDetail)));
        }

        /// <summary>
        /// Updates the details of a particular dashboard.  If you don&#x27;t have an id for the  dashboard then POST to the /Dashboards URL to create a new dashboard. Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to add/update</param>
        /// <param name="body">The details for the dashboard to add/update (optional)</param>
        /// <returns>Task of DashboardDetail</returns>
        public async System.Threading.Tasks.Task<DashboardDetail> DashboardsCreateDashboardUpdateAsync (string dataViewName, int? dashboardId, CreateDashboardUpdateDetail body = null)
        {
             ApiResponse<DashboardDetail> localVarResponse = await DashboardsCreateDashboardUpdateAsyncWithHttpInfo(dataViewName, dashboardId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the details of a particular dashboard.  If you don&#x27;t have an id for the  dashboard then POST to the /Dashboards URL to create a new dashboard. Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to add/update</param>
        /// <param name="body">The details for the dashboard to add/update (optional)</param>
        /// <returns>Task of ApiResponse (DashboardDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DashboardDetail>> DashboardsCreateDashboardUpdateAsyncWithHttpInfo (string dataViewName, int? dashboardId, CreateDashboardUpdateDetail body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsCreateDashboardUpdate");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsCreateDashboardUpdate");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsCreateDashboardUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardDetail)));
        }

        /// <summary>
        /// Deletes the specified dashboard Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to delete</param>
        /// <returns></returns>
        public void DashboardsDeleteDashboard (string dataViewName, int? dashboardId)
        {
             DashboardsDeleteDashboardWithHttpInfo(dataViewName, dashboardId);
        }

        /// <summary>
        /// Deletes the specified dashboard Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DashboardsDeleteDashboardWithHttpInfo (string dataViewName, int? dashboardId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsDeleteDashboard");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsDeleteDashboard");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDeleteDashboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes the specified dashboard Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DashboardsDeleteDashboardAsync (string dataViewName, int? dashboardId)
        {
             await DashboardsDeleteDashboardAsyncWithHttpInfo(dataViewName, dashboardId);

        }

        /// <summary>
        /// Deletes the specified dashboard Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DashboardsDeleteDashboardAsyncWithHttpInfo (string dataViewName, int? dashboardId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsDeleteDashboard");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsDeleteDashboard");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsDeleteDashboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Return export data needed to view the underlying data for a dashboard Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>DashboardExportDataResult</returns>
        public DashboardExportDataResult DashboardsGetDashboardExportSync (string dataViewName, int? dashboardId, DashboardExportData body = null, int? timeoutInSeconds = null)
        {
             ApiResponse<DashboardExportDataResult> localVarResponse = DashboardsGetDashboardExportSyncWithHttpInfo(dataViewName, dashboardId, body, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return export data needed to view the underlying data for a dashboard Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of DashboardExportDataResult</returns>
        public ApiResponse< DashboardExportDataResult > DashboardsGetDashboardExportSyncWithHttpInfo (string dataViewName, int? dashboardId, DashboardExportData body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsGetDashboardExportSync");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsGetDashboardExportSync");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/ExportSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGetDashboardExportSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardExportDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardExportDataResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardExportDataResult)));
        }

        /// <summary>
        /// Return export data needed to view the underlying data for a dashboard Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of DashboardExportDataResult</returns>
        public async System.Threading.Tasks.Task<DashboardExportDataResult> DashboardsGetDashboardExportSyncAsync (string dataViewName, int? dashboardId, DashboardExportData body = null, int? timeoutInSeconds = null)
        {
             ApiResponse<DashboardExportDataResult> localVarResponse = await DashboardsGetDashboardExportSyncAsyncWithHttpInfo(dataViewName, dashboardId, body, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return export data needed to view the underlying data for a dashboard Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="body">Used to filter the data on the dashboard (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (DashboardExportDataResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DashboardExportDataResult>> DashboardsGetDashboardExportSyncAsyncWithHttpInfo (string dataViewName, int? dashboardId, DashboardExportData body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsGetDashboardExportSync");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsGetDashboardExportSync");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/ExportSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGetDashboardExportSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardExportDataResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardExportDataResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardExportDataResult)));
        }

        /// <summary>
        /// Returns details for a given dashboard hit for this dashboard 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the hit information for</param>
        /// <param name="dashboardHitId">The id of the hit</param>
        /// <returns>DashboardHitDetail</returns>
        public DashboardHitDetail DashboardsGetDashboardHitForDashboard (string dataViewName, int? dashboardId, int? dashboardHitId)
        {
             ApiResponse<DashboardHitDetail> localVarResponse = DashboardsGetDashboardHitForDashboardWithHttpInfo(dataViewName, dashboardId, dashboardHitId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details for a given dashboard hit for this dashboard 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the hit information for</param>
        /// <param name="dashboardHitId">The id of the hit</param>
        /// <returns>ApiResponse of DashboardHitDetail</returns>
        public ApiResponse< DashboardHitDetail > DashboardsGetDashboardHitForDashboardWithHttpInfo (string dataViewName, int? dashboardId, int? dashboardHitId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsGetDashboardHitForDashboard");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsGetDashboardHitForDashboard");
            // verify the required parameter 'dashboardHitId' is set
            if (dashboardHitId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardHitId' when calling DashboardsApi->DashboardsGetDashboardHitForDashboard");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Hits/{dashboardHitId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (dashboardHitId != null) localVarPathParams.Add("dashboardHitId", this.Configuration.ApiClient.ParameterToString(dashboardHitId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGetDashboardHitForDashboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardHitDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardHitDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardHitDetail)));
        }

        /// <summary>
        /// Returns details for a given dashboard hit for this dashboard 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the hit information for</param>
        /// <param name="dashboardHitId">The id of the hit</param>
        /// <returns>Task of DashboardHitDetail</returns>
        public async System.Threading.Tasks.Task<DashboardHitDetail> DashboardsGetDashboardHitForDashboardAsync (string dataViewName, int? dashboardId, int? dashboardHitId)
        {
             ApiResponse<DashboardHitDetail> localVarResponse = await DashboardsGetDashboardHitForDashboardAsyncWithHttpInfo(dataViewName, dashboardId, dashboardHitId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details for a given dashboard hit for this dashboard 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the hit information for</param>
        /// <param name="dashboardHitId">The id of the hit</param>
        /// <returns>Task of ApiResponse (DashboardHitDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DashboardHitDetail>> DashboardsGetDashboardHitForDashboardAsyncWithHttpInfo (string dataViewName, int? dashboardId, int? dashboardHitId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsGetDashboardHitForDashboard");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsGetDashboardHitForDashboard");
            // verify the required parameter 'dashboardHitId' is set
            if (dashboardHitId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardHitId' when calling DashboardsApi->DashboardsGetDashboardHitForDashboard");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Hits/{dashboardHitId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (dashboardHitId != null) localVarPathParams.Add("dashboardHitId", this.Configuration.ApiClient.ParameterToString(dashboardHitId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGetDashboardHitForDashboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardHitDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardHitDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardHitDetail)));
        }

        /// <summary>
        /// Returns a summary of the hits for this dashboard - i.e. information about when users have viewed the dashboard. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDashboardHitSummary</returns>
        public PagedResultsDashboardHitSummary DashboardsGetDashboardHitsForDashboard (string dataViewName, int? dashboardId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDashboardHitSummary> localVarResponse = DashboardsGetDashboardHitsForDashboardWithHttpInfo(dataViewName, dashboardId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a summary of the hits for this dashboard - i.e. information about when users have viewed the dashboard. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDashboardHitSummary</returns>
        public ApiResponse< PagedResultsDashboardHitSummary > DashboardsGetDashboardHitsForDashboardWithHttpInfo (string dataViewName, int? dashboardId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsGetDashboardHitsForDashboard");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsGetDashboardHitsForDashboard");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGetDashboardHitsForDashboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDashboardHitSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsDashboardHitSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDashboardHitSummary)));
        }

        /// <summary>
        /// Returns a summary of the hits for this dashboard - i.e. information about when users have viewed the dashboard. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDashboardHitSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsDashboardHitSummary> DashboardsGetDashboardHitsForDashboardAsync (string dataViewName, int? dashboardId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDashboardHitSummary> localVarResponse = await DashboardsGetDashboardHitsForDashboardAsyncWithHttpInfo(dataViewName, dashboardId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a summary of the hits for this dashboard - i.e. information about when users have viewed the dashboard. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDashboardHitSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsDashboardHitSummary>> DashboardsGetDashboardHitsForDashboardAsyncWithHttpInfo (string dataViewName, int? dashboardId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsGetDashboardHitsForDashboard");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsGetDashboardHitsForDashboard");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGetDashboardHitsForDashboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDashboardHitSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsDashboardHitSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDashboardHitSummary)));
        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard item Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="dashboardItemId">The id of the dashboard item to calculate the results for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>DashboardItemDataResultDetail</returns>
        public DashboardItemDataResultDetail DashboardsGetDashboardItemDataSync (string dataViewName, int? dashboardId, string dashboardItemId, DashboardItemData body = null, int? timeoutInSeconds = null)
        {
             ApiResponse<DashboardItemDataResultDetail> localVarResponse = DashboardsGetDashboardItemDataSyncWithHttpInfo(dataViewName, dashboardId, dashboardItemId, body, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard item Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="dashboardItemId">The id of the dashboard item to calculate the results for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of DashboardItemDataResultDetail</returns>
        public ApiResponse< DashboardItemDataResultDetail > DashboardsGetDashboardItemDataSyncWithHttpInfo (string dataViewName, int? dashboardId, string dashboardItemId, DashboardItemData body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsGetDashboardItemDataSync");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsGetDashboardItemDataSync");
            // verify the required parameter 'dashboardItemId' is set
            if (dashboardItemId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardItemId' when calling DashboardsApi->DashboardsGetDashboardItemDataSync");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Items/{dashboardItemId}/CalculateSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (dashboardItemId != null) localVarPathParams.Add("dashboardItemId", this.Configuration.ApiClient.ParameterToString(dashboardItemId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGetDashboardItemDataSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardItemDataResultDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardItemDataResultDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardItemDataResultDetail)));
        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard item Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="dashboardItemId">The id of the dashboard item to calculate the results for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of DashboardItemDataResultDetail</returns>
        public async System.Threading.Tasks.Task<DashboardItemDataResultDetail> DashboardsGetDashboardItemDataSyncAsync (string dataViewName, int? dashboardId, string dashboardItemId, DashboardItemData body = null, int? timeoutInSeconds = null)
        {
             ApiResponse<DashboardItemDataResultDetail> localVarResponse = await DashboardsGetDashboardItemDataSyncAsyncWithHttpInfo(dataViewName, dashboardId, dashboardItemId, body, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard item Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="dashboardItemId">The id of the dashboard item to calculate the results for</param>
        /// <param name="body">Used to filter the data on the dashboard item and define the drill down level (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (DashboardItemDataResultDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DashboardItemDataResultDetail>> DashboardsGetDashboardItemDataSyncAsyncWithHttpInfo (string dataViewName, int? dashboardId, string dashboardItemId, DashboardItemData body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsGetDashboardItemDataSync");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsGetDashboardItemDataSync");
            // verify the required parameter 'dashboardItemId' is set
            if (dashboardItemId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardItemId' when calling DashboardsApi->DashboardsGetDashboardItemDataSync");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Items/{dashboardItemId}/CalculateSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (dashboardItemId != null) localVarPathParams.Add("dashboardItemId", this.Configuration.ApiClient.ParameterToString(dashboardItemId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGetDashboardItemDataSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardItemDataResultDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardItemDataResultDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardItemDataResultDetail)));
        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard item when previewing Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the dashboard item to calculate the results for</param>
        /// <returns>DashboardItemDataJobDetail</returns>
        public DashboardItemDataJobDetail DashboardsGetDashboardItemPreviewDataJob (string dataViewName, string systemName, int? jobId)
        {
             ApiResponse<DashboardItemDataJobDetail> localVarResponse = DashboardsGetDashboardItemPreviewDataJobWithHttpInfo(dataViewName, systemName, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard item when previewing Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the dashboard item to calculate the results for</param>
        /// <returns>ApiResponse of DashboardItemDataJobDetail</returns>
        public ApiResponse< DashboardItemDataJobDetail > DashboardsGetDashboardItemPreviewDataJobWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsGetDashboardItemPreviewDataJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DashboardsApi->DashboardsGetDashboardItemPreviewDataJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DashboardsApi->DashboardsGetDashboardItemPreviewDataJob");

            var localVarPath = "./{dataViewName}/Dashboards/{systemName}/DashboardItemPreviewJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGetDashboardItemPreviewDataJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardItemDataJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardItemDataJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardItemDataJobDetail)));
        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard item when previewing Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the dashboard item to calculate the results for</param>
        /// <returns>Task of DashboardItemDataJobDetail</returns>
        public async System.Threading.Tasks.Task<DashboardItemDataJobDetail> DashboardsGetDashboardItemPreviewDataJobAsync (string dataViewName, string systemName, int? jobId)
        {
             ApiResponse<DashboardItemDataJobDetail> localVarResponse = await DashboardsGetDashboardItemPreviewDataJobAsyncWithHttpInfo(dataViewName, systemName, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard item when previewing Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the dashboard item to calculate the results for</param>
        /// <returns>Task of ApiResponse (DashboardItemDataJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DashboardItemDataJobDetail>> DashboardsGetDashboardItemPreviewDataJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsGetDashboardItemPreviewDataJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DashboardsApi->DashboardsGetDashboardItemPreviewDataJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DashboardsApi->DashboardsGetDashboardItemPreviewDataJob");

            var localVarPath = "./{dataViewName}/Dashboards/{systemName}/DashboardItemPreviewJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGetDashboardItemPreviewDataJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardItemDataJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardItemDataJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardItemDataJobDetail)));
        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard preview item (s) or the status of the job(s) if not complete Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">An array of the jobIds to get the results for (optional)</param>
        /// <returns>List&lt;DashboardItemDataJobDetail&gt;</returns>
        public List<DashboardItemDataJobDetail> DashboardsGetDashboardItemPreviewDataJobs (string dataViewName, string systemName, List<int?> body = null)
        {
             ApiResponse<List<DashboardItemDataJobDetail>> localVarResponse = DashboardsGetDashboardItemPreviewDataJobsWithHttpInfo(dataViewName, systemName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard preview item (s) or the status of the job(s) if not complete Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">An array of the jobIds to get the results for (optional)</param>
        /// <returns>ApiResponse of List&lt;DashboardItemDataJobDetail&gt;</returns>
        public ApiResponse< List<DashboardItemDataJobDetail> > DashboardsGetDashboardItemPreviewDataJobsWithHttpInfo (string dataViewName, string systemName, List<int?> body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsGetDashboardItemPreviewDataJobs");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DashboardsApi->DashboardsGetDashboardItemPreviewDataJobs");

            var localVarPath = "./{dataViewName}/Dashboards/{systemName}/Items/DashboardItemPreviewJobs/Results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGetDashboardItemPreviewDataJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DashboardItemDataJobDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<DashboardItemDataJobDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DashboardItemDataJobDetail>)));
        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard preview item (s) or the status of the job(s) if not complete Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">An array of the jobIds to get the results for (optional)</param>
        /// <returns>Task of List&lt;DashboardItemDataJobDetail&gt;</returns>
        public async System.Threading.Tasks.Task<List<DashboardItemDataJobDetail>> DashboardsGetDashboardItemPreviewDataJobsAsync (string dataViewName, string systemName, List<int?> body = null)
        {
             ApiResponse<List<DashboardItemDataJobDetail>> localVarResponse = await DashboardsGetDashboardItemPreviewDataJobsAsyncWithHttpInfo(dataViewName, systemName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard preview item (s) or the status of the job(s) if not complete Requires licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">An array of the jobIds to get the results for (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DashboardItemDataJobDetail&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DashboardItemDataJobDetail>>> DashboardsGetDashboardItemPreviewDataJobsAsyncWithHttpInfo (string dataViewName, string systemName, List<int?> body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsGetDashboardItemPreviewDataJobs");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DashboardsApi->DashboardsGetDashboardItemPreviewDataJobs");

            var localVarPath = "./{dataViewName}/Dashboards/{systemName}/Items/DashboardItemPreviewJobs/Results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGetDashboardItemPreviewDataJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DashboardItemDataJobDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<DashboardItemDataJobDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DashboardItemDataJobDetail>)));
        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard item 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="jobId">The id of the dashboard item to calculate the results for</param>
        /// <returns>DashboardItemDataJobDetail</returns>
        public DashboardItemDataJobDetail DashboardsGetDashboardJobResults (string dataViewName, int? dashboardId, int? jobId)
        {
             ApiResponse<DashboardItemDataJobDetail> localVarResponse = DashboardsGetDashboardJobResultsWithHttpInfo(dataViewName, dashboardId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard item 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="jobId">The id of the dashboard item to calculate the results for</param>
        /// <returns>ApiResponse of DashboardItemDataJobDetail</returns>
        public ApiResponse< DashboardItemDataJobDetail > DashboardsGetDashboardJobResultsWithHttpInfo (string dataViewName, int? dashboardId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsGetDashboardJobResults");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsGetDashboardJobResults");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DashboardsApi->DashboardsGetDashboardJobResults");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Items/CalculateJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGetDashboardJobResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardItemDataJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardItemDataJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardItemDataJobDetail)));
        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard item 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="jobId">The id of the dashboard item to calculate the results for</param>
        /// <returns>Task of DashboardItemDataJobDetail</returns>
        public async System.Threading.Tasks.Task<DashboardItemDataJobDetail> DashboardsGetDashboardJobResultsAsync (string dataViewName, int? dashboardId, int? jobId)
        {
             ApiResponse<DashboardItemDataJobDetail> localVarResponse = await DashboardsGetDashboardJobResultsAsyncWithHttpInfo(dataViewName, dashboardId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return data needed to render visualisation for dashboard item 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="dashboardId">The id of the dashboard to calculate the result for</param>
        /// <param name="jobId">The id of the dashboard item to calculate the results for</param>
        /// <returns>Task of ApiResponse (DashboardItemDataJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DashboardItemDataJobDetail>> DashboardsGetDashboardJobResultsAsyncWithHttpInfo (string dataViewName, int? dashboardId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsGetDashboardJobResults");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling DashboardsApi->DashboardsGetDashboardJobResults");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DashboardsApi->DashboardsGetDashboardJobResults");

            var localVarPath = "./{dataViewName}/Dashboards/{dashboardId}/Items/CalculateJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGetDashboardJobResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DashboardItemDataJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DashboardItemDataJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DashboardItemDataJobDetail)));
        }

        /// <summary>
        /// Returns a list of dashboard maps for the system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>List&lt;DashboardMapSettings&gt;</returns>
        public List<DashboardMapSettings> DashboardsGetDashboardMapSettings (string dataViewName, string systemName)
        {
             ApiResponse<List<DashboardMapSettings>> localVarResponse = DashboardsGetDashboardMapSettingsWithHttpInfo(dataViewName, systemName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of dashboard maps for the system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of List&lt;DashboardMapSettings&gt;</returns>
        public ApiResponse< List<DashboardMapSettings> > DashboardsGetDashboardMapSettingsWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsGetDashboardMapSettings");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DashboardsApi->DashboardsGetDashboardMapSettings");

            var localVarPath = "./{dataViewName}/Dashboards/{systemName}/DashboardMapSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGetDashboardMapSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DashboardMapSettings>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<DashboardMapSettings>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DashboardMapSettings>)));
        }

        /// <summary>
        /// Returns a list of dashboard maps for the system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of List&lt;DashboardMapSettings&gt;</returns>
        public async System.Threading.Tasks.Task<List<DashboardMapSettings>> DashboardsGetDashboardMapSettingsAsync (string dataViewName, string systemName)
        {
             ApiResponse<List<DashboardMapSettings>> localVarResponse = await DashboardsGetDashboardMapSettingsAsyncWithHttpInfo(dataViewName, systemName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of dashboard maps for the system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse (List&lt;DashboardMapSettings&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DashboardMapSettings>>> DashboardsGetDashboardMapSettingsAsyncWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DashboardsApi->DashboardsGetDashboardMapSettings");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DashboardsApi->DashboardsGetDashboardMapSettings");

            var localVarPath = "./{dataViewName}/Dashboards/{systemName}/DashboardMapSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DashboardsGetDashboardMapSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DashboardMapSettings>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<DashboardMapSettings>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DashboardMapSettings>)));
        }

    }
}
