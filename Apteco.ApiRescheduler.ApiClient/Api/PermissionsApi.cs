/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPermissionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to apply the permission to</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>AuthorisedPermissionWithLookups</returns>
        AuthorisedPermissionWithLookups PermissionsCreatePermissionForGroup (string dataViewName, string systemName, int? groupId, Permission body = null);

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to apply the permission to</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>ApiResponse of AuthorisedPermissionWithLookups</returns>
        ApiResponse<AuthorisedPermissionWithLookups> PermissionsCreatePermissionForGroupWithHttpInfo (string dataViewName, string systemName, int? groupId, Permission body = null);
        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>AuthorisedPermissionWithLookups</returns>
        AuthorisedPermissionWithLookups PermissionsCreatePermissionForSystem (string dataViewName, string systemName, Permission body = null);

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>ApiResponse of AuthorisedPermissionWithLookups</returns>
        ApiResponse<AuthorisedPermissionWithLookups> PermissionsCreatePermissionForSystemWithHttpInfo (string dataViewName, string systemName, Permission body = null);
        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to apply the permission to</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>AuthorisedPermissionWithLookups</returns>
        AuthorisedPermissionWithLookups PermissionsCreatePermissionForUser (string dataViewName, string systemName, int? userId, Permission body = null);

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to apply the permission to</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>ApiResponse of AuthorisedPermissionWithLookups</returns>
        ApiResponse<AuthorisedPermissionWithLookups> PermissionsCreatePermissionForUserWithHttpInfo (string dataViewName, string systemName, int? userId, Permission body = null);
        /// <summary>
        /// Creates a new tag from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The value of the tag to create (optional)</param>
        /// <returns>Tag</returns>
        Tag PermissionsCreateTag (string dataViewName, string systemName, CreateTag body = null);

        /// <summary>
        /// Creates a new tag from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The value of the tag to create (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> PermissionsCreateTagWithHttpInfo (string dataViewName, string systemName, CreateTag body = null);
        /// <summary>
        /// Deletes the specified permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionId">The id of the permission to delete</param>
        /// <returns></returns>
        void PermissionsDeletePermission (string dataViewName, string systemName, int? permissionId);

        /// <summary>
        /// Deletes the specified permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionId">The id of the permission to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PermissionsDeletePermissionWithHttpInfo (string dataViewName, string systemName, int? permissionId);
        /// <summary>
        /// Deletes permissions for a given group, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>bool?</returns>
        bool? PermissionsDeletePermissionsForGroup (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource);

        /// <summary>
        /// Deletes permissions for a given group, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> PermissionsDeletePermissionsForGroupWithHttpInfo (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource);
        /// <summary>
        /// Deletes permissions for a system, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>bool?</returns>
        bool? PermissionsDeletePermissionsForSystem (string dataViewName, string systemName, string resourceType, string permissionType, string resource);

        /// <summary>
        /// Deletes permissions for a system, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> PermissionsDeletePermissionsForSystemWithHttpInfo (string dataViewName, string systemName, string resourceType, string permissionType, string resource);
        /// <summary>
        /// Deletes permissions for a given user, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>bool?</returns>
        bool? PermissionsDeletePermissionsForUser (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource);

        /// <summary>
        /// Deletes permissions for a given user, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> PermissionsDeletePermissionsForUserWithHttpInfo (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource);
        /// <summary>
        /// Deletes the specified tag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="tagId">The id of the tag to delete</param>
        /// <returns></returns>
        void PermissionsDeleteTag (string dataViewName, string systemName, int? tagId);

        /// <summary>
        /// Deletes the specified tag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="tagId">The id of the tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PermissionsDeleteTagWithHttpInfo (string dataViewName, string systemName, int? tagId);
        /// <summary>
        /// Returns details of all permission affecting a resource for a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>PermissionDetailsWithLookups</returns>
        PermissionDetailsWithLookups PermissionsGetPermissionDetailsForGroup (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource);

        /// <summary>
        /// Returns details of all permission affecting a resource for a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>ApiResponse of PermissionDetailsWithLookups</returns>
        ApiResponse<PermissionDetailsWithLookups> PermissionsGetPermissionDetailsForGroupWithHttpInfo (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource);
        /// <summary>
        /// Returns details of all permission affecting a resource for a system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>PermissionDetailsWithLookups</returns>
        PermissionDetailsWithLookups PermissionsGetPermissionDetailsForSystem (string dataViewName, string systemName, string resourceType, string permissionType, string resource);

        /// <summary>
        /// Returns details of all permission affecting a resource for a system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>ApiResponse of PermissionDetailsWithLookups</returns>
        ApiResponse<PermissionDetailsWithLookups> PermissionsGetPermissionDetailsForSystemWithHttpInfo (string dataViewName, string systemName, string resourceType, string permissionType, string resource);
        /// <summary>
        /// Returns details of all permission affecting a resource for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>PermissionDetailsWithLookups</returns>
        PermissionDetailsWithLookups PermissionsGetPermissionDetailsForUser (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource);

        /// <summary>
        /// Returns details of all permission affecting a resource for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>ApiResponse of PermissionDetailsWithLookups</returns>
        ApiResponse<PermissionDetailsWithLookups> PermissionsGetPermissionDetailsForUserWithHttpInfo (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource);
        /// <summary>
        /// Returns a summary of permissions for a particular group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the summaries for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsResolvedPermissionSummaryWithLookups</returns>
        PagedResultsResolvedPermissionSummaryWithLookups PermissionsGetPermissionSummariesForGroup (string dataViewName, string systemName, int? groupId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of permissions for a particular group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the summaries for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsResolvedPermissionSummaryWithLookups</returns>
        ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups> PermissionsGetPermissionSummariesForGroupWithHttpInfo (string dataViewName, string systemName, int? groupId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns a summary of permissions for a system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsResolvedPermissionSummaryWithLookups</returns>
        PagedResultsResolvedPermissionSummaryWithLookups PermissionsGetPermissionSummariesForSystem (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of permissions for a system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsResolvedPermissionSummaryWithLookups</returns>
        ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups> PermissionsGetPermissionSummariesForSystemWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns a summary of permissions for a particular user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the summaries for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsResolvedPermissionSummaryWithLookups</returns>
        PagedResultsResolvedPermissionSummaryWithLookups PermissionsGetPermissionSummariesForUser (string dataViewName, string systemName, int? userId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of permissions for a particular user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the summaries for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsResolvedPermissionSummaryWithLookups</returns>
        ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups> PermissionsGetPermissionSummariesForUserWithHttpInfo (string dataViewName, string systemName, int? userId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the permissions for a particular group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsAuthorisedPermissionWithLookups</returns>
        PagedResultsAuthorisedPermissionWithLookups PermissionsGetPermissionsForGroup (string dataViewName, string systemName, int? groupId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the permissions for a particular group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsAuthorisedPermissionWithLookups</returns>
        ApiResponse<PagedResultsAuthorisedPermissionWithLookups> PermissionsGetPermissionsForGroupWithHttpInfo (string dataViewName, string systemName, int? groupId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the permissions for a particular permission set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionSetId">The id of the permission set to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsAuthorisedPermissionWithLookups</returns>
        PagedResultsAuthorisedPermissionWithLookups PermissionsGetPermissionsForPermissionSet (string dataViewName, string systemName, int? permissionSetId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the permissions for a particular permission set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionSetId">The id of the permission set to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsAuthorisedPermissionWithLookups</returns>
        ApiResponse<PagedResultsAuthorisedPermissionWithLookups> PermissionsGetPermissionsForPermissionSetWithHttpInfo (string dataViewName, string systemName, int? permissionSetId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the permissions for a particular system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsAuthorisedPermissionWithLookups</returns>
        PagedResultsAuthorisedPermissionWithLookups PermissionsGetPermissionsForSystem (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the permissions for a particular system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsAuthorisedPermissionWithLookups</returns>
        ApiResponse<PagedResultsAuthorisedPermissionWithLookups> PermissionsGetPermissionsForSystemWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the permissions for a particular user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsAuthorisedPermissionWithLookups</returns>
        PagedResultsAuthorisedPermissionWithLookups PermissionsGetPermissionsForUser (string dataViewName, string systemName, int? userId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the permissions for a particular user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsAuthorisedPermissionWithLookups</returns>
        ApiResponse<PagedResultsAuthorisedPermissionWithLookups> PermissionsGetPermissionsForUserWithHttpInfo (string dataViewName, string systemName, int? userId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the tag for a particular system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Value, SystemName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Value, SystemName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsTag</returns>
        PagedResultsTag PermissionsGetTags (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the tag for a particular system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Value, SystemName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Value, SystemName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsTag</returns>
        ApiResponse<PagedResultsTag> PermissionsGetTagsWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns whether the current user is authorised to access a particular resource for a particular permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionType">The type of permission to get the permissions for</param>
        /// <param name="permission">The permission to test for</param>
        /// <param name="resourceType">The type of resource to get the permissions for</param>
        /// <param name="resource">The path for the particular type of resource</param>
        /// <returns>bool?</returns>
        bool? PermissionsIsAuthorised (string dataViewName, string systemName, string permissionType, string permission, string resourceType, string resource);

        /// <summary>
        /// Returns whether the current user is authorised to access a particular resource for a particular permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionType">The type of permission to get the permissions for</param>
        /// <param name="permission">The permission to test for</param>
        /// <param name="resourceType">The type of resource to get the permissions for</param>
        /// <param name="resource">The path for the particular type of resource</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> PermissionsIsAuthorisedWithHttpInfo (string dataViewName, string systemName, string permissionType, string permission, string resourceType, string resource);
        /// <summary>
        /// Modify the specified permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionId">The permission id of the permission</param>
        /// <param name="body">The permission to modify (optional)</param>
        /// <returns>AuthorisedPermissionWithLookups</returns>
        AuthorisedPermissionWithLookups PermissionsModifyPermission (string dataViewName, string systemName, int? permissionId, AuthorisedPermission body = null);

        /// <summary>
        /// Modify the specified permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionId">The permission id of the permission</param>
        /// <param name="body">The permission to modify (optional)</param>
        /// <returns>ApiResponse of AuthorisedPermissionWithLookups</returns>
        ApiResponse<AuthorisedPermissionWithLookups> PermissionsModifyPermissionWithHttpInfo (string dataViewName, string systemName, int? permissionId, AuthorisedPermission body = null);
        /// <summary>
        /// Sets permissions for a given group, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to set the permissions for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>bool?</returns>
        bool? PermissionsSetPermissionsForGroup (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null);

        /// <summary>
        /// Sets permissions for a given group, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to set the permissions for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> PermissionsSetPermissionsForGroupWithHttpInfo (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null);
        /// <summary>
        /// Sets permissions for a system, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>bool?</returns>
        bool? PermissionsSetPermissionsForSystem (string dataViewName, string systemName, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null);

        /// <summary>
        /// Sets permissions for a system, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> PermissionsSetPermissionsForSystemWithHttpInfo (string dataViewName, string systemName, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null);
        /// <summary>
        /// Sets permissions for a given user, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to set the permissions for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>bool?</returns>
        bool? PermissionsSetPermissionsForUser (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null);

        /// <summary>
        /// Sets permissions for a given user, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to set the permissions for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> PermissionsSetPermissionsForUserWithHttpInfo (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to apply the permission to</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>Task of AuthorisedPermissionWithLookups</returns>
        System.Threading.Tasks.Task<AuthorisedPermissionWithLookups> PermissionsCreatePermissionForGroupAsync (string dataViewName, string systemName, int? groupId, Permission body = null);

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to apply the permission to</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>Task of ApiResponse (AuthorisedPermissionWithLookups)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorisedPermissionWithLookups>> PermissionsCreatePermissionForGroupAsyncWithHttpInfo (string dataViewName, string systemName, int? groupId, Permission body = null);
        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>Task of AuthorisedPermissionWithLookups</returns>
        System.Threading.Tasks.Task<AuthorisedPermissionWithLookups> PermissionsCreatePermissionForSystemAsync (string dataViewName, string systemName, Permission body = null);

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>Task of ApiResponse (AuthorisedPermissionWithLookups)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorisedPermissionWithLookups>> PermissionsCreatePermissionForSystemAsyncWithHttpInfo (string dataViewName, string systemName, Permission body = null);
        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to apply the permission to</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>Task of AuthorisedPermissionWithLookups</returns>
        System.Threading.Tasks.Task<AuthorisedPermissionWithLookups> PermissionsCreatePermissionForUserAsync (string dataViewName, string systemName, int? userId, Permission body = null);

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to apply the permission to</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>Task of ApiResponse (AuthorisedPermissionWithLookups)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorisedPermissionWithLookups>> PermissionsCreatePermissionForUserAsyncWithHttpInfo (string dataViewName, string systemName, int? userId, Permission body = null);
        /// <summary>
        /// Creates a new tag from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The value of the tag to create (optional)</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> PermissionsCreateTagAsync (string dataViewName, string systemName, CreateTag body = null);

        /// <summary>
        /// Creates a new tag from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The value of the tag to create (optional)</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> PermissionsCreateTagAsyncWithHttpInfo (string dataViewName, string systemName, CreateTag body = null);
        /// <summary>
        /// Deletes the specified permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionId">The id of the permission to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PermissionsDeletePermissionAsync (string dataViewName, string systemName, int? permissionId);

        /// <summary>
        /// Deletes the specified permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionId">The id of the permission to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PermissionsDeletePermissionAsyncWithHttpInfo (string dataViewName, string systemName, int? permissionId);
        /// <summary>
        /// Deletes permissions for a given group, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> PermissionsDeletePermissionsForGroupAsync (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource);

        /// <summary>
        /// Deletes permissions for a given group, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> PermissionsDeletePermissionsForGroupAsyncWithHttpInfo (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource);
        /// <summary>
        /// Deletes permissions for a system, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> PermissionsDeletePermissionsForSystemAsync (string dataViewName, string systemName, string resourceType, string permissionType, string resource);

        /// <summary>
        /// Deletes permissions for a system, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> PermissionsDeletePermissionsForSystemAsyncWithHttpInfo (string dataViewName, string systemName, string resourceType, string permissionType, string resource);
        /// <summary>
        /// Deletes permissions for a given user, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> PermissionsDeletePermissionsForUserAsync (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource);

        /// <summary>
        /// Deletes permissions for a given user, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> PermissionsDeletePermissionsForUserAsyncWithHttpInfo (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource);
        /// <summary>
        /// Deletes the specified tag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="tagId">The id of the tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PermissionsDeleteTagAsync (string dataViewName, string systemName, int? tagId);

        /// <summary>
        /// Deletes the specified tag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="tagId">The id of the tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PermissionsDeleteTagAsyncWithHttpInfo (string dataViewName, string systemName, int? tagId);
        /// <summary>
        /// Returns details of all permission affecting a resource for a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>Task of PermissionDetailsWithLookups</returns>
        System.Threading.Tasks.Task<PermissionDetailsWithLookups> PermissionsGetPermissionDetailsForGroupAsync (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource);

        /// <summary>
        /// Returns details of all permission affecting a resource for a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>Task of ApiResponse (PermissionDetailsWithLookups)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionDetailsWithLookups>> PermissionsGetPermissionDetailsForGroupAsyncWithHttpInfo (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource);
        /// <summary>
        /// Returns details of all permission affecting a resource for a system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>Task of PermissionDetailsWithLookups</returns>
        System.Threading.Tasks.Task<PermissionDetailsWithLookups> PermissionsGetPermissionDetailsForSystemAsync (string dataViewName, string systemName, string resourceType, string permissionType, string resource);

        /// <summary>
        /// Returns details of all permission affecting a resource for a system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>Task of ApiResponse (PermissionDetailsWithLookups)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionDetailsWithLookups>> PermissionsGetPermissionDetailsForSystemAsyncWithHttpInfo (string dataViewName, string systemName, string resourceType, string permissionType, string resource);
        /// <summary>
        /// Returns details of all permission affecting a resource for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>Task of PermissionDetailsWithLookups</returns>
        System.Threading.Tasks.Task<PermissionDetailsWithLookups> PermissionsGetPermissionDetailsForUserAsync (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource);

        /// <summary>
        /// Returns details of all permission affecting a resource for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>Task of ApiResponse (PermissionDetailsWithLookups)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionDetailsWithLookups>> PermissionsGetPermissionDetailsForUserAsyncWithHttpInfo (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource);
        /// <summary>
        /// Returns a summary of permissions for a particular group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the summaries for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsResolvedPermissionSummaryWithLookups</returns>
        System.Threading.Tasks.Task<PagedResultsResolvedPermissionSummaryWithLookups> PermissionsGetPermissionSummariesForGroupAsync (string dataViewName, string systemName, int? groupId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of permissions for a particular group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the summaries for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsResolvedPermissionSummaryWithLookups)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups>> PermissionsGetPermissionSummariesForGroupAsyncWithHttpInfo (string dataViewName, string systemName, int? groupId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns a summary of permissions for a system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsResolvedPermissionSummaryWithLookups</returns>
        System.Threading.Tasks.Task<PagedResultsResolvedPermissionSummaryWithLookups> PermissionsGetPermissionSummariesForSystemAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of permissions for a system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsResolvedPermissionSummaryWithLookups)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups>> PermissionsGetPermissionSummariesForSystemAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns a summary of permissions for a particular user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the summaries for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsResolvedPermissionSummaryWithLookups</returns>
        System.Threading.Tasks.Task<PagedResultsResolvedPermissionSummaryWithLookups> PermissionsGetPermissionSummariesForUserAsync (string dataViewName, string systemName, int? userId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of permissions for a particular user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the summaries for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsResolvedPermissionSummaryWithLookups)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups>> PermissionsGetPermissionSummariesForUserAsyncWithHttpInfo (string dataViewName, string systemName, int? userId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the permissions for a particular group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsAuthorisedPermissionWithLookups</returns>
        System.Threading.Tasks.Task<PagedResultsAuthorisedPermissionWithLookups> PermissionsGetPermissionsForGroupAsync (string dataViewName, string systemName, int? groupId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the permissions for a particular group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsAuthorisedPermissionWithLookups)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsAuthorisedPermissionWithLookups>> PermissionsGetPermissionsForGroupAsyncWithHttpInfo (string dataViewName, string systemName, int? groupId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the permissions for a particular permission set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionSetId">The id of the permission set to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsAuthorisedPermissionWithLookups</returns>
        System.Threading.Tasks.Task<PagedResultsAuthorisedPermissionWithLookups> PermissionsGetPermissionsForPermissionSetAsync (string dataViewName, string systemName, int? permissionSetId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the permissions for a particular permission set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionSetId">The id of the permission set to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsAuthorisedPermissionWithLookups)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsAuthorisedPermissionWithLookups>> PermissionsGetPermissionsForPermissionSetAsyncWithHttpInfo (string dataViewName, string systemName, int? permissionSetId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the permissions for a particular system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsAuthorisedPermissionWithLookups</returns>
        System.Threading.Tasks.Task<PagedResultsAuthorisedPermissionWithLookups> PermissionsGetPermissionsForSystemAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the permissions for a particular system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsAuthorisedPermissionWithLookups)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsAuthorisedPermissionWithLookups>> PermissionsGetPermissionsForSystemAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the permissions for a particular user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsAuthorisedPermissionWithLookups</returns>
        System.Threading.Tasks.Task<PagedResultsAuthorisedPermissionWithLookups> PermissionsGetPermissionsForUserAsync (string dataViewName, string systemName, int? userId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the permissions for a particular user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsAuthorisedPermissionWithLookups)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsAuthorisedPermissionWithLookups>> PermissionsGetPermissionsForUserAsyncWithHttpInfo (string dataViewName, string systemName, int? userId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the tag for a particular system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Value, SystemName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Value, SystemName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsTag</returns>
        System.Threading.Tasks.Task<PagedResultsTag> PermissionsGetTagsAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the tag for a particular system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Value, SystemName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Value, SystemName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsTag)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsTag>> PermissionsGetTagsAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns whether the current user is authorised to access a particular resource for a particular permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionType">The type of permission to get the permissions for</param>
        /// <param name="permission">The permission to test for</param>
        /// <param name="resourceType">The type of resource to get the permissions for</param>
        /// <param name="resource">The path for the particular type of resource</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> PermissionsIsAuthorisedAsync (string dataViewName, string systemName, string permissionType, string permission, string resourceType, string resource);

        /// <summary>
        /// Returns whether the current user is authorised to access a particular resource for a particular permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionType">The type of permission to get the permissions for</param>
        /// <param name="permission">The permission to test for</param>
        /// <param name="resourceType">The type of resource to get the permissions for</param>
        /// <param name="resource">The path for the particular type of resource</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> PermissionsIsAuthorisedAsyncWithHttpInfo (string dataViewName, string systemName, string permissionType, string permission, string resourceType, string resource);
        /// <summary>
        /// Modify the specified permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionId">The permission id of the permission</param>
        /// <param name="body">The permission to modify (optional)</param>
        /// <returns>Task of AuthorisedPermissionWithLookups</returns>
        System.Threading.Tasks.Task<AuthorisedPermissionWithLookups> PermissionsModifyPermissionAsync (string dataViewName, string systemName, int? permissionId, AuthorisedPermission body = null);

        /// <summary>
        /// Modify the specified permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionId">The permission id of the permission</param>
        /// <param name="body">The permission to modify (optional)</param>
        /// <returns>Task of ApiResponse (AuthorisedPermissionWithLookups)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorisedPermissionWithLookups>> PermissionsModifyPermissionAsyncWithHttpInfo (string dataViewName, string systemName, int? permissionId, AuthorisedPermission body = null);
        /// <summary>
        /// Sets permissions for a given group, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to set the permissions for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> PermissionsSetPermissionsForGroupAsync (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null);

        /// <summary>
        /// Sets permissions for a given group, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to set the permissions for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> PermissionsSetPermissionsForGroupAsyncWithHttpInfo (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null);
        /// <summary>
        /// Sets permissions for a system, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> PermissionsSetPermissionsForSystemAsync (string dataViewName, string systemName, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null);

        /// <summary>
        /// Sets permissions for a system, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> PermissionsSetPermissionsForSystemAsyncWithHttpInfo (string dataViewName, string systemName, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null);
        /// <summary>
        /// Sets permissions for a given user, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to set the permissions for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> PermissionsSetPermissionsForUserAsync (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null);

        /// <summary>
        /// Sets permissions for a given user, for a given resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to set the permissions for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> PermissionsSetPermissionsForUserAsyncWithHttpInfo (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PermissionsApi : IPermissionsApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PermissionsApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PermissionsApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PermissionsApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the group. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to apply the permission to</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>AuthorisedPermissionWithLookups</returns>
        public AuthorisedPermissionWithLookups PermissionsCreatePermissionForGroup (string dataViewName, string systemName, int? groupId, Permission body = null)
        {
             ApiResponse<AuthorisedPermissionWithLookups> localVarResponse = PermissionsCreatePermissionForGroupWithHttpInfo(dataViewName, systemName, groupId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the group. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to apply the permission to</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>ApiResponse of AuthorisedPermissionWithLookups</returns>
        public ApiResponse< AuthorisedPermissionWithLookups > PermissionsCreatePermissionForGroupWithHttpInfo (string dataViewName, string systemName, int? groupId, Permission body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsCreatePermissionForGroup");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsCreatePermissionForGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PermissionsApi->PermissionsCreatePermissionForGroup");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Group/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsCreatePermissionForGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorisedPermissionWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorisedPermissionWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorisedPermissionWithLookups)));
        }

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the group. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to apply the permission to</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>Task of AuthorisedPermissionWithLookups</returns>
        public async System.Threading.Tasks.Task<AuthorisedPermissionWithLookups> PermissionsCreatePermissionForGroupAsync (string dataViewName, string systemName, int? groupId, Permission body = null)
        {
             ApiResponse<AuthorisedPermissionWithLookups> localVarResponse = await PermissionsCreatePermissionForGroupAsyncWithHttpInfo(dataViewName, systemName, groupId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the group. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to apply the permission to</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>Task of ApiResponse (AuthorisedPermissionWithLookups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorisedPermissionWithLookups>> PermissionsCreatePermissionForGroupAsyncWithHttpInfo (string dataViewName, string systemName, int? groupId, Permission body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsCreatePermissionForGroup");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsCreatePermissionForGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PermissionsApi->PermissionsCreatePermissionForGroup");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Group/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsCreatePermissionForGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorisedPermissionWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorisedPermissionWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorisedPermissionWithLookups)));
        }

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the system. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>AuthorisedPermissionWithLookups</returns>
        public AuthorisedPermissionWithLookups PermissionsCreatePermissionForSystem (string dataViewName, string systemName, Permission body = null)
        {
             ApiResponse<AuthorisedPermissionWithLookups> localVarResponse = PermissionsCreatePermissionForSystemWithHttpInfo(dataViewName, systemName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the system. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>ApiResponse of AuthorisedPermissionWithLookups</returns>
        public ApiResponse< AuthorisedPermissionWithLookups > PermissionsCreatePermissionForSystemWithHttpInfo (string dataViewName, string systemName, Permission body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsCreatePermissionForSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsCreatePermissionForSystem");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/System";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsCreatePermissionForSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorisedPermissionWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorisedPermissionWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorisedPermissionWithLookups)));
        }

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the system. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>Task of AuthorisedPermissionWithLookups</returns>
        public async System.Threading.Tasks.Task<AuthorisedPermissionWithLookups> PermissionsCreatePermissionForSystemAsync (string dataViewName, string systemName, Permission body = null)
        {
             ApiResponse<AuthorisedPermissionWithLookups> localVarResponse = await PermissionsCreatePermissionForSystemAsyncWithHttpInfo(dataViewName, systemName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the system. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>Task of ApiResponse (AuthorisedPermissionWithLookups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorisedPermissionWithLookups>> PermissionsCreatePermissionForSystemAsyncWithHttpInfo (string dataViewName, string systemName, Permission body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsCreatePermissionForSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsCreatePermissionForSystem");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/System";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsCreatePermissionForSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorisedPermissionWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorisedPermissionWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorisedPermissionWithLookups)));
        }

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the user. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to apply the permission to</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>AuthorisedPermissionWithLookups</returns>
        public AuthorisedPermissionWithLookups PermissionsCreatePermissionForUser (string dataViewName, string systemName, int? userId, Permission body = null)
        {
             ApiResponse<AuthorisedPermissionWithLookups> localVarResponse = PermissionsCreatePermissionForUserWithHttpInfo(dataViewName, systemName, userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the user. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to apply the permission to</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>ApiResponse of AuthorisedPermissionWithLookups</returns>
        public ApiResponse< AuthorisedPermissionWithLookups > PermissionsCreatePermissionForUserWithHttpInfo (string dataViewName, string systemName, int? userId, Permission body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsCreatePermissionForUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsCreatePermissionForUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PermissionsApi->PermissionsCreatePermissionForUser");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/User/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsCreatePermissionForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorisedPermissionWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorisedPermissionWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorisedPermissionWithLookups)));
        }

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the user. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to apply the permission to</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>Task of AuthorisedPermissionWithLookups</returns>
        public async System.Threading.Tasks.Task<AuthorisedPermissionWithLookups> PermissionsCreatePermissionForUserAsync (string dataViewName, string systemName, int? userId, Permission body = null)
        {
             ApiResponse<AuthorisedPermissionWithLookups> localVarResponse = await PermissionsCreatePermissionForUserAsyncWithHttpInfo(dataViewName, systemName, userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new permission from the given details, using the default permission set for the user. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to apply the permission to</param>
        /// <param name="body">The details of the permission to create (optional)</param>
        /// <returns>Task of ApiResponse (AuthorisedPermissionWithLookups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorisedPermissionWithLookups>> PermissionsCreatePermissionForUserAsyncWithHttpInfo (string dataViewName, string systemName, int? userId, Permission body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsCreatePermissionForUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsCreatePermissionForUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PermissionsApi->PermissionsCreatePermissionForUser");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/User/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsCreatePermissionForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorisedPermissionWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorisedPermissionWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorisedPermissionWithLookups)));
        }

        /// <summary>
        /// Creates a new tag from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The value of the tag to create (optional)</param>
        /// <returns>Tag</returns>
        public Tag PermissionsCreateTag (string dataViewName, string systemName, CreateTag body = null)
        {
             ApiResponse<Tag> localVarResponse = PermissionsCreateTagWithHttpInfo(dataViewName, systemName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new tag from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The value of the tag to create (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        public ApiResponse< Tag > PermissionsCreateTagWithHttpInfo (string dataViewName, string systemName, CreateTag body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsCreateTag");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsCreateTag");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsCreateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Tag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Creates a new tag from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The value of the tag to create (optional)</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> PermissionsCreateTagAsync (string dataViewName, string systemName, CreateTag body = null)
        {
             ApiResponse<Tag> localVarResponse = await PermissionsCreateTagAsyncWithHttpInfo(dataViewName, systemName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new tag from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The value of the tag to create (optional)</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tag>> PermissionsCreateTagAsyncWithHttpInfo (string dataViewName, string systemName, CreateTag body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsCreateTag");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsCreateTag");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsCreateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Tag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Deletes the specified permission 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionId">The id of the permission to delete</param>
        /// <returns></returns>
        public void PermissionsDeletePermission (string dataViewName, string systemName, int? permissionId)
        {
             PermissionsDeletePermissionWithHttpInfo(dataViewName, systemName, permissionId);
        }

        /// <summary>
        /// Deletes the specified permission 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionId">The id of the permission to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PermissionsDeletePermissionWithHttpInfo (string dataViewName, string systemName, int? permissionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsDeletePermission");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsDeletePermission");
            // verify the required parameter 'permissionId' is set
            if (permissionId == null)
                throw new ApiException(400, "Missing required parameter 'permissionId' when calling PermissionsApi->PermissionsDeletePermission");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/{permissionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (permissionId != null) localVarPathParams.Add("permissionId", this.Configuration.ApiClient.ParameterToString(permissionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsDeletePermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes the specified permission 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionId">The id of the permission to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PermissionsDeletePermissionAsync (string dataViewName, string systemName, int? permissionId)
        {
             await PermissionsDeletePermissionAsyncWithHttpInfo(dataViewName, systemName, permissionId);

        }

        /// <summary>
        /// Deletes the specified permission 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionId">The id of the permission to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PermissionsDeletePermissionAsyncWithHttpInfo (string dataViewName, string systemName, int? permissionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsDeletePermission");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsDeletePermission");
            // verify the required parameter 'permissionId' is set
            if (permissionId == null)
                throw new ApiException(400, "Missing required parameter 'permissionId' when calling PermissionsApi->PermissionsDeletePermission");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/{permissionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (permissionId != null) localVarPathParams.Add("permissionId", this.Configuration.ApiClient.ParameterToString(permissionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsDeletePermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes permissions for a given group, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>bool?</returns>
        public bool? PermissionsDeletePermissionsForGroup (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource)
        {
             ApiResponse<bool?> localVarResponse = PermissionsDeletePermissionsForGroupWithHttpInfo(dataViewName, systemName, groupId, resourceType, permissionType, resource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes permissions for a given group, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > PermissionsDeletePermissionsForGroupWithHttpInfo (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsDeletePermissionsForGroup");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsDeletePermissionsForGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PermissionsApi->PermissionsDeletePermissionsForGroup");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsDeletePermissionsForGroup");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsDeletePermissionsForGroup");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsDeletePermissionsForGroup");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Group/{groupId}/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsDeletePermissionsForGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Deletes permissions for a given group, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> PermissionsDeletePermissionsForGroupAsync (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource)
        {
             ApiResponse<bool?> localVarResponse = await PermissionsDeletePermissionsForGroupAsyncWithHttpInfo(dataViewName, systemName, groupId, resourceType, permissionType, resource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes permissions for a given group, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> PermissionsDeletePermissionsForGroupAsyncWithHttpInfo (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsDeletePermissionsForGroup");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsDeletePermissionsForGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PermissionsApi->PermissionsDeletePermissionsForGroup");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsDeletePermissionsForGroup");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsDeletePermissionsForGroup");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsDeletePermissionsForGroup");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Group/{groupId}/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsDeletePermissionsForGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Deletes permissions for a system, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>bool?</returns>
        public bool? PermissionsDeletePermissionsForSystem (string dataViewName, string systemName, string resourceType, string permissionType, string resource)
        {
             ApiResponse<bool?> localVarResponse = PermissionsDeletePermissionsForSystemWithHttpInfo(dataViewName, systemName, resourceType, permissionType, resource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes permissions for a system, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > PermissionsDeletePermissionsForSystemWithHttpInfo (string dataViewName, string systemName, string resourceType, string permissionType, string resource)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsDeletePermissionsForSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsDeletePermissionsForSystem");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsDeletePermissionsForSystem");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsDeletePermissionsForSystem");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsDeletePermissionsForSystem");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/System/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsDeletePermissionsForSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Deletes permissions for a system, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> PermissionsDeletePermissionsForSystemAsync (string dataViewName, string systemName, string resourceType, string permissionType, string resource)
        {
             ApiResponse<bool?> localVarResponse = await PermissionsDeletePermissionsForSystemAsyncWithHttpInfo(dataViewName, systemName, resourceType, permissionType, resource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes permissions for a system, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> PermissionsDeletePermissionsForSystemAsyncWithHttpInfo (string dataViewName, string systemName, string resourceType, string permissionType, string resource)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsDeletePermissionsForSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsDeletePermissionsForSystem");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsDeletePermissionsForSystem");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsDeletePermissionsForSystem");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsDeletePermissionsForSystem");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/System/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsDeletePermissionsForSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Deletes permissions for a given user, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>bool?</returns>
        public bool? PermissionsDeletePermissionsForUser (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource)
        {
             ApiResponse<bool?> localVarResponse = PermissionsDeletePermissionsForUserWithHttpInfo(dataViewName, systemName, userId, resourceType, permissionType, resource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes permissions for a given user, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > PermissionsDeletePermissionsForUserWithHttpInfo (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsDeletePermissionsForUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsDeletePermissionsForUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PermissionsApi->PermissionsDeletePermissionsForUser");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsDeletePermissionsForUser");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsDeletePermissionsForUser");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsDeletePermissionsForUser");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/User/{userId}/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsDeletePermissionsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Deletes permissions for a given user, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> PermissionsDeletePermissionsForUserAsync (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource)
        {
             ApiResponse<bool?> localVarResponse = await PermissionsDeletePermissionsForUserAsyncWithHttpInfo(dataViewName, systemName, userId, resourceType, permissionType, resource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes permissions for a given user, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to delete permissions for</param>
        /// <param name="resource">The resource to delete permissions for</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> PermissionsDeletePermissionsForUserAsyncWithHttpInfo (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsDeletePermissionsForUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsDeletePermissionsForUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PermissionsApi->PermissionsDeletePermissionsForUser");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsDeletePermissionsForUser");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsDeletePermissionsForUser");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsDeletePermissionsForUser");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/User/{userId}/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsDeletePermissionsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Deletes the specified tag 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="tagId">The id of the tag to delete</param>
        /// <returns></returns>
        public void PermissionsDeleteTag (string dataViewName, string systemName, int? tagId)
        {
             PermissionsDeleteTagWithHttpInfo(dataViewName, systemName, tagId);
        }

        /// <summary>
        /// Deletes the specified tag 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="tagId">The id of the tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PermissionsDeleteTagWithHttpInfo (string dataViewName, string systemName, int? tagId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsDeleteTag");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsDeleteTag");
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling PermissionsApi->PermissionsDeleteTag");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Tags/{tagId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (tagId != null) localVarPathParams.Add("tagId", this.Configuration.ApiClient.ParameterToString(tagId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsDeleteTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes the specified tag 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="tagId">The id of the tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PermissionsDeleteTagAsync (string dataViewName, string systemName, int? tagId)
        {
             await PermissionsDeleteTagAsyncWithHttpInfo(dataViewName, systemName, tagId);

        }

        /// <summary>
        /// Deletes the specified tag 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="tagId">The id of the tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PermissionsDeleteTagAsyncWithHttpInfo (string dataViewName, string systemName, int? tagId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsDeleteTag");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsDeleteTag");
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling PermissionsApi->PermissionsDeleteTag");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Tags/{tagId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (tagId != null) localVarPathParams.Add("tagId", this.Configuration.ApiClient.ParameterToString(tagId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsDeleteTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns details of all permission affecting a resource for a group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>PermissionDetailsWithLookups</returns>
        public PermissionDetailsWithLookups PermissionsGetPermissionDetailsForGroup (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource)
        {
             ApiResponse<PermissionDetailsWithLookups> localVarResponse = PermissionsGetPermissionDetailsForGroupWithHttpInfo(dataViewName, systemName, groupId, resourceType, permissionType, resource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details of all permission affecting a resource for a group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>ApiResponse of PermissionDetailsWithLookups</returns>
        public ApiResponse< PermissionDetailsWithLookups > PermissionsGetPermissionDetailsForGroupWithHttpInfo (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionDetailsForGroup");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionDetailsForGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PermissionsApi->PermissionsGetPermissionDetailsForGroup");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsGetPermissionDetailsForGroup");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsGetPermissionDetailsForGroup");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsGetPermissionDetailsForGroup");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Group/{groupId}/Detail/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionDetailsForGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionDetailsWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PermissionDetailsWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionDetailsWithLookups)));
        }

        /// <summary>
        /// Returns details of all permission affecting a resource for a group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>Task of PermissionDetailsWithLookups</returns>
        public async System.Threading.Tasks.Task<PermissionDetailsWithLookups> PermissionsGetPermissionDetailsForGroupAsync (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource)
        {
             ApiResponse<PermissionDetailsWithLookups> localVarResponse = await PermissionsGetPermissionDetailsForGroupAsyncWithHttpInfo(dataViewName, systemName, groupId, resourceType, permissionType, resource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details of all permission affecting a resource for a group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>Task of ApiResponse (PermissionDetailsWithLookups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionDetailsWithLookups>> PermissionsGetPermissionDetailsForGroupAsyncWithHttpInfo (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionDetailsForGroup");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionDetailsForGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PermissionsApi->PermissionsGetPermissionDetailsForGroup");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsGetPermissionDetailsForGroup");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsGetPermissionDetailsForGroup");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsGetPermissionDetailsForGroup");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Group/{groupId}/Detail/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionDetailsForGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionDetailsWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PermissionDetailsWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionDetailsWithLookups)));
        }

        /// <summary>
        /// Returns details of all permission affecting a resource for a system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>PermissionDetailsWithLookups</returns>
        public PermissionDetailsWithLookups PermissionsGetPermissionDetailsForSystem (string dataViewName, string systemName, string resourceType, string permissionType, string resource)
        {
             ApiResponse<PermissionDetailsWithLookups> localVarResponse = PermissionsGetPermissionDetailsForSystemWithHttpInfo(dataViewName, systemName, resourceType, permissionType, resource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details of all permission affecting a resource for a system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>ApiResponse of PermissionDetailsWithLookups</returns>
        public ApiResponse< PermissionDetailsWithLookups > PermissionsGetPermissionDetailsForSystemWithHttpInfo (string dataViewName, string systemName, string resourceType, string permissionType, string resource)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionDetailsForSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionDetailsForSystem");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsGetPermissionDetailsForSystem");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsGetPermissionDetailsForSystem");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsGetPermissionDetailsForSystem");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/System/Detail/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionDetailsForSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionDetailsWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PermissionDetailsWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionDetailsWithLookups)));
        }

        /// <summary>
        /// Returns details of all permission affecting a resource for a system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>Task of PermissionDetailsWithLookups</returns>
        public async System.Threading.Tasks.Task<PermissionDetailsWithLookups> PermissionsGetPermissionDetailsForSystemAsync (string dataViewName, string systemName, string resourceType, string permissionType, string resource)
        {
             ApiResponse<PermissionDetailsWithLookups> localVarResponse = await PermissionsGetPermissionDetailsForSystemAsyncWithHttpInfo(dataViewName, systemName, resourceType, permissionType, resource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details of all permission affecting a resource for a system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>Task of ApiResponse (PermissionDetailsWithLookups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionDetailsWithLookups>> PermissionsGetPermissionDetailsForSystemAsyncWithHttpInfo (string dataViewName, string systemName, string resourceType, string permissionType, string resource)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionDetailsForSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionDetailsForSystem");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsGetPermissionDetailsForSystem");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsGetPermissionDetailsForSystem");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsGetPermissionDetailsForSystem");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/System/Detail/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionDetailsForSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionDetailsWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PermissionDetailsWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionDetailsWithLookups)));
        }

        /// <summary>
        /// Returns details of all permission affecting a resource for a user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>PermissionDetailsWithLookups</returns>
        public PermissionDetailsWithLookups PermissionsGetPermissionDetailsForUser (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource)
        {
             ApiResponse<PermissionDetailsWithLookups> localVarResponse = PermissionsGetPermissionDetailsForUserWithHttpInfo(dataViewName, systemName, userId, resourceType, permissionType, resource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details of all permission affecting a resource for a user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>ApiResponse of PermissionDetailsWithLookups</returns>
        public ApiResponse< PermissionDetailsWithLookups > PermissionsGetPermissionDetailsForUserWithHttpInfo (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionDetailsForUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionDetailsForUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PermissionsApi->PermissionsGetPermissionDetailsForUser");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsGetPermissionDetailsForUser");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsGetPermissionDetailsForUser");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsGetPermissionDetailsForUser");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/User/{userId}/Detail/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionDetailsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionDetailsWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PermissionDetailsWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionDetailsWithLookups)));
        }

        /// <summary>
        /// Returns details of all permission affecting a resource for a user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>Task of PermissionDetailsWithLookups</returns>
        public async System.Threading.Tasks.Task<PermissionDetailsWithLookups> PermissionsGetPermissionDetailsForUserAsync (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource)
        {
             ApiResponse<PermissionDetailsWithLookups> localVarResponse = await PermissionsGetPermissionDetailsForUserAsyncWithHttpInfo(dataViewName, systemName, userId, resourceType, permissionType, resource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details of all permission affecting a resource for a user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permission details for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to get permission details for</param>
        /// <param name="resource">The resource to get permission details for</param>
        /// <returns>Task of ApiResponse (PermissionDetailsWithLookups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionDetailsWithLookups>> PermissionsGetPermissionDetailsForUserAsyncWithHttpInfo (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionDetailsForUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionDetailsForUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PermissionsApi->PermissionsGetPermissionDetailsForUser");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsGetPermissionDetailsForUser");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsGetPermissionDetailsForUser");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsGetPermissionDetailsForUser");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/User/{userId}/Detail/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionDetailsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionDetailsWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PermissionDetailsWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionDetailsWithLookups)));
        }

        /// <summary>
        /// Returns a summary of permissions for a particular group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the summaries for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsResolvedPermissionSummaryWithLookups</returns>
        public PagedResultsResolvedPermissionSummaryWithLookups PermissionsGetPermissionSummariesForGroup (string dataViewName, string systemName, int? groupId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups> localVarResponse = PermissionsGetPermissionSummariesForGroupWithHttpInfo(dataViewName, systemName, groupId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a summary of permissions for a particular group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the summaries for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsResolvedPermissionSummaryWithLookups</returns>
        public ApiResponse< PagedResultsResolvedPermissionSummaryWithLookups > PermissionsGetPermissionSummariesForGroupWithHttpInfo (string dataViewName, string systemName, int? groupId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionSummariesForGroup");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionSummariesForGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PermissionsApi->PermissionsGetPermissionSummariesForGroup");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Group/{groupId}/Summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionSummariesForGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsResolvedPermissionSummaryWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsResolvedPermissionSummaryWithLookups)));
        }

        /// <summary>
        /// Returns a summary of permissions for a particular group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the summaries for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsResolvedPermissionSummaryWithLookups</returns>
        public async System.Threading.Tasks.Task<PagedResultsResolvedPermissionSummaryWithLookups> PermissionsGetPermissionSummariesForGroupAsync (string dataViewName, string systemName, int? groupId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups> localVarResponse = await PermissionsGetPermissionSummariesForGroupAsyncWithHttpInfo(dataViewName, systemName, groupId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a summary of permissions for a particular group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the summaries for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsResolvedPermissionSummaryWithLookups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups>> PermissionsGetPermissionSummariesForGroupAsyncWithHttpInfo (string dataViewName, string systemName, int? groupId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionSummariesForGroup");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionSummariesForGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PermissionsApi->PermissionsGetPermissionSummariesForGroup");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Group/{groupId}/Summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionSummariesForGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsResolvedPermissionSummaryWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsResolvedPermissionSummaryWithLookups)));
        }

        /// <summary>
        /// Returns a summary of permissions for a system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsResolvedPermissionSummaryWithLookups</returns>
        public PagedResultsResolvedPermissionSummaryWithLookups PermissionsGetPermissionSummariesForSystem (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups> localVarResponse = PermissionsGetPermissionSummariesForSystemWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a summary of permissions for a system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsResolvedPermissionSummaryWithLookups</returns>
        public ApiResponse< PagedResultsResolvedPermissionSummaryWithLookups > PermissionsGetPermissionSummariesForSystemWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionSummariesForSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionSummariesForSystem");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/System/Summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionSummariesForSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsResolvedPermissionSummaryWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsResolvedPermissionSummaryWithLookups)));
        }

        /// <summary>
        /// Returns a summary of permissions for a system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsResolvedPermissionSummaryWithLookups</returns>
        public async System.Threading.Tasks.Task<PagedResultsResolvedPermissionSummaryWithLookups> PermissionsGetPermissionSummariesForSystemAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups> localVarResponse = await PermissionsGetPermissionSummariesForSystemAsyncWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a summary of permissions for a system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsResolvedPermissionSummaryWithLookups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups>> PermissionsGetPermissionSummariesForSystemAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionSummariesForSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionSummariesForSystem");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/System/Summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionSummariesForSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsResolvedPermissionSummaryWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsResolvedPermissionSummaryWithLookups)));
        }

        /// <summary>
        /// Returns a summary of permissions for a particular user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the summaries for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsResolvedPermissionSummaryWithLookups</returns>
        public PagedResultsResolvedPermissionSummaryWithLookups PermissionsGetPermissionSummariesForUser (string dataViewName, string systemName, int? userId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups> localVarResponse = PermissionsGetPermissionSummariesForUserWithHttpInfo(dataViewName, systemName, userId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a summary of permissions for a particular user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the summaries for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsResolvedPermissionSummaryWithLookups</returns>
        public ApiResponse< PagedResultsResolvedPermissionSummaryWithLookups > PermissionsGetPermissionSummariesForUserWithHttpInfo (string dataViewName, string systemName, int? userId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionSummariesForUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionSummariesForUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PermissionsApi->PermissionsGetPermissionSummariesForUser");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/User/{userId}/Summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionSummariesForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsResolvedPermissionSummaryWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsResolvedPermissionSummaryWithLookups)));
        }

        /// <summary>
        /// Returns a summary of permissions for a particular user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the summaries for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsResolvedPermissionSummaryWithLookups</returns>
        public async System.Threading.Tasks.Task<PagedResultsResolvedPermissionSummaryWithLookups> PermissionsGetPermissionSummariesForUserAsync (string dataViewName, string systemName, int? userId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups> localVarResponse = await PermissionsGetPermissionSummariesForUserAsyncWithHttpInfo(dataViewName, systemName, userId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a summary of permissions for a particular user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the summaries for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsResolvedPermissionSummaryWithLookups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups>> PermissionsGetPermissionSummariesForUserAsyncWithHttpInfo (string dataViewName, string systemName, int? userId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionSummariesForUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionSummariesForUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PermissionsApi->PermissionsGetPermissionSummariesForUser");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/User/{userId}/Summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionSummariesForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsResolvedPermissionSummaryWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsResolvedPermissionSummaryWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsResolvedPermissionSummaryWithLookups)));
        }

        /// <summary>
        /// Returns the permissions for a particular group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsAuthorisedPermissionWithLookups</returns>
        public PagedResultsAuthorisedPermissionWithLookups PermissionsGetPermissionsForGroup (string dataViewName, string systemName, int? groupId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsAuthorisedPermissionWithLookups> localVarResponse = PermissionsGetPermissionsForGroupWithHttpInfo(dataViewName, systemName, groupId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the permissions for a particular group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsAuthorisedPermissionWithLookups</returns>
        public ApiResponse< PagedResultsAuthorisedPermissionWithLookups > PermissionsGetPermissionsForGroupWithHttpInfo (string dataViewName, string systemName, int? groupId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionsForGroup");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionsForGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PermissionsApi->PermissionsGetPermissionsForGroup");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Group/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionsForGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsAuthorisedPermissionWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsAuthorisedPermissionWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsAuthorisedPermissionWithLookups)));
        }

        /// <summary>
        /// Returns the permissions for a particular group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsAuthorisedPermissionWithLookups</returns>
        public async System.Threading.Tasks.Task<PagedResultsAuthorisedPermissionWithLookups> PermissionsGetPermissionsForGroupAsync (string dataViewName, string systemName, int? groupId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsAuthorisedPermissionWithLookups> localVarResponse = await PermissionsGetPermissionsForGroupAsyncWithHttpInfo(dataViewName, systemName, groupId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the permissions for a particular group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsAuthorisedPermissionWithLookups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsAuthorisedPermissionWithLookups>> PermissionsGetPermissionsForGroupAsyncWithHttpInfo (string dataViewName, string systemName, int? groupId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionsForGroup");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionsForGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PermissionsApi->PermissionsGetPermissionsForGroup");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Group/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionsForGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsAuthorisedPermissionWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsAuthorisedPermissionWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsAuthorisedPermissionWithLookups)));
        }

        /// <summary>
        /// Returns the permissions for a particular permission set 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionSetId">The id of the permission set to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsAuthorisedPermissionWithLookups</returns>
        public PagedResultsAuthorisedPermissionWithLookups PermissionsGetPermissionsForPermissionSet (string dataViewName, string systemName, int? permissionSetId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsAuthorisedPermissionWithLookups> localVarResponse = PermissionsGetPermissionsForPermissionSetWithHttpInfo(dataViewName, systemName, permissionSetId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the permissions for a particular permission set 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionSetId">The id of the permission set to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsAuthorisedPermissionWithLookups</returns>
        public ApiResponse< PagedResultsAuthorisedPermissionWithLookups > PermissionsGetPermissionsForPermissionSetWithHttpInfo (string dataViewName, string systemName, int? permissionSetId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionsForPermissionSet");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionsForPermissionSet");
            // verify the required parameter 'permissionSetId' is set
            if (permissionSetId == null)
                throw new ApiException(400, "Missing required parameter 'permissionSetId' when calling PermissionsApi->PermissionsGetPermissionsForPermissionSet");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/PermissionSet/{permissionSetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (permissionSetId != null) localVarPathParams.Add("permissionSetId", this.Configuration.ApiClient.ParameterToString(permissionSetId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionsForPermissionSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsAuthorisedPermissionWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsAuthorisedPermissionWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsAuthorisedPermissionWithLookups)));
        }

        /// <summary>
        /// Returns the permissions for a particular permission set 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionSetId">The id of the permission set to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsAuthorisedPermissionWithLookups</returns>
        public async System.Threading.Tasks.Task<PagedResultsAuthorisedPermissionWithLookups> PermissionsGetPermissionsForPermissionSetAsync (string dataViewName, string systemName, int? permissionSetId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsAuthorisedPermissionWithLookups> localVarResponse = await PermissionsGetPermissionsForPermissionSetAsyncWithHttpInfo(dataViewName, systemName, permissionSetId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the permissions for a particular permission set 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionSetId">The id of the permission set to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsAuthorisedPermissionWithLookups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsAuthorisedPermissionWithLookups>> PermissionsGetPermissionsForPermissionSetAsyncWithHttpInfo (string dataViewName, string systemName, int? permissionSetId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionsForPermissionSet");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionsForPermissionSet");
            // verify the required parameter 'permissionSetId' is set
            if (permissionSetId == null)
                throw new ApiException(400, "Missing required parameter 'permissionSetId' when calling PermissionsApi->PermissionsGetPermissionsForPermissionSet");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/PermissionSet/{permissionSetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (permissionSetId != null) localVarPathParams.Add("permissionSetId", this.Configuration.ApiClient.ParameterToString(permissionSetId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionsForPermissionSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsAuthorisedPermissionWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsAuthorisedPermissionWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsAuthorisedPermissionWithLookups)));
        }

        /// <summary>
        /// Returns the permissions for a particular system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsAuthorisedPermissionWithLookups</returns>
        public PagedResultsAuthorisedPermissionWithLookups PermissionsGetPermissionsForSystem (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsAuthorisedPermissionWithLookups> localVarResponse = PermissionsGetPermissionsForSystemWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the permissions for a particular system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsAuthorisedPermissionWithLookups</returns>
        public ApiResponse< PagedResultsAuthorisedPermissionWithLookups > PermissionsGetPermissionsForSystemWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionsForSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionsForSystem");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/System";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionsForSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsAuthorisedPermissionWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsAuthorisedPermissionWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsAuthorisedPermissionWithLookups)));
        }

        /// <summary>
        /// Returns the permissions for a particular system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsAuthorisedPermissionWithLookups</returns>
        public async System.Threading.Tasks.Task<PagedResultsAuthorisedPermissionWithLookups> PermissionsGetPermissionsForSystemAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsAuthorisedPermissionWithLookups> localVarResponse = await PermissionsGetPermissionsForSystemAsyncWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the permissions for a particular system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsAuthorisedPermissionWithLookups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsAuthorisedPermissionWithLookups>> PermissionsGetPermissionsForSystemAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionsForSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionsForSystem");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/System";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionsForSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsAuthorisedPermissionWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsAuthorisedPermissionWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsAuthorisedPermissionWithLookups)));
        }

        /// <summary>
        /// Returns the permissions for a particular user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsAuthorisedPermissionWithLookups</returns>
        public PagedResultsAuthorisedPermissionWithLookups PermissionsGetPermissionsForUser (string dataViewName, string systemName, int? userId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsAuthorisedPermissionWithLookups> localVarResponse = PermissionsGetPermissionsForUserWithHttpInfo(dataViewName, systemName, userId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the permissions for a particular user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsAuthorisedPermissionWithLookups</returns>
        public ApiResponse< PagedResultsAuthorisedPermissionWithLookups > PermissionsGetPermissionsForUserWithHttpInfo (string dataViewName, string systemName, int? userId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionsForUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionsForUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PermissionsApi->PermissionsGetPermissionsForUser");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/User/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsAuthorisedPermissionWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsAuthorisedPermissionWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsAuthorisedPermissionWithLookups)));
        }

        /// <summary>
        /// Returns the permissions for a particular user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsAuthorisedPermissionWithLookups</returns>
        public async System.Threading.Tasks.Task<PagedResultsAuthorisedPermissionWithLookups> PermissionsGetPermissionsForUserAsync (string dataViewName, string systemName, int? userId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsAuthorisedPermissionWithLookups> localVarResponse = await PermissionsGetPermissionsForUserAsyncWithHttpInfo(dataViewName, systemName, userId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the permissions for a particular user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to get the permissions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are ResourceType, Resource, PermissionType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsAuthorisedPermissionWithLookups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsAuthorisedPermissionWithLookups>> PermissionsGetPermissionsForUserAsyncWithHttpInfo (string dataViewName, string systemName, int? userId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetPermissionsForUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetPermissionsForUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PermissionsApi->PermissionsGetPermissionsForUser");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/User/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetPermissionsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsAuthorisedPermissionWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsAuthorisedPermissionWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsAuthorisedPermissionWithLookups)));
        }

        /// <summary>
        /// Returns the tag for a particular system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Value, SystemName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Value, SystemName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsTag</returns>
        public PagedResultsTag PermissionsGetTags (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsTag> localVarResponse = PermissionsGetTagsWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the tag for a particular system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Value, SystemName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Value, SystemName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsTag</returns>
        public ApiResponse< PagedResultsTag > PermissionsGetTagsWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetTags");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetTags");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsTag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsTag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsTag)));
        }

        /// <summary>
        /// Returns the tag for a particular system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Value, SystemName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Value, SystemName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsTag</returns>
        public async System.Threading.Tasks.Task<PagedResultsTag> PermissionsGetTagsAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsTag> localVarResponse = await PermissionsGetTagsAsyncWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the tag for a particular system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Value, SystemName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Value, SystemName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsTag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsTag>> PermissionsGetTagsAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsGetTags");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsGetTags");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsGetTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsTag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsTag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsTag)));
        }

        /// <summary>
        /// Returns whether the current user is authorised to access a particular resource for a particular permission 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionType">The type of permission to get the permissions for</param>
        /// <param name="permission">The permission to test for</param>
        /// <param name="resourceType">The type of resource to get the permissions for</param>
        /// <param name="resource">The path for the particular type of resource</param>
        /// <returns>bool?</returns>
        public bool? PermissionsIsAuthorised (string dataViewName, string systemName, string permissionType, string permission, string resourceType, string resource)
        {
             ApiResponse<bool?> localVarResponse = PermissionsIsAuthorisedWithHttpInfo(dataViewName, systemName, permissionType, permission, resourceType, resource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns whether the current user is authorised to access a particular resource for a particular permission 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionType">The type of permission to get the permissions for</param>
        /// <param name="permission">The permission to test for</param>
        /// <param name="resourceType">The type of resource to get the permissions for</param>
        /// <param name="resource">The path for the particular type of resource</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > PermissionsIsAuthorisedWithHttpInfo (string dataViewName, string systemName, string permissionType, string permission, string resourceType, string resource)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsIsAuthorised");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsIsAuthorised");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsIsAuthorised");
            // verify the required parameter 'permission' is set
            if (permission == null)
                throw new ApiException(400, "Missing required parameter 'permission' when calling PermissionsApi->PermissionsIsAuthorised");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsIsAuthorised");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsIsAuthorised");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/{permissionType}/{permission}/{resourceType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (permission != null) localVarPathParams.Add("permission", this.Configuration.ApiClient.ParameterToString(permission)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsIsAuthorised", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Returns whether the current user is authorised to access a particular resource for a particular permission 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionType">The type of permission to get the permissions for</param>
        /// <param name="permission">The permission to test for</param>
        /// <param name="resourceType">The type of resource to get the permissions for</param>
        /// <param name="resource">The path for the particular type of resource</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> PermissionsIsAuthorisedAsync (string dataViewName, string systemName, string permissionType, string permission, string resourceType, string resource)
        {
             ApiResponse<bool?> localVarResponse = await PermissionsIsAuthorisedAsyncWithHttpInfo(dataViewName, systemName, permissionType, permission, resourceType, resource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns whether the current user is authorised to access a particular resource for a particular permission 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionType">The type of permission to get the permissions for</param>
        /// <param name="permission">The permission to test for</param>
        /// <param name="resourceType">The type of resource to get the permissions for</param>
        /// <param name="resource">The path for the particular type of resource</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> PermissionsIsAuthorisedAsyncWithHttpInfo (string dataViewName, string systemName, string permissionType, string permission, string resourceType, string resource)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsIsAuthorised");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsIsAuthorised");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsIsAuthorised");
            // verify the required parameter 'permission' is set
            if (permission == null)
                throw new ApiException(400, "Missing required parameter 'permission' when calling PermissionsApi->PermissionsIsAuthorised");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsIsAuthorised");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsIsAuthorised");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/{permissionType}/{permission}/{resourceType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (permission != null) localVarPathParams.Add("permission", this.Configuration.ApiClient.ParameterToString(permission)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsIsAuthorised", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Modify the specified permission 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionId">The permission id of the permission</param>
        /// <param name="body">The permission to modify (optional)</param>
        /// <returns>AuthorisedPermissionWithLookups</returns>
        public AuthorisedPermissionWithLookups PermissionsModifyPermission (string dataViewName, string systemName, int? permissionId, AuthorisedPermission body = null)
        {
             ApiResponse<AuthorisedPermissionWithLookups> localVarResponse = PermissionsModifyPermissionWithHttpInfo(dataViewName, systemName, permissionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify the specified permission 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionId">The permission id of the permission</param>
        /// <param name="body">The permission to modify (optional)</param>
        /// <returns>ApiResponse of AuthorisedPermissionWithLookups</returns>
        public ApiResponse< AuthorisedPermissionWithLookups > PermissionsModifyPermissionWithHttpInfo (string dataViewName, string systemName, int? permissionId, AuthorisedPermission body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsModifyPermission");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsModifyPermission");
            // verify the required parameter 'permissionId' is set
            if (permissionId == null)
                throw new ApiException(400, "Missing required parameter 'permissionId' when calling PermissionsApi->PermissionsModifyPermission");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/{permissionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (permissionId != null) localVarPathParams.Add("permissionId", this.Configuration.ApiClient.ParameterToString(permissionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsModifyPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorisedPermissionWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorisedPermissionWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorisedPermissionWithLookups)));
        }

        /// <summary>
        /// Modify the specified permission 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionId">The permission id of the permission</param>
        /// <param name="body">The permission to modify (optional)</param>
        /// <returns>Task of AuthorisedPermissionWithLookups</returns>
        public async System.Threading.Tasks.Task<AuthorisedPermissionWithLookups> PermissionsModifyPermissionAsync (string dataViewName, string systemName, int? permissionId, AuthorisedPermission body = null)
        {
             ApiResponse<AuthorisedPermissionWithLookups> localVarResponse = await PermissionsModifyPermissionAsyncWithHttpInfo(dataViewName, systemName, permissionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify the specified permission 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="permissionId">The permission id of the permission</param>
        /// <param name="body">The permission to modify (optional)</param>
        /// <returns>Task of ApiResponse (AuthorisedPermissionWithLookups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorisedPermissionWithLookups>> PermissionsModifyPermissionAsyncWithHttpInfo (string dataViewName, string systemName, int? permissionId, AuthorisedPermission body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsModifyPermission");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsModifyPermission");
            // verify the required parameter 'permissionId' is set
            if (permissionId == null)
                throw new ApiException(400, "Missing required parameter 'permissionId' when calling PermissionsApi->PermissionsModifyPermission");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/{permissionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (permissionId != null) localVarPathParams.Add("permissionId", this.Configuration.ApiClient.ParameterToString(permissionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsModifyPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorisedPermissionWithLookups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorisedPermissionWithLookups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorisedPermissionWithLookups)));
        }

        /// <summary>
        /// Sets permissions for a given group, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to set the permissions for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>bool?</returns>
        public bool? PermissionsSetPermissionsForGroup (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null)
        {
             ApiResponse<bool?> localVarResponse = PermissionsSetPermissionsForGroupWithHttpInfo(dataViewName, systemName, groupId, resourceType, permissionType, resource, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets permissions for a given group, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to set the permissions for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > PermissionsSetPermissionsForGroupWithHttpInfo (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsSetPermissionsForGroup");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsSetPermissionsForGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PermissionsApi->PermissionsSetPermissionsForGroup");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsSetPermissionsForGroup");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsSetPermissionsForGroup");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsSetPermissionsForGroup");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Group/{groupId}/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsSetPermissionsForGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Sets permissions for a given group, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to set the permissions for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> PermissionsSetPermissionsForGroupAsync (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null)
        {
             ApiResponse<bool?> localVarResponse = await PermissionsSetPermissionsForGroupAsyncWithHttpInfo(dataViewName, systemName, groupId, resourceType, permissionType, resource, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets permissions for a given group, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="groupId">The id of the group to set the permissions for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> PermissionsSetPermissionsForGroupAsyncWithHttpInfo (string dataViewName, string systemName, int? groupId, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsSetPermissionsForGroup");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsSetPermissionsForGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling PermissionsApi->PermissionsSetPermissionsForGroup");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsSetPermissionsForGroup");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsSetPermissionsForGroup");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsSetPermissionsForGroup");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/Group/{groupId}/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsSetPermissionsForGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Sets permissions for a system, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>bool?</returns>
        public bool? PermissionsSetPermissionsForSystem (string dataViewName, string systemName, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null)
        {
             ApiResponse<bool?> localVarResponse = PermissionsSetPermissionsForSystemWithHttpInfo(dataViewName, systemName, resourceType, permissionType, resource, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets permissions for a system, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > PermissionsSetPermissionsForSystemWithHttpInfo (string dataViewName, string systemName, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsSetPermissionsForSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsSetPermissionsForSystem");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsSetPermissionsForSystem");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsSetPermissionsForSystem");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsSetPermissionsForSystem");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/System/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsSetPermissionsForSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Sets permissions for a system, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> PermissionsSetPermissionsForSystemAsync (string dataViewName, string systemName, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null)
        {
             ApiResponse<bool?> localVarResponse = await PermissionsSetPermissionsForSystemAsyncWithHttpInfo(dataViewName, systemName, resourceType, permissionType, resource, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets permissions for a system, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> PermissionsSetPermissionsForSystemAsyncWithHttpInfo (string dataViewName, string systemName, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsSetPermissionsForSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsSetPermissionsForSystem");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsSetPermissionsForSystem");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsSetPermissionsForSystem");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsSetPermissionsForSystem");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/System/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsSetPermissionsForSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Sets permissions for a given user, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to set the permissions for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>bool?</returns>
        public bool? PermissionsSetPermissionsForUser (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null)
        {
             ApiResponse<bool?> localVarResponse = PermissionsSetPermissionsForUserWithHttpInfo(dataViewName, systemName, userId, resourceType, permissionType, resource, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets permissions for a given user, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to set the permissions for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > PermissionsSetPermissionsForUserWithHttpInfo (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsSetPermissionsForUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsSetPermissionsForUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PermissionsApi->PermissionsSetPermissionsForUser");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsSetPermissionsForUser");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsSetPermissionsForUser");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsSetPermissionsForUser");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/User/{userId}/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsSetPermissionsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Sets permissions for a given user, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to set the permissions for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> PermissionsSetPermissionsForUserAsync (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null)
        {
             ApiResponse<bool?> localVarResponse = await PermissionsSetPermissionsForUserAsyncWithHttpInfo(dataViewName, systemName, userId, resourceType, permissionType, resource, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets permissions for a given user, for a given resource 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="userId">The id of the user to set the permissions for</param>
        /// <param name="resourceType">The resourceType of the resource</param>
        /// <param name="permissionType">The permissionType to set permissions for</param>
        /// <param name="resource">The resource to set permissions for</param>
        /// <param name="body">The permission values to set (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> PermissionsSetPermissionsForUserAsyncWithHttpInfo (string dataViewName, string systemName, int? userId, string resourceType, string permissionType, string resource, List<PermissionPiece> body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PermissionsApi->PermissionsSetPermissionsForUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PermissionsApi->PermissionsSetPermissionsForUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PermissionsApi->PermissionsSetPermissionsForUser");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling PermissionsApi->PermissionsSetPermissionsForUser");
            // verify the required parameter 'permissionType' is set
            if (permissionType == null)
                throw new ApiException(400, "Missing required parameter 'permissionType' when calling PermissionsApi->PermissionsSetPermissionsForUser");
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new ApiException(400, "Missing required parameter 'resource' when calling PermissionsApi->PermissionsSetPermissionsForUser");

            var localVarPath = "./{dataViewName}/Permissions/{systemName}/User/{userId}/{resourceType}/{permissionType}/{resource}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter
            if (permissionType != null) localVarPathParams.Add("permissionType", this.Configuration.ApiClient.ParameterToString(permissionType)); // path parameter
            if (resource != null) localVarPathParams.Add("resource", this.Configuration.ApiClient.ParameterToString(resource)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionsSetPermissionsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

    }
}
