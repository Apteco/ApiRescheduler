/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IStaticResourcesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Requires OrbitAdmin: Returns a resource file (such as an image file) for the given category and system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to delete the resource for</param>
        /// <param name="resourceCategory">The category of the resource to delete</param>
        /// <param name="resourceId">The resourceId of the resource to delete</param>
        /// <returns></returns>
        void StaticResourcesDeleteStaticResourceFile (string dataViewName, string resourceCategory, string resourceId);

        /// <summary>
        /// Requires OrbitAdmin: Returns a resource file (such as an image file) for the given category and system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to delete the resource for</param>
        /// <param name="resourceCategory">The category of the resource to delete</param>
        /// <param name="resourceId">The resourceId of the resource to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StaticResourcesDeleteStaticResourceFileWithHttpInfo (string dataViewName, string resourceCategory, string resourceId);
        /// <summary>
        /// Requires OrbitAdmin: Returns a list of categories of resource files for the given system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName"></param>
        /// <param name="systemName">The name of the system to list resource categories for (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsResourceCategorySummary</returns>
        PagedResultsResourceCategorySummary StaticResourcesGetStaticResourceCategories (string dataViewName, string systemName = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Requires OrbitAdmin: Returns a list of categories of resource files for the given system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName"></param>
        /// <param name="systemName">The name of the system to list resource categories for (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsResourceCategorySummary</returns>
        ApiResponse<PagedResultsResourceCategorySummary> StaticResourcesGetStaticResourceCategoriesWithHttpInfo (string dataViewName, string systemName = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Requires OrbitAdmin: Returns details of a resource category for a given category name and system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to list resources</param>
        /// <param name="resourceCategory">The category to return the details for</param>
        /// <returns>ResourceCategoryDetails</returns>
        ResourceCategoryDetails StaticResourcesGetStaticResourceCategory (string dataViewName, string resourceCategory);

        /// <summary>
        /// Requires OrbitAdmin: Returns details of a resource category for a given category name and system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to list resources</param>
        /// <param name="resourceCategory">The category to return the details for</param>
        /// <returns>ApiResponse of ResourceCategoryDetails</returns>
        ApiResponse<ResourceCategoryDetails> StaticResourcesGetStaticResourceCategoryWithHttpInfo (string dataViewName, string resourceCategory);
        /// <summary>
        /// Returns a resource file (such as an image file) for the given category and system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <param name="resourceId">The id of the resource to return</param>
        /// <param name="resourceName">The name of the resource to return</param>
        /// <returns></returns>
        void StaticResourcesGetStaticResourceFile (string dataViewName, string resourceCategory, string resourceId, string resourceName);

        /// <summary>
        /// Returns a resource file (such as an image file) for the given category and system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <param name="resourceId">The id of the resource to return</param>
        /// <param name="resourceName">The name of the resource to return</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StaticResourcesGetStaticResourceFileWithHttpInfo (string dataViewName, string resourceCategory, string resourceId, string resourceName);
        /// <summary>
        /// Requires OrbitAdmin: Returns the details of a resource file (such as an image file) for the given category and system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <param name="resourceId">The id of the resource to return</param>
        /// <param name="resourceName">The name of the resource to return</param>
        /// <returns>ResourceDetails</returns>
        ResourceDetails StaticResourcesGetStaticResourceFileDetails (string dataViewName, string resourceCategory, string resourceId, string resourceName);

        /// <summary>
        /// Requires OrbitAdmin: Returns the details of a resource file (such as an image file) for the given category and system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <param name="resourceId">The id of the resource to return</param>
        /// <param name="resourceName">The name of the resource to return</param>
        /// <returns>ApiResponse of ResourceDetails</returns>
        ApiResponse<ResourceDetails> StaticResourcesGetStaticResourceFileDetailsWithHttpInfo (string dataViewName, string resourceCategory, string resourceId, string resourceName);
        /// <summary>
        /// Returns a list of details for the resource files (such as image files) in the given resource category and system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to list resources</param>
        /// <param name="resourceCategory">The category to return resources for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Size, LastModified. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Size, LastModified. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsResourceSummary</returns>
        PagedResultsResourceSummary StaticResourcesGetStaticResourcesForCategory (string dataViewName, string resourceCategory, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a list of details for the resource files (such as image files) in the given resource category and system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to list resources</param>
        /// <param name="resourceCategory">The category to return resources for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Size, LastModified. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Size, LastModified. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsResourceSummary</returns>
        ApiResponse<PagedResultsResourceSummary> StaticResourcesGetStaticResourcesForCategoryWithHttpInfo (string dataViewName, string resourceCategory, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Requires OrbitAdmin: Uploads a resource file (such as an image file) for the given category and system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <returns></returns>
        void StaticResourcesPostStaticResourceFile (byte[] file, string dataViewName, string resourceCategory);

        /// <summary>
        /// Requires OrbitAdmin: Uploads a resource file (such as an image file) for the given category and system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StaticResourcesPostStaticResourceFileWithHttpInfo (byte[] file, string dataViewName, string resourceCategory);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Requires OrbitAdmin: Returns a resource file (such as an image file) for the given category and system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to delete the resource for</param>
        /// <param name="resourceCategory">The category of the resource to delete</param>
        /// <param name="resourceId">The resourceId of the resource to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StaticResourcesDeleteStaticResourceFileAsync (string dataViewName, string resourceCategory, string resourceId);

        /// <summary>
        /// Requires OrbitAdmin: Returns a resource file (such as an image file) for the given category and system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to delete the resource for</param>
        /// <param name="resourceCategory">The category of the resource to delete</param>
        /// <param name="resourceId">The resourceId of the resource to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StaticResourcesDeleteStaticResourceFileAsyncWithHttpInfo (string dataViewName, string resourceCategory, string resourceId);
        /// <summary>
        /// Requires OrbitAdmin: Returns a list of categories of resource files for the given system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName"></param>
        /// <param name="systemName">The name of the system to list resource categories for (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsResourceCategorySummary</returns>
        System.Threading.Tasks.Task<PagedResultsResourceCategorySummary> StaticResourcesGetStaticResourceCategoriesAsync (string dataViewName, string systemName = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Requires OrbitAdmin: Returns a list of categories of resource files for the given system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName"></param>
        /// <param name="systemName">The name of the system to list resource categories for (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsResourceCategorySummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsResourceCategorySummary>> StaticResourcesGetStaticResourceCategoriesAsyncWithHttpInfo (string dataViewName, string systemName = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Requires OrbitAdmin: Returns details of a resource category for a given category name and system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to list resources</param>
        /// <param name="resourceCategory">The category to return the details for</param>
        /// <returns>Task of ResourceCategoryDetails</returns>
        System.Threading.Tasks.Task<ResourceCategoryDetails> StaticResourcesGetStaticResourceCategoryAsync (string dataViewName, string resourceCategory);

        /// <summary>
        /// Requires OrbitAdmin: Returns details of a resource category for a given category name and system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to list resources</param>
        /// <param name="resourceCategory">The category to return the details for</param>
        /// <returns>Task of ApiResponse (ResourceCategoryDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceCategoryDetails>> StaticResourcesGetStaticResourceCategoryAsyncWithHttpInfo (string dataViewName, string resourceCategory);
        /// <summary>
        /// Returns a resource file (such as an image file) for the given category and system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <param name="resourceId">The id of the resource to return</param>
        /// <param name="resourceName">The name of the resource to return</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StaticResourcesGetStaticResourceFileAsync (string dataViewName, string resourceCategory, string resourceId, string resourceName);

        /// <summary>
        /// Returns a resource file (such as an image file) for the given category and system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <param name="resourceId">The id of the resource to return</param>
        /// <param name="resourceName">The name of the resource to return</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StaticResourcesGetStaticResourceFileAsyncWithHttpInfo (string dataViewName, string resourceCategory, string resourceId, string resourceName);
        /// <summary>
        /// Requires OrbitAdmin: Returns the details of a resource file (such as an image file) for the given category and system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <param name="resourceId">The id of the resource to return</param>
        /// <param name="resourceName">The name of the resource to return</param>
        /// <returns>Task of ResourceDetails</returns>
        System.Threading.Tasks.Task<ResourceDetails> StaticResourcesGetStaticResourceFileDetailsAsync (string dataViewName, string resourceCategory, string resourceId, string resourceName);

        /// <summary>
        /// Requires OrbitAdmin: Returns the details of a resource file (such as an image file) for the given category and system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <param name="resourceId">The id of the resource to return</param>
        /// <param name="resourceName">The name of the resource to return</param>
        /// <returns>Task of ApiResponse (ResourceDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceDetails>> StaticResourcesGetStaticResourceFileDetailsAsyncWithHttpInfo (string dataViewName, string resourceCategory, string resourceId, string resourceName);
        /// <summary>
        /// Returns a list of details for the resource files (such as image files) in the given resource category and system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to list resources</param>
        /// <param name="resourceCategory">The category to return resources for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Size, LastModified. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Size, LastModified. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsResourceSummary</returns>
        System.Threading.Tasks.Task<PagedResultsResourceSummary> StaticResourcesGetStaticResourcesForCategoryAsync (string dataViewName, string resourceCategory, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a list of details for the resource files (such as image files) in the given resource category and system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to list resources</param>
        /// <param name="resourceCategory">The category to return resources for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Size, LastModified. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Size, LastModified. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsResourceSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsResourceSummary>> StaticResourcesGetStaticResourcesForCategoryAsyncWithHttpInfo (string dataViewName, string resourceCategory, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Requires OrbitAdmin: Uploads a resource file (such as an image file) for the given category and system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StaticResourcesPostStaticResourceFileAsync (byte[] file, string dataViewName, string resourceCategory);

        /// <summary>
        /// Requires OrbitAdmin: Uploads a resource file (such as an image file) for the given category and system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StaticResourcesPostStaticResourceFileAsyncWithHttpInfo (byte[] file, string dataViewName, string resourceCategory);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class StaticResourcesApi : IStaticResourcesApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StaticResourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StaticResourcesApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaticResourcesApi"/> class
        /// </summary>
        /// <returns></returns>
        public StaticResourcesApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaticResourcesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StaticResourcesApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns a resource file (such as an image file) for the given category and system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to delete the resource for</param>
        /// <param name="resourceCategory">The category of the resource to delete</param>
        /// <param name="resourceId">The resourceId of the resource to delete</param>
        /// <returns></returns>
        public void StaticResourcesDeleteStaticResourceFile (string dataViewName, string resourceCategory, string resourceId)
        {
             StaticResourcesDeleteStaticResourceFileWithHttpInfo(dataViewName, resourceCategory, resourceId);
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns a resource file (such as an image file) for the given category and system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to delete the resource for</param>
        /// <param name="resourceCategory">The category of the resource to delete</param>
        /// <param name="resourceId">The resourceId of the resource to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StaticResourcesDeleteStaticResourceFileWithHttpInfo (string dataViewName, string resourceCategory, string resourceId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling StaticResourcesApi->StaticResourcesDeleteStaticResourceFile");
            // verify the required parameter 'resourceCategory' is set
            if (resourceCategory == null)
                throw new ApiException(400, "Missing required parameter 'resourceCategory' when calling StaticResourcesApi->StaticResourcesDeleteStaticResourceFile");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling StaticResourcesApi->StaticResourcesDeleteStaticResourceFile");

            var localVarPath = "./{dataViewName}/StaticResources/{resourceCategory}/Resources/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (resourceCategory != null) localVarPathParams.Add("resourceCategory", this.Configuration.ApiClient.ParameterToString(resourceCategory)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticResourcesDeleteStaticResourceFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns a resource file (such as an image file) for the given category and system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to delete the resource for</param>
        /// <param name="resourceCategory">The category of the resource to delete</param>
        /// <param name="resourceId">The resourceId of the resource to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StaticResourcesDeleteStaticResourceFileAsync (string dataViewName, string resourceCategory, string resourceId)
        {
             await StaticResourcesDeleteStaticResourceFileAsyncWithHttpInfo(dataViewName, resourceCategory, resourceId);

        }

        /// <summary>
        /// Requires OrbitAdmin: Returns a resource file (such as an image file) for the given category and system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to delete the resource for</param>
        /// <param name="resourceCategory">The category of the resource to delete</param>
        /// <param name="resourceId">The resourceId of the resource to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StaticResourcesDeleteStaticResourceFileAsyncWithHttpInfo (string dataViewName, string resourceCategory, string resourceId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling StaticResourcesApi->StaticResourcesDeleteStaticResourceFile");
            // verify the required parameter 'resourceCategory' is set
            if (resourceCategory == null)
                throw new ApiException(400, "Missing required parameter 'resourceCategory' when calling StaticResourcesApi->StaticResourcesDeleteStaticResourceFile");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling StaticResourcesApi->StaticResourcesDeleteStaticResourceFile");

            var localVarPath = "./{dataViewName}/StaticResources/{resourceCategory}/Resources/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (resourceCategory != null) localVarPathParams.Add("resourceCategory", this.Configuration.ApiClient.ParameterToString(resourceCategory)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticResourcesDeleteStaticResourceFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns a list of categories of resource files for the given system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName"></param>
        /// <param name="systemName">The name of the system to list resource categories for (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsResourceCategorySummary</returns>
        public PagedResultsResourceCategorySummary StaticResourcesGetStaticResourceCategories (string dataViewName, string systemName = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsResourceCategorySummary> localVarResponse = StaticResourcesGetStaticResourceCategoriesWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns a list of categories of resource files for the given system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName"></param>
        /// <param name="systemName">The name of the system to list resource categories for (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsResourceCategorySummary</returns>
        public ApiResponse< PagedResultsResourceCategorySummary > StaticResourcesGetStaticResourceCategoriesWithHttpInfo (string dataViewName, string systemName = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling StaticResourcesApi->StaticResourcesGetStaticResourceCategories");

            var localVarPath = "./{dataViewName}/StaticResources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticResourcesGetStaticResourceCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsResourceCategorySummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsResourceCategorySummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsResourceCategorySummary)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns a list of categories of resource files for the given system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName"></param>
        /// <param name="systemName">The name of the system to list resource categories for (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsResourceCategorySummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsResourceCategorySummary> StaticResourcesGetStaticResourceCategoriesAsync (string dataViewName, string systemName = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsResourceCategorySummary> localVarResponse = await StaticResourcesGetStaticResourceCategoriesAsyncWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Returns a list of categories of resource files for the given system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName"></param>
        /// <param name="systemName">The name of the system to list resource categories for (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsResourceCategorySummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsResourceCategorySummary>> StaticResourcesGetStaticResourceCategoriesAsyncWithHttpInfo (string dataViewName, string systemName = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling StaticResourcesApi->StaticResourcesGetStaticResourceCategories");

            var localVarPath = "./{dataViewName}/StaticResources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticResourcesGetStaticResourceCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsResourceCategorySummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsResourceCategorySummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsResourceCategorySummary)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns details of a resource category for a given category name and system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to list resources</param>
        /// <param name="resourceCategory">The category to return the details for</param>
        /// <returns>ResourceCategoryDetails</returns>
        public ResourceCategoryDetails StaticResourcesGetStaticResourceCategory (string dataViewName, string resourceCategory)
        {
             ApiResponse<ResourceCategoryDetails> localVarResponse = StaticResourcesGetStaticResourceCategoryWithHttpInfo(dataViewName, resourceCategory);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns details of a resource category for a given category name and system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to list resources</param>
        /// <param name="resourceCategory">The category to return the details for</param>
        /// <returns>ApiResponse of ResourceCategoryDetails</returns>
        public ApiResponse< ResourceCategoryDetails > StaticResourcesGetStaticResourceCategoryWithHttpInfo (string dataViewName, string resourceCategory)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling StaticResourcesApi->StaticResourcesGetStaticResourceCategory");
            // verify the required parameter 'resourceCategory' is set
            if (resourceCategory == null)
                throw new ApiException(400, "Missing required parameter 'resourceCategory' when calling StaticResourcesApi->StaticResourcesGetStaticResourceCategory");

            var localVarPath = "./{dataViewName}/StaticResources/{resourceCategory}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (resourceCategory != null) localVarPathParams.Add("resourceCategory", this.Configuration.ApiClient.ParameterToString(resourceCategory)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticResourcesGetStaticResourceCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceCategoryDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ResourceCategoryDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceCategoryDetails)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns details of a resource category for a given category name and system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to list resources</param>
        /// <param name="resourceCategory">The category to return the details for</param>
        /// <returns>Task of ResourceCategoryDetails</returns>
        public async System.Threading.Tasks.Task<ResourceCategoryDetails> StaticResourcesGetStaticResourceCategoryAsync (string dataViewName, string resourceCategory)
        {
             ApiResponse<ResourceCategoryDetails> localVarResponse = await StaticResourcesGetStaticResourceCategoryAsyncWithHttpInfo(dataViewName, resourceCategory);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Returns details of a resource category for a given category name and system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to list resources</param>
        /// <param name="resourceCategory">The category to return the details for</param>
        /// <returns>Task of ApiResponse (ResourceCategoryDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceCategoryDetails>> StaticResourcesGetStaticResourceCategoryAsyncWithHttpInfo (string dataViewName, string resourceCategory)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling StaticResourcesApi->StaticResourcesGetStaticResourceCategory");
            // verify the required parameter 'resourceCategory' is set
            if (resourceCategory == null)
                throw new ApiException(400, "Missing required parameter 'resourceCategory' when calling StaticResourcesApi->StaticResourcesGetStaticResourceCategory");

            var localVarPath = "./{dataViewName}/StaticResources/{resourceCategory}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (resourceCategory != null) localVarPathParams.Add("resourceCategory", this.Configuration.ApiClient.ParameterToString(resourceCategory)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticResourcesGetStaticResourceCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceCategoryDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ResourceCategoryDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceCategoryDetails)));
        }

        /// <summary>
        /// Returns a resource file (such as an image file) for the given category and system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <param name="resourceId">The id of the resource to return</param>
        /// <param name="resourceName">The name of the resource to return</param>
        /// <returns></returns>
        public void StaticResourcesGetStaticResourceFile (string dataViewName, string resourceCategory, string resourceId, string resourceName)
        {
             StaticResourcesGetStaticResourceFileWithHttpInfo(dataViewName, resourceCategory, resourceId, resourceName);
        }

        /// <summary>
        /// Returns a resource file (such as an image file) for the given category and system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <param name="resourceId">The id of the resource to return</param>
        /// <param name="resourceName">The name of the resource to return</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StaticResourcesGetStaticResourceFileWithHttpInfo (string dataViewName, string resourceCategory, string resourceId, string resourceName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling StaticResourcesApi->StaticResourcesGetStaticResourceFile");
            // verify the required parameter 'resourceCategory' is set
            if (resourceCategory == null)
                throw new ApiException(400, "Missing required parameter 'resourceCategory' when calling StaticResourcesApi->StaticResourcesGetStaticResourceFile");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling StaticResourcesApi->StaticResourcesGetStaticResourceFile");
            // verify the required parameter 'resourceName' is set
            if (resourceName == null)
                throw new ApiException(400, "Missing required parameter 'resourceName' when calling StaticResourcesApi->StaticResourcesGetStaticResourceFile");

            var localVarPath = "./{dataViewName}/StaticResources/{resourceCategory}/Resources/{resourceId}/{resourceName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (resourceCategory != null) localVarPathParams.Add("resourceCategory", this.Configuration.ApiClient.ParameterToString(resourceCategory)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter
            if (resourceName != null) localVarPathParams.Add("resourceName", this.Configuration.ApiClient.ParameterToString(resourceName)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticResourcesGetStaticResourceFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns a resource file (such as an image file) for the given category and system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <param name="resourceId">The id of the resource to return</param>
        /// <param name="resourceName">The name of the resource to return</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StaticResourcesGetStaticResourceFileAsync (string dataViewName, string resourceCategory, string resourceId, string resourceName)
        {
             await StaticResourcesGetStaticResourceFileAsyncWithHttpInfo(dataViewName, resourceCategory, resourceId, resourceName);

        }

        /// <summary>
        /// Returns a resource file (such as an image file) for the given category and system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <param name="resourceId">The id of the resource to return</param>
        /// <param name="resourceName">The name of the resource to return</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StaticResourcesGetStaticResourceFileAsyncWithHttpInfo (string dataViewName, string resourceCategory, string resourceId, string resourceName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling StaticResourcesApi->StaticResourcesGetStaticResourceFile");
            // verify the required parameter 'resourceCategory' is set
            if (resourceCategory == null)
                throw new ApiException(400, "Missing required parameter 'resourceCategory' when calling StaticResourcesApi->StaticResourcesGetStaticResourceFile");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling StaticResourcesApi->StaticResourcesGetStaticResourceFile");
            // verify the required parameter 'resourceName' is set
            if (resourceName == null)
                throw new ApiException(400, "Missing required parameter 'resourceName' when calling StaticResourcesApi->StaticResourcesGetStaticResourceFile");

            var localVarPath = "./{dataViewName}/StaticResources/{resourceCategory}/Resources/{resourceId}/{resourceName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (resourceCategory != null) localVarPathParams.Add("resourceCategory", this.Configuration.ApiClient.ParameterToString(resourceCategory)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter
            if (resourceName != null) localVarPathParams.Add("resourceName", this.Configuration.ApiClient.ParameterToString(resourceName)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticResourcesGetStaticResourceFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns the details of a resource file (such as an image file) for the given category and system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <param name="resourceId">The id of the resource to return</param>
        /// <param name="resourceName">The name of the resource to return</param>
        /// <returns>ResourceDetails</returns>
        public ResourceDetails StaticResourcesGetStaticResourceFileDetails (string dataViewName, string resourceCategory, string resourceId, string resourceName)
        {
             ApiResponse<ResourceDetails> localVarResponse = StaticResourcesGetStaticResourceFileDetailsWithHttpInfo(dataViewName, resourceCategory, resourceId, resourceName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns the details of a resource file (such as an image file) for the given category and system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <param name="resourceId">The id of the resource to return</param>
        /// <param name="resourceName">The name of the resource to return</param>
        /// <returns>ApiResponse of ResourceDetails</returns>
        public ApiResponse< ResourceDetails > StaticResourcesGetStaticResourceFileDetailsWithHttpInfo (string dataViewName, string resourceCategory, string resourceId, string resourceName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling StaticResourcesApi->StaticResourcesGetStaticResourceFileDetails");
            // verify the required parameter 'resourceCategory' is set
            if (resourceCategory == null)
                throw new ApiException(400, "Missing required parameter 'resourceCategory' when calling StaticResourcesApi->StaticResourcesGetStaticResourceFileDetails");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling StaticResourcesApi->StaticResourcesGetStaticResourceFileDetails");
            // verify the required parameter 'resourceName' is set
            if (resourceName == null)
                throw new ApiException(400, "Missing required parameter 'resourceName' when calling StaticResourcesApi->StaticResourcesGetStaticResourceFileDetails");

            var localVarPath = "./{dataViewName}/StaticResources/{resourceCategory}/Resources/{resourceId}/{resourceName}/Details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (resourceCategory != null) localVarPathParams.Add("resourceCategory", this.Configuration.ApiClient.ParameterToString(resourceCategory)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter
            if (resourceName != null) localVarPathParams.Add("resourceName", this.Configuration.ApiClient.ParameterToString(resourceName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticResourcesGetStaticResourceFileDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ResourceDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceDetails)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns the details of a resource file (such as an image file) for the given category and system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <param name="resourceId">The id of the resource to return</param>
        /// <param name="resourceName">The name of the resource to return</param>
        /// <returns>Task of ResourceDetails</returns>
        public async System.Threading.Tasks.Task<ResourceDetails> StaticResourcesGetStaticResourceFileDetailsAsync (string dataViewName, string resourceCategory, string resourceId, string resourceName)
        {
             ApiResponse<ResourceDetails> localVarResponse = await StaticResourcesGetStaticResourceFileDetailsAsyncWithHttpInfo(dataViewName, resourceCategory, resourceId, resourceName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Returns the details of a resource file (such as an image file) for the given category and system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <param name="resourceId">The id of the resource to return</param>
        /// <param name="resourceName">The name of the resource to return</param>
        /// <returns>Task of ApiResponse (ResourceDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceDetails>> StaticResourcesGetStaticResourceFileDetailsAsyncWithHttpInfo (string dataViewName, string resourceCategory, string resourceId, string resourceName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling StaticResourcesApi->StaticResourcesGetStaticResourceFileDetails");
            // verify the required parameter 'resourceCategory' is set
            if (resourceCategory == null)
                throw new ApiException(400, "Missing required parameter 'resourceCategory' when calling StaticResourcesApi->StaticResourcesGetStaticResourceFileDetails");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling StaticResourcesApi->StaticResourcesGetStaticResourceFileDetails");
            // verify the required parameter 'resourceName' is set
            if (resourceName == null)
                throw new ApiException(400, "Missing required parameter 'resourceName' when calling StaticResourcesApi->StaticResourcesGetStaticResourceFileDetails");

            var localVarPath = "./{dataViewName}/StaticResources/{resourceCategory}/Resources/{resourceId}/{resourceName}/Details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (resourceCategory != null) localVarPathParams.Add("resourceCategory", this.Configuration.ApiClient.ParameterToString(resourceCategory)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter
            if (resourceName != null) localVarPathParams.Add("resourceName", this.Configuration.ApiClient.ParameterToString(resourceName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticResourcesGetStaticResourceFileDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ResourceDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceDetails)));
        }

        /// <summary>
        /// Returns a list of details for the resource files (such as image files) in the given resource category and system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to list resources</param>
        /// <param name="resourceCategory">The category to return resources for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Size, LastModified. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Size, LastModified. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsResourceSummary</returns>
        public PagedResultsResourceSummary StaticResourcesGetStaticResourcesForCategory (string dataViewName, string resourceCategory, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsResourceSummary> localVarResponse = StaticResourcesGetStaticResourcesForCategoryWithHttpInfo(dataViewName, resourceCategory, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of details for the resource files (such as image files) in the given resource category and system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to list resources</param>
        /// <param name="resourceCategory">The category to return resources for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Size, LastModified. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Size, LastModified. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsResourceSummary</returns>
        public ApiResponse< PagedResultsResourceSummary > StaticResourcesGetStaticResourcesForCategoryWithHttpInfo (string dataViewName, string resourceCategory, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling StaticResourcesApi->StaticResourcesGetStaticResourcesForCategory");
            // verify the required parameter 'resourceCategory' is set
            if (resourceCategory == null)
                throw new ApiException(400, "Missing required parameter 'resourceCategory' when calling StaticResourcesApi->StaticResourcesGetStaticResourcesForCategory");

            var localVarPath = "./{dataViewName}/StaticResources/{resourceCategory}/Resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (resourceCategory != null) localVarPathParams.Add("resourceCategory", this.Configuration.ApiClient.ParameterToString(resourceCategory)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticResourcesGetStaticResourcesForCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsResourceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsResourceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsResourceSummary)));
        }

        /// <summary>
        /// Returns a list of details for the resource files (such as image files) in the given resource category and system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to list resources</param>
        /// <param name="resourceCategory">The category to return resources for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Size, LastModified. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Size, LastModified. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsResourceSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsResourceSummary> StaticResourcesGetStaticResourcesForCategoryAsync (string dataViewName, string resourceCategory, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsResourceSummary> localVarResponse = await StaticResourcesGetStaticResourcesForCategoryAsyncWithHttpInfo(dataViewName, resourceCategory, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of details for the resource files (such as image files) in the given resource category and system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to list resources</param>
        /// <param name="resourceCategory">The category to return resources for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Size, LastModified. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Size, LastModified. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsResourceSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsResourceSummary>> StaticResourcesGetStaticResourcesForCategoryAsyncWithHttpInfo (string dataViewName, string resourceCategory, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling StaticResourcesApi->StaticResourcesGetStaticResourcesForCategory");
            // verify the required parameter 'resourceCategory' is set
            if (resourceCategory == null)
                throw new ApiException(400, "Missing required parameter 'resourceCategory' when calling StaticResourcesApi->StaticResourcesGetStaticResourcesForCategory");

            var localVarPath = "./{dataViewName}/StaticResources/{resourceCategory}/Resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (resourceCategory != null) localVarPathParams.Add("resourceCategory", this.Configuration.ApiClient.ParameterToString(resourceCategory)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticResourcesGetStaticResourcesForCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsResourceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsResourceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsResourceSummary)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Uploads a resource file (such as an image file) for the given category and system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <returns></returns>
        public void StaticResourcesPostStaticResourceFile (byte[] file, string dataViewName, string resourceCategory)
        {
             StaticResourcesPostStaticResourceFileWithHttpInfo(file, dataViewName, resourceCategory);
        }

        /// <summary>
        /// Requires OrbitAdmin: Uploads a resource file (such as an image file) for the given category and system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StaticResourcesPostStaticResourceFileWithHttpInfo (byte[] file, string dataViewName, string resourceCategory)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling StaticResourcesApi->StaticResourcesPostStaticResourceFile");
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling StaticResourcesApi->StaticResourcesPostStaticResourceFile");
            // verify the required parameter 'resourceCategory' is set
            if (resourceCategory == null)
                throw new ApiException(400, "Missing required parameter 'resourceCategory' when calling StaticResourcesApi->StaticResourcesPostStaticResourceFile");

            var localVarPath = "./{dataViewName}/StaticResources/{resourceCategory}/Resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (resourceCategory != null) localVarPathParams.Add("resourceCategory", this.Configuration.ApiClient.ParameterToString(resourceCategory)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticResourcesPostStaticResourceFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Requires OrbitAdmin: Uploads a resource file (such as an image file) for the given category and system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StaticResourcesPostStaticResourceFileAsync (byte[] file, string dataViewName, string resourceCategory)
        {
             await StaticResourcesPostStaticResourceFileAsyncWithHttpInfo(file, dataViewName, resourceCategory);

        }

        /// <summary>
        /// Requires OrbitAdmin: Uploads a resource file (such as an image file) for the given category and system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="dataViewName">The name of the DataView to find the resource for</param>
        /// <param name="resourceCategory">The category of the resource to return</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StaticResourcesPostStaticResourceFileAsyncWithHttpInfo (byte[] file, string dataViewName, string resourceCategory)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling StaticResourcesApi->StaticResourcesPostStaticResourceFile");
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling StaticResourcesApi->StaticResourcesPostStaticResourceFile");
            // verify the required parameter 'resourceCategory' is set
            if (resourceCategory == null)
                throw new ApiException(400, "Missing required parameter 'resourceCategory' when calling StaticResourcesApi->StaticResourcesPostStaticResourceFile");

            var localVarPath = "./{dataViewName}/StaticResources/{resourceCategory}/Resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (resourceCategory != null) localVarPathParams.Add("resourceCategory", this.Configuration.ApiClient.ParameterToString(resourceCategory)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticResourcesPostStaticResourceFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

    }
}
