/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITelemetryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new telemetry session from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <param name="body">The details of the telemetry session to create (optional)</param>
        /// <returns>TelemetrySession</returns>
        TelemetrySession TelemetryCreateTelemetrySession (string dataViewName, string stateId, string sessionId, CreateTelemetrySessionDetails body = null);

        /// <summary>
        /// Creates a new telemetry session from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <param name="body">The details of the telemetry session to create (optional)</param>
        /// <returns>ApiResponse of TelemetrySession</returns>
        ApiResponse<TelemetrySession> TelemetryCreateTelemetrySessionWithHttpInfo (string dataViewName, string stateId, string sessionId, CreateTelemetrySessionDetails body = null);
        /// <summary>
        /// Creates a new telemetry state from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details of the telemetry state to create (optional)</param>
        /// <returns>TelemetryState</returns>
        TelemetryState TelemetryCreateTelemetryState (string dataViewName, CreateTelemetryStateDetails body = null);

        /// <summary>
        /// Creates a new telemetry state from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details of the telemetry state to create (optional)</param>
        /// <returns>ApiResponse of TelemetryState</returns>
        ApiResponse<TelemetryState> TelemetryCreateTelemetryStateWithHttpInfo (string dataViewName, CreateTelemetryStateDetails body = null);
        /// <summary>
        /// Returns the details of a particular telemetry session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <returns>TelemetrySession</returns>
        TelemetrySession TelemetryGetTelemetrySession (string dataViewName, string stateId, string sessionId);

        /// <summary>
        /// Returns the details of a particular telemetry session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <returns>ApiResponse of TelemetrySession</returns>
        ApiResponse<TelemetrySession> TelemetryGetTelemetrySessionWithHttpInfo (string dataViewName, string stateId, string sessionId);
        /// <summary>
        /// Returns the details of a particular telemetry state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state to return</param>
        /// <returns>TelemetryState</returns>
        TelemetryState TelemetryGetTelemetryState (string dataViewName, string stateId);

        /// <summary>
        /// Returns the details of a particular telemetry state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state to return</param>
        /// <returns>ApiResponse of TelemetryState</returns>
        ApiResponse<TelemetryState> TelemetryGetTelemetryStateWithHttpInfo (string dataViewName, string stateId);
        /// <summary>
        /// Returns the details of a given user&#x27;s telemetry state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the telemetry state to return</param>
        /// <returns>TelemetryState</returns>
        TelemetryState TelemetryGetTelemetryStateForUser (string dataViewName, string username);

        /// <summary>
        /// Returns the details of a given user&#x27;s telemetry state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the telemetry state to return</param>
        /// <returns>ApiResponse of TelemetryState</returns>
        ApiResponse<TelemetryState> TelemetryGetTelemetryStateForUserWithHttpInfo (string dataViewName, string username);
        /// <summary>
        /// Update a particular telemetry session from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <param name="body">The details of the telemetry session to update (optional)</param>
        /// <returns>TelemetrySession</returns>
        TelemetrySession TelemetryUpdateTelemetrySession (string dataViewName, string stateId, string sessionId, UpdateTelemetrySessionDetails body = null);

        /// <summary>
        /// Update a particular telemetry session from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <param name="body">The details of the telemetry session to update (optional)</param>
        /// <returns>ApiResponse of TelemetrySession</returns>
        ApiResponse<TelemetrySession> TelemetryUpdateTelemetrySessionWithHttpInfo (string dataViewName, string stateId, string sessionId, UpdateTelemetrySessionDetails body = null);
        /// <summary>
        /// Updates a particular telemetry state from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state to update</param>
        /// <param name="body">The details of the telemetry state to update (optional)</param>
        /// <returns>TelemetryState</returns>
        TelemetryState TelemetryUpdateTelemetryState (string dataViewName, string stateId, UpdateTelemetryStateDetails body = null);

        /// <summary>
        /// Updates a particular telemetry state from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state to update</param>
        /// <param name="body">The details of the telemetry state to update (optional)</param>
        /// <returns>ApiResponse of TelemetryState</returns>
        ApiResponse<TelemetryState> TelemetryUpdateTelemetryStateWithHttpInfo (string dataViewName, string stateId, UpdateTelemetryStateDetails body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new telemetry session from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <param name="body">The details of the telemetry session to create (optional)</param>
        /// <returns>Task of TelemetrySession</returns>
        System.Threading.Tasks.Task<TelemetrySession> TelemetryCreateTelemetrySessionAsync (string dataViewName, string stateId, string sessionId, CreateTelemetrySessionDetails body = null);

        /// <summary>
        /// Creates a new telemetry session from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <param name="body">The details of the telemetry session to create (optional)</param>
        /// <returns>Task of ApiResponse (TelemetrySession)</returns>
        System.Threading.Tasks.Task<ApiResponse<TelemetrySession>> TelemetryCreateTelemetrySessionAsyncWithHttpInfo (string dataViewName, string stateId, string sessionId, CreateTelemetrySessionDetails body = null);
        /// <summary>
        /// Creates a new telemetry state from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details of the telemetry state to create (optional)</param>
        /// <returns>Task of TelemetryState</returns>
        System.Threading.Tasks.Task<TelemetryState> TelemetryCreateTelemetryStateAsync (string dataViewName, CreateTelemetryStateDetails body = null);

        /// <summary>
        /// Creates a new telemetry state from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details of the telemetry state to create (optional)</param>
        /// <returns>Task of ApiResponse (TelemetryState)</returns>
        System.Threading.Tasks.Task<ApiResponse<TelemetryState>> TelemetryCreateTelemetryStateAsyncWithHttpInfo (string dataViewName, CreateTelemetryStateDetails body = null);
        /// <summary>
        /// Returns the details of a particular telemetry session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <returns>Task of TelemetrySession</returns>
        System.Threading.Tasks.Task<TelemetrySession> TelemetryGetTelemetrySessionAsync (string dataViewName, string stateId, string sessionId);

        /// <summary>
        /// Returns the details of a particular telemetry session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <returns>Task of ApiResponse (TelemetrySession)</returns>
        System.Threading.Tasks.Task<ApiResponse<TelemetrySession>> TelemetryGetTelemetrySessionAsyncWithHttpInfo (string dataViewName, string stateId, string sessionId);
        /// <summary>
        /// Returns the details of a particular telemetry state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state to return</param>
        /// <returns>Task of TelemetryState</returns>
        System.Threading.Tasks.Task<TelemetryState> TelemetryGetTelemetryStateAsync (string dataViewName, string stateId);

        /// <summary>
        /// Returns the details of a particular telemetry state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state to return</param>
        /// <returns>Task of ApiResponse (TelemetryState)</returns>
        System.Threading.Tasks.Task<ApiResponse<TelemetryState>> TelemetryGetTelemetryStateAsyncWithHttpInfo (string dataViewName, string stateId);
        /// <summary>
        /// Returns the details of a given user&#x27;s telemetry state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the telemetry state to return</param>
        /// <returns>Task of TelemetryState</returns>
        System.Threading.Tasks.Task<TelemetryState> TelemetryGetTelemetryStateForUserAsync (string dataViewName, string username);

        /// <summary>
        /// Returns the details of a given user&#x27;s telemetry state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the telemetry state to return</param>
        /// <returns>Task of ApiResponse (TelemetryState)</returns>
        System.Threading.Tasks.Task<ApiResponse<TelemetryState>> TelemetryGetTelemetryStateForUserAsyncWithHttpInfo (string dataViewName, string username);
        /// <summary>
        /// Update a particular telemetry session from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <param name="body">The details of the telemetry session to update (optional)</param>
        /// <returns>Task of TelemetrySession</returns>
        System.Threading.Tasks.Task<TelemetrySession> TelemetryUpdateTelemetrySessionAsync (string dataViewName, string stateId, string sessionId, UpdateTelemetrySessionDetails body = null);

        /// <summary>
        /// Update a particular telemetry session from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <param name="body">The details of the telemetry session to update (optional)</param>
        /// <returns>Task of ApiResponse (TelemetrySession)</returns>
        System.Threading.Tasks.Task<ApiResponse<TelemetrySession>> TelemetryUpdateTelemetrySessionAsyncWithHttpInfo (string dataViewName, string stateId, string sessionId, UpdateTelemetrySessionDetails body = null);
        /// <summary>
        /// Updates a particular telemetry state from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state to update</param>
        /// <param name="body">The details of the telemetry state to update (optional)</param>
        /// <returns>Task of TelemetryState</returns>
        System.Threading.Tasks.Task<TelemetryState> TelemetryUpdateTelemetryStateAsync (string dataViewName, string stateId, UpdateTelemetryStateDetails body = null);

        /// <summary>
        /// Updates a particular telemetry state from the given details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state to update</param>
        /// <param name="body">The details of the telemetry state to update (optional)</param>
        /// <returns>Task of ApiResponse (TelemetryState)</returns>
        System.Threading.Tasks.Task<ApiResponse<TelemetryState>> TelemetryUpdateTelemetryStateAsyncWithHttpInfo (string dataViewName, string stateId, UpdateTelemetryStateDetails body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TelemetryApi : ITelemetryApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TelemetryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TelemetryApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TelemetryApi"/> class
        /// </summary>
        /// <returns></returns>
        public TelemetryApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TelemetryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TelemetryApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new telemetry session from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <param name="body">The details of the telemetry session to create (optional)</param>
        /// <returns>TelemetrySession</returns>
        public TelemetrySession TelemetryCreateTelemetrySession (string dataViewName, string stateId, string sessionId, CreateTelemetrySessionDetails body = null)
        {
             ApiResponse<TelemetrySession> localVarResponse = TelemetryCreateTelemetrySessionWithHttpInfo(dataViewName, stateId, sessionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new telemetry session from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <param name="body">The details of the telemetry session to create (optional)</param>
        /// <returns>ApiResponse of TelemetrySession</returns>
        public ApiResponse< TelemetrySession > TelemetryCreateTelemetrySessionWithHttpInfo (string dataViewName, string stateId, string sessionId, CreateTelemetrySessionDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TelemetryApi->TelemetryCreateTelemetrySession");
            // verify the required parameter 'stateId' is set
            if (stateId == null)
                throw new ApiException(400, "Missing required parameter 'stateId' when calling TelemetryApi->TelemetryCreateTelemetrySession");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling TelemetryApi->TelemetryCreateTelemetrySession");

            var localVarPath = "./{dataViewName}/Telemetry/States/{stateId}/Sessions/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (stateId != null) localVarPathParams.Add("stateId", this.Configuration.ApiClient.ParameterToString(stateId)); // path parameter
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelemetryCreateTelemetrySession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TelemetrySession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TelemetrySession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TelemetrySession)));
        }

        /// <summary>
        /// Creates a new telemetry session from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <param name="body">The details of the telemetry session to create (optional)</param>
        /// <returns>Task of TelemetrySession</returns>
        public async System.Threading.Tasks.Task<TelemetrySession> TelemetryCreateTelemetrySessionAsync (string dataViewName, string stateId, string sessionId, CreateTelemetrySessionDetails body = null)
        {
             ApiResponse<TelemetrySession> localVarResponse = await TelemetryCreateTelemetrySessionAsyncWithHttpInfo(dataViewName, stateId, sessionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new telemetry session from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <param name="body">The details of the telemetry session to create (optional)</param>
        /// <returns>Task of ApiResponse (TelemetrySession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TelemetrySession>> TelemetryCreateTelemetrySessionAsyncWithHttpInfo (string dataViewName, string stateId, string sessionId, CreateTelemetrySessionDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TelemetryApi->TelemetryCreateTelemetrySession");
            // verify the required parameter 'stateId' is set
            if (stateId == null)
                throw new ApiException(400, "Missing required parameter 'stateId' when calling TelemetryApi->TelemetryCreateTelemetrySession");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling TelemetryApi->TelemetryCreateTelemetrySession");

            var localVarPath = "./{dataViewName}/Telemetry/States/{stateId}/Sessions/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (stateId != null) localVarPathParams.Add("stateId", this.Configuration.ApiClient.ParameterToString(stateId)); // path parameter
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelemetryCreateTelemetrySession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TelemetrySession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TelemetrySession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TelemetrySession)));
        }

        /// <summary>
        /// Creates a new telemetry state from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details of the telemetry state to create (optional)</param>
        /// <returns>TelemetryState</returns>
        public TelemetryState TelemetryCreateTelemetryState (string dataViewName, CreateTelemetryStateDetails body = null)
        {
             ApiResponse<TelemetryState> localVarResponse = TelemetryCreateTelemetryStateWithHttpInfo(dataViewName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new telemetry state from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details of the telemetry state to create (optional)</param>
        /// <returns>ApiResponse of TelemetryState</returns>
        public ApiResponse< TelemetryState > TelemetryCreateTelemetryStateWithHttpInfo (string dataViewName, CreateTelemetryStateDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TelemetryApi->TelemetryCreateTelemetryState");

            var localVarPath = "./{dataViewName}/Telemetry/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelemetryCreateTelemetryState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TelemetryState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TelemetryState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TelemetryState)));
        }

        /// <summary>
        /// Creates a new telemetry state from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details of the telemetry state to create (optional)</param>
        /// <returns>Task of TelemetryState</returns>
        public async System.Threading.Tasks.Task<TelemetryState> TelemetryCreateTelemetryStateAsync (string dataViewName, CreateTelemetryStateDetails body = null)
        {
             ApiResponse<TelemetryState> localVarResponse = await TelemetryCreateTelemetryStateAsyncWithHttpInfo(dataViewName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new telemetry state from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details of the telemetry state to create (optional)</param>
        /// <returns>Task of ApiResponse (TelemetryState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TelemetryState>> TelemetryCreateTelemetryStateAsyncWithHttpInfo (string dataViewName, CreateTelemetryStateDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TelemetryApi->TelemetryCreateTelemetryState");

            var localVarPath = "./{dataViewName}/Telemetry/States";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelemetryCreateTelemetryState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TelemetryState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TelemetryState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TelemetryState)));
        }

        /// <summary>
        /// Returns the details of a particular telemetry session 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <returns>TelemetrySession</returns>
        public TelemetrySession TelemetryGetTelemetrySession (string dataViewName, string stateId, string sessionId)
        {
             ApiResponse<TelemetrySession> localVarResponse = TelemetryGetTelemetrySessionWithHttpInfo(dataViewName, stateId, sessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular telemetry session 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <returns>ApiResponse of TelemetrySession</returns>
        public ApiResponse< TelemetrySession > TelemetryGetTelemetrySessionWithHttpInfo (string dataViewName, string stateId, string sessionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TelemetryApi->TelemetryGetTelemetrySession");
            // verify the required parameter 'stateId' is set
            if (stateId == null)
                throw new ApiException(400, "Missing required parameter 'stateId' when calling TelemetryApi->TelemetryGetTelemetrySession");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling TelemetryApi->TelemetryGetTelemetrySession");

            var localVarPath = "./{dataViewName}/Telemetry/States/{stateId}/Sessions/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (stateId != null) localVarPathParams.Add("stateId", this.Configuration.ApiClient.ParameterToString(stateId)); // path parameter
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelemetryGetTelemetrySession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TelemetrySession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TelemetrySession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TelemetrySession)));
        }

        /// <summary>
        /// Returns the details of a particular telemetry session 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <returns>Task of TelemetrySession</returns>
        public async System.Threading.Tasks.Task<TelemetrySession> TelemetryGetTelemetrySessionAsync (string dataViewName, string stateId, string sessionId)
        {
             ApiResponse<TelemetrySession> localVarResponse = await TelemetryGetTelemetrySessionAsyncWithHttpInfo(dataViewName, stateId, sessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular telemetry session 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <returns>Task of ApiResponse (TelemetrySession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TelemetrySession>> TelemetryGetTelemetrySessionAsyncWithHttpInfo (string dataViewName, string stateId, string sessionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TelemetryApi->TelemetryGetTelemetrySession");
            // verify the required parameter 'stateId' is set
            if (stateId == null)
                throw new ApiException(400, "Missing required parameter 'stateId' when calling TelemetryApi->TelemetryGetTelemetrySession");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling TelemetryApi->TelemetryGetTelemetrySession");

            var localVarPath = "./{dataViewName}/Telemetry/States/{stateId}/Sessions/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (stateId != null) localVarPathParams.Add("stateId", this.Configuration.ApiClient.ParameterToString(stateId)); // path parameter
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelemetryGetTelemetrySession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TelemetrySession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TelemetrySession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TelemetrySession)));
        }

        /// <summary>
        /// Returns the details of a particular telemetry state 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state to return</param>
        /// <returns>TelemetryState</returns>
        public TelemetryState TelemetryGetTelemetryState (string dataViewName, string stateId)
        {
             ApiResponse<TelemetryState> localVarResponse = TelemetryGetTelemetryStateWithHttpInfo(dataViewName, stateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular telemetry state 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state to return</param>
        /// <returns>ApiResponse of TelemetryState</returns>
        public ApiResponse< TelemetryState > TelemetryGetTelemetryStateWithHttpInfo (string dataViewName, string stateId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TelemetryApi->TelemetryGetTelemetryState");
            // verify the required parameter 'stateId' is set
            if (stateId == null)
                throw new ApiException(400, "Missing required parameter 'stateId' when calling TelemetryApi->TelemetryGetTelemetryState");

            var localVarPath = "./{dataViewName}/Telemetry/States/{stateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (stateId != null) localVarPathParams.Add("stateId", this.Configuration.ApiClient.ParameterToString(stateId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelemetryGetTelemetryState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TelemetryState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TelemetryState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TelemetryState)));
        }

        /// <summary>
        /// Returns the details of a particular telemetry state 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state to return</param>
        /// <returns>Task of TelemetryState</returns>
        public async System.Threading.Tasks.Task<TelemetryState> TelemetryGetTelemetryStateAsync (string dataViewName, string stateId)
        {
             ApiResponse<TelemetryState> localVarResponse = await TelemetryGetTelemetryStateAsyncWithHttpInfo(dataViewName, stateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular telemetry state 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state to return</param>
        /// <returns>Task of ApiResponse (TelemetryState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TelemetryState>> TelemetryGetTelemetryStateAsyncWithHttpInfo (string dataViewName, string stateId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TelemetryApi->TelemetryGetTelemetryState");
            // verify the required parameter 'stateId' is set
            if (stateId == null)
                throw new ApiException(400, "Missing required parameter 'stateId' when calling TelemetryApi->TelemetryGetTelemetryState");

            var localVarPath = "./{dataViewName}/Telemetry/States/{stateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (stateId != null) localVarPathParams.Add("stateId", this.Configuration.ApiClient.ParameterToString(stateId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelemetryGetTelemetryState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TelemetryState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TelemetryState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TelemetryState)));
        }

        /// <summary>
        /// Returns the details of a given user&#x27;s telemetry state 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the telemetry state to return</param>
        /// <returns>TelemetryState</returns>
        public TelemetryState TelemetryGetTelemetryStateForUser (string dataViewName, string username)
        {
             ApiResponse<TelemetryState> localVarResponse = TelemetryGetTelemetryStateForUserWithHttpInfo(dataViewName, username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a given user&#x27;s telemetry state 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the telemetry state to return</param>
        /// <returns>ApiResponse of TelemetryState</returns>
        public ApiResponse< TelemetryState > TelemetryGetTelemetryStateForUserWithHttpInfo (string dataViewName, string username)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TelemetryApi->TelemetryGetTelemetryStateForUser");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling TelemetryApi->TelemetryGetTelemetryStateForUser");

            var localVarPath = "./{dataViewName}/Telemetry/States/ForUser/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelemetryGetTelemetryStateForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TelemetryState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TelemetryState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TelemetryState)));
        }

        /// <summary>
        /// Returns the details of a given user&#x27;s telemetry state 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the telemetry state to return</param>
        /// <returns>Task of TelemetryState</returns>
        public async System.Threading.Tasks.Task<TelemetryState> TelemetryGetTelemetryStateForUserAsync (string dataViewName, string username)
        {
             ApiResponse<TelemetryState> localVarResponse = await TelemetryGetTelemetryStateForUserAsyncWithHttpInfo(dataViewName, username);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a given user&#x27;s telemetry state 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the telemetry state to return</param>
        /// <returns>Task of ApiResponse (TelemetryState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TelemetryState>> TelemetryGetTelemetryStateForUserAsyncWithHttpInfo (string dataViewName, string username)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TelemetryApi->TelemetryGetTelemetryStateForUser");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling TelemetryApi->TelemetryGetTelemetryStateForUser");

            var localVarPath = "./{dataViewName}/Telemetry/States/ForUser/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelemetryGetTelemetryStateForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TelemetryState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TelemetryState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TelemetryState)));
        }

        /// <summary>
        /// Update a particular telemetry session from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <param name="body">The details of the telemetry session to update (optional)</param>
        /// <returns>TelemetrySession</returns>
        public TelemetrySession TelemetryUpdateTelemetrySession (string dataViewName, string stateId, string sessionId, UpdateTelemetrySessionDetails body = null)
        {
             ApiResponse<TelemetrySession> localVarResponse = TelemetryUpdateTelemetrySessionWithHttpInfo(dataViewName, stateId, sessionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a particular telemetry session from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <param name="body">The details of the telemetry session to update (optional)</param>
        /// <returns>ApiResponse of TelemetrySession</returns>
        public ApiResponse< TelemetrySession > TelemetryUpdateTelemetrySessionWithHttpInfo (string dataViewName, string stateId, string sessionId, UpdateTelemetrySessionDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TelemetryApi->TelemetryUpdateTelemetrySession");
            // verify the required parameter 'stateId' is set
            if (stateId == null)
                throw new ApiException(400, "Missing required parameter 'stateId' when calling TelemetryApi->TelemetryUpdateTelemetrySession");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling TelemetryApi->TelemetryUpdateTelemetrySession");

            var localVarPath = "./{dataViewName}/Telemetry/States/{stateId}/Sessions/{sessionId}/Update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (stateId != null) localVarPathParams.Add("stateId", this.Configuration.ApiClient.ParameterToString(stateId)); // path parameter
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelemetryUpdateTelemetrySession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TelemetrySession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TelemetrySession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TelemetrySession)));
        }

        /// <summary>
        /// Update a particular telemetry session from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <param name="body">The details of the telemetry session to update (optional)</param>
        /// <returns>Task of TelemetrySession</returns>
        public async System.Threading.Tasks.Task<TelemetrySession> TelemetryUpdateTelemetrySessionAsync (string dataViewName, string stateId, string sessionId, UpdateTelemetrySessionDetails body = null)
        {
             ApiResponse<TelemetrySession> localVarResponse = await TelemetryUpdateTelemetrySessionAsyncWithHttpInfo(dataViewName, stateId, sessionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a particular telemetry session from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state the session belongs to</param>
        /// <param name="sessionId">The id of the telemetry session</param>
        /// <param name="body">The details of the telemetry session to update (optional)</param>
        /// <returns>Task of ApiResponse (TelemetrySession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TelemetrySession>> TelemetryUpdateTelemetrySessionAsyncWithHttpInfo (string dataViewName, string stateId, string sessionId, UpdateTelemetrySessionDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TelemetryApi->TelemetryUpdateTelemetrySession");
            // verify the required parameter 'stateId' is set
            if (stateId == null)
                throw new ApiException(400, "Missing required parameter 'stateId' when calling TelemetryApi->TelemetryUpdateTelemetrySession");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling TelemetryApi->TelemetryUpdateTelemetrySession");

            var localVarPath = "./{dataViewName}/Telemetry/States/{stateId}/Sessions/{sessionId}/Update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (stateId != null) localVarPathParams.Add("stateId", this.Configuration.ApiClient.ParameterToString(stateId)); // path parameter
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelemetryUpdateTelemetrySession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TelemetrySession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TelemetrySession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TelemetrySession)));
        }

        /// <summary>
        /// Updates a particular telemetry state from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state to update</param>
        /// <param name="body">The details of the telemetry state to update (optional)</param>
        /// <returns>TelemetryState</returns>
        public TelemetryState TelemetryUpdateTelemetryState (string dataViewName, string stateId, UpdateTelemetryStateDetails body = null)
        {
             ApiResponse<TelemetryState> localVarResponse = TelemetryUpdateTelemetryStateWithHttpInfo(dataViewName, stateId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a particular telemetry state from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state to update</param>
        /// <param name="body">The details of the telemetry state to update (optional)</param>
        /// <returns>ApiResponse of TelemetryState</returns>
        public ApiResponse< TelemetryState > TelemetryUpdateTelemetryStateWithHttpInfo (string dataViewName, string stateId, UpdateTelemetryStateDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TelemetryApi->TelemetryUpdateTelemetryState");
            // verify the required parameter 'stateId' is set
            if (stateId == null)
                throw new ApiException(400, "Missing required parameter 'stateId' when calling TelemetryApi->TelemetryUpdateTelemetryState");

            var localVarPath = "./{dataViewName}/Telemetry/States/{stateId}/Update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (stateId != null) localVarPathParams.Add("stateId", this.Configuration.ApiClient.ParameterToString(stateId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelemetryUpdateTelemetryState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TelemetryState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TelemetryState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TelemetryState)));
        }

        /// <summary>
        /// Updates a particular telemetry state from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state to update</param>
        /// <param name="body">The details of the telemetry state to update (optional)</param>
        /// <returns>Task of TelemetryState</returns>
        public async System.Threading.Tasks.Task<TelemetryState> TelemetryUpdateTelemetryStateAsync (string dataViewName, string stateId, UpdateTelemetryStateDetails body = null)
        {
             ApiResponse<TelemetryState> localVarResponse = await TelemetryUpdateTelemetryStateAsyncWithHttpInfo(dataViewName, stateId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a particular telemetry state from the given details 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="stateId">The id of the telemetry state to update</param>
        /// <param name="body">The details of the telemetry state to update (optional)</param>
        /// <returns>Task of ApiResponse (TelemetryState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TelemetryState>> TelemetryUpdateTelemetryStateAsyncWithHttpInfo (string dataViewName, string stateId, UpdateTelemetryStateDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TelemetryApi->TelemetryUpdateTelemetryState");
            // verify the required parameter 'stateId' is set
            if (stateId == null)
                throw new ApiException(400, "Missing required parameter 'stateId' when calling TelemetryApi->TelemetryUpdateTelemetryState");

            var localVarPath = "./{dataViewName}/Telemetry/States/{stateId}/Update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (stateId != null) localVarPathParams.Add("stateId", this.Configuration.ApiClient.ParameterToString(stateId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TelemetryUpdateTelemetryState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TelemetryState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TelemetryState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TelemetryState)));
        }

    }
}
