/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the group to create. (optional)</param>
        /// <param name="systemName">The system name for the group to be associated with. (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>GroupSummary</returns>
        GroupSummary GroupsCreateGroup (string dataViewName, CreateGroupDetails body = null, string systemName = null, string scope = null);

        /// <summary>
        /// Creates a new group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the group to create. (optional)</param>
        /// <param name="systemName">The system name for the group to be associated with. (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        ApiResponse<GroupSummary> GroupsCreateGroupWithHttpInfo (string dataViewName, CreateGroupDetails body = null, string systemName = null, string scope = null);
        /// <summary>
        /// Deletes the specified group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to delete</param>
        /// <returns></returns>
        void GroupsDeleteGroup (string dataViewName, int? groupId);

        /// <summary>
        /// Deletes the specified group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GroupsDeleteGroupWithHttpInfo (string dataViewName, int? groupId);
        /// <summary>
        /// Returns details for the given group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to view the details for</param>
        /// <param name="includeMembership">If specified, whether to include membership details for the groups (optional)</param>
        /// <returns>GroupDetail</returns>
        GroupDetail GroupsGetGroupDetails (string dataViewName, int? groupId, bool? includeMembership = null);

        /// <summary>
        /// Returns details for the given group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to view the details for</param>
        /// <param name="includeMembership">If specified, whether to include membership details for the groups (optional)</param>
        /// <returns>ApiResponse of GroupDetail</returns>
        ApiResponse<GroupDetail> GroupsGetGroupDetailsWithHttpInfo (string dataViewName, int? groupId, bool? includeMembership = null);
        /// <summary>
        /// Returns all groups in the DataView.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">If specified, whether to limit to only groups attached to the system name (optional)</param>
        /// <param name="includeMembership">If specified, whether to include membership details for the groups (optional)</param>
        /// <param name="includeEveryoneGroup">If specified, whether to include the everyone group (optional)</param>
        /// <param name="scope">If specified, whether to return all users, users attached to the DataView only, or users attached to the system only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, UserMembershipCount. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, UserMembershipCount. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsGroupSummary</returns>
        PagedResultsGroupSummary GroupsGetGroups (string dataViewName, string systemName = null, bool? includeMembership = null, bool? includeEveryoneGroup = null, string scope = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all groups in the DataView.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">If specified, whether to limit to only groups attached to the system name (optional)</param>
        /// <param name="includeMembership">If specified, whether to include membership details for the groups (optional)</param>
        /// <param name="includeEveryoneGroup">If specified, whether to include the everyone group (optional)</param>
        /// <param name="scope">If specified, whether to return all users, users attached to the DataView only, or users attached to the system only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, UserMembershipCount. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, UserMembershipCount. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsGroupSummary</returns>
        ApiResponse<PagedResultsGroupSummary> GroupsGetGroupsWithHttpInfo (string dataViewName, string systemName = null, bool? includeMembership = null, bool? includeEveryoneGroup = null, string scope = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns all users in the given group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to get users for</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserSummary</returns>
        PagedResultsUserSummary GroupsGetUserDetailsForGroup (string dataViewName, int? groupId, string includeDisabled = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all users in the given group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to get users for</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserSummary</returns>
        ApiResponse<PagedResultsUserSummary> GroupsGetUserDetailsForGroupWithHttpInfo (string dataViewName, int? groupId, string includeDisabled = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns all users that haven&#x27;t been allocated to a group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserSummary</returns>
        PagedResultsUserSummary GroupsGetUserDetailsForUnallocatedGroup (string dataViewName, string includeDisabled = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all users that haven&#x27;t been allocated to a group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserSummary</returns>
        ApiResponse<PagedResultsUserSummary> GroupsGetUserDetailsForUnallocatedGroupWithHttpInfo (string dataViewName, string includeDisabled = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Modify the specified group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group to modify (optional)</param>
        /// <param name="systemName">The system name associated with the group (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>GroupSummary</returns>
        GroupSummary GroupsModifyGroup (string dataViewName, int? groupId, UpdateGroupDetails body = null, string systemName = null, string scope = null);

        /// <summary>
        /// Modify the specified group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group to modify (optional)</param>
        /// <param name="systemName">The system name associated with the group (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        ApiResponse<GroupSummary> GroupsModifyGroupWithHttpInfo (string dataViewName, int? groupId, UpdateGroupDetails body = null, string systemName = null, string scope = null);
        /// <summary>
        /// Modify the specified group membership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group memberships to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>GroupSummary</returns>
        GroupSummary GroupsModifyGroupMembership (string dataViewName, int? groupId, ModifyGroupMembership body = null, string systemName = null, string scope = null);

        /// <summary>
        /// Modify the specified group membership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group memberships to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        ApiResponse<GroupSummary> GroupsModifyGroupMembershipWithHttpInfo (string dataViewName, int? groupId, ModifyGroupMembership body = null, string systemName = null, string scope = null);
        /// <summary>
        /// Modify the specified group&#x27;s systems
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group&#x27;s systems to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>GroupSummary</returns>
        GroupSummary GroupsModifyGroupSystems (string dataViewName, int? groupId, ModifyGroupSystems body = null, string systemName = null, string scope = null);

        /// <summary>
        /// Modify the specified group&#x27;s systems
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group&#x27;s systems to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        ApiResponse<GroupSummary> GroupsModifyGroupSystemsWithHttpInfo (string dataViewName, int? groupId, ModifyGroupSystems body = null, string systemName = null, string scope = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the group to create. (optional)</param>
        /// <param name="systemName">The system name for the group to be associated with. (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of GroupSummary</returns>
        System.Threading.Tasks.Task<GroupSummary> GroupsCreateGroupAsync (string dataViewName, CreateGroupDetails body = null, string systemName = null, string scope = null);

        /// <summary>
        /// Creates a new group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the group to create. (optional)</param>
        /// <param name="systemName">The system name for the group to be associated with. (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSummary>> GroupsCreateGroupAsyncWithHttpInfo (string dataViewName, CreateGroupDetails body = null, string systemName = null, string scope = null);
        /// <summary>
        /// Deletes the specified group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GroupsDeleteGroupAsync (string dataViewName, int? groupId);

        /// <summary>
        /// Deletes the specified group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GroupsDeleteGroupAsyncWithHttpInfo (string dataViewName, int? groupId);
        /// <summary>
        /// Returns details for the given group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to view the details for</param>
        /// <param name="includeMembership">If specified, whether to include membership details for the groups (optional)</param>
        /// <returns>Task of GroupDetail</returns>
        System.Threading.Tasks.Task<GroupDetail> GroupsGetGroupDetailsAsync (string dataViewName, int? groupId, bool? includeMembership = null);

        /// <summary>
        /// Returns details for the given group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to view the details for</param>
        /// <param name="includeMembership">If specified, whether to include membership details for the groups (optional)</param>
        /// <returns>Task of ApiResponse (GroupDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupDetail>> GroupsGetGroupDetailsAsyncWithHttpInfo (string dataViewName, int? groupId, bool? includeMembership = null);
        /// <summary>
        /// Returns all groups in the DataView.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">If specified, whether to limit to only groups attached to the system name (optional)</param>
        /// <param name="includeMembership">If specified, whether to include membership details for the groups (optional)</param>
        /// <param name="includeEveryoneGroup">If specified, whether to include the everyone group (optional)</param>
        /// <param name="scope">If specified, whether to return all users, users attached to the DataView only, or users attached to the system only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, UserMembershipCount. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, UserMembershipCount. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsGroupSummary</returns>
        System.Threading.Tasks.Task<PagedResultsGroupSummary> GroupsGetGroupsAsync (string dataViewName, string systemName = null, bool? includeMembership = null, bool? includeEveryoneGroup = null, string scope = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all groups in the DataView.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">If specified, whether to limit to only groups attached to the system name (optional)</param>
        /// <param name="includeMembership">If specified, whether to include membership details for the groups (optional)</param>
        /// <param name="includeEveryoneGroup">If specified, whether to include the everyone group (optional)</param>
        /// <param name="scope">If specified, whether to return all users, users attached to the DataView only, or users attached to the system only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, UserMembershipCount. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, UserMembershipCount. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsGroupSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsGroupSummary>> GroupsGetGroupsAsyncWithHttpInfo (string dataViewName, string systemName = null, bool? includeMembership = null, bool? includeEveryoneGroup = null, string scope = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns all users in the given group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to get users for</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserSummary> GroupsGetUserDetailsForGroupAsync (string dataViewName, int? groupId, string includeDisabled = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all users in the given group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to get users for</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserSummary>> GroupsGetUserDetailsForGroupAsyncWithHttpInfo (string dataViewName, int? groupId, string includeDisabled = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns all users that haven&#x27;t been allocated to a group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserSummary> GroupsGetUserDetailsForUnallocatedGroupAsync (string dataViewName, string includeDisabled = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all users that haven&#x27;t been allocated to a group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserSummary>> GroupsGetUserDetailsForUnallocatedGroupAsyncWithHttpInfo (string dataViewName, string includeDisabled = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Modify the specified group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group to modify (optional)</param>
        /// <param name="systemName">The system name associated with the group (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of GroupSummary</returns>
        System.Threading.Tasks.Task<GroupSummary> GroupsModifyGroupAsync (string dataViewName, int? groupId, UpdateGroupDetails body = null, string systemName = null, string scope = null);

        /// <summary>
        /// Modify the specified group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group to modify (optional)</param>
        /// <param name="systemName">The system name associated with the group (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSummary>> GroupsModifyGroupAsyncWithHttpInfo (string dataViewName, int? groupId, UpdateGroupDetails body = null, string systemName = null, string scope = null);
        /// <summary>
        /// Modify the specified group membership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group memberships to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of GroupSummary</returns>
        System.Threading.Tasks.Task<GroupSummary> GroupsModifyGroupMembershipAsync (string dataViewName, int? groupId, ModifyGroupMembership body = null, string systemName = null, string scope = null);

        /// <summary>
        /// Modify the specified group membership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group memberships to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSummary>> GroupsModifyGroupMembershipAsyncWithHttpInfo (string dataViewName, int? groupId, ModifyGroupMembership body = null, string systemName = null, string scope = null);
        /// <summary>
        /// Modify the specified group&#x27;s systems
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group&#x27;s systems to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of GroupSummary</returns>
        System.Threading.Tasks.Task<GroupSummary> GroupsModifyGroupSystemsAsync (string dataViewName, int? groupId, ModifyGroupSystems body = null, string systemName = null, string scope = null);

        /// <summary>
        /// Modify the specified group&#x27;s systems
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group&#x27;s systems to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSummary>> GroupsModifyGroupSystemsAsyncWithHttpInfo (string dataViewName, int? groupId, ModifyGroupSystems body = null, string systemName = null, string scope = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class GroupsApi : IGroupsApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// </summary>
        /// <returns></returns>
        public GroupsApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupsApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new group. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the group to create. (optional)</param>
        /// <param name="systemName">The system name for the group to be associated with. (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>GroupSummary</returns>
        public GroupSummary GroupsCreateGroup (string dataViewName, CreateGroupDetails body = null, string systemName = null, string scope = null)
        {
             ApiResponse<GroupSummary> localVarResponse = GroupsCreateGroupWithHttpInfo(dataViewName, body, systemName, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new group. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the group to create. (optional)</param>
        /// <param name="systemName">The system name for the group to be associated with. (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        public ApiResponse< GroupSummary > GroupsCreateGroupWithHttpInfo (string dataViewName, CreateGroupDetails body = null, string systemName = null, string scope = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsCreateGroup");

            var localVarPath = "./{dataViewName}/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsCreateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
        }

        /// <summary>
        /// Creates a new group. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the group to create. (optional)</param>
        /// <param name="systemName">The system name for the group to be associated with. (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of GroupSummary</returns>
        public async System.Threading.Tasks.Task<GroupSummary> GroupsCreateGroupAsync (string dataViewName, CreateGroupDetails body = null, string systemName = null, string scope = null)
        {
             ApiResponse<GroupSummary> localVarResponse = await GroupsCreateGroupAsyncWithHttpInfo(dataViewName, body, systemName, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new group. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the group to create. (optional)</param>
        /// <param name="systemName">The system name for the group to be associated with. (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSummary>> GroupsCreateGroupAsyncWithHttpInfo (string dataViewName, CreateGroupDetails body = null, string systemName = null, string scope = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsCreateGroup");

            var localVarPath = "./{dataViewName}/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsCreateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
        }

        /// <summary>
        /// Deletes the specified group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to delete</param>
        /// <returns></returns>
        public void GroupsDeleteGroup (string dataViewName, int? groupId)
        {
             GroupsDeleteGroupWithHttpInfo(dataViewName, groupId);
        }

        /// <summary>
        /// Deletes the specified group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GroupsDeleteGroupWithHttpInfo (string dataViewName, int? groupId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsDeleteGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GroupsDeleteGroup");

            var localVarPath = "./{dataViewName}/Groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsDeleteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes the specified group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GroupsDeleteGroupAsync (string dataViewName, int? groupId)
        {
             await GroupsDeleteGroupAsyncWithHttpInfo(dataViewName, groupId);

        }

        /// <summary>
        /// Deletes the specified group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GroupsDeleteGroupAsyncWithHttpInfo (string dataViewName, int? groupId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsDeleteGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GroupsDeleteGroup");

            var localVarPath = "./{dataViewName}/Groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsDeleteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns details for the given group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to view the details for</param>
        /// <param name="includeMembership">If specified, whether to include membership details for the groups (optional)</param>
        /// <returns>GroupDetail</returns>
        public GroupDetail GroupsGetGroupDetails (string dataViewName, int? groupId, bool? includeMembership = null)
        {
             ApiResponse<GroupDetail> localVarResponse = GroupsGetGroupDetailsWithHttpInfo(dataViewName, groupId, includeMembership);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details for the given group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to view the details for</param>
        /// <param name="includeMembership">If specified, whether to include membership details for the groups (optional)</param>
        /// <returns>ApiResponse of GroupDetail</returns>
        public ApiResponse< GroupDetail > GroupsGetGroupDetailsWithHttpInfo (string dataViewName, int? groupId, bool? includeMembership = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsGetGroupDetails");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GroupsGetGroupDetails");

            var localVarPath = "./{dataViewName}/Groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (includeMembership != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMembership", includeMembership)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsGetGroupDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupDetail)));
        }

        /// <summary>
        /// Returns details for the given group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to view the details for</param>
        /// <param name="includeMembership">If specified, whether to include membership details for the groups (optional)</param>
        /// <returns>Task of GroupDetail</returns>
        public async System.Threading.Tasks.Task<GroupDetail> GroupsGetGroupDetailsAsync (string dataViewName, int? groupId, bool? includeMembership = null)
        {
             ApiResponse<GroupDetail> localVarResponse = await GroupsGetGroupDetailsAsyncWithHttpInfo(dataViewName, groupId, includeMembership);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details for the given group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to view the details for</param>
        /// <param name="includeMembership">If specified, whether to include membership details for the groups (optional)</param>
        /// <returns>Task of ApiResponse (GroupDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupDetail>> GroupsGetGroupDetailsAsyncWithHttpInfo (string dataViewName, int? groupId, bool? includeMembership = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsGetGroupDetails");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GroupsGetGroupDetails");

            var localVarPath = "./{dataViewName}/Groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (includeMembership != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMembership", includeMembership)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsGetGroupDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupDetail)));
        }

        /// <summary>
        /// Returns all groups in the DataView. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">If specified, whether to limit to only groups attached to the system name (optional)</param>
        /// <param name="includeMembership">If specified, whether to include membership details for the groups (optional)</param>
        /// <param name="includeEveryoneGroup">If specified, whether to include the everyone group (optional)</param>
        /// <param name="scope">If specified, whether to return all users, users attached to the DataView only, or users attached to the system only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, UserMembershipCount. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, UserMembershipCount. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsGroupSummary</returns>
        public PagedResultsGroupSummary GroupsGetGroups (string dataViewName, string systemName = null, bool? includeMembership = null, bool? includeEveryoneGroup = null, string scope = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsGroupSummary> localVarResponse = GroupsGetGroupsWithHttpInfo(dataViewName, systemName, includeMembership, includeEveryoneGroup, scope, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all groups in the DataView. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">If specified, whether to limit to only groups attached to the system name (optional)</param>
        /// <param name="includeMembership">If specified, whether to include membership details for the groups (optional)</param>
        /// <param name="includeEveryoneGroup">If specified, whether to include the everyone group (optional)</param>
        /// <param name="scope">If specified, whether to return all users, users attached to the DataView only, or users attached to the system only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, UserMembershipCount. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, UserMembershipCount. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsGroupSummary</returns>
        public ApiResponse< PagedResultsGroupSummary > GroupsGetGroupsWithHttpInfo (string dataViewName, string systemName = null, bool? includeMembership = null, bool? includeEveryoneGroup = null, string scope = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsGetGroups");

            var localVarPath = "./{dataViewName}/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (includeMembership != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMembership", includeMembership)); // query parameter
            if (includeEveryoneGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeEveryoneGroup", includeEveryoneGroup)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsGetGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsGroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsGroupSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsGroupSummary)));
        }

        /// <summary>
        /// Returns all groups in the DataView. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">If specified, whether to limit to only groups attached to the system name (optional)</param>
        /// <param name="includeMembership">If specified, whether to include membership details for the groups (optional)</param>
        /// <param name="includeEveryoneGroup">If specified, whether to include the everyone group (optional)</param>
        /// <param name="scope">If specified, whether to return all users, users attached to the DataView only, or users attached to the system only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, UserMembershipCount. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, UserMembershipCount. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsGroupSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsGroupSummary> GroupsGetGroupsAsync (string dataViewName, string systemName = null, bool? includeMembership = null, bool? includeEveryoneGroup = null, string scope = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsGroupSummary> localVarResponse = await GroupsGetGroupsAsyncWithHttpInfo(dataViewName, systemName, includeMembership, includeEveryoneGroup, scope, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all groups in the DataView. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">If specified, whether to limit to only groups attached to the system name (optional)</param>
        /// <param name="includeMembership">If specified, whether to include membership details for the groups (optional)</param>
        /// <param name="includeEveryoneGroup">If specified, whether to include the everyone group (optional)</param>
        /// <param name="scope">If specified, whether to return all users, users attached to the DataView only, or users attached to the system only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, UserMembershipCount. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, UserMembershipCount. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsGroupSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsGroupSummary>> GroupsGetGroupsAsyncWithHttpInfo (string dataViewName, string systemName = null, bool? includeMembership = null, bool? includeEveryoneGroup = null, string scope = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsGetGroups");

            var localVarPath = "./{dataViewName}/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (includeMembership != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMembership", includeMembership)); // query parameter
            if (includeEveryoneGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeEveryoneGroup", includeEveryoneGroup)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsGetGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsGroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsGroupSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsGroupSummary)));
        }

        /// <summary>
        /// Returns all users in the given group. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to get users for</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserSummary</returns>
        public PagedResultsUserSummary GroupsGetUserDetailsForGroup (string dataViewName, int? groupId, string includeDisabled = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserSummary> localVarResponse = GroupsGetUserDetailsForGroupWithHttpInfo(dataViewName, groupId, includeDisabled, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all users in the given group. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to get users for</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserSummary</returns>
        public ApiResponse< PagedResultsUserSummary > GroupsGetUserDetailsForGroupWithHttpInfo (string dataViewName, int? groupId, string includeDisabled = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsGetUserDetailsForGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GroupsGetUserDetailsForGroup");

            var localVarPath = "./{dataViewName}/Groups/{groupId}/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (includeDisabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDisabled", includeDisabled)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsGetUserDetailsForGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserSummary)));
        }

        /// <summary>
        /// Returns all users in the given group. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to get users for</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserSummary> GroupsGetUserDetailsForGroupAsync (string dataViewName, int? groupId, string includeDisabled = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserSummary> localVarResponse = await GroupsGetUserDetailsForGroupAsyncWithHttpInfo(dataViewName, groupId, includeDisabled, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all users in the given group. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group to get users for</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserSummary>> GroupsGetUserDetailsForGroupAsyncWithHttpInfo (string dataViewName, int? groupId, string includeDisabled = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsGetUserDetailsForGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GroupsGetUserDetailsForGroup");

            var localVarPath = "./{dataViewName}/Groups/{groupId}/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (includeDisabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDisabled", includeDisabled)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsGetUserDetailsForGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserSummary)));
        }

        /// <summary>
        /// Returns all users that haven&#x27;t been allocated to a group. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserSummary</returns>
        public PagedResultsUserSummary GroupsGetUserDetailsForUnallocatedGroup (string dataViewName, string includeDisabled = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserSummary> localVarResponse = GroupsGetUserDetailsForUnallocatedGroupWithHttpInfo(dataViewName, includeDisabled, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all users that haven&#x27;t been allocated to a group. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserSummary</returns>
        public ApiResponse< PagedResultsUserSummary > GroupsGetUserDetailsForUnallocatedGroupWithHttpInfo (string dataViewName, string includeDisabled = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsGetUserDetailsForUnallocatedGroup");

            var localVarPath = "./{dataViewName}/Groups/Unallocated/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (includeDisabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDisabled", includeDisabled)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsGetUserDetailsForUnallocatedGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserSummary)));
        }

        /// <summary>
        /// Returns all users that haven&#x27;t been allocated to a group. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserSummary> GroupsGetUserDetailsForUnallocatedGroupAsync (string dataViewName, string includeDisabled = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserSummary> localVarResponse = await GroupsGetUserDetailsForUnallocatedGroupAsyncWithHttpInfo(dataViewName, includeDisabled, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all users that haven&#x27;t been allocated to a group. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserSummary>> GroupsGetUserDetailsForUnallocatedGroupAsyncWithHttpInfo (string dataViewName, string includeDisabled = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsGetUserDetailsForUnallocatedGroup");

            var localVarPath = "./{dataViewName}/Groups/Unallocated/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (includeDisabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDisabled", includeDisabled)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsGetUserDetailsForUnallocatedGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserSummary)));
        }

        /// <summary>
        /// Modify the specified group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group to modify (optional)</param>
        /// <param name="systemName">The system name associated with the group (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>GroupSummary</returns>
        public GroupSummary GroupsModifyGroup (string dataViewName, int? groupId, UpdateGroupDetails body = null, string systemName = null, string scope = null)
        {
             ApiResponse<GroupSummary> localVarResponse = GroupsModifyGroupWithHttpInfo(dataViewName, groupId, body, systemName, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify the specified group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group to modify (optional)</param>
        /// <param name="systemName">The system name associated with the group (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        public ApiResponse< GroupSummary > GroupsModifyGroupWithHttpInfo (string dataViewName, int? groupId, UpdateGroupDetails body = null, string systemName = null, string scope = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsModifyGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GroupsModifyGroup");

            var localVarPath = "./{dataViewName}/Groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsModifyGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
        }

        /// <summary>
        /// Modify the specified group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group to modify (optional)</param>
        /// <param name="systemName">The system name associated with the group (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of GroupSummary</returns>
        public async System.Threading.Tasks.Task<GroupSummary> GroupsModifyGroupAsync (string dataViewName, int? groupId, UpdateGroupDetails body = null, string systemName = null, string scope = null)
        {
             ApiResponse<GroupSummary> localVarResponse = await GroupsModifyGroupAsyncWithHttpInfo(dataViewName, groupId, body, systemName, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify the specified group 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group to modify (optional)</param>
        /// <param name="systemName">The system name associated with the group (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSummary>> GroupsModifyGroupAsyncWithHttpInfo (string dataViewName, int? groupId, UpdateGroupDetails body = null, string systemName = null, string scope = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsModifyGroup");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GroupsModifyGroup");

            var localVarPath = "./{dataViewName}/Groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsModifyGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
        }

        /// <summary>
        /// Modify the specified group membership 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group memberships to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>GroupSummary</returns>
        public GroupSummary GroupsModifyGroupMembership (string dataViewName, int? groupId, ModifyGroupMembership body = null, string systemName = null, string scope = null)
        {
             ApiResponse<GroupSummary> localVarResponse = GroupsModifyGroupMembershipWithHttpInfo(dataViewName, groupId, body, systemName, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify the specified group membership 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group memberships to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        public ApiResponse< GroupSummary > GroupsModifyGroupMembershipWithHttpInfo (string dataViewName, int? groupId, ModifyGroupMembership body = null, string systemName = null, string scope = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsModifyGroupMembership");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GroupsModifyGroupMembership");

            var localVarPath = "./{dataViewName}/Groups/{groupId}/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsModifyGroupMembership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
        }

        /// <summary>
        /// Modify the specified group membership 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group memberships to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of GroupSummary</returns>
        public async System.Threading.Tasks.Task<GroupSummary> GroupsModifyGroupMembershipAsync (string dataViewName, int? groupId, ModifyGroupMembership body = null, string systemName = null, string scope = null)
        {
             ApiResponse<GroupSummary> localVarResponse = await GroupsModifyGroupMembershipAsyncWithHttpInfo(dataViewName, groupId, body, systemName, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify the specified group membership 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group memberships to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSummary>> GroupsModifyGroupMembershipAsyncWithHttpInfo (string dataViewName, int? groupId, ModifyGroupMembership body = null, string systemName = null, string scope = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsModifyGroupMembership");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GroupsModifyGroupMembership");

            var localVarPath = "./{dataViewName}/Groups/{groupId}/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsModifyGroupMembership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
        }

        /// <summary>
        /// Modify the specified group&#x27;s systems 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group&#x27;s systems to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>GroupSummary</returns>
        public GroupSummary GroupsModifyGroupSystems (string dataViewName, int? groupId, ModifyGroupSystems body = null, string systemName = null, string scope = null)
        {
             ApiResponse<GroupSummary> localVarResponse = GroupsModifyGroupSystemsWithHttpInfo(dataViewName, groupId, body, systemName, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify the specified group&#x27;s systems 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group&#x27;s systems to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        public ApiResponse< GroupSummary > GroupsModifyGroupSystemsWithHttpInfo (string dataViewName, int? groupId, ModifyGroupSystems body = null, string systemName = null, string scope = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsModifyGroupSystems");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GroupsModifyGroupSystems");

            var localVarPath = "./{dataViewName}/Groups/{groupId}/Systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsModifyGroupSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
        }

        /// <summary>
        /// Modify the specified group&#x27;s systems 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group&#x27;s systems to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of GroupSummary</returns>
        public async System.Threading.Tasks.Task<GroupSummary> GroupsModifyGroupSystemsAsync (string dataViewName, int? groupId, ModifyGroupSystems body = null, string systemName = null, string scope = null)
        {
             ApiResponse<GroupSummary> localVarResponse = await GroupsModifyGroupSystemsAsyncWithHttpInfo(dataViewName, groupId, body, systemName, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify the specified group&#x27;s systems 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="groupId">The id of the group</param>
        /// <param name="body">The group&#x27;s systems to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSummary>> GroupsModifyGroupSystemsAsyncWithHttpInfo (string dataViewName, int? groupId, ModifyGroupSystems body = null, string systemName = null, string scope = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling GroupsApi->GroupsModifyGroupSystems");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GroupsModifyGroupSystems");

            var localVarPath = "./{dataViewName}/Groups/{groupId}/Systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsModifyGroupSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
        }

    }
}
