/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICollectionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new collection from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the collection to create.  If you want to update a specific collection then PUT to the /Collections/{collectionId} URL (optional)</param>
        /// <returns>UpsertCollectionDetail</returns>
        UpsertCollectionDetail CollectionsCreateCollection (string dataViewName, UpsertCollectionDetail body = null);

        /// <summary>
        /// Creates a new collection from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the collection to create.  If you want to update a specific collection then PUT to the /Collections/{collectionId} URL (optional)</param>
        /// <returns>ApiResponse of UpsertCollectionDetail</returns>
        ApiResponse<UpsertCollectionDetail> CollectionsCreateCollectionWithHttpInfo (string dataViewName, UpsertCollectionDetail body = null);
        /// <summary>
        /// Register a hit (view) for the given collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to register the hit for</param>
        /// <param name="body">Details to register the hit with (optional)</param>
        /// <returns>CollectionHitDetail</returns>
        CollectionHitDetail CollectionsCreateCollectionHitForCollection (string dataViewName, int? collectionId, CreateCollectionHitDetails body = null);

        /// <summary>
        /// Register a hit (view) for the given collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to register the hit for</param>
        /// <param name="body">Details to register the hit with (optional)</param>
        /// <returns>ApiResponse of CollectionHitDetail</returns>
        ApiResponse<CollectionHitDetail> CollectionsCreateCollectionHitForCollectionWithHttpInfo (string dataViewName, int? collectionId, CreateCollectionHitDetails body = null);
        /// <summary>
        /// Deletes the specified collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to delete</param>
        /// <returns></returns>
        void CollectionsDeleteCollection (string dataViewName, int? collectionId);

        /// <summary>
        /// Deletes the specified collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CollectionsDeleteCollectionWithHttpInfo (string dataViewName, int? collectionId);
        /// <summary>
        /// Returns the details of a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>CollectionDetail</returns>
        CollectionDetail CollectionsGetCollection (string dataViewName, int? collectionId);

        /// <summary>
        /// Returns the details of a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>ApiResponse of CollectionDetail</returns>
        ApiResponse<CollectionDetail> CollectionsGetCollectionWithHttpInfo (string dataViewName, int? collectionId);
        /// <summary>
        /// Returns details for a given collection hit for this collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the hit information for</param>
        /// <param name="collectionHitId">The id of the hit</param>
        /// <returns>CollectionHitDetail</returns>
        CollectionHitDetail CollectionsGetCollectionHitForCollection (string dataViewName, int? collectionId, int? collectionHitId);

        /// <summary>
        /// Returns details for a given collection hit for this collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the hit information for</param>
        /// <param name="collectionHitId">The id of the hit</param>
        /// <returns>ApiResponse of CollectionHitDetail</returns>
        ApiResponse<CollectionHitDetail> CollectionsGetCollectionHitForCollectionWithHttpInfo (string dataViewName, int? collectionId, int? collectionHitId);
        /// <summary>
        /// Returns a summary of the hits for this collection - i.e. information about when users have viewed the collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCollectionHitSummary</returns>
        PagedResultsCollectionHitSummary CollectionsGetCollectionHitsForCollection (string dataViewName, int? collectionId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the hits for this collection - i.e. information about when users have viewed the collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCollectionHitSummary</returns>
        ApiResponse<PagedResultsCollectionHitSummary> CollectionsGetCollectionHitsForCollectionWithHttpInfo (string dataViewName, int? collectionId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns details of a part contained within a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection that contains the part</param>
        /// <param name="partIndex">The index of the part within the collection</param>
        /// <returns>CollectionPartDetail</returns>
        CollectionPartDetail CollectionsGetCollectionPart (string dataViewName, int? collectionId, int? partIndex);

        /// <summary>
        /// Returns details of a part contained within a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection that contains the part</param>
        /// <param name="partIndex">The index of the part within the collection</param>
        /// <returns>ApiResponse of CollectionPartDetail</returns>
        ApiResponse<CollectionPartDetail> CollectionsGetCollectionPartWithHttpInfo (string dataViewName, int? collectionId, int? partIndex);
        /// <summary>
        /// Returns a summary of the parts contained within a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the parts for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Title, VisualisationType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Title, VisualisationType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCollectionPartSummary</returns>
        PagedResultsCollectionPartSummary CollectionsGetCollectionParts (string dataViewName, int? collectionId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the parts contained within a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the parts for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Title, VisualisationType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Title, VisualisationType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCollectionPartSummary</returns>
        ApiResponse<PagedResultsCollectionPartSummary> CollectionsGetCollectionPartsWithHttpInfo (string dataViewName, int? collectionId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each collection in the DataView.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCollectionSummary</returns>
        PagedResultsCollectionSummary CollectionsGetCollections (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each collection in the DataView.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCollectionSummary</returns>
        ApiResponse<PagedResultsCollectionSummary> CollectionsGetCollectionsWithHttpInfo (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Transfer ownership of a collection from the current user to a new owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to transfer.</param>
        /// <param name="body">The details for transferring ownership of the collection. (optional)</param>
        /// <returns>CollectionDetail</returns>
        CollectionDetail CollectionsTransferCollectionOwnership (string dataViewName, int? collectionId, TransferCollectionOwnershipDetails body = null);

        /// <summary>
        /// Transfer ownership of a collection from the current user to a new owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to transfer.</param>
        /// <param name="body">The details for transferring ownership of the collection. (optional)</param>
        /// <returns>ApiResponse of CollectionDetail</returns>
        ApiResponse<CollectionDetail> CollectionsTransferCollectionOwnershipWithHttpInfo (string dataViewName, int? collectionId, TransferCollectionOwnershipDetails body = null);
        /// <summary>
        /// Updates the details of a particular collection.  If you don&#x27;t have an id for the  collection then POST to the /Collections URL to create a new collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to add/update</param>
        /// <param name="body">The details for the collection to add/update (optional)</param>
        /// <returns>CollectionDetail</returns>
        CollectionDetail CollectionsUpsertCollection (string dataViewName, int? collectionId, UpsertCollectionDetail body = null);

        /// <summary>
        /// Updates the details of a particular collection.  If you don&#x27;t have an id for the  collection then POST to the /Collections URL to create a new collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to add/update</param>
        /// <param name="body">The details for the collection to add/update (optional)</param>
        /// <returns>ApiResponse of CollectionDetail</returns>
        ApiResponse<CollectionDetail> CollectionsUpsertCollectionWithHttpInfo (string dataViewName, int? collectionId, UpsertCollectionDetail body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new collection from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the collection to create.  If you want to update a specific collection then PUT to the /Collections/{collectionId} URL (optional)</param>
        /// <returns>Task of UpsertCollectionDetail</returns>
        System.Threading.Tasks.Task<UpsertCollectionDetail> CollectionsCreateCollectionAsync (string dataViewName, UpsertCollectionDetail body = null);

        /// <summary>
        /// Creates a new collection from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the collection to create.  If you want to update a specific collection then PUT to the /Collections/{collectionId} URL (optional)</param>
        /// <returns>Task of ApiResponse (UpsertCollectionDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpsertCollectionDetail>> CollectionsCreateCollectionAsyncWithHttpInfo (string dataViewName, UpsertCollectionDetail body = null);
        /// <summary>
        /// Register a hit (view) for the given collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to register the hit for</param>
        /// <param name="body">Details to register the hit with (optional)</param>
        /// <returns>Task of CollectionHitDetail</returns>
        System.Threading.Tasks.Task<CollectionHitDetail> CollectionsCreateCollectionHitForCollectionAsync (string dataViewName, int? collectionId, CreateCollectionHitDetails body = null);

        /// <summary>
        /// Register a hit (view) for the given collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to register the hit for</param>
        /// <param name="body">Details to register the hit with (optional)</param>
        /// <returns>Task of ApiResponse (CollectionHitDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionHitDetail>> CollectionsCreateCollectionHitForCollectionAsyncWithHttpInfo (string dataViewName, int? collectionId, CreateCollectionHitDetails body = null);
        /// <summary>
        /// Deletes the specified collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CollectionsDeleteCollectionAsync (string dataViewName, int? collectionId);

        /// <summary>
        /// Deletes the specified collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CollectionsDeleteCollectionAsyncWithHttpInfo (string dataViewName, int? collectionId);
        /// <summary>
        /// Returns the details of a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>Task of CollectionDetail</returns>
        System.Threading.Tasks.Task<CollectionDetail> CollectionsGetCollectionAsync (string dataViewName, int? collectionId);

        /// <summary>
        /// Returns the details of a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>Task of ApiResponse (CollectionDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionDetail>> CollectionsGetCollectionAsyncWithHttpInfo (string dataViewName, int? collectionId);
        /// <summary>
        /// Returns details for a given collection hit for this collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the hit information for</param>
        /// <param name="collectionHitId">The id of the hit</param>
        /// <returns>Task of CollectionHitDetail</returns>
        System.Threading.Tasks.Task<CollectionHitDetail> CollectionsGetCollectionHitForCollectionAsync (string dataViewName, int? collectionId, int? collectionHitId);

        /// <summary>
        /// Returns details for a given collection hit for this collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the hit information for</param>
        /// <param name="collectionHitId">The id of the hit</param>
        /// <returns>Task of ApiResponse (CollectionHitDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionHitDetail>> CollectionsGetCollectionHitForCollectionAsyncWithHttpInfo (string dataViewName, int? collectionId, int? collectionHitId);
        /// <summary>
        /// Returns a summary of the hits for this collection - i.e. information about when users have viewed the collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCollectionHitSummary</returns>
        System.Threading.Tasks.Task<PagedResultsCollectionHitSummary> CollectionsGetCollectionHitsForCollectionAsync (string dataViewName, int? collectionId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the hits for this collection - i.e. information about when users have viewed the collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCollectionHitSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsCollectionHitSummary>> CollectionsGetCollectionHitsForCollectionAsyncWithHttpInfo (string dataViewName, int? collectionId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns details of a part contained within a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection that contains the part</param>
        /// <param name="partIndex">The index of the part within the collection</param>
        /// <returns>Task of CollectionPartDetail</returns>
        System.Threading.Tasks.Task<CollectionPartDetail> CollectionsGetCollectionPartAsync (string dataViewName, int? collectionId, int? partIndex);

        /// <summary>
        /// Returns details of a part contained within a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection that contains the part</param>
        /// <param name="partIndex">The index of the part within the collection</param>
        /// <returns>Task of ApiResponse (CollectionPartDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionPartDetail>> CollectionsGetCollectionPartAsyncWithHttpInfo (string dataViewName, int? collectionId, int? partIndex);
        /// <summary>
        /// Returns a summary of the parts contained within a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the parts for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Title, VisualisationType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Title, VisualisationType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCollectionPartSummary</returns>
        System.Threading.Tasks.Task<PagedResultsCollectionPartSummary> CollectionsGetCollectionPartsAsync (string dataViewName, int? collectionId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the parts contained within a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the parts for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Title, VisualisationType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Title, VisualisationType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCollectionPartSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsCollectionPartSummary>> CollectionsGetCollectionPartsAsyncWithHttpInfo (string dataViewName, int? collectionId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each collection in the DataView.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCollectionSummary</returns>
        System.Threading.Tasks.Task<PagedResultsCollectionSummary> CollectionsGetCollectionsAsync (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each collection in the DataView.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCollectionSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsCollectionSummary>> CollectionsGetCollectionsAsyncWithHttpInfo (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Transfer ownership of a collection from the current user to a new owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to transfer.</param>
        /// <param name="body">The details for transferring ownership of the collection. (optional)</param>
        /// <returns>Task of CollectionDetail</returns>
        System.Threading.Tasks.Task<CollectionDetail> CollectionsTransferCollectionOwnershipAsync (string dataViewName, int? collectionId, TransferCollectionOwnershipDetails body = null);

        /// <summary>
        /// Transfer ownership of a collection from the current user to a new owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to transfer.</param>
        /// <param name="body">The details for transferring ownership of the collection. (optional)</param>
        /// <returns>Task of ApiResponse (CollectionDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionDetail>> CollectionsTransferCollectionOwnershipAsyncWithHttpInfo (string dataViewName, int? collectionId, TransferCollectionOwnershipDetails body = null);
        /// <summary>
        /// Updates the details of a particular collection.  If you don&#x27;t have an id for the  collection then POST to the /Collections URL to create a new collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to add/update</param>
        /// <param name="body">The details for the collection to add/update (optional)</param>
        /// <returns>Task of CollectionDetail</returns>
        System.Threading.Tasks.Task<CollectionDetail> CollectionsUpsertCollectionAsync (string dataViewName, int? collectionId, UpsertCollectionDetail body = null);

        /// <summary>
        /// Updates the details of a particular collection.  If you don&#x27;t have an id for the  collection then POST to the /Collections URL to create a new collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to add/update</param>
        /// <param name="body">The details for the collection to add/update (optional)</param>
        /// <returns>Task of ApiResponse (CollectionDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionDetail>> CollectionsUpsertCollectionAsyncWithHttpInfo (string dataViewName, int? collectionId, UpsertCollectionDetail body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CollectionsApi : ICollectionsApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionsApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CollectionsApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CollectionsApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new collection from the given details for the logged in user. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the collection to create.  If you want to update a specific collection then PUT to the /Collections/{collectionId} URL (optional)</param>
        /// <returns>UpsertCollectionDetail</returns>
        public UpsertCollectionDetail CollectionsCreateCollection (string dataViewName, UpsertCollectionDetail body = null)
        {
             ApiResponse<UpsertCollectionDetail> localVarResponse = CollectionsCreateCollectionWithHttpInfo(dataViewName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new collection from the given details for the logged in user. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the collection to create.  If you want to update a specific collection then PUT to the /Collections/{collectionId} URL (optional)</param>
        /// <returns>ApiResponse of UpsertCollectionDetail</returns>
        public ApiResponse< UpsertCollectionDetail > CollectionsCreateCollectionWithHttpInfo (string dataViewName, UpsertCollectionDetail body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsCreateCollection");

            var localVarPath = "./{dataViewName}/Collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsCreateCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertCollectionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UpsertCollectionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertCollectionDetail)));
        }

        /// <summary>
        /// Creates a new collection from the given details for the logged in user. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the collection to create.  If you want to update a specific collection then PUT to the /Collections/{collectionId} URL (optional)</param>
        /// <returns>Task of UpsertCollectionDetail</returns>
        public async System.Threading.Tasks.Task<UpsertCollectionDetail> CollectionsCreateCollectionAsync (string dataViewName, UpsertCollectionDetail body = null)
        {
             ApiResponse<UpsertCollectionDetail> localVarResponse = await CollectionsCreateCollectionAsyncWithHttpInfo(dataViewName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new collection from the given details for the logged in user. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the collection to create.  If you want to update a specific collection then PUT to the /Collections/{collectionId} URL (optional)</param>
        /// <returns>Task of ApiResponse (UpsertCollectionDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpsertCollectionDetail>> CollectionsCreateCollectionAsyncWithHttpInfo (string dataViewName, UpsertCollectionDetail body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsCreateCollection");

            var localVarPath = "./{dataViewName}/Collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsCreateCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertCollectionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UpsertCollectionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertCollectionDetail)));
        }

        /// <summary>
        /// Register a hit (view) for the given collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to register the hit for</param>
        /// <param name="body">Details to register the hit with (optional)</param>
        /// <returns>CollectionHitDetail</returns>
        public CollectionHitDetail CollectionsCreateCollectionHitForCollection (string dataViewName, int? collectionId, CreateCollectionHitDetails body = null)
        {
             ApiResponse<CollectionHitDetail> localVarResponse = CollectionsCreateCollectionHitForCollectionWithHttpInfo(dataViewName, collectionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register a hit (view) for the given collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to register the hit for</param>
        /// <param name="body">Details to register the hit with (optional)</param>
        /// <returns>ApiResponse of CollectionHitDetail</returns>
        public ApiResponse< CollectionHitDetail > CollectionsCreateCollectionHitForCollectionWithHttpInfo (string dataViewName, int? collectionId, CreateCollectionHitDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsCreateCollectionHitForCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsCreateCollectionHitForCollection");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}/Hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsCreateCollectionHitForCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionHitDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CollectionHitDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionHitDetail)));
        }

        /// <summary>
        /// Register a hit (view) for the given collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to register the hit for</param>
        /// <param name="body">Details to register the hit with (optional)</param>
        /// <returns>Task of CollectionHitDetail</returns>
        public async System.Threading.Tasks.Task<CollectionHitDetail> CollectionsCreateCollectionHitForCollectionAsync (string dataViewName, int? collectionId, CreateCollectionHitDetails body = null)
        {
             ApiResponse<CollectionHitDetail> localVarResponse = await CollectionsCreateCollectionHitForCollectionAsyncWithHttpInfo(dataViewName, collectionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register a hit (view) for the given collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to register the hit for</param>
        /// <param name="body">Details to register the hit with (optional)</param>
        /// <returns>Task of ApiResponse (CollectionHitDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionHitDetail>> CollectionsCreateCollectionHitForCollectionAsyncWithHttpInfo (string dataViewName, int? collectionId, CreateCollectionHitDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsCreateCollectionHitForCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsCreateCollectionHitForCollection");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}/Hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsCreateCollectionHitForCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionHitDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CollectionHitDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionHitDetail)));
        }

        /// <summary>
        /// Deletes the specified collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to delete</param>
        /// <returns></returns>
        public void CollectionsDeleteCollection (string dataViewName, int? collectionId)
        {
             CollectionsDeleteCollectionWithHttpInfo(dataViewName, collectionId);
        }

        /// <summary>
        /// Deletes the specified collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CollectionsDeleteCollectionWithHttpInfo (string dataViewName, int? collectionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsDeleteCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsDeleteCollection");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsDeleteCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes the specified collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CollectionsDeleteCollectionAsync (string dataViewName, int? collectionId)
        {
             await CollectionsDeleteCollectionAsyncWithHttpInfo(dataViewName, collectionId);

        }

        /// <summary>
        /// Deletes the specified collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CollectionsDeleteCollectionAsyncWithHttpInfo (string dataViewName, int? collectionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsDeleteCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsDeleteCollection");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsDeleteCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns the details of a particular collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>CollectionDetail</returns>
        public CollectionDetail CollectionsGetCollection (string dataViewName, int? collectionId)
        {
             ApiResponse<CollectionDetail> localVarResponse = CollectionsGetCollectionWithHttpInfo(dataViewName, collectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>ApiResponse of CollectionDetail</returns>
        public ApiResponse< CollectionDetail > CollectionsGetCollectionWithHttpInfo (string dataViewName, int? collectionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsGetCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsGetCollection");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsGetCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CollectionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionDetail)));
        }

        /// <summary>
        /// Returns the details of a particular collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>Task of CollectionDetail</returns>
        public async System.Threading.Tasks.Task<CollectionDetail> CollectionsGetCollectionAsync (string dataViewName, int? collectionId)
        {
             ApiResponse<CollectionDetail> localVarResponse = await CollectionsGetCollectionAsyncWithHttpInfo(dataViewName, collectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>Task of ApiResponse (CollectionDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionDetail>> CollectionsGetCollectionAsyncWithHttpInfo (string dataViewName, int? collectionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsGetCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsGetCollection");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsGetCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CollectionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionDetail)));
        }

        /// <summary>
        /// Returns details for a given collection hit for this collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the hit information for</param>
        /// <param name="collectionHitId">The id of the hit</param>
        /// <returns>CollectionHitDetail</returns>
        public CollectionHitDetail CollectionsGetCollectionHitForCollection (string dataViewName, int? collectionId, int? collectionHitId)
        {
             ApiResponse<CollectionHitDetail> localVarResponse = CollectionsGetCollectionHitForCollectionWithHttpInfo(dataViewName, collectionId, collectionHitId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details for a given collection hit for this collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the hit information for</param>
        /// <param name="collectionHitId">The id of the hit</param>
        /// <returns>ApiResponse of CollectionHitDetail</returns>
        public ApiResponse< CollectionHitDetail > CollectionsGetCollectionHitForCollectionWithHttpInfo (string dataViewName, int? collectionId, int? collectionHitId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsGetCollectionHitForCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsGetCollectionHitForCollection");
            // verify the required parameter 'collectionHitId' is set
            if (collectionHitId == null)
                throw new ApiException(400, "Missing required parameter 'collectionHitId' when calling CollectionsApi->CollectionsGetCollectionHitForCollection");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}/Hits/{collectionHitId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionHitId != null) localVarPathParams.Add("collectionHitId", this.Configuration.ApiClient.ParameterToString(collectionHitId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsGetCollectionHitForCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionHitDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CollectionHitDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionHitDetail)));
        }

        /// <summary>
        /// Returns details for a given collection hit for this collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the hit information for</param>
        /// <param name="collectionHitId">The id of the hit</param>
        /// <returns>Task of CollectionHitDetail</returns>
        public async System.Threading.Tasks.Task<CollectionHitDetail> CollectionsGetCollectionHitForCollectionAsync (string dataViewName, int? collectionId, int? collectionHitId)
        {
             ApiResponse<CollectionHitDetail> localVarResponse = await CollectionsGetCollectionHitForCollectionAsyncWithHttpInfo(dataViewName, collectionId, collectionHitId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details for a given collection hit for this collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the hit information for</param>
        /// <param name="collectionHitId">The id of the hit</param>
        /// <returns>Task of ApiResponse (CollectionHitDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionHitDetail>> CollectionsGetCollectionHitForCollectionAsyncWithHttpInfo (string dataViewName, int? collectionId, int? collectionHitId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsGetCollectionHitForCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsGetCollectionHitForCollection");
            // verify the required parameter 'collectionHitId' is set
            if (collectionHitId == null)
                throw new ApiException(400, "Missing required parameter 'collectionHitId' when calling CollectionsApi->CollectionsGetCollectionHitForCollection");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}/Hits/{collectionHitId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionHitId != null) localVarPathParams.Add("collectionHitId", this.Configuration.ApiClient.ParameterToString(collectionHitId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsGetCollectionHitForCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionHitDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CollectionHitDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionHitDetail)));
        }

        /// <summary>
        /// Returns a summary of the hits for this collection - i.e. information about when users have viewed the collection. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCollectionHitSummary</returns>
        public PagedResultsCollectionHitSummary CollectionsGetCollectionHitsForCollection (string dataViewName, int? collectionId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCollectionHitSummary> localVarResponse = CollectionsGetCollectionHitsForCollectionWithHttpInfo(dataViewName, collectionId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a summary of the hits for this collection - i.e. information about when users have viewed the collection. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCollectionHitSummary</returns>
        public ApiResponse< PagedResultsCollectionHitSummary > CollectionsGetCollectionHitsForCollectionWithHttpInfo (string dataViewName, int? collectionId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsGetCollectionHitsForCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsGetCollectionHitsForCollection");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}/Hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsGetCollectionHitsForCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCollectionHitSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsCollectionHitSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCollectionHitSummary)));
        }

        /// <summary>
        /// Returns a summary of the hits for this collection - i.e. information about when users have viewed the collection. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCollectionHitSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsCollectionHitSummary> CollectionsGetCollectionHitsForCollectionAsync (string dataViewName, int? collectionId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCollectionHitSummary> localVarResponse = await CollectionsGetCollectionHitsForCollectionAsyncWithHttpInfo(dataViewName, collectionId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a summary of the hits for this collection - i.e. information about when users have viewed the collection. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCollectionHitSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsCollectionHitSummary>> CollectionsGetCollectionHitsForCollectionAsyncWithHttpInfo (string dataViewName, int? collectionId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsGetCollectionHitsForCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsGetCollectionHitsForCollection");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}/Hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsGetCollectionHitsForCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCollectionHitSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsCollectionHitSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCollectionHitSummary)));
        }

        /// <summary>
        /// Returns details of a part contained within a particular collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection that contains the part</param>
        /// <param name="partIndex">The index of the part within the collection</param>
        /// <returns>CollectionPartDetail</returns>
        public CollectionPartDetail CollectionsGetCollectionPart (string dataViewName, int? collectionId, int? partIndex)
        {
             ApiResponse<CollectionPartDetail> localVarResponse = CollectionsGetCollectionPartWithHttpInfo(dataViewName, collectionId, partIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details of a part contained within a particular collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection that contains the part</param>
        /// <param name="partIndex">The index of the part within the collection</param>
        /// <returns>ApiResponse of CollectionPartDetail</returns>
        public ApiResponse< CollectionPartDetail > CollectionsGetCollectionPartWithHttpInfo (string dataViewName, int? collectionId, int? partIndex)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsGetCollectionPart");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsGetCollectionPart");
            // verify the required parameter 'partIndex' is set
            if (partIndex == null)
                throw new ApiException(400, "Missing required parameter 'partIndex' when calling CollectionsApi->CollectionsGetCollectionPart");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}/Parts/{partIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (partIndex != null) localVarPathParams.Add("partIndex", this.Configuration.ApiClient.ParameterToString(partIndex)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsGetCollectionPart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionPartDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CollectionPartDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionPartDetail)));
        }

        /// <summary>
        /// Returns details of a part contained within a particular collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection that contains the part</param>
        /// <param name="partIndex">The index of the part within the collection</param>
        /// <returns>Task of CollectionPartDetail</returns>
        public async System.Threading.Tasks.Task<CollectionPartDetail> CollectionsGetCollectionPartAsync (string dataViewName, int? collectionId, int? partIndex)
        {
             ApiResponse<CollectionPartDetail> localVarResponse = await CollectionsGetCollectionPartAsyncWithHttpInfo(dataViewName, collectionId, partIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details of a part contained within a particular collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection that contains the part</param>
        /// <param name="partIndex">The index of the part within the collection</param>
        /// <returns>Task of ApiResponse (CollectionPartDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionPartDetail>> CollectionsGetCollectionPartAsyncWithHttpInfo (string dataViewName, int? collectionId, int? partIndex)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsGetCollectionPart");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsGetCollectionPart");
            // verify the required parameter 'partIndex' is set
            if (partIndex == null)
                throw new ApiException(400, "Missing required parameter 'partIndex' when calling CollectionsApi->CollectionsGetCollectionPart");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}/Parts/{partIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (partIndex != null) localVarPathParams.Add("partIndex", this.Configuration.ApiClient.ParameterToString(partIndex)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsGetCollectionPart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionPartDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CollectionPartDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionPartDetail)));
        }

        /// <summary>
        /// Returns a summary of the parts contained within a particular collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the parts for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Title, VisualisationType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Title, VisualisationType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCollectionPartSummary</returns>
        public PagedResultsCollectionPartSummary CollectionsGetCollectionParts (string dataViewName, int? collectionId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCollectionPartSummary> localVarResponse = CollectionsGetCollectionPartsWithHttpInfo(dataViewName, collectionId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a summary of the parts contained within a particular collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the parts for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Title, VisualisationType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Title, VisualisationType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCollectionPartSummary</returns>
        public ApiResponse< PagedResultsCollectionPartSummary > CollectionsGetCollectionPartsWithHttpInfo (string dataViewName, int? collectionId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsGetCollectionParts");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsGetCollectionParts");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}/Parts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsGetCollectionParts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCollectionPartSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsCollectionPartSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCollectionPartSummary)));
        }

        /// <summary>
        /// Returns a summary of the parts contained within a particular collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the parts for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Title, VisualisationType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Title, VisualisationType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCollectionPartSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsCollectionPartSummary> CollectionsGetCollectionPartsAsync (string dataViewName, int? collectionId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCollectionPartSummary> localVarResponse = await CollectionsGetCollectionPartsAsyncWithHttpInfo(dataViewName, collectionId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a summary of the parts contained within a particular collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to get the parts for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Title, VisualisationType. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Title, VisualisationType. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCollectionPartSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsCollectionPartSummary>> CollectionsGetCollectionPartsAsyncWithHttpInfo (string dataViewName, int? collectionId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsGetCollectionParts");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsGetCollectionParts");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}/Parts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsGetCollectionParts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCollectionPartSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsCollectionPartSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCollectionPartSummary)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each collection in the DataView. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCollectionSummary</returns>
        public PagedResultsCollectionSummary CollectionsGetCollections (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCollectionSummary> localVarResponse = CollectionsGetCollectionsWithHttpInfo(dataViewName, includeDeleted, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each collection in the DataView. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCollectionSummary</returns>
        public ApiResponse< PagedResultsCollectionSummary > CollectionsGetCollectionsWithHttpInfo (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsGetCollections");

            var localVarPath = "./{dataViewName}/Collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsGetCollections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCollectionSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsCollectionSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCollectionSummary)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each collection in the DataView. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCollectionSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsCollectionSummary> CollectionsGetCollectionsAsync (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCollectionSummary> localVarResponse = await CollectionsGetCollectionsAsyncWithHttpInfo(dataViewName, includeDeleted, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each collection in the DataView. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCollectionSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsCollectionSummary>> CollectionsGetCollectionsAsyncWithHttpInfo (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsGetCollections");

            var localVarPath = "./{dataViewName}/Collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsGetCollections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCollectionSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsCollectionSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCollectionSummary)));
        }

        /// <summary>
        /// Transfer ownership of a collection from the current user to a new owner 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to transfer.</param>
        /// <param name="body">The details for transferring ownership of the collection. (optional)</param>
        /// <returns>CollectionDetail</returns>
        public CollectionDetail CollectionsTransferCollectionOwnership (string dataViewName, int? collectionId, TransferCollectionOwnershipDetails body = null)
        {
             ApiResponse<CollectionDetail> localVarResponse = CollectionsTransferCollectionOwnershipWithHttpInfo(dataViewName, collectionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer ownership of a collection from the current user to a new owner 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to transfer.</param>
        /// <param name="body">The details for transferring ownership of the collection. (optional)</param>
        /// <returns>ApiResponse of CollectionDetail</returns>
        public ApiResponse< CollectionDetail > CollectionsTransferCollectionOwnershipWithHttpInfo (string dataViewName, int? collectionId, TransferCollectionOwnershipDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsTransferCollectionOwnership");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsTransferCollectionOwnership");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}/TransferOwnership";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsTransferCollectionOwnership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CollectionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionDetail)));
        }

        /// <summary>
        /// Transfer ownership of a collection from the current user to a new owner 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to transfer.</param>
        /// <param name="body">The details for transferring ownership of the collection. (optional)</param>
        /// <returns>Task of CollectionDetail</returns>
        public async System.Threading.Tasks.Task<CollectionDetail> CollectionsTransferCollectionOwnershipAsync (string dataViewName, int? collectionId, TransferCollectionOwnershipDetails body = null)
        {
             ApiResponse<CollectionDetail> localVarResponse = await CollectionsTransferCollectionOwnershipAsyncWithHttpInfo(dataViewName, collectionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer ownership of a collection from the current user to a new owner 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to transfer.</param>
        /// <param name="body">The details for transferring ownership of the collection. (optional)</param>
        /// <returns>Task of ApiResponse (CollectionDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionDetail>> CollectionsTransferCollectionOwnershipAsyncWithHttpInfo (string dataViewName, int? collectionId, TransferCollectionOwnershipDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsTransferCollectionOwnership");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsTransferCollectionOwnership");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}/TransferOwnership";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsTransferCollectionOwnership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CollectionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionDetail)));
        }

        /// <summary>
        /// Updates the details of a particular collection.  If you don&#x27;t have an id for the  collection then POST to the /Collections URL to create a new collection. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to add/update</param>
        /// <param name="body">The details for the collection to add/update (optional)</param>
        /// <returns>CollectionDetail</returns>
        public CollectionDetail CollectionsUpsertCollection (string dataViewName, int? collectionId, UpsertCollectionDetail body = null)
        {
             ApiResponse<CollectionDetail> localVarResponse = CollectionsUpsertCollectionWithHttpInfo(dataViewName, collectionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the details of a particular collection.  If you don&#x27;t have an id for the  collection then POST to the /Collections URL to create a new collection. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to add/update</param>
        /// <param name="body">The details for the collection to add/update (optional)</param>
        /// <returns>ApiResponse of CollectionDetail</returns>
        public ApiResponse< CollectionDetail > CollectionsUpsertCollectionWithHttpInfo (string dataViewName, int? collectionId, UpsertCollectionDetail body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsUpsertCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsUpsertCollection");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsUpsertCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CollectionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionDetail)));
        }

        /// <summary>
        /// Updates the details of a particular collection.  If you don&#x27;t have an id for the  collection then POST to the /Collections URL to create a new collection. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to add/update</param>
        /// <param name="body">The details for the collection to add/update (optional)</param>
        /// <returns>Task of CollectionDetail</returns>
        public async System.Threading.Tasks.Task<CollectionDetail> CollectionsUpsertCollectionAsync (string dataViewName, int? collectionId, UpsertCollectionDetail body = null)
        {
             ApiResponse<CollectionDetail> localVarResponse = await CollectionsUpsertCollectionAsyncWithHttpInfo(dataViewName, collectionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the details of a particular collection.  If you don&#x27;t have an id for the  collection then POST to the /Collections URL to create a new collection. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="collectionId">The id of the collection to add/update</param>
        /// <param name="body">The details for the collection to add/update (optional)</param>
        /// <returns>Task of ApiResponse (CollectionDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionDetail>> CollectionsUpsertCollectionAsyncWithHttpInfo (string dataViewName, int? collectionId, UpsertCollectionDetail body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling CollectionsApi->CollectionsUpsertCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling CollectionsApi->CollectionsUpsertCollection");

            var localVarPath = "./{dataViewName}/Collections/{collectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsUpsertCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CollectionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionDetail)));
        }

    }
}
