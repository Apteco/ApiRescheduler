/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAboutApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Message</returns>
        Message AboutExampleExperimentalResource ();

        /// <summary>
        /// EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> AboutExampleExperimentalResourceWithHttpInfo ();
        /// <summary>
        /// Returns a sample string if the temporary token is valid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temporaryToken"> (optional)</param>
        /// <returns>Message</returns>
        Message AboutExampleTemporaryTokenResource (string temporaryToken = null);

        /// <summary>
        /// Returns a sample string if the temporary token is valid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temporaryToken"> (optional)</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> AboutExampleTemporaryTokenResourceWithHttpInfo (string temporaryToken = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Returns a sample string if under development endpoints are enabled
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Message</returns>
        Message AboutExampleUnderDevelopmentResource ();

        /// <summary>
        /// UNDER DEVELOPMENT: Returns a sample string if under development endpoints are enabled
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> AboutExampleUnderDevelopmentResourceWithHttpInfo ();
        /// <summary>
        /// Requires OrbitAdmin: Forces an exception to be thrown and an error to be returned to the client
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void AboutForceException ();

        /// <summary>
        /// Requires OrbitAdmin: Forces an exception to be thrown and an error to be returned to the client
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AboutForceExceptionWithHttpInfo ();
        /// <summary>
        /// Requires OrbitAdmin: Forces an internal server error to be returned to the client
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void AboutForceInternalServerError ();

        /// <summary>
        /// Requires OrbitAdmin: Forces an internal server error to be returned to the client
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AboutForceInternalServerErrorWithHttpInfo ();
        /// <summary>
        /// Requires OrbitAdmin: Forces a garbage collection in the API&#x27;s process and then returns details about the API&#x27;s .Net process
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProcessDetails</returns>
        ProcessDetails AboutForceProcessGarbageCollection ();

        /// <summary>
        /// Requires OrbitAdmin: Forces a garbage collection in the API&#x27;s process and then returns details about the API&#x27;s .Net process
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProcessDetails</returns>
        ApiResponse<ProcessDetails> AboutForceProcessGarbageCollectionWithHttpInfo ();
        /// <summary>
        /// Get details for a particular DataView.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>DataViewDetails</returns>
        DataViewDetails AboutGetDataView (string dataViewName);

        /// <summary>
        /// Get details for a particular DataView.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of DataViewDetails</returns>
        ApiResponse<DataViewDetails> AboutGetDataViewWithHttpInfo (string dataViewName);
        /// <summary>
        /// Get the list of DataViews that are available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDataViewSummary</returns>
        PagedResultsDataViewSummary AboutGetDataViews (string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Get the list of DataViews that are available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDataViewSummary</returns>
        ApiResponse<PagedResultsDataViewSummary> AboutGetDataViewsWithHttpInfo (string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Get the list of DataViews that are available to users with the specified email domain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The email domain to list DataViews for (i.e. \&quot;example.com\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDataViewSummary</returns>
        PagedResultsDataViewSummary AboutGetDataViewsForDomain (string domain, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Get the list of DataViews that are available to users with the specified email domain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The email domain to list DataViews for (i.e. \&quot;example.com\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDataViewSummary</returns>
        ApiResponse<PagedResultsDataViewSummary> AboutGetDataViewsForDomainWithHttpInfo (string domain, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Get the list of DataViews that are configured with the given FastStats system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemName">The name of the system to list DataViews for (i.e. \&quot;holidays\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDataViewSummary</returns>
        PagedResultsDataViewSummary AboutGetDataViewsForSystemName (string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Get the list of DataViews that are configured with the given FastStats system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemName">The name of the system to list DataViews for (i.e. \&quot;holidays\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDataViewSummary</returns>
        ApiResponse<PagedResultsDataViewSummary> AboutGetDataViewsForSystemNameWithHttpInfo (string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns details of all the endpoints in the API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeEndpointsWithNoLicenceRequirements">If specified, don&#x27;t return endpoints in the output that have no licence requirements.  Defaults to false - returns all endpoints (optional)</param>
        /// <param name="excludeEndpointsWithNoRoleRequirements">If specified, don&#x27;t return endpoints in the output that have no role requirements.  Defaults to false - returns all endpoints (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, GroupName, Method, UrlTemplate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, GroupName, Method, UrlTemplate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsEndpointDetails</returns>
        PagedResultsEndpointDetails AboutGetEndpoints (bool? excludeEndpointsWithNoLicenceRequirements = null, bool? excludeEndpointsWithNoRoleRequirements = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns details of all the endpoints in the API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeEndpointsWithNoLicenceRequirements">If specified, don&#x27;t return endpoints in the output that have no licence requirements.  Defaults to false - returns all endpoints (optional)</param>
        /// <param name="excludeEndpointsWithNoRoleRequirements">If specified, don&#x27;t return endpoints in the output that have no role requirements.  Defaults to false - returns all endpoints (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, GroupName, Method, UrlTemplate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, GroupName, Method, UrlTemplate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsEndpointDetails</returns>
        ApiResponse<PagedResultsEndpointDetails> AboutGetEndpointsWithHttpInfo (bool? excludeEndpointsWithNoLicenceRequirements = null, bool? excludeEndpointsWithNoRoleRequirements = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns information about the current language the API is operating in (based on details in the request)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LanguageDetails</returns>
        LanguageDetails AboutGetLanguageDetails ();

        /// <summary>
        /// Returns information about the current language the API is operating in (based on details in the request)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LanguageDetails</returns>
        ApiResponse<LanguageDetails> AboutGetLanguageDetailsWithHttpInfo ();
        /// <summary>
        /// Gets Orbit settings at the given path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsPath">The path of the settings</param>
        /// <returns>Object</returns>
        Object AboutGetOrbitSettings (string settingsPath);

        /// <summary>
        /// Gets Orbit settings at the given path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsPath">The path of the settings</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AboutGetOrbitSettingsWithHttpInfo (string settingsPath);
        /// <summary>
        /// Gets the complete Orbit settings object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object AboutGetOrbitSettingsRoot ();

        /// <summary>
        /// Gets the complete Orbit settings object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AboutGetOrbitSettingsRootWithHttpInfo ();
        /// <summary>
        /// Requires OrbitAdmin: Returns details about the API&#x27;s .Net process
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProcessDetails</returns>
        ProcessDetails AboutGetProcessDetails ();

        /// <summary>
        /// Requires OrbitAdmin: Returns details about the API&#x27;s .Net process
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProcessDetails</returns>
        ApiResponse<ProcessDetails> AboutGetProcessDetailsWithHttpInfo ();
        /// <summary>
        /// Returns information about the TimeZones available to the API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TimeZoneInfoDetails</returns>
        TimeZoneInfoDetails AboutGetTimeZonesInfo ();

        /// <summary>
        /// Returns information about the TimeZones available to the API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TimeZoneInfoDetails</returns>
        ApiResponse<TimeZoneInfoDetails> AboutGetTimeZonesInfoWithHttpInfo ();
        /// <summary>
        /// Returns version information about the API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>VersionDetails</returns>
        VersionDetails AboutGetVersion ();

        /// <summary>
        /// Returns version information about the API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of VersionDetails</returns>
        ApiResponse<VersionDetails> AboutGetVersionWithHttpInfo ();
        /// <summary>
        /// Requires PackageServiceLogs Role: Packages up Orbit log files into a single zip which is then accessible via the temporary files API endpoint
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the PackageServiceLogs role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">Required - specifies the dataView where the temporary file will be uploaded to (optional)</param>
        /// <param name="numberOfLogFiles">Optional - package up the last X number of log files - default: 7 - Max: 31 (optional, default to 7)</param>
        /// <returns>LogPackageSummary</returns>
        LogPackageSummary AboutPackageLogs (string dataViewName = null, int? numberOfLogFiles = null);

        /// <summary>
        /// Requires PackageServiceLogs Role: Packages up Orbit log files into a single zip which is then accessible via the temporary files API endpoint
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the PackageServiceLogs role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">Required - specifies the dataView where the temporary file will be uploaded to (optional)</param>
        /// <param name="numberOfLogFiles">Optional - package up the last X number of log files - default: 7 - Max: 31 (optional, default to 7)</param>
        /// <returns>ApiResponse of LogPackageSummary</returns>
        ApiResponse<LogPackageSummary> AboutPackageLogsWithHttpInfo (string dataViewName = null, int? numberOfLogFiles = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> AboutExampleExperimentalResourceAsync ();

        /// <summary>
        /// EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> AboutExampleExperimentalResourceAsyncWithHttpInfo ();
        /// <summary>
        /// Returns a sample string if the temporary token is valid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temporaryToken"> (optional)</param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> AboutExampleTemporaryTokenResourceAsync (string temporaryToken = null);

        /// <summary>
        /// Returns a sample string if the temporary token is valid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temporaryToken"> (optional)</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> AboutExampleTemporaryTokenResourceAsyncWithHttpInfo (string temporaryToken = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Returns a sample string if under development endpoints are enabled
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> AboutExampleUnderDevelopmentResourceAsync ();

        /// <summary>
        /// UNDER DEVELOPMENT: Returns a sample string if under development endpoints are enabled
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> AboutExampleUnderDevelopmentResourceAsyncWithHttpInfo ();
        /// <summary>
        /// Requires OrbitAdmin: Forces an exception to be thrown and an error to be returned to the client
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AboutForceExceptionAsync ();

        /// <summary>
        /// Requires OrbitAdmin: Forces an exception to be thrown and an error to be returned to the client
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AboutForceExceptionAsyncWithHttpInfo ();
        /// <summary>
        /// Requires OrbitAdmin: Forces an internal server error to be returned to the client
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AboutForceInternalServerErrorAsync ();

        /// <summary>
        /// Requires OrbitAdmin: Forces an internal server error to be returned to the client
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AboutForceInternalServerErrorAsyncWithHttpInfo ();
        /// <summary>
        /// Requires OrbitAdmin: Forces a garbage collection in the API&#x27;s process and then returns details about the API&#x27;s .Net process
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProcessDetails</returns>
        System.Threading.Tasks.Task<ProcessDetails> AboutForceProcessGarbageCollectionAsync ();

        /// <summary>
        /// Requires OrbitAdmin: Forces a garbage collection in the API&#x27;s process and then returns details about the API&#x27;s .Net process
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProcessDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDetails>> AboutForceProcessGarbageCollectionAsyncWithHttpInfo ();
        /// <summary>
        /// Get details for a particular DataView.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of DataViewDetails</returns>
        System.Threading.Tasks.Task<DataViewDetails> AboutGetDataViewAsync (string dataViewName);

        /// <summary>
        /// Get details for a particular DataView.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (DataViewDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataViewDetails>> AboutGetDataViewAsyncWithHttpInfo (string dataViewName);
        /// <summary>
        /// Get the list of DataViews that are available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDataViewSummary</returns>
        System.Threading.Tasks.Task<PagedResultsDataViewSummary> AboutGetDataViewsAsync (string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Get the list of DataViews that are available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDataViewSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsDataViewSummary>> AboutGetDataViewsAsyncWithHttpInfo (string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Get the list of DataViews that are available to users with the specified email domain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The email domain to list DataViews for (i.e. \&quot;example.com\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDataViewSummary</returns>
        System.Threading.Tasks.Task<PagedResultsDataViewSummary> AboutGetDataViewsForDomainAsync (string domain, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Get the list of DataViews that are available to users with the specified email domain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The email domain to list DataViews for (i.e. \&quot;example.com\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDataViewSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsDataViewSummary>> AboutGetDataViewsForDomainAsyncWithHttpInfo (string domain, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Get the list of DataViews that are configured with the given FastStats system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemName">The name of the system to list DataViews for (i.e. \&quot;holidays\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDataViewSummary</returns>
        System.Threading.Tasks.Task<PagedResultsDataViewSummary> AboutGetDataViewsForSystemNameAsync (string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Get the list of DataViews that are configured with the given FastStats system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemName">The name of the system to list DataViews for (i.e. \&quot;holidays\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDataViewSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsDataViewSummary>> AboutGetDataViewsForSystemNameAsyncWithHttpInfo (string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns details of all the endpoints in the API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeEndpointsWithNoLicenceRequirements">If specified, don&#x27;t return endpoints in the output that have no licence requirements.  Defaults to false - returns all endpoints (optional)</param>
        /// <param name="excludeEndpointsWithNoRoleRequirements">If specified, don&#x27;t return endpoints in the output that have no role requirements.  Defaults to false - returns all endpoints (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, GroupName, Method, UrlTemplate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, GroupName, Method, UrlTemplate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsEndpointDetails</returns>
        System.Threading.Tasks.Task<PagedResultsEndpointDetails> AboutGetEndpointsAsync (bool? excludeEndpointsWithNoLicenceRequirements = null, bool? excludeEndpointsWithNoRoleRequirements = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns details of all the endpoints in the API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeEndpointsWithNoLicenceRequirements">If specified, don&#x27;t return endpoints in the output that have no licence requirements.  Defaults to false - returns all endpoints (optional)</param>
        /// <param name="excludeEndpointsWithNoRoleRequirements">If specified, don&#x27;t return endpoints in the output that have no role requirements.  Defaults to false - returns all endpoints (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, GroupName, Method, UrlTemplate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, GroupName, Method, UrlTemplate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsEndpointDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsEndpointDetails>> AboutGetEndpointsAsyncWithHttpInfo (bool? excludeEndpointsWithNoLicenceRequirements = null, bool? excludeEndpointsWithNoRoleRequirements = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns information about the current language the API is operating in (based on details in the request)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LanguageDetails</returns>
        System.Threading.Tasks.Task<LanguageDetails> AboutGetLanguageDetailsAsync ();

        /// <summary>
        /// Returns information about the current language the API is operating in (based on details in the request)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LanguageDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<LanguageDetails>> AboutGetLanguageDetailsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets Orbit settings at the given path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsPath">The path of the settings</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AboutGetOrbitSettingsAsync (string settingsPath);

        /// <summary>
        /// Gets Orbit settings at the given path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsPath">The path of the settings</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AboutGetOrbitSettingsAsyncWithHttpInfo (string settingsPath);
        /// <summary>
        /// Gets the complete Orbit settings object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AboutGetOrbitSettingsRootAsync ();

        /// <summary>
        /// Gets the complete Orbit settings object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AboutGetOrbitSettingsRootAsyncWithHttpInfo ();
        /// <summary>
        /// Requires OrbitAdmin: Returns details about the API&#x27;s .Net process
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProcessDetails</returns>
        System.Threading.Tasks.Task<ProcessDetails> AboutGetProcessDetailsAsync ();

        /// <summary>
        /// Requires OrbitAdmin: Returns details about the API&#x27;s .Net process
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProcessDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDetails>> AboutGetProcessDetailsAsyncWithHttpInfo ();
        /// <summary>
        /// Returns information about the TimeZones available to the API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TimeZoneInfoDetails</returns>
        System.Threading.Tasks.Task<TimeZoneInfoDetails> AboutGetTimeZonesInfoAsync ();

        /// <summary>
        /// Returns information about the TimeZones available to the API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TimeZoneInfoDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeZoneInfoDetails>> AboutGetTimeZonesInfoAsyncWithHttpInfo ();
        /// <summary>
        /// Returns version information about the API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of VersionDetails</returns>
        System.Threading.Tasks.Task<VersionDetails> AboutGetVersionAsync ();

        /// <summary>
        /// Returns version information about the API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (VersionDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionDetails>> AboutGetVersionAsyncWithHttpInfo ();
        /// <summary>
        /// Requires PackageServiceLogs Role: Packages up Orbit log files into a single zip which is then accessible via the temporary files API endpoint
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the PackageServiceLogs role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">Required - specifies the dataView where the temporary file will be uploaded to (optional)</param>
        /// <param name="numberOfLogFiles">Optional - package up the last X number of log files - default: 7 - Max: 31 (optional, default to 7)</param>
        /// <returns>Task of LogPackageSummary</returns>
        System.Threading.Tasks.Task<LogPackageSummary> AboutPackageLogsAsync (string dataViewName = null, int? numberOfLogFiles = null);

        /// <summary>
        /// Requires PackageServiceLogs Role: Packages up Orbit log files into a single zip which is then accessible via the temporary files API endpoint
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the PackageServiceLogs role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">Required - specifies the dataView where the temporary file will be uploaded to (optional)</param>
        /// <param name="numberOfLogFiles">Optional - package up the last X number of log files - default: 7 - Max: 31 (optional, default to 7)</param>
        /// <returns>Task of ApiResponse (LogPackageSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogPackageSummary>> AboutPackageLogsAsyncWithHttpInfo (string dataViewName = null, int? numberOfLogFiles = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AboutApi : IAboutApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AboutApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AboutApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AboutApi"/> class
        /// </summary>
        /// <returns></returns>
        public AboutApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AboutApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AboutApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Message</returns>
        public Message AboutExampleExperimentalResource ()
        {
             ApiResponse<Message> localVarResponse = AboutExampleExperimentalResourceWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Message</returns>
        public ApiResponse< Message > AboutExampleExperimentalResourceWithHttpInfo ()
        {

            var localVarPath = "./About/ExampleExperimentalResource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutExampleExperimentalResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Message>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Message) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Message)));
        }

        /// <summary>
        /// EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> AboutExampleExperimentalResourceAsync ()
        {
             ApiResponse<Message> localVarResponse = await AboutExampleExperimentalResourceAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled EXPERIMENTAL
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Message>> AboutExampleExperimentalResourceAsyncWithHttpInfo ()
        {

            var localVarPath = "./About/ExampleExperimentalResource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutExampleExperimentalResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Message>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Message) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Message)));
        }

        /// <summary>
        /// Returns a sample string if the temporary token is valid 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temporaryToken"> (optional)</param>
        /// <returns>Message</returns>
        public Message AboutExampleTemporaryTokenResource (string temporaryToken = null)
        {
             ApiResponse<Message> localVarResponse = AboutExampleTemporaryTokenResourceWithHttpInfo(temporaryToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a sample string if the temporary token is valid 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temporaryToken"> (optional)</param>
        /// <returns>ApiResponse of Message</returns>
        public ApiResponse< Message > AboutExampleTemporaryTokenResourceWithHttpInfo (string temporaryToken = null)
        {

            var localVarPath = "./About/ExampleTemporaryTokenResource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (temporaryToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "temporaryToken", temporaryToken)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutExampleTemporaryTokenResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Message>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Message) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Message)));
        }

        /// <summary>
        /// Returns a sample string if the temporary token is valid 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temporaryToken"> (optional)</param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> AboutExampleTemporaryTokenResourceAsync (string temporaryToken = null)
        {
             ApiResponse<Message> localVarResponse = await AboutExampleTemporaryTokenResourceAsyncWithHttpInfo(temporaryToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a sample string if the temporary token is valid 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="temporaryToken"> (optional)</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Message>> AboutExampleTemporaryTokenResourceAsyncWithHttpInfo (string temporaryToken = null)
        {

            var localVarPath = "./About/ExampleTemporaryTokenResource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (temporaryToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "temporaryToken", temporaryToken)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutExampleTemporaryTokenResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Message>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Message) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Message)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Returns a sample string if under development endpoints are enabled UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Message</returns>
        public Message AboutExampleUnderDevelopmentResource ()
        {
             ApiResponse<Message> localVarResponse = AboutExampleUnderDevelopmentResourceWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Returns a sample string if under development endpoints are enabled UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Message</returns>
        public ApiResponse< Message > AboutExampleUnderDevelopmentResourceWithHttpInfo ()
        {

            var localVarPath = "./About/ExampleUnderDevelopmentResource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutExampleUnderDevelopmentResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Message>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Message) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Message)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Returns a sample string if under development endpoints are enabled UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> AboutExampleUnderDevelopmentResourceAsync ()
        {
             ApiResponse<Message> localVarResponse = await AboutExampleUnderDevelopmentResourceAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Returns a sample string if under development endpoints are enabled UNDER DEVELOPMENT
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Message>> AboutExampleUnderDevelopmentResourceAsyncWithHttpInfo ()
        {

            var localVarPath = "./About/ExampleUnderDevelopmentResource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutExampleUnderDevelopmentResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Message>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Message) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Message)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Forces an exception to be thrown and an error to be returned to the client This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void AboutForceException ()
        {
             AboutForceExceptionWithHttpInfo();
        }

        /// <summary>
        /// Requires OrbitAdmin: Forces an exception to be thrown and an error to be returned to the client This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AboutForceExceptionWithHttpInfo ()
        {

            var localVarPath = "./About/ForceException";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutForceException", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Requires OrbitAdmin: Forces an exception to be thrown and an error to be returned to the client This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AboutForceExceptionAsync ()
        {
             await AboutForceExceptionAsyncWithHttpInfo();

        }

        /// <summary>
        /// Requires OrbitAdmin: Forces an exception to be thrown and an error to be returned to the client This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AboutForceExceptionAsyncWithHttpInfo ()
        {

            var localVarPath = "./About/ForceException";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutForceException", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Requires OrbitAdmin: Forces an internal server error to be returned to the client This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void AboutForceInternalServerError ()
        {
             AboutForceInternalServerErrorWithHttpInfo();
        }

        /// <summary>
        /// Requires OrbitAdmin: Forces an internal server error to be returned to the client This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AboutForceInternalServerErrorWithHttpInfo ()
        {

            var localVarPath = "./About/ForceInternalServerError";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutForceInternalServerError", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Requires OrbitAdmin: Forces an internal server error to be returned to the client This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AboutForceInternalServerErrorAsync ()
        {
             await AboutForceInternalServerErrorAsyncWithHttpInfo();

        }

        /// <summary>
        /// Requires OrbitAdmin: Forces an internal server error to be returned to the client This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AboutForceInternalServerErrorAsyncWithHttpInfo ()
        {

            var localVarPath = "./About/ForceInternalServerError";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutForceInternalServerError", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Requires OrbitAdmin: Forces a garbage collection in the API&#x27;s process and then returns details about the API&#x27;s .Net process This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProcessDetails</returns>
        public ProcessDetails AboutForceProcessGarbageCollection ()
        {
             ApiResponse<ProcessDetails> localVarResponse = AboutForceProcessGarbageCollectionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Forces a garbage collection in the API&#x27;s process and then returns details about the API&#x27;s .Net process This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProcessDetails</returns>
        public ApiResponse< ProcessDetails > AboutForceProcessGarbageCollectionWithHttpInfo ()
        {

            var localVarPath = "./About/Process/ForceGarbageCollection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutForceProcessGarbageCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ProcessDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDetails)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Forces a garbage collection in the API&#x27;s process and then returns details about the API&#x27;s .Net process This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProcessDetails</returns>
        public async System.Threading.Tasks.Task<ProcessDetails> AboutForceProcessGarbageCollectionAsync ()
        {
             ApiResponse<ProcessDetails> localVarResponse = await AboutForceProcessGarbageCollectionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Forces a garbage collection in the API&#x27;s process and then returns details about the API&#x27;s .Net process This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProcessDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessDetails>> AboutForceProcessGarbageCollectionAsyncWithHttpInfo ()
        {

            var localVarPath = "./About/Process/ForceGarbageCollection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutForceProcessGarbageCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ProcessDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDetails)));
        }

        /// <summary>
        /// Get details for a particular DataView. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>DataViewDetails</returns>
        public DataViewDetails AboutGetDataView (string dataViewName)
        {
             ApiResponse<DataViewDetails> localVarResponse = AboutGetDataViewWithHttpInfo(dataViewName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get details for a particular DataView. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of DataViewDetails</returns>
        public ApiResponse< DataViewDetails > AboutGetDataViewWithHttpInfo (string dataViewName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AboutApi->AboutGetDataView");

            var localVarPath = "./About/DataViews/{dataViewName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetDataView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataViewDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DataViewDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataViewDetails)));
        }

        /// <summary>
        /// Get details for a particular DataView. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of DataViewDetails</returns>
        public async System.Threading.Tasks.Task<DataViewDetails> AboutGetDataViewAsync (string dataViewName)
        {
             ApiResponse<DataViewDetails> localVarResponse = await AboutGetDataViewAsyncWithHttpInfo(dataViewName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get details for a particular DataView. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (DataViewDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataViewDetails>> AboutGetDataViewAsyncWithHttpInfo (string dataViewName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AboutApi->AboutGetDataView");

            var localVarPath = "./About/DataViews/{dataViewName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetDataView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataViewDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DataViewDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataViewDetails)));
        }

        /// <summary>
        /// Get the list of DataViews that are available. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDataViewSummary</returns>
        public PagedResultsDataViewSummary AboutGetDataViews (string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDataViewSummary> localVarResponse = AboutGetDataViewsWithHttpInfo(filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of DataViews that are available. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDataViewSummary</returns>
        public ApiResponse< PagedResultsDataViewSummary > AboutGetDataViewsWithHttpInfo (string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {

            var localVarPath = "./About/DataViews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetDataViews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDataViewSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsDataViewSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDataViewSummary)));
        }

        /// <summary>
        /// Get the list of DataViews that are available. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDataViewSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsDataViewSummary> AboutGetDataViewsAsync (string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDataViewSummary> localVarResponse = await AboutGetDataViewsAsyncWithHttpInfo(filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of DataViews that are available. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDataViewSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsDataViewSummary>> AboutGetDataViewsAsyncWithHttpInfo (string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {

            var localVarPath = "./About/DataViews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetDataViews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDataViewSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsDataViewSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDataViewSummary)));
        }

        /// <summary>
        /// Get the list of DataViews that are available to users with the specified email domain. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The email domain to list DataViews for (i.e. \&quot;example.com\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDataViewSummary</returns>
        public PagedResultsDataViewSummary AboutGetDataViewsForDomain (string domain, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDataViewSummary> localVarResponse = AboutGetDataViewsForDomainWithHttpInfo(domain, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of DataViews that are available to users with the specified email domain. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The email domain to list DataViews for (i.e. \&quot;example.com\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDataViewSummary</returns>
        public ApiResponse< PagedResultsDataViewSummary > AboutGetDataViewsForDomainWithHttpInfo (string domain, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling AboutApi->AboutGetDataViewsForDomain");

            var localVarPath = "./About/DataViews/Domains/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetDataViewsForDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDataViewSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsDataViewSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDataViewSummary)));
        }

        /// <summary>
        /// Get the list of DataViews that are available to users with the specified email domain. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The email domain to list DataViews for (i.e. \&quot;example.com\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDataViewSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsDataViewSummary> AboutGetDataViewsForDomainAsync (string domain, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDataViewSummary> localVarResponse = await AboutGetDataViewsForDomainAsyncWithHttpInfo(domain, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of DataViews that are available to users with the specified email domain. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The email domain to list DataViews for (i.e. \&quot;example.com\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDataViewSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsDataViewSummary>> AboutGetDataViewsForDomainAsyncWithHttpInfo (string domain, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling AboutApi->AboutGetDataViewsForDomain");

            var localVarPath = "./About/DataViews/Domains/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetDataViewsForDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDataViewSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsDataViewSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDataViewSummary)));
        }

        /// <summary>
        /// Get the list of DataViews that are configured with the given FastStats system. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemName">The name of the system to list DataViews for (i.e. \&quot;holidays\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDataViewSummary</returns>
        public PagedResultsDataViewSummary AboutGetDataViewsForSystemName (string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDataViewSummary> localVarResponse = AboutGetDataViewsForSystemNameWithHttpInfo(systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of DataViews that are configured with the given FastStats system. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemName">The name of the system to list DataViews for (i.e. \&quot;holidays\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDataViewSummary</returns>
        public ApiResponse< PagedResultsDataViewSummary > AboutGetDataViewsForSystemNameWithHttpInfo (string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling AboutApi->AboutGetDataViewsForSystemName");

            var localVarPath = "./About/DataViews/Systems/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetDataViewsForSystemName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDataViewSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsDataViewSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDataViewSummary)));
        }

        /// <summary>
        /// Get the list of DataViews that are configured with the given FastStats system. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemName">The name of the system to list DataViews for (i.e. \&quot;holidays\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDataViewSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsDataViewSummary> AboutGetDataViewsForSystemNameAsync (string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDataViewSummary> localVarResponse = await AboutGetDataViewsForSystemNameAsyncWithHttpInfo(systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of DataViews that are configured with the given FastStats system. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemName">The name of the system to list DataViews for (i.e. \&quot;holidays\&quot;)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDataViewSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsDataViewSummary>> AboutGetDataViewsForSystemNameAsyncWithHttpInfo (string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling AboutApi->AboutGetDataViewsForSystemName");

            var localVarPath = "./About/DataViews/Systems/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetDataViewsForSystemName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDataViewSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsDataViewSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDataViewSummary)));
        }

        /// <summary>
        /// Returns details of all the endpoints in the API 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeEndpointsWithNoLicenceRequirements">If specified, don&#x27;t return endpoints in the output that have no licence requirements.  Defaults to false - returns all endpoints (optional)</param>
        /// <param name="excludeEndpointsWithNoRoleRequirements">If specified, don&#x27;t return endpoints in the output that have no role requirements.  Defaults to false - returns all endpoints (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, GroupName, Method, UrlTemplate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, GroupName, Method, UrlTemplate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsEndpointDetails</returns>
        public PagedResultsEndpointDetails AboutGetEndpoints (bool? excludeEndpointsWithNoLicenceRequirements = null, bool? excludeEndpointsWithNoRoleRequirements = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsEndpointDetails> localVarResponse = AboutGetEndpointsWithHttpInfo(excludeEndpointsWithNoLicenceRequirements, excludeEndpointsWithNoRoleRequirements, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details of all the endpoints in the API 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeEndpointsWithNoLicenceRequirements">If specified, don&#x27;t return endpoints in the output that have no licence requirements.  Defaults to false - returns all endpoints (optional)</param>
        /// <param name="excludeEndpointsWithNoRoleRequirements">If specified, don&#x27;t return endpoints in the output that have no role requirements.  Defaults to false - returns all endpoints (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, GroupName, Method, UrlTemplate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, GroupName, Method, UrlTemplate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsEndpointDetails</returns>
        public ApiResponse< PagedResultsEndpointDetails > AboutGetEndpointsWithHttpInfo (bool? excludeEndpointsWithNoLicenceRequirements = null, bool? excludeEndpointsWithNoRoleRequirements = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {

            var localVarPath = "./About/Endpoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeEndpointsWithNoLicenceRequirements != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeEndpointsWithNoLicenceRequirements", excludeEndpointsWithNoLicenceRequirements)); // query parameter
            if (excludeEndpointsWithNoRoleRequirements != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeEndpointsWithNoRoleRequirements", excludeEndpointsWithNoRoleRequirements)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetEndpoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsEndpointDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsEndpointDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsEndpointDetails)));
        }

        /// <summary>
        /// Returns details of all the endpoints in the API 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeEndpointsWithNoLicenceRequirements">If specified, don&#x27;t return endpoints in the output that have no licence requirements.  Defaults to false - returns all endpoints (optional)</param>
        /// <param name="excludeEndpointsWithNoRoleRequirements">If specified, don&#x27;t return endpoints in the output that have no role requirements.  Defaults to false - returns all endpoints (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, GroupName, Method, UrlTemplate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, GroupName, Method, UrlTemplate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsEndpointDetails</returns>
        public async System.Threading.Tasks.Task<PagedResultsEndpointDetails> AboutGetEndpointsAsync (bool? excludeEndpointsWithNoLicenceRequirements = null, bool? excludeEndpointsWithNoRoleRequirements = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsEndpointDetails> localVarResponse = await AboutGetEndpointsAsyncWithHttpInfo(excludeEndpointsWithNoLicenceRequirements, excludeEndpointsWithNoRoleRequirements, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details of all the endpoints in the API 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeEndpointsWithNoLicenceRequirements">If specified, don&#x27;t return endpoints in the output that have no licence requirements.  Defaults to false - returns all endpoints (optional)</param>
        /// <param name="excludeEndpointsWithNoRoleRequirements">If specified, don&#x27;t return endpoints in the output that have no role requirements.  Defaults to false - returns all endpoints (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, GroupName, Method, UrlTemplate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, GroupName, Method, UrlTemplate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsEndpointDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsEndpointDetails>> AboutGetEndpointsAsyncWithHttpInfo (bool? excludeEndpointsWithNoLicenceRequirements = null, bool? excludeEndpointsWithNoRoleRequirements = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {

            var localVarPath = "./About/Endpoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeEndpointsWithNoLicenceRequirements != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeEndpointsWithNoLicenceRequirements", excludeEndpointsWithNoLicenceRequirements)); // query parameter
            if (excludeEndpointsWithNoRoleRequirements != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeEndpointsWithNoRoleRequirements", excludeEndpointsWithNoRoleRequirements)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetEndpoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsEndpointDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsEndpointDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsEndpointDetails)));
        }

        /// <summary>
        /// Returns information about the current language the API is operating in (based on details in the request) 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LanguageDetails</returns>
        public LanguageDetails AboutGetLanguageDetails ()
        {
             ApiResponse<LanguageDetails> localVarResponse = AboutGetLanguageDetailsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about the current language the API is operating in (based on details in the request) 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LanguageDetails</returns>
        public ApiResponse< LanguageDetails > AboutGetLanguageDetailsWithHttpInfo ()
        {

            var localVarPath = "./About/Language";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetLanguageDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LanguageDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (LanguageDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LanguageDetails)));
        }

        /// <summary>
        /// Returns information about the current language the API is operating in (based on details in the request) 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LanguageDetails</returns>
        public async System.Threading.Tasks.Task<LanguageDetails> AboutGetLanguageDetailsAsync ()
        {
             ApiResponse<LanguageDetails> localVarResponse = await AboutGetLanguageDetailsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns information about the current language the API is operating in (based on details in the request) 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LanguageDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LanguageDetails>> AboutGetLanguageDetailsAsyncWithHttpInfo ()
        {

            var localVarPath = "./About/Language";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetLanguageDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LanguageDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (LanguageDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LanguageDetails)));
        }

        /// <summary>
        /// Gets Orbit settings at the given path 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsPath">The path of the settings</param>
        /// <returns>Object</returns>
        public Object AboutGetOrbitSettings (string settingsPath)
        {
             ApiResponse<Object> localVarResponse = AboutGetOrbitSettingsWithHttpInfo(settingsPath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Orbit settings at the given path 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsPath">The path of the settings</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AboutGetOrbitSettingsWithHttpInfo (string settingsPath)
        {
            // verify the required parameter 'settingsPath' is set
            if (settingsPath == null)
                throw new ApiException(400, "Missing required parameter 'settingsPath' when calling AboutApi->AboutGetOrbitSettings");

            var localVarPath = "./About/Orbit/Settings/{settingsPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (settingsPath != null) localVarPathParams.Add("settingsPath", this.Configuration.ApiClient.ParameterToString(settingsPath)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetOrbitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets Orbit settings at the given path 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsPath">The path of the settings</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AboutGetOrbitSettingsAsync (string settingsPath)
        {
             ApiResponse<Object> localVarResponse = await AboutGetOrbitSettingsAsyncWithHttpInfo(settingsPath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Orbit settings at the given path 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsPath">The path of the settings</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AboutGetOrbitSettingsAsyncWithHttpInfo (string settingsPath)
        {
            // verify the required parameter 'settingsPath' is set
            if (settingsPath == null)
                throw new ApiException(400, "Missing required parameter 'settingsPath' when calling AboutApi->AboutGetOrbitSettings");

            var localVarPath = "./About/Orbit/Settings/{settingsPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (settingsPath != null) localVarPathParams.Add("settingsPath", this.Configuration.ApiClient.ParameterToString(settingsPath)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetOrbitSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets the complete Orbit settings object 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object AboutGetOrbitSettingsRoot ()
        {
             ApiResponse<Object> localVarResponse = AboutGetOrbitSettingsRootWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the complete Orbit settings object 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AboutGetOrbitSettingsRootWithHttpInfo ()
        {

            var localVarPath = "./About/Orbit/Settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetOrbitSettingsRoot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets the complete Orbit settings object 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AboutGetOrbitSettingsRootAsync ()
        {
             ApiResponse<Object> localVarResponse = await AboutGetOrbitSettingsRootAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the complete Orbit settings object 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AboutGetOrbitSettingsRootAsyncWithHttpInfo ()
        {

            var localVarPath = "./About/Orbit/Settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetOrbitSettingsRoot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns details about the API&#x27;s .Net process This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProcessDetails</returns>
        public ProcessDetails AboutGetProcessDetails ()
        {
             ApiResponse<ProcessDetails> localVarResponse = AboutGetProcessDetailsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns details about the API&#x27;s .Net process This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProcessDetails</returns>
        public ApiResponse< ProcessDetails > AboutGetProcessDetailsWithHttpInfo ()
        {

            var localVarPath = "./About/Process";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetProcessDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ProcessDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDetails)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns details about the API&#x27;s .Net process This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProcessDetails</returns>
        public async System.Threading.Tasks.Task<ProcessDetails> AboutGetProcessDetailsAsync ()
        {
             ApiResponse<ProcessDetails> localVarResponse = await AboutGetProcessDetailsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Returns details about the API&#x27;s .Net process This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProcessDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessDetails>> AboutGetProcessDetailsAsyncWithHttpInfo ()
        {

            var localVarPath = "./About/Process";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetProcessDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ProcessDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDetails)));
        }

        /// <summary>
        /// Returns information about the TimeZones available to the API 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TimeZoneInfoDetails</returns>
        public TimeZoneInfoDetails AboutGetTimeZonesInfo ()
        {
             ApiResponse<TimeZoneInfoDetails> localVarResponse = AboutGetTimeZonesInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about the TimeZones available to the API 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TimeZoneInfoDetails</returns>
        public ApiResponse< TimeZoneInfoDetails > AboutGetTimeZonesInfoWithHttpInfo ()
        {

            var localVarPath = "./About/TimeZonesInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetTimeZonesInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimeZoneInfoDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TimeZoneInfoDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimeZoneInfoDetails)));
        }

        /// <summary>
        /// Returns information about the TimeZones available to the API 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TimeZoneInfoDetails</returns>
        public async System.Threading.Tasks.Task<TimeZoneInfoDetails> AboutGetTimeZonesInfoAsync ()
        {
             ApiResponse<TimeZoneInfoDetails> localVarResponse = await AboutGetTimeZonesInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns information about the TimeZones available to the API 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TimeZoneInfoDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimeZoneInfoDetails>> AboutGetTimeZonesInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "./About/TimeZonesInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetTimeZonesInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimeZoneInfoDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TimeZoneInfoDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimeZoneInfoDetails)));
        }

        /// <summary>
        /// Returns version information about the API 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>VersionDetails</returns>
        public VersionDetails AboutGetVersion ()
        {
             ApiResponse<VersionDetails> localVarResponse = AboutGetVersionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns version information about the API 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of VersionDetails</returns>
        public ApiResponse< VersionDetails > AboutGetVersionWithHttpInfo ()
        {

            var localVarPath = "./About/Version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (VersionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionDetails)));
        }

        /// <summary>
        /// Returns version information about the API 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of VersionDetails</returns>
        public async System.Threading.Tasks.Task<VersionDetails> AboutGetVersionAsync ()
        {
             ApiResponse<VersionDetails> localVarResponse = await AboutGetVersionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns version information about the API 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (VersionDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VersionDetails>> AboutGetVersionAsyncWithHttpInfo ()
        {

            var localVarPath = "./About/Version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutGetVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (VersionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionDetails)));
        }

        /// <summary>
        /// Requires PackageServiceLogs Role: Packages up Orbit log files into a single zip which is then accessible via the temporary files API endpoint This endpoint is only available for users with the PackageServiceLogs role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">Required - specifies the dataView where the temporary file will be uploaded to (optional)</param>
        /// <param name="numberOfLogFiles">Optional - package up the last X number of log files - default: 7 - Max: 31 (optional, default to 7)</param>
        /// <returns>LogPackageSummary</returns>
        public LogPackageSummary AboutPackageLogs (string dataViewName = null, int? numberOfLogFiles = null)
        {
             ApiResponse<LogPackageSummary> localVarResponse = AboutPackageLogsWithHttpInfo(dataViewName, numberOfLogFiles);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires PackageServiceLogs Role: Packages up Orbit log files into a single zip which is then accessible via the temporary files API endpoint This endpoint is only available for users with the PackageServiceLogs role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">Required - specifies the dataView where the temporary file will be uploaded to (optional)</param>
        /// <param name="numberOfLogFiles">Optional - package up the last X number of log files - default: 7 - Max: 31 (optional, default to 7)</param>
        /// <returns>ApiResponse of LogPackageSummary</returns>
        public ApiResponse< LogPackageSummary > AboutPackageLogsWithHttpInfo (string dataViewName = null, int? numberOfLogFiles = null)
        {

            var localVarPath = "./About/Logs/Package";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataViewName", dataViewName)); // query parameter
            if (numberOfLogFiles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "numberOfLogFiles", numberOfLogFiles)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutPackageLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogPackageSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (LogPackageSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogPackageSummary)));
        }

        /// <summary>
        /// Requires PackageServiceLogs Role: Packages up Orbit log files into a single zip which is then accessible via the temporary files API endpoint This endpoint is only available for users with the PackageServiceLogs role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">Required - specifies the dataView where the temporary file will be uploaded to (optional)</param>
        /// <param name="numberOfLogFiles">Optional - package up the last X number of log files - default: 7 - Max: 31 (optional, default to 7)</param>
        /// <returns>Task of LogPackageSummary</returns>
        public async System.Threading.Tasks.Task<LogPackageSummary> AboutPackageLogsAsync (string dataViewName = null, int? numberOfLogFiles = null)
        {
             ApiResponse<LogPackageSummary> localVarResponse = await AboutPackageLogsAsyncWithHttpInfo(dataViewName, numberOfLogFiles);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires PackageServiceLogs Role: Packages up Orbit log files into a single zip which is then accessible via the temporary files API endpoint This endpoint is only available for users with the PackageServiceLogs role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">Required - specifies the dataView where the temporary file will be uploaded to (optional)</param>
        /// <param name="numberOfLogFiles">Optional - package up the last X number of log files - default: 7 - Max: 31 (optional, default to 7)</param>
        /// <returns>Task of ApiResponse (LogPackageSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogPackageSummary>> AboutPackageLogsAsyncWithHttpInfo (string dataViewName = null, int? numberOfLogFiles = null)
        {

            var localVarPath = "./About/Logs/Package";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataViewName", dataViewName)); // query parameter
            if (numberOfLogFiles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "numberOfLogFiles", numberOfLogFiles)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AboutPackageLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogPackageSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (LogPackageSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogPackageSummary)));
        }

    }
}
