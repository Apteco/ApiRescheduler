/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDataLicensingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel a running data purchasing job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        void DataLicensingCancelDataPurchaseJob (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// Cancel a running data purchasing job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataLicensingCancelDataPurchaseJobWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Cancel a running licensing sets job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        void DataLicensingCancelLicensingSetsJob (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// Cancel a running licensing sets job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataLicensingCancelLicensingSetsJobWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Create a new job to get the available licensing sets for a system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>LicensingSetsJobDetail</returns>
        LicensingSetsJobDetail DataLicensingCreateGetLicensingSetsJob (string dataViewName, string systemName);

        /// <summary>
        /// Create a new job to get the available licensing sets for a system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of LicensingSetsJobDetail</returns>
        ApiResponse<LicensingSetsJobDetail> DataLicensingCreateGetLicensingSetsJobWithHttpInfo (string dataViewName, string systemName);
        /// <summary>
        /// Create a new job to purchase data licensing information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details for the data licensing purchase (optional)</param>
        /// <returns>DataPurchaseJobDetail</returns>
        DataPurchaseJobDetail DataLicensingCreatePurchaseDataLicensingJob (string dataViewName, string systemName, DataPurchaseDetail body = null);

        /// <summary>
        /// Create a new job to purchase data licensing information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details for the data licensing purchase (optional)</param>
        /// <returns>ApiResponse of DataPurchaseJobDetail</returns>
        ApiResponse<DataPurchaseJobDetail> DataLicensingCreatePurchaseDataLicensingJobWithHttpInfo (string dataViewName, string systemName, DataPurchaseDetail body = null);
        /// <summary>
        /// Get the status of a running purchase job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>DataPurchaseJobDetail</returns>
        DataPurchaseJobDetail DataLicensingGetDataPurchaseJob (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// Get the status of a running purchase job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of DataPurchaseJobDetail</returns>
        ApiResponse<DataPurchaseJobDetail> DataLicensingGetDataPurchaseJobWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Get the status of a running licensing sets job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>LicensingSetsJobDetail</returns>
        LicensingSetsJobDetail DataLicensingGetLicensingSetsJob (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// Get the status of a running licensing sets job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of LicensingSetsJobDetail</returns>
        ApiResponse<LicensingSetsJobDetail> DataLicensingGetLicensingSetsJobWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Get the licensing sets for a system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsLicensingSet</returns>
        PagedResultsLicensingSet DataLicensingGetLicensingSetsSync (string dataViewName, string systemName, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Get the licensing sets for a system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsLicensingSet</returns>
        ApiResponse<PagedResultsLicensingSet> DataLicensingGetLicensingSetsSyncWithHttpInfo (string dataViewName, string systemName, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Purchase data licensing information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details for the data licensing purchase (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#x27;s configuration (optional)</param>
        /// <returns>PurchaseInfo</returns>
        PurchaseInfo DataLicensingPurchaseDataLicensingSync (string dataViewName, string systemName, DataPurchaseDetail body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Purchase data licensing information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details for the data licensing purchase (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of PurchaseInfo</returns>
        ApiResponse<PurchaseInfo> DataLicensingPurchaseDataLicensingSyncWithHttpInfo (string dataViewName, string systemName, DataPurchaseDetail body = null, int? timeoutInSeconds = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel a running data purchasing job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataLicensingCancelDataPurchaseJobAsync (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// Cancel a running data purchasing job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataLicensingCancelDataPurchaseJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Cancel a running licensing sets job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataLicensingCancelLicensingSetsJobAsync (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// Cancel a running licensing sets job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataLicensingCancelLicensingSetsJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Create a new job to get the available licensing sets for a system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of LicensingSetsJobDetail</returns>
        System.Threading.Tasks.Task<LicensingSetsJobDetail> DataLicensingCreateGetLicensingSetsJobAsync (string dataViewName, string systemName);

        /// <summary>
        /// Create a new job to get the available licensing sets for a system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse (LicensingSetsJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<LicensingSetsJobDetail>> DataLicensingCreateGetLicensingSetsJobAsyncWithHttpInfo (string dataViewName, string systemName);
        /// <summary>
        /// Create a new job to purchase data licensing information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details for the data licensing purchase (optional)</param>
        /// <returns>Task of DataPurchaseJobDetail</returns>
        System.Threading.Tasks.Task<DataPurchaseJobDetail> DataLicensingCreatePurchaseDataLicensingJobAsync (string dataViewName, string systemName, DataPurchaseDetail body = null);

        /// <summary>
        /// Create a new job to purchase data licensing information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details for the data licensing purchase (optional)</param>
        /// <returns>Task of ApiResponse (DataPurchaseJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataPurchaseJobDetail>> DataLicensingCreatePurchaseDataLicensingJobAsyncWithHttpInfo (string dataViewName, string systemName, DataPurchaseDetail body = null);
        /// <summary>
        /// Get the status of a running purchase job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of DataPurchaseJobDetail</returns>
        System.Threading.Tasks.Task<DataPurchaseJobDetail> DataLicensingGetDataPurchaseJobAsync (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// Get the status of a running purchase job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (DataPurchaseJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataPurchaseJobDetail>> DataLicensingGetDataPurchaseJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Get the status of a running licensing sets job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of LicensingSetsJobDetail</returns>
        System.Threading.Tasks.Task<LicensingSetsJobDetail> DataLicensingGetLicensingSetsJobAsync (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// Get the status of a running licensing sets job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (LicensingSetsJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<LicensingSetsJobDetail>> DataLicensingGetLicensingSetsJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Get the licensing sets for a system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsLicensingSet</returns>
        System.Threading.Tasks.Task<PagedResultsLicensingSet> DataLicensingGetLicensingSetsSyncAsync (string dataViewName, string systemName, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Get the licensing sets for a system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsLicensingSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsLicensingSet>> DataLicensingGetLicensingSetsSyncAsyncWithHttpInfo (string dataViewName, string systemName, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Purchase data licensing information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details for the data licensing purchase (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#x27;s configuration (optional)</param>
        /// <returns>Task of PurchaseInfo</returns>
        System.Threading.Tasks.Task<PurchaseInfo> DataLicensingPurchaseDataLicensingSyncAsync (string dataViewName, string systemName, DataPurchaseDetail body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Purchase data licensing information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details for the data licensing purchase (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (PurchaseInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseInfo>> DataLicensingPurchaseDataLicensingSyncAsyncWithHttpInfo (string dataViewName, string systemName, DataPurchaseDetail body = null, int? timeoutInSeconds = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DataLicensingApi : IDataLicensingApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataLicensingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataLicensingApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataLicensingApi"/> class
        /// </summary>
        /// <returns></returns>
        public DataLicensingApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataLicensingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataLicensingApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel a running data purchasing job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        public void DataLicensingCancelDataPurchaseJob (string dataViewName, string systemName, int? jobId)
        {
             DataLicensingCancelDataPurchaseJobWithHttpInfo(dataViewName, systemName, jobId);
        }

        /// <summary>
        /// Cancel a running data purchasing job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataLicensingCancelDataPurchaseJobWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DataLicensingApi->DataLicensingCancelDataPurchaseJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DataLicensingApi->DataLicensingCancelDataPurchaseJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DataLicensingApi->DataLicensingCancelDataPurchaseJob");

            var localVarPath = "./{dataViewName}/DataLicensing/{systemName}/DataPurchaseJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLicensingCancelDataPurchaseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel a running data purchasing job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataLicensingCancelDataPurchaseJobAsync (string dataViewName, string systemName, int? jobId)
        {
             await DataLicensingCancelDataPurchaseJobAsyncWithHttpInfo(dataViewName, systemName, jobId);

        }

        /// <summary>
        /// Cancel a running data purchasing job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataLicensingCancelDataPurchaseJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DataLicensingApi->DataLicensingCancelDataPurchaseJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DataLicensingApi->DataLicensingCancelDataPurchaseJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DataLicensingApi->DataLicensingCancelDataPurchaseJob");

            var localVarPath = "./{dataViewName}/DataLicensing/{systemName}/DataPurchaseJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLicensingCancelDataPurchaseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel a running licensing sets job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        public void DataLicensingCancelLicensingSetsJob (string dataViewName, string systemName, int? jobId)
        {
             DataLicensingCancelLicensingSetsJobWithHttpInfo(dataViewName, systemName, jobId);
        }

        /// <summary>
        /// Cancel a running licensing sets job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataLicensingCancelLicensingSetsJobWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DataLicensingApi->DataLicensingCancelLicensingSetsJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DataLicensingApi->DataLicensingCancelLicensingSetsJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DataLicensingApi->DataLicensingCancelLicensingSetsJob");

            var localVarPath = "./{dataViewName}/DataLicensing/{systemName}/LicensingSetsJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLicensingCancelLicensingSetsJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel a running licensing sets job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataLicensingCancelLicensingSetsJobAsync (string dataViewName, string systemName, int? jobId)
        {
             await DataLicensingCancelLicensingSetsJobAsyncWithHttpInfo(dataViewName, systemName, jobId);

        }

        /// <summary>
        /// Cancel a running licensing sets job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataLicensingCancelLicensingSetsJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DataLicensingApi->DataLicensingCancelLicensingSetsJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DataLicensingApi->DataLicensingCancelLicensingSetsJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DataLicensingApi->DataLicensingCancelLicensingSetsJob");

            var localVarPath = "./{dataViewName}/DataLicensing/{systemName}/LicensingSetsJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLicensingCancelLicensingSetsJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new job to get the available licensing sets for a system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>LicensingSetsJobDetail</returns>
        public LicensingSetsJobDetail DataLicensingCreateGetLicensingSetsJob (string dataViewName, string systemName)
        {
             ApiResponse<LicensingSetsJobDetail> localVarResponse = DataLicensingCreateGetLicensingSetsJobWithHttpInfo(dataViewName, systemName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new job to get the available licensing sets for a system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of LicensingSetsJobDetail</returns>
        public ApiResponse< LicensingSetsJobDetail > DataLicensingCreateGetLicensingSetsJobWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DataLicensingApi->DataLicensingCreateGetLicensingSetsJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DataLicensingApi->DataLicensingCreateGetLicensingSetsJob");

            var localVarPath = "./{dataViewName}/DataLicensing/{systemName}/LicensingSetsJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLicensingCreateGetLicensingSetsJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicensingSetsJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (LicensingSetsJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicensingSetsJobDetail)));
        }

        /// <summary>
        /// Create a new job to get the available licensing sets for a system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of LicensingSetsJobDetail</returns>
        public async System.Threading.Tasks.Task<LicensingSetsJobDetail> DataLicensingCreateGetLicensingSetsJobAsync (string dataViewName, string systemName)
        {
             ApiResponse<LicensingSetsJobDetail> localVarResponse = await DataLicensingCreateGetLicensingSetsJobAsyncWithHttpInfo(dataViewName, systemName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new job to get the available licensing sets for a system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse (LicensingSetsJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LicensingSetsJobDetail>> DataLicensingCreateGetLicensingSetsJobAsyncWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DataLicensingApi->DataLicensingCreateGetLicensingSetsJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DataLicensingApi->DataLicensingCreateGetLicensingSetsJob");

            var localVarPath = "./{dataViewName}/DataLicensing/{systemName}/LicensingSetsJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLicensingCreateGetLicensingSetsJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicensingSetsJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (LicensingSetsJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicensingSetsJobDetail)));
        }

        /// <summary>
        /// Create a new job to purchase data licensing information 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details for the data licensing purchase (optional)</param>
        /// <returns>DataPurchaseJobDetail</returns>
        public DataPurchaseJobDetail DataLicensingCreatePurchaseDataLicensingJob (string dataViewName, string systemName, DataPurchaseDetail body = null)
        {
             ApiResponse<DataPurchaseJobDetail> localVarResponse = DataLicensingCreatePurchaseDataLicensingJobWithHttpInfo(dataViewName, systemName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new job to purchase data licensing information 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details for the data licensing purchase (optional)</param>
        /// <returns>ApiResponse of DataPurchaseJobDetail</returns>
        public ApiResponse< DataPurchaseJobDetail > DataLicensingCreatePurchaseDataLicensingJobWithHttpInfo (string dataViewName, string systemName, DataPurchaseDetail body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DataLicensingApi->DataLicensingCreatePurchaseDataLicensingJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DataLicensingApi->DataLicensingCreatePurchaseDataLicensingJob");

            var localVarPath = "./{dataViewName}/DataLicensing/{systemName}/DataPurchaseJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLicensingCreatePurchaseDataLicensingJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataPurchaseJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DataPurchaseJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataPurchaseJobDetail)));
        }

        /// <summary>
        /// Create a new job to purchase data licensing information 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details for the data licensing purchase (optional)</param>
        /// <returns>Task of DataPurchaseJobDetail</returns>
        public async System.Threading.Tasks.Task<DataPurchaseJobDetail> DataLicensingCreatePurchaseDataLicensingJobAsync (string dataViewName, string systemName, DataPurchaseDetail body = null)
        {
             ApiResponse<DataPurchaseJobDetail> localVarResponse = await DataLicensingCreatePurchaseDataLicensingJobAsyncWithHttpInfo(dataViewName, systemName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new job to purchase data licensing information 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details for the data licensing purchase (optional)</param>
        /// <returns>Task of ApiResponse (DataPurchaseJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataPurchaseJobDetail>> DataLicensingCreatePurchaseDataLicensingJobAsyncWithHttpInfo (string dataViewName, string systemName, DataPurchaseDetail body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DataLicensingApi->DataLicensingCreatePurchaseDataLicensingJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DataLicensingApi->DataLicensingCreatePurchaseDataLicensingJob");

            var localVarPath = "./{dataViewName}/DataLicensing/{systemName}/DataPurchaseJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLicensingCreatePurchaseDataLicensingJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataPurchaseJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DataPurchaseJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataPurchaseJobDetail)));
        }

        /// <summary>
        /// Get the status of a running purchase job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>DataPurchaseJobDetail</returns>
        public DataPurchaseJobDetail DataLicensingGetDataPurchaseJob (string dataViewName, string systemName, int? jobId)
        {
             ApiResponse<DataPurchaseJobDetail> localVarResponse = DataLicensingGetDataPurchaseJobWithHttpInfo(dataViewName, systemName, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of a running purchase job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of DataPurchaseJobDetail</returns>
        public ApiResponse< DataPurchaseJobDetail > DataLicensingGetDataPurchaseJobWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DataLicensingApi->DataLicensingGetDataPurchaseJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DataLicensingApi->DataLicensingGetDataPurchaseJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DataLicensingApi->DataLicensingGetDataPurchaseJob");

            var localVarPath = "./{dataViewName}/DataLicensing/{systemName}/DataPurchaseJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLicensingGetDataPurchaseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataPurchaseJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DataPurchaseJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataPurchaseJobDetail)));
        }

        /// <summary>
        /// Get the status of a running purchase job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of DataPurchaseJobDetail</returns>
        public async System.Threading.Tasks.Task<DataPurchaseJobDetail> DataLicensingGetDataPurchaseJobAsync (string dataViewName, string systemName, int? jobId)
        {
             ApiResponse<DataPurchaseJobDetail> localVarResponse = await DataLicensingGetDataPurchaseJobAsyncWithHttpInfo(dataViewName, systemName, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of a running purchase job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (DataPurchaseJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataPurchaseJobDetail>> DataLicensingGetDataPurchaseJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DataLicensingApi->DataLicensingGetDataPurchaseJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DataLicensingApi->DataLicensingGetDataPurchaseJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DataLicensingApi->DataLicensingGetDataPurchaseJob");

            var localVarPath = "./{dataViewName}/DataLicensing/{systemName}/DataPurchaseJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLicensingGetDataPurchaseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataPurchaseJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DataPurchaseJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataPurchaseJobDetail)));
        }

        /// <summary>
        /// Get the status of a running licensing sets job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>LicensingSetsJobDetail</returns>
        public LicensingSetsJobDetail DataLicensingGetLicensingSetsJob (string dataViewName, string systemName, int? jobId)
        {
             ApiResponse<LicensingSetsJobDetail> localVarResponse = DataLicensingGetLicensingSetsJobWithHttpInfo(dataViewName, systemName, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of a running licensing sets job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of LicensingSetsJobDetail</returns>
        public ApiResponse< LicensingSetsJobDetail > DataLicensingGetLicensingSetsJobWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DataLicensingApi->DataLicensingGetLicensingSetsJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DataLicensingApi->DataLicensingGetLicensingSetsJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DataLicensingApi->DataLicensingGetLicensingSetsJob");

            var localVarPath = "./{dataViewName}/DataLicensing/{systemName}/LicensingSetsJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLicensingGetLicensingSetsJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicensingSetsJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (LicensingSetsJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicensingSetsJobDetail)));
        }

        /// <summary>
        /// Get the status of a running licensing sets job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of LicensingSetsJobDetail</returns>
        public async System.Threading.Tasks.Task<LicensingSetsJobDetail> DataLicensingGetLicensingSetsJobAsync (string dataViewName, string systemName, int? jobId)
        {
             ApiResponse<LicensingSetsJobDetail> localVarResponse = await DataLicensingGetLicensingSetsJobAsyncWithHttpInfo(dataViewName, systemName, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of a running licensing sets job 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (LicensingSetsJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LicensingSetsJobDetail>> DataLicensingGetLicensingSetsJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DataLicensingApi->DataLicensingGetLicensingSetsJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DataLicensingApi->DataLicensingGetLicensingSetsJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DataLicensingApi->DataLicensingGetLicensingSetsJob");

            var localVarPath = "./{dataViewName}/DataLicensing/{systemName}/LicensingSetsJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLicensingGetLicensingSetsJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicensingSetsJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (LicensingSetsJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicensingSetsJobDetail)));
        }

        /// <summary>
        /// Get the licensing sets for a system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsLicensingSet</returns>
        public PagedResultsLicensingSet DataLicensingGetLicensingSetsSync (string dataViewName, string systemName, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsLicensingSet> localVarResponse = DataLicensingGetLicensingSetsSyncWithHttpInfo(dataViewName, systemName, timeoutInSeconds, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the licensing sets for a system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsLicensingSet</returns>
        public ApiResponse< PagedResultsLicensingSet > DataLicensingGetLicensingSetsSyncWithHttpInfo (string dataViewName, string systemName, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DataLicensingApi->DataLicensingGetLicensingSetsSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DataLicensingApi->DataLicensingGetLicensingSetsSync");

            var localVarPath = "./{dataViewName}/DataLicensing/{systemName}/LicensingSets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLicensingGetLicensingSetsSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsLicensingSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsLicensingSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsLicensingSet)));
        }

        /// <summary>
        /// Get the licensing sets for a system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsLicensingSet</returns>
        public async System.Threading.Tasks.Task<PagedResultsLicensingSet> DataLicensingGetLicensingSetsSyncAsync (string dataViewName, string systemName, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsLicensingSet> localVarResponse = await DataLicensingGetLicensingSetsSyncAsyncWithHttpInfo(dataViewName, systemName, timeoutInSeconds, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the licensing sets for a system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsLicensingSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsLicensingSet>> DataLicensingGetLicensingSetsSyncAsyncWithHttpInfo (string dataViewName, string systemName, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DataLicensingApi->DataLicensingGetLicensingSetsSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DataLicensingApi->DataLicensingGetLicensingSetsSync");

            var localVarPath = "./{dataViewName}/DataLicensing/{systemName}/LicensingSets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLicensingGetLicensingSetsSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsLicensingSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsLicensingSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsLicensingSet)));
        }

        /// <summary>
        /// Purchase data licensing information 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details for the data licensing purchase (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#x27;s configuration (optional)</param>
        /// <returns>PurchaseInfo</returns>
        public PurchaseInfo DataLicensingPurchaseDataLicensingSync (string dataViewName, string systemName, DataPurchaseDetail body = null, int? timeoutInSeconds = null)
        {
             ApiResponse<PurchaseInfo> localVarResponse = DataLicensingPurchaseDataLicensingSyncWithHttpInfo(dataViewName, systemName, body, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Purchase data licensing information 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details for the data licensing purchase (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of PurchaseInfo</returns>
        public ApiResponse< PurchaseInfo > DataLicensingPurchaseDataLicensingSyncWithHttpInfo (string dataViewName, string systemName, DataPurchaseDetail body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DataLicensingApi->DataLicensingPurchaseDataLicensingSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DataLicensingApi->DataLicensingPurchaseDataLicensingSync");

            var localVarPath = "./{dataViewName}/DataLicensing/{systemName}/PurchaseSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLicensingPurchaseDataLicensingSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PurchaseInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PurchaseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PurchaseInfo)));
        }

        /// <summary>
        /// Purchase data licensing information 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details for the data licensing purchase (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#x27;s configuration (optional)</param>
        /// <returns>Task of PurchaseInfo</returns>
        public async System.Threading.Tasks.Task<PurchaseInfo> DataLicensingPurchaseDataLicensingSyncAsync (string dataViewName, string systemName, DataPurchaseDetail body = null, int? timeoutInSeconds = null)
        {
             ApiResponse<PurchaseInfo> localVarResponse = await DataLicensingPurchaseDataLicensingSyncAsyncWithHttpInfo(dataViewName, systemName, body, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Purchase data licensing information 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details for the data licensing purchase (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (PurchaseInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PurchaseInfo>> DataLicensingPurchaseDataLicensingSyncAsyncWithHttpInfo (string dataViewName, string systemName, DataPurchaseDetail body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DataLicensingApi->DataLicensingPurchaseDataLicensingSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DataLicensingApi->DataLicensingPurchaseDataLicensingSync");

            var localVarPath = "./{dataViewName}/DataLicensing/{systemName}/PurchaseSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataLicensingPurchaseDataLicensingSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PurchaseInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PurchaseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PurchaseInfo)));
        }

    }
}
