/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IFastStatsSystemsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Requires PackageServiceLogs Role: Cancel a running package logs job for the system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the PackageServiceLogs role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns></returns>
        void FastStatsSystemsCancelFastStatsLogsPackageJob (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// Requires PackageServiceLogs Role: Cancel a running package logs job for the system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the PackageServiceLogs role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FastStatsSystemsCancelFastStatsLogsPackageJobWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Requires PackageServiceLogs Role: Create a job to package up the FastStats service logs for a system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the PackageServiceLogs role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">Parameters that control which logs to package (optional)</param>
        /// <returns></returns>
        void FastStatsSystemsCreateFastStatsLogsPackageJob (string dataViewName, string systemName, ServiceLogPackageRequest body = null);

        /// <summary>
        /// Requires PackageServiceLogs Role: Create a job to package up the FastStats service logs for a system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the PackageServiceLogs role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">Parameters that control which logs to package (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FastStatsSystemsCreateFastStatsLogsPackageJobWithHttpInfo (string dataViewName, string systemName, ServiceLogPackageRequest body = null);
        /// <summary>
        /// Gets all FastStats systems items - variables, var codes, tables and folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="includeVarCodeCounts">If specified, whether to include the counts for any VarCodes returned (where possible).  Defaults to true - to return counts (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Key, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Key, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsFastStatsSystemItem</returns>
        PagedResultsFastStatsSystemItem FastStatsSystemsGetAllFastStatsSystemItems (string dataViewName, string systemName, bool? includeVarCodeCounts = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets all FastStats systems items - variables, var codes, tables and folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="includeVarCodeCounts">If specified, whether to include the counts for any VarCodes returned (where possible).  Defaults to true - to return counts (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Key, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Key, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsFastStatsSystemItem</returns>
        ApiResponse<PagedResultsFastStatsSystemItem> FastStatsSystemsGetAllFastStatsSystemItemsWithHttpInfo (string dataViewName, string systemName, bool? includeVarCodeCounts = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets the folder structure for the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="path">The path to the folder that should be retrieved</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Folder</returns>
        Folder FastStatsSystemsGetFastStatsFolder (string dataViewName, string systemName, string path, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets the folder structure for the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="path">The path to the folder that should be retrieved</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> FastStatsSystemsGetFastStatsFolderWithHttpInfo (string dataViewName, string systemName, string path, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Requires PackageServiceLogs Role: Get the status of a running package logs job for the system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the PackageServiceLogs role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>FastStatsLogsPackageJobDetail</returns>
        FastStatsLogsPackageJobDetail FastStatsSystemsGetFastStatsLogsPackageJob (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// Requires PackageServiceLogs Role: Get the status of a running package logs job for the system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the PackageServiceLogs role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of FastStatsLogsPackageJobDetail</returns>
        ApiResponse<FastStatsLogsPackageJobDetail> FastStatsSystemsGetFastStatsLogsPackageJobWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Gets the items in the root of the FastStats system folder structure
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsFolderStructureNode</returns>
        PagedResultsFolderStructureNode FastStatsSystemsGetFastStatsRootFolder (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets the items in the root of the FastStats system folder structure
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsFolderStructureNode</returns>
        ApiResponse<PagedResultsFolderStructureNode> FastStatsSystemsGetFastStatsRootFolderWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns some top-level details for the specified FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to return details for</param>
        /// <returns>FastStatsSystemDetail</returns>
        FastStatsSystemDetail FastStatsSystemsGetFastStatsSystem (string dataViewName, string systemName);

        /// <summary>
        /// Returns some top-level details for the specified FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to return details for</param>
        /// <returns>ApiResponse of FastStatsSystemDetail</returns>
        ApiResponse<FastStatsSystemDetail> FastStatsSystemsGetFastStatsSystemWithHttpInfo (string dataViewName, string systemName);
        /// <summary>
        /// Returns the list of FastStats systems available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, FastStatsBuildDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, FastStatsBuildDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsFastStatsSystemSummary</returns>
        PagedResultsFastStatsSystemSummary FastStatsSystemsGetFastStatsSystems (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of FastStats systems available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, FastStatsBuildDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, FastStatsBuildDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsFastStatsSystemSummary</returns>
        ApiResponse<PagedResultsFastStatsSystemSummary> FastStatsSystemsGetFastStatsSystemsWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets the details for a particular table in the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="tableName">The name of the table to get the details for</param>
        /// <returns>Table</returns>
        Table FastStatsSystemsGetFastStatsTable (string dataViewName, string systemName, string tableName);

        /// <summary>
        /// Gets the details for a particular table in the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="tableName">The name of the table to get the details for</param>
        /// <returns>ApiResponse of Table</returns>
        ApiResponse<Table> FastStatsSystemsGetFastStatsTableWithHttpInfo (string dataViewName, string systemName, string tableName);
        /// <summary>
        /// Gets all the tables present in the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsTable</returns>
        PagedResultsTable FastStatsSystemsGetFastStatsTables (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets all the tables present in the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsTable</returns>
        ApiResponse<PagedResultsTable> FastStatsSystemsGetFastStatsTablesWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets the details for a particular variable in the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the details for</param>
        /// <returns>Variable</returns>
        Variable FastStatsSystemsGetFastStatsVariable (string dataViewName, string systemName, string variableName);

        /// <summary>
        /// Gets the details for a particular variable in the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the details for</param>
        /// <returns>ApiResponse of Variable</returns>
        ApiResponse<Variable> FastStatsSystemsGetFastStatsVariableWithHttpInfo (string dataViewName, string systemName, string variableName);
        /// <summary>
        /// Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the var codes for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Code, Description, Count. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Code, Description, Count. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsVarCode</returns>
        PagedResultsVarCode FastStatsSystemsGetFastStatsVariableCodes (string dataViewName, string systemName, string variableName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the var codes for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Code, Description, Count. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Code, Description, Count. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsVarCode</returns>
        ApiResponse<PagedResultsVarCode> FastStatsSystemsGetFastStatsVariableCodesWithHttpInfo (string dataViewName, string systemName, string variableName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets all the variables present in the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsVariable</returns>
        PagedResultsVariable FastStatsSystemsGetFastStatsVariables (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets all the variables present in the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsVariable</returns>
        ApiResponse<PagedResultsVariable> FastStatsSystemsGetFastStatsVariablesWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the var codes for</param>
        /// <returns>PagedResultsVarCode</returns>
        PagedResultsVarCode FastStatsSystemsRefreshFastStatsVariableCodesSync (string dataViewName, string systemName, string variableName);

        /// <summary>
        /// Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the var codes for</param>
        /// <returns>ApiResponse of PagedResultsVarCode</returns>
        ApiResponse<PagedResultsVarCode> FastStatsSystemsRefreshFastStatsVariableCodesSyncWithHttpInfo (string dataViewName, string systemName, string variableName);
        /// <summary>
        /// Requires OrbitAdmin: An endpoint to request the API refresh any information it holds on the given FastStats system.  This endpoint will wait until the refresh has completed before returning.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns></returns>
        void FastStatsSystemsRefreshSystemInformationSync (string dataViewName, string systemName);

        /// <summary>
        /// Requires OrbitAdmin: An endpoint to request the API refresh any information it holds on the given FastStats system.  This endpoint will wait until the refresh has completed before returning.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FastStatsSystemsRefreshSystemInformationSyncWithHttpInfo (string dataViewName, string systemName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Requires PackageServiceLogs Role: Cancel a running package logs job for the system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the PackageServiceLogs role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FastStatsSystemsCancelFastStatsLogsPackageJobAsync (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// Requires PackageServiceLogs Role: Cancel a running package logs job for the system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the PackageServiceLogs role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FastStatsSystemsCancelFastStatsLogsPackageJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Requires PackageServiceLogs Role: Create a job to package up the FastStats service logs for a system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the PackageServiceLogs role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">Parameters that control which logs to package (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FastStatsSystemsCreateFastStatsLogsPackageJobAsync (string dataViewName, string systemName, ServiceLogPackageRequest body = null);

        /// <summary>
        /// Requires PackageServiceLogs Role: Create a job to package up the FastStats service logs for a system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the PackageServiceLogs role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">Parameters that control which logs to package (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FastStatsSystemsCreateFastStatsLogsPackageJobAsyncWithHttpInfo (string dataViewName, string systemName, ServiceLogPackageRequest body = null);
        /// <summary>
        /// Gets all FastStats systems items - variables, var codes, tables and folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="includeVarCodeCounts">If specified, whether to include the counts for any VarCodes returned (where possible).  Defaults to true - to return counts (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Key, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Key, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsFastStatsSystemItem</returns>
        System.Threading.Tasks.Task<PagedResultsFastStatsSystemItem> FastStatsSystemsGetAllFastStatsSystemItemsAsync (string dataViewName, string systemName, bool? includeVarCodeCounts = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets all FastStats systems items - variables, var codes, tables and folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="includeVarCodeCounts">If specified, whether to include the counts for any VarCodes returned (where possible).  Defaults to true - to return counts (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Key, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Key, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsFastStatsSystemItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsFastStatsSystemItem>> FastStatsSystemsGetAllFastStatsSystemItemsAsyncWithHttpInfo (string dataViewName, string systemName, bool? includeVarCodeCounts = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets the folder structure for the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="path">The path to the folder that should be retrieved</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> FastStatsSystemsGetFastStatsFolderAsync (string dataViewName, string systemName, string path, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets the folder structure for the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="path">The path to the folder that should be retrieved</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> FastStatsSystemsGetFastStatsFolderAsyncWithHttpInfo (string dataViewName, string systemName, string path, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Requires PackageServiceLogs Role: Get the status of a running package logs job for the system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the PackageServiceLogs role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of FastStatsLogsPackageJobDetail</returns>
        System.Threading.Tasks.Task<FastStatsLogsPackageJobDetail> FastStatsSystemsGetFastStatsLogsPackageJobAsync (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// Requires PackageServiceLogs Role: Get the status of a running package logs job for the system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the PackageServiceLogs role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (FastStatsLogsPackageJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<FastStatsLogsPackageJobDetail>> FastStatsSystemsGetFastStatsLogsPackageJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Gets the items in the root of the FastStats system folder structure
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsFolderStructureNode</returns>
        System.Threading.Tasks.Task<PagedResultsFolderStructureNode> FastStatsSystemsGetFastStatsRootFolderAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets the items in the root of the FastStats system folder structure
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsFolderStructureNode)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsFolderStructureNode>> FastStatsSystemsGetFastStatsRootFolderAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns some top-level details for the specified FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to return details for</param>
        /// <returns>Task of FastStatsSystemDetail</returns>
        System.Threading.Tasks.Task<FastStatsSystemDetail> FastStatsSystemsGetFastStatsSystemAsync (string dataViewName, string systemName);

        /// <summary>
        /// Returns some top-level details for the specified FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to return details for</param>
        /// <returns>Task of ApiResponse (FastStatsSystemDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<FastStatsSystemDetail>> FastStatsSystemsGetFastStatsSystemAsyncWithHttpInfo (string dataViewName, string systemName);
        /// <summary>
        /// Returns the list of FastStats systems available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, FastStatsBuildDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, FastStatsBuildDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsFastStatsSystemSummary</returns>
        System.Threading.Tasks.Task<PagedResultsFastStatsSystemSummary> FastStatsSystemsGetFastStatsSystemsAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of FastStats systems available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, FastStatsBuildDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, FastStatsBuildDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsFastStatsSystemSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsFastStatsSystemSummary>> FastStatsSystemsGetFastStatsSystemsAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets the details for a particular table in the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="tableName">The name of the table to get the details for</param>
        /// <returns>Task of Table</returns>
        System.Threading.Tasks.Task<Table> FastStatsSystemsGetFastStatsTableAsync (string dataViewName, string systemName, string tableName);

        /// <summary>
        /// Gets the details for a particular table in the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="tableName">The name of the table to get the details for</param>
        /// <returns>Task of ApiResponse (Table)</returns>
        System.Threading.Tasks.Task<ApiResponse<Table>> FastStatsSystemsGetFastStatsTableAsyncWithHttpInfo (string dataViewName, string systemName, string tableName);
        /// <summary>
        /// Gets all the tables present in the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsTable</returns>
        System.Threading.Tasks.Task<PagedResultsTable> FastStatsSystemsGetFastStatsTablesAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets all the tables present in the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsTable)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsTable>> FastStatsSystemsGetFastStatsTablesAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets the details for a particular variable in the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the details for</param>
        /// <returns>Task of Variable</returns>
        System.Threading.Tasks.Task<Variable> FastStatsSystemsGetFastStatsVariableAsync (string dataViewName, string systemName, string variableName);

        /// <summary>
        /// Gets the details for a particular variable in the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the details for</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        System.Threading.Tasks.Task<ApiResponse<Variable>> FastStatsSystemsGetFastStatsVariableAsyncWithHttpInfo (string dataViewName, string systemName, string variableName);
        /// <summary>
        /// Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the var codes for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Code, Description, Count. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Code, Description, Count. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsVarCode</returns>
        System.Threading.Tasks.Task<PagedResultsVarCode> FastStatsSystemsGetFastStatsVariableCodesAsync (string dataViewName, string systemName, string variableName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the var codes for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Code, Description, Count. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Code, Description, Count. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsVarCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsVarCode>> FastStatsSystemsGetFastStatsVariableCodesAsyncWithHttpInfo (string dataViewName, string systemName, string variableName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets all the variables present in the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsVariable</returns>
        System.Threading.Tasks.Task<PagedResultsVariable> FastStatsSystemsGetFastStatsVariablesAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets all the variables present in the FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsVariable)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsVariable>> FastStatsSystemsGetFastStatsVariablesAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the var codes for</param>
        /// <returns>Task of PagedResultsVarCode</returns>
        System.Threading.Tasks.Task<PagedResultsVarCode> FastStatsSystemsRefreshFastStatsVariableCodesSyncAsync (string dataViewName, string systemName, string variableName);

        /// <summary>
        /// Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the var codes for</param>
        /// <returns>Task of ApiResponse (PagedResultsVarCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsVarCode>> FastStatsSystemsRefreshFastStatsVariableCodesSyncAsyncWithHttpInfo (string dataViewName, string systemName, string variableName);
        /// <summary>
        /// Requires OrbitAdmin: An endpoint to request the API refresh any information it holds on the given FastStats system.  This endpoint will wait until the refresh has completed before returning.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FastStatsSystemsRefreshSystemInformationSyncAsync (string dataViewName, string systemName);

        /// <summary>
        /// Requires OrbitAdmin: An endpoint to request the API refresh any information it holds on the given FastStats system.  This endpoint will wait until the refresh has completed before returning.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FastStatsSystemsRefreshSystemInformationSyncAsyncWithHttpInfo (string dataViewName, string systemName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class FastStatsSystemsApi : IFastStatsSystemsApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FastStatsSystemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FastStatsSystemsApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FastStatsSystemsApi"/> class
        /// </summary>
        /// <returns></returns>
        public FastStatsSystemsApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FastStatsSystemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FastStatsSystemsApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Requires PackageServiceLogs Role: Cancel a running package logs job for the system This endpoint is only available for users with the PackageServiceLogs role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns></returns>
        public void FastStatsSystemsCancelFastStatsLogsPackageJob (string dataViewName, string systemName, int? jobId)
        {
             FastStatsSystemsCancelFastStatsLogsPackageJobWithHttpInfo(dataViewName, systemName, jobId);
        }

        /// <summary>
        /// Requires PackageServiceLogs Role: Cancel a running package logs job for the system This endpoint is only available for users with the PackageServiceLogs role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FastStatsSystemsCancelFastStatsLogsPackageJobWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsCancelFastStatsLogsPackageJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsCancelFastStatsLogsPackageJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling FastStatsSystemsApi->FastStatsSystemsCancelFastStatsLogsPackageJob");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Logs/PackageJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsCancelFastStatsLogsPackageJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Requires PackageServiceLogs Role: Cancel a running package logs job for the system This endpoint is only available for users with the PackageServiceLogs role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FastStatsSystemsCancelFastStatsLogsPackageJobAsync (string dataViewName, string systemName, int? jobId)
        {
             await FastStatsSystemsCancelFastStatsLogsPackageJobAsyncWithHttpInfo(dataViewName, systemName, jobId);

        }

        /// <summary>
        /// Requires PackageServiceLogs Role: Cancel a running package logs job for the system This endpoint is only available for users with the PackageServiceLogs role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FastStatsSystemsCancelFastStatsLogsPackageJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsCancelFastStatsLogsPackageJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsCancelFastStatsLogsPackageJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling FastStatsSystemsApi->FastStatsSystemsCancelFastStatsLogsPackageJob");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Logs/PackageJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsCancelFastStatsLogsPackageJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Requires PackageServiceLogs Role: Create a job to package up the FastStats service logs for a system This endpoint is only available for users with the PackageServiceLogs role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">Parameters that control which logs to package (optional)</param>
        /// <returns></returns>
        public void FastStatsSystemsCreateFastStatsLogsPackageJob (string dataViewName, string systemName, ServiceLogPackageRequest body = null)
        {
             FastStatsSystemsCreateFastStatsLogsPackageJobWithHttpInfo(dataViewName, systemName, body);
        }

        /// <summary>
        /// Requires PackageServiceLogs Role: Create a job to package up the FastStats service logs for a system This endpoint is only available for users with the PackageServiceLogs role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">Parameters that control which logs to package (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FastStatsSystemsCreateFastStatsLogsPackageJobWithHttpInfo (string dataViewName, string systemName, ServiceLogPackageRequest body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsCreateFastStatsLogsPackageJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsCreateFastStatsLogsPackageJob");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Logs/PackageJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsCreateFastStatsLogsPackageJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Requires PackageServiceLogs Role: Create a job to package up the FastStats service logs for a system This endpoint is only available for users with the PackageServiceLogs role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">Parameters that control which logs to package (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FastStatsSystemsCreateFastStatsLogsPackageJobAsync (string dataViewName, string systemName, ServiceLogPackageRequest body = null)
        {
             await FastStatsSystemsCreateFastStatsLogsPackageJobAsyncWithHttpInfo(dataViewName, systemName, body);

        }

        /// <summary>
        /// Requires PackageServiceLogs Role: Create a job to package up the FastStats service logs for a system This endpoint is only available for users with the PackageServiceLogs role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">Parameters that control which logs to package (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FastStatsSystemsCreateFastStatsLogsPackageJobAsyncWithHttpInfo (string dataViewName, string systemName, ServiceLogPackageRequest body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsCreateFastStatsLogsPackageJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsCreateFastStatsLogsPackageJob");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Logs/PackageJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsCreateFastStatsLogsPackageJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets all FastStats systems items - variables, var codes, tables and folders 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="includeVarCodeCounts">If specified, whether to include the counts for any VarCodes returned (where possible).  Defaults to true - to return counts (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Key, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Key, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsFastStatsSystemItem</returns>
        public PagedResultsFastStatsSystemItem FastStatsSystemsGetAllFastStatsSystemItems (string dataViewName, string systemName, bool? includeVarCodeCounts = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsFastStatsSystemItem> localVarResponse = FastStatsSystemsGetAllFastStatsSystemItemsWithHttpInfo(dataViewName, systemName, includeVarCodeCounts, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all FastStats systems items - variables, var codes, tables and folders 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="includeVarCodeCounts">If specified, whether to include the counts for any VarCodes returned (where possible).  Defaults to true - to return counts (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Key, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Key, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsFastStatsSystemItem</returns>
        public ApiResponse< PagedResultsFastStatsSystemItem > FastStatsSystemsGetAllFastStatsSystemItemsWithHttpInfo (string dataViewName, string systemName, bool? includeVarCodeCounts = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetAllFastStatsSystemItems");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetAllFastStatsSystemItems");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/All";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (includeVarCodeCounts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeVarCodeCounts", includeVarCodeCounts)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetAllFastStatsSystemItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsFastStatsSystemItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsFastStatsSystemItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsFastStatsSystemItem)));
        }

        /// <summary>
        /// Gets all FastStats systems items - variables, var codes, tables and folders 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="includeVarCodeCounts">If specified, whether to include the counts for any VarCodes returned (where possible).  Defaults to true - to return counts (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Key, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Key, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsFastStatsSystemItem</returns>
        public async System.Threading.Tasks.Task<PagedResultsFastStatsSystemItem> FastStatsSystemsGetAllFastStatsSystemItemsAsync (string dataViewName, string systemName, bool? includeVarCodeCounts = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsFastStatsSystemItem> localVarResponse = await FastStatsSystemsGetAllFastStatsSystemItemsAsyncWithHttpInfo(dataViewName, systemName, includeVarCodeCounts, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all FastStats systems items - variables, var codes, tables and folders 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="includeVarCodeCounts">If specified, whether to include the counts for any VarCodes returned (where possible).  Defaults to true - to return counts (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Key, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Key, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsFastStatsSystemItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsFastStatsSystemItem>> FastStatsSystemsGetAllFastStatsSystemItemsAsyncWithHttpInfo (string dataViewName, string systemName, bool? includeVarCodeCounts = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetAllFastStatsSystemItems");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetAllFastStatsSystemItems");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/All";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (includeVarCodeCounts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeVarCodeCounts", includeVarCodeCounts)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetAllFastStatsSystemItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsFastStatsSystemItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsFastStatsSystemItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsFastStatsSystemItem)));
        }

        /// <summary>
        /// Gets the folder structure for the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="path">The path to the folder that should be retrieved</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Folder</returns>
        public Folder FastStatsSystemsGetFastStatsFolder (string dataViewName, string systemName, string path, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<Folder> localVarResponse = FastStatsSystemsGetFastStatsFolderWithHttpInfo(dataViewName, systemName, path, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the folder structure for the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="path">The path to the folder that should be retrieved</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of Folder</returns>
        public ApiResponse< Folder > FastStatsSystemsGetFastStatsFolderWithHttpInfo (string dataViewName, string systemName, string path, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsFolder");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsFolder");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsFolder");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Folders/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Folder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folder)));
        }

        /// <summary>
        /// Gets the folder structure for the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="path">The path to the folder that should be retrieved</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> FastStatsSystemsGetFastStatsFolderAsync (string dataViewName, string systemName, string path, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<Folder> localVarResponse = await FastStatsSystemsGetFastStatsFolderAsyncWithHttpInfo(dataViewName, systemName, path, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the folder structure for the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="path">The path to the folder that should be retrieved</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Folder>> FastStatsSystemsGetFastStatsFolderAsyncWithHttpInfo (string dataViewName, string systemName, string path, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsFolder");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsFolder");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsFolder");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Folders/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Folder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folder)));
        }

        /// <summary>
        /// Requires PackageServiceLogs Role: Get the status of a running package logs job for the system This endpoint is only available for users with the PackageServiceLogs role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>FastStatsLogsPackageJobDetail</returns>
        public FastStatsLogsPackageJobDetail FastStatsSystemsGetFastStatsLogsPackageJob (string dataViewName, string systemName, int? jobId)
        {
             ApiResponse<FastStatsLogsPackageJobDetail> localVarResponse = FastStatsSystemsGetFastStatsLogsPackageJobWithHttpInfo(dataViewName, systemName, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires PackageServiceLogs Role: Get the status of a running package logs job for the system This endpoint is only available for users with the PackageServiceLogs role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of FastStatsLogsPackageJobDetail</returns>
        public ApiResponse< FastStatsLogsPackageJobDetail > FastStatsSystemsGetFastStatsLogsPackageJobWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsLogsPackageJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsLogsPackageJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsLogsPackageJob");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Logs/PackageJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsLogsPackageJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FastStatsLogsPackageJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (FastStatsLogsPackageJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FastStatsLogsPackageJobDetail)));
        }

        /// <summary>
        /// Requires PackageServiceLogs Role: Get the status of a running package logs job for the system This endpoint is only available for users with the PackageServiceLogs role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of FastStatsLogsPackageJobDetail</returns>
        public async System.Threading.Tasks.Task<FastStatsLogsPackageJobDetail> FastStatsSystemsGetFastStatsLogsPackageJobAsync (string dataViewName, string systemName, int? jobId)
        {
             ApiResponse<FastStatsLogsPackageJobDetail> localVarResponse = await FastStatsSystemsGetFastStatsLogsPackageJobAsyncWithHttpInfo(dataViewName, systemName, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires PackageServiceLogs Role: Get the status of a running package logs job for the system This endpoint is only available for users with the PackageServiceLogs role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (FastStatsLogsPackageJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FastStatsLogsPackageJobDetail>> FastStatsSystemsGetFastStatsLogsPackageJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsLogsPackageJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsLogsPackageJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsLogsPackageJob");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Logs/PackageJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsLogsPackageJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FastStatsLogsPackageJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (FastStatsLogsPackageJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FastStatsLogsPackageJobDetail)));
        }

        /// <summary>
        /// Gets the items in the root of the FastStats system folder structure 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsFolderStructureNode</returns>
        public PagedResultsFolderStructureNode FastStatsSystemsGetFastStatsRootFolder (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsFolderStructureNode> localVarResponse = FastStatsSystemsGetFastStatsRootFolderWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the items in the root of the FastStats system folder structure 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsFolderStructureNode</returns>
        public ApiResponse< PagedResultsFolderStructureNode > FastStatsSystemsGetFastStatsRootFolderWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsRootFolder");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsRootFolder");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsRootFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsFolderStructureNode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsFolderStructureNode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsFolderStructureNode)));
        }

        /// <summary>
        /// Gets the items in the root of the FastStats system folder structure 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsFolderStructureNode</returns>
        public async System.Threading.Tasks.Task<PagedResultsFolderStructureNode> FastStatsSystemsGetFastStatsRootFolderAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsFolderStructureNode> localVarResponse = await FastStatsSystemsGetFastStatsRootFolderAsyncWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the items in the root of the FastStats system folder structure 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, TableName, VariableType, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsFolderStructureNode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsFolderStructureNode>> FastStatsSystemsGetFastStatsRootFolderAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsRootFolder");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsRootFolder");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsRootFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsFolderStructureNode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsFolderStructureNode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsFolderStructureNode)));
        }

        /// <summary>
        /// Returns some top-level details for the specified FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to return details for</param>
        /// <returns>FastStatsSystemDetail</returns>
        public FastStatsSystemDetail FastStatsSystemsGetFastStatsSystem (string dataViewName, string systemName)
        {
             ApiResponse<FastStatsSystemDetail> localVarResponse = FastStatsSystemsGetFastStatsSystemWithHttpInfo(dataViewName, systemName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns some top-level details for the specified FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to return details for</param>
        /// <returns>ApiResponse of FastStatsSystemDetail</returns>
        public ApiResponse< FastStatsSystemDetail > FastStatsSystemsGetFastStatsSystemWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsSystem");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FastStatsSystemDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (FastStatsSystemDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FastStatsSystemDetail)));
        }

        /// <summary>
        /// Returns some top-level details for the specified FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to return details for</param>
        /// <returns>Task of FastStatsSystemDetail</returns>
        public async System.Threading.Tasks.Task<FastStatsSystemDetail> FastStatsSystemsGetFastStatsSystemAsync (string dataViewName, string systemName)
        {
             ApiResponse<FastStatsSystemDetail> localVarResponse = await FastStatsSystemsGetFastStatsSystemAsyncWithHttpInfo(dataViewName, systemName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns some top-level details for the specified FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to return details for</param>
        /// <returns>Task of ApiResponse (FastStatsSystemDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FastStatsSystemDetail>> FastStatsSystemsGetFastStatsSystemAsyncWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsSystem");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FastStatsSystemDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (FastStatsSystemDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FastStatsSystemDetail)));
        }

        /// <summary>
        /// Returns the list of FastStats systems available 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, FastStatsBuildDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, FastStatsBuildDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsFastStatsSystemSummary</returns>
        public PagedResultsFastStatsSystemSummary FastStatsSystemsGetFastStatsSystems (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsFastStatsSystemSummary> localVarResponse = FastStatsSystemsGetFastStatsSystemsWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of FastStats systems available 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, FastStatsBuildDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, FastStatsBuildDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsFastStatsSystemSummary</returns>
        public ApiResponse< PagedResultsFastStatsSystemSummary > FastStatsSystemsGetFastStatsSystemsWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsSystems");

            var localVarPath = "./{dataViewName}/FastStatsSystems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsFastStatsSystemSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsFastStatsSystemSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsFastStatsSystemSummary)));
        }

        /// <summary>
        /// Returns the list of FastStats systems available 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, FastStatsBuildDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, FastStatsBuildDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsFastStatsSystemSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsFastStatsSystemSummary> FastStatsSystemsGetFastStatsSystemsAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsFastStatsSystemSummary> localVarResponse = await FastStatsSystemsGetFastStatsSystemsAsyncWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of FastStats systems available 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, FastStatsBuildDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, FastStatsBuildDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsFastStatsSystemSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsFastStatsSystemSummary>> FastStatsSystemsGetFastStatsSystemsAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsSystems");

            var localVarPath = "./{dataViewName}/FastStatsSystems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsFastStatsSystemSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsFastStatsSystemSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsFastStatsSystemSummary)));
        }

        /// <summary>
        /// Gets the details for a particular table in the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="tableName">The name of the table to get the details for</param>
        /// <returns>Table</returns>
        public Table FastStatsSystemsGetFastStatsTable (string dataViewName, string systemName, string tableName)
        {
             ApiResponse<Table> localVarResponse = FastStatsSystemsGetFastStatsTableWithHttpInfo(dataViewName, systemName, tableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the details for a particular table in the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="tableName">The name of the table to get the details for</param>
        /// <returns>ApiResponse of Table</returns>
        public ApiResponse< Table > FastStatsSystemsGetFastStatsTableWithHttpInfo (string dataViewName, string systemName, string tableName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsTable");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsTable");
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsTable");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Tables/{tableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (tableName != null) localVarPathParams.Add("tableName", this.Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Table>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Table) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Table)));
        }

        /// <summary>
        /// Gets the details for a particular table in the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="tableName">The name of the table to get the details for</param>
        /// <returns>Task of Table</returns>
        public async System.Threading.Tasks.Task<Table> FastStatsSystemsGetFastStatsTableAsync (string dataViewName, string systemName, string tableName)
        {
             ApiResponse<Table> localVarResponse = await FastStatsSystemsGetFastStatsTableAsyncWithHttpInfo(dataViewName, systemName, tableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the details for a particular table in the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="tableName">The name of the table to get the details for</param>
        /// <returns>Task of ApiResponse (Table)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Table>> FastStatsSystemsGetFastStatsTableAsyncWithHttpInfo (string dataViewName, string systemName, string tableName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsTable");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsTable");
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsTable");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Tables/{tableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (tableName != null) localVarPathParams.Add("tableName", this.Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Table>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Table) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Table)));
        }

        /// <summary>
        /// Gets all the tables present in the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsTable</returns>
        public PagedResultsTable FastStatsSystemsGetFastStatsTables (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsTable> localVarResponse = FastStatsSystemsGetFastStatsTablesWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all the tables present in the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsTable</returns>
        public ApiResponse< PagedResultsTable > FastStatsSystemsGetFastStatsTablesWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsTables");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsTables");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsTable)));
        }

        /// <summary>
        /// Gets all the tables present in the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsTable</returns>
        public async System.Threading.Tasks.Task<PagedResultsTable> FastStatsSystemsGetFastStatsTablesAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsTable> localVarResponse = await FastStatsSystemsGetFastStatsTablesAsyncWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all the tables present in the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsTable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsTable>> FastStatsSystemsGetFastStatsTablesAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsTables");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsTables");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsTable)));
        }

        /// <summary>
        /// Gets the details for a particular variable in the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the details for</param>
        /// <returns>Variable</returns>
        public Variable FastStatsSystemsGetFastStatsVariable (string dataViewName, string systemName, string variableName)
        {
             ApiResponse<Variable> localVarResponse = FastStatsSystemsGetFastStatsVariableWithHttpInfo(dataViewName, systemName, variableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the details for a particular variable in the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the details for</param>
        /// <returns>ApiResponse of Variable</returns>
        public ApiResponse< Variable > FastStatsSystemsGetFastStatsVariableWithHttpInfo (string dataViewName, string systemName, string variableName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsVariable");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsVariable");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", this.Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Variable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Variable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Variable)));
        }

        /// <summary>
        /// Gets the details for a particular variable in the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the details for</param>
        /// <returns>Task of Variable</returns>
        public async System.Threading.Tasks.Task<Variable> FastStatsSystemsGetFastStatsVariableAsync (string dataViewName, string systemName, string variableName)
        {
             ApiResponse<Variable> localVarResponse = await FastStatsSystemsGetFastStatsVariableAsyncWithHttpInfo(dataViewName, systemName, variableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the details for a particular variable in the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the details for</param>
        /// <returns>Task of ApiResponse (Variable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Variable>> FastStatsSystemsGetFastStatsVariableAsyncWithHttpInfo (string dataViewName, string systemName, string variableName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsVariable");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsVariable");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", this.Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Variable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Variable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Variable)));
        }

        /// <summary>
        /// Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the var codes for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Code, Description, Count. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Code, Description, Count. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsVarCode</returns>
        public PagedResultsVarCode FastStatsSystemsGetFastStatsVariableCodes (string dataViewName, string systemName, string variableName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsVarCode> localVarResponse = FastStatsSystemsGetFastStatsVariableCodesWithHttpInfo(dataViewName, systemName, variableName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the var codes for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Code, Description, Count. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Code, Description, Count. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsVarCode</returns>
        public ApiResponse< PagedResultsVarCode > FastStatsSystemsGetFastStatsVariableCodesWithHttpInfo (string dataViewName, string systemName, string variableName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsVariableCodes");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsVariableCodes");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsVariableCodes");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Variables/{variableName}/Codes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", this.Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsVariableCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsVarCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsVarCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsVarCode)));
        }

        /// <summary>
        /// Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the var codes for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Code, Description, Count. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Code, Description, Count. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsVarCode</returns>
        public async System.Threading.Tasks.Task<PagedResultsVarCode> FastStatsSystemsGetFastStatsVariableCodesAsync (string dataViewName, string systemName, string variableName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsVarCode> localVarResponse = await FastStatsSystemsGetFastStatsVariableCodesAsyncWithHttpInfo(dataViewName, systemName, variableName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the var codes for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Code, Description, Count. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Code, Description, Count. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsVarCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsVarCode>> FastStatsSystemsGetFastStatsVariableCodesAsyncWithHttpInfo (string dataViewName, string systemName, string variableName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsVariableCodes");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsVariableCodes");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsVariableCodes");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Variables/{variableName}/Codes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", this.Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsVariableCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsVarCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsVarCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsVarCode)));
        }

        /// <summary>
        /// Gets all the variables present in the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsVariable</returns>
        public PagedResultsVariable FastStatsSystemsGetFastStatsVariables (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsVariable> localVarResponse = FastStatsSystemsGetFastStatsVariablesWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all the variables present in the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsVariable</returns>
        public ApiResponse< PagedResultsVariable > FastStatsSystemsGetFastStatsVariablesWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsVariables");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsVariables");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsVariable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsVariable)));
        }

        /// <summary>
        /// Gets all the variables present in the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsVariable</returns>
        public async System.Threading.Tasks.Task<PagedResultsVariable> FastStatsSystemsGetFastStatsVariablesAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsVariable> localVarResponse = await FastStatsSystemsGetFastStatsVariablesAsyncWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all the variables present in the FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName, VariableSubType, VarCodeOrder. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf(&#x27;tablename&#x27;), GetAncestorsAndSelf(&#x27;tablename&#x27;), GetAncestors(&#x27;tablename&#x27;). (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName, VariableSubType, VarCodeOrder. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsVariable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsVariable>> FastStatsSystemsGetFastStatsVariablesAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsVariables");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsGetFastStatsVariables");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsGetFastStatsVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsVariable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsVariable)));
        }

        /// <summary>
        /// Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the var codes for</param>
        /// <returns>PagedResultsVarCode</returns>
        public PagedResultsVarCode FastStatsSystemsRefreshFastStatsVariableCodesSync (string dataViewName, string systemName, string variableName)
        {
             ApiResponse<PagedResultsVarCode> localVarResponse = FastStatsSystemsRefreshFastStatsVariableCodesSyncWithHttpInfo(dataViewName, systemName, variableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the var codes for</param>
        /// <returns>ApiResponse of PagedResultsVarCode</returns>
        public ApiResponse< PagedResultsVarCode > FastStatsSystemsRefreshFastStatsVariableCodesSyncWithHttpInfo (string dataViewName, string systemName, string variableName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsRefreshFastStatsVariableCodesSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsRefreshFastStatsVariableCodesSync");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling FastStatsSystemsApi->FastStatsSystemsRefreshFastStatsVariableCodesSync");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Variables/{variableName}/Codes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", this.Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsRefreshFastStatsVariableCodesSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsVarCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsVarCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsVarCode)));
        }

        /// <summary>
        /// Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the var codes for</param>
        /// <returns>Task of PagedResultsVarCode</returns>
        public async System.Threading.Tasks.Task<PagedResultsVarCode> FastStatsSystemsRefreshFastStatsVariableCodesSyncAsync (string dataViewName, string systemName, string variableName)
        {
             ApiResponse<PagedResultsVarCode> localVarResponse = await FastStatsSystemsRefreshFastStatsVariableCodesSyncAsyncWithHttpInfo(dataViewName, systemName, variableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="variableName">The name of the variable to get the var codes for</param>
        /// <returns>Task of ApiResponse (PagedResultsVarCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsVarCode>> FastStatsSystemsRefreshFastStatsVariableCodesSyncAsyncWithHttpInfo (string dataViewName, string systemName, string variableName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsRefreshFastStatsVariableCodesSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsRefreshFastStatsVariableCodesSync");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling FastStatsSystemsApi->FastStatsSystemsRefreshFastStatsVariableCodesSync");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/Variables/{variableName}/Codes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", this.Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsRefreshFastStatsVariableCodesSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsVarCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsVarCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsVarCode)));
        }

        /// <summary>
        /// Requires OrbitAdmin: An endpoint to request the API refresh any information it holds on the given FastStats system.  This endpoint will wait until the refresh has completed before returning. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns></returns>
        public void FastStatsSystemsRefreshSystemInformationSync (string dataViewName, string systemName)
        {
             FastStatsSystemsRefreshSystemInformationSyncWithHttpInfo(dataViewName, systemName);
        }

        /// <summary>
        /// Requires OrbitAdmin: An endpoint to request the API refresh any information it holds on the given FastStats system.  This endpoint will wait until the refresh has completed before returning. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FastStatsSystemsRefreshSystemInformationSyncWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsRefreshSystemInformationSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsRefreshSystemInformationSync");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/RefreshInformationSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsRefreshSystemInformationSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Requires OrbitAdmin: An endpoint to request the API refresh any information it holds on the given FastStats system.  This endpoint will wait until the refresh has completed before returning. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FastStatsSystemsRefreshSystemInformationSyncAsync (string dataViewName, string systemName)
        {
             await FastStatsSystemsRefreshSystemInformationSyncAsyncWithHttpInfo(dataViewName, systemName);

        }

        /// <summary>
        /// Requires OrbitAdmin: An endpoint to request the API refresh any information it holds on the given FastStats system.  This endpoint will wait until the refresh has completed before returning. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FastStatsSystemsRefreshSystemInformationSyncAsyncWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsSystemsApi->FastStatsSystemsRefreshSystemInformationSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsSystemsApi->FastStatsSystemsRefreshSystemInformationSync");

            var localVarPath = "./{dataViewName}/FastStatsSystems/{systemName}/RefreshInformationSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsSystemsRefreshSystemInformationSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

    }
}
