/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ILicencesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Returns the list of FastStats systems available for listing licences
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsLicenceSystemSummary</returns>
        PagedResultsLicenceSystemSummary LicencesGetLicenceSystems (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Returns the list of FastStats systems available for listing licences
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsLicenceSystemSummary</returns>
        ApiResponse<PagedResultsLicenceSystemSummary> LicencesGetLicenceSystemsWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets the details for a particular user and licence on the given system, including  which licence bundles the user has access to
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get the details for</param>
        /// <param name="userId">The id of the user to get the bundle details for</param>
        /// <returns>LicensedUserDetail</returns>
        LicensedUserDetail LicencesGetLicensedUser (string dataViewName, string systemName, int? licenceId, int? userId);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets the details for a particular user and licence on the given system, including  which licence bundles the user has access to
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get the details for</param>
        /// <param name="userId">The id of the user to get the bundle details for</param>
        /// <returns>ApiResponse of LicensedUserDetail</returns>
        ApiResponse<LicensedUserDetail> LicencesGetLicensedUserWithHttpInfo (string dataViewName, string systemName, int? licenceId, int? userId);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets a list of users associated with the specified licence for the given system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get the users for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Id. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Id. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsLicensedUserSummary</returns>
        PagedResultsLicensedUserSummary LicencesGetLicensedUsers (string dataViewName, string systemName, int? licenceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets a list of users associated with the specified licence for the given system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get the users for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Id. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Id. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsLicensedUserSummary</returns>
        ApiResponse<PagedResultsLicensedUserSummary> LicencesGetLicensedUsersWithHttpInfo (string dataViewName, string systemName, int? licenceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets the details for a particular licence associated with the system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get details for</param>
        /// <returns>SystemLicenceDetail</returns>
        SystemLicenceDetail LicencesGetSystemLicence (string dataViewName, string systemName, int? licenceId);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets the details for a particular licence associated with the system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get details for</param>
        /// <returns>ApiResponse of SystemLicenceDetail</returns>
        ApiResponse<SystemLicenceDetail> LicencesGetSystemLicenceWithHttpInfo (string dataViewName, string systemName, int? licenceId);
        /// <summary>
        /// Requires OrbitAdmin: Returns all the licenses applied to the specified FastStats system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to return details for</param>
        /// <param name="includeUsage">If specified, whether to include the usage for the bundles.  Defaults to false (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsSystemLicenceSummary</returns>
        PagedResultsSystemLicenceSummary LicencesGetSystemLicences (string dataViewName, string systemName, bool? includeUsage = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Requires OrbitAdmin: Returns all the licenses applied to the specified FastStats system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to return details for</param>
        /// <param name="includeUsage">If specified, whether to include the usage for the bundles.  Defaults to false (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsSystemLicenceSummary</returns>
        ApiResponse<PagedResultsSystemLicenceSummary> LicencesGetSystemLicencesWithHttpInfo (string dataViewName, string systemName, bool? includeUsage = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Register a licence for the specified system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details of the licence to register (optional)</param>
        /// <returns></returns>
        void LicencesRegisterSystemLicence (string dataViewName, string systemName, RegisterSystemLicenceDetails body = null);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Register a licence for the specified system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details of the licence to register (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LicencesRegisterSystemLicenceWithHttpInfo (string dataViewName, string systemName, RegisterSystemLicenceDetails body = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Remove the user from the specified licence on the given system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to remove the user from</param>
        /// <param name="userId">The id of the user to remove from the specified licence</param>
        /// <returns></returns>
        void LicencesRemoveLicencedUser (string dataViewName, string systemName, int? licenceId, int? userId);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Remove the user from the specified licence on the given system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to remove the user from</param>
        /// <param name="userId">The id of the user to remove from the specified licence</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LicencesRemoveLicencedUserWithHttpInfo (string dataViewName, string systemName, int? licenceId, int? userId);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Removes the specified licence from the system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to remove</param>
        /// <returns></returns>
        void LicencesRemoveSystemLicence (string dataViewName, string systemName, int? licenceId);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Removes the specified licence from the system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LicencesRemoveSystemLicenceWithHttpInfo (string dataViewName, string systemName, int? licenceId);
        /// <summary>
        /// Requires OrbitAdmin: Updates the details for a particular user and licence on the given system, including  which licence bundles the user has access to
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to update the details for</param>
        /// <param name="userId">The id of the user to update the bundle details for</param>
        /// <param name="body">The details of which bundles of the specified licence to apply to the given user (optional)</param>
        /// <returns>LicensedUserDetail</returns>
        LicensedUserDetail LicencesUpsertLicencedUser (string dataViewName, string systemName, int? licenceId, int? userId, ApplySystemLicenceToUserDetails body = null);

        /// <summary>
        /// Requires OrbitAdmin: Updates the details for a particular user and licence on the given system, including  which licence bundles the user has access to
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to update the details for</param>
        /// <param name="userId">The id of the user to update the bundle details for</param>
        /// <param name="body">The details of which bundles of the specified licence to apply to the given user (optional)</param>
        /// <returns>ApiResponse of LicensedUserDetail</returns>
        ApiResponse<LicensedUserDetail> LicencesUpsertLicencedUserWithHttpInfo (string dataViewName, string systemName, int? licenceId, int? userId, ApplySystemLicenceToUserDetails body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Returns the list of FastStats systems available for listing licences
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsLicenceSystemSummary</returns>
        System.Threading.Tasks.Task<PagedResultsLicenceSystemSummary> LicencesGetLicenceSystemsAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Returns the list of FastStats systems available for listing licences
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsLicenceSystemSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsLicenceSystemSummary>> LicencesGetLicenceSystemsAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets the details for a particular user and licence on the given system, including  which licence bundles the user has access to
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get the details for</param>
        /// <param name="userId">The id of the user to get the bundle details for</param>
        /// <returns>Task of LicensedUserDetail</returns>
        System.Threading.Tasks.Task<LicensedUserDetail> LicencesGetLicensedUserAsync (string dataViewName, string systemName, int? licenceId, int? userId);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets the details for a particular user and licence on the given system, including  which licence bundles the user has access to
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get the details for</param>
        /// <param name="userId">The id of the user to get the bundle details for</param>
        /// <returns>Task of ApiResponse (LicensedUserDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<LicensedUserDetail>> LicencesGetLicensedUserAsyncWithHttpInfo (string dataViewName, string systemName, int? licenceId, int? userId);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets a list of users associated with the specified licence for the given system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get the users for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Id. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Id. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsLicensedUserSummary</returns>
        System.Threading.Tasks.Task<PagedResultsLicensedUserSummary> LicencesGetLicensedUsersAsync (string dataViewName, string systemName, int? licenceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets a list of users associated with the specified licence for the given system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get the users for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Id. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Id. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsLicensedUserSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsLicensedUserSummary>> LicencesGetLicensedUsersAsyncWithHttpInfo (string dataViewName, string systemName, int? licenceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets the details for a particular licence associated with the system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get details for</param>
        /// <returns>Task of SystemLicenceDetail</returns>
        System.Threading.Tasks.Task<SystemLicenceDetail> LicencesGetSystemLicenceAsync (string dataViewName, string systemName, int? licenceId);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets the details for a particular licence associated with the system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get details for</param>
        /// <returns>Task of ApiResponse (SystemLicenceDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemLicenceDetail>> LicencesGetSystemLicenceAsyncWithHttpInfo (string dataViewName, string systemName, int? licenceId);
        /// <summary>
        /// Requires OrbitAdmin: Returns all the licenses applied to the specified FastStats system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to return details for</param>
        /// <param name="includeUsage">If specified, whether to include the usage for the bundles.  Defaults to false (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsSystemLicenceSummary</returns>
        System.Threading.Tasks.Task<PagedResultsSystemLicenceSummary> LicencesGetSystemLicencesAsync (string dataViewName, string systemName, bool? includeUsage = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Requires OrbitAdmin: Returns all the licenses applied to the specified FastStats system
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to return details for</param>
        /// <param name="includeUsage">If specified, whether to include the usage for the bundles.  Defaults to false (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsSystemLicenceSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsSystemLicenceSummary>> LicencesGetSystemLicencesAsyncWithHttpInfo (string dataViewName, string systemName, bool? includeUsage = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Register a licence for the specified system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details of the licence to register (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LicencesRegisterSystemLicenceAsync (string dataViewName, string systemName, RegisterSystemLicenceDetails body = null);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Register a licence for the specified system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details of the licence to register (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LicencesRegisterSystemLicenceAsyncWithHttpInfo (string dataViewName, string systemName, RegisterSystemLicenceDetails body = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Remove the user from the specified licence on the given system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to remove the user from</param>
        /// <param name="userId">The id of the user to remove from the specified licence</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LicencesRemoveLicencedUserAsync (string dataViewName, string systemName, int? licenceId, int? userId);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Remove the user from the specified licence on the given system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to remove the user from</param>
        /// <param name="userId">The id of the user to remove from the specified licence</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LicencesRemoveLicencedUserAsyncWithHttpInfo (string dataViewName, string systemName, int? licenceId, int? userId);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Removes the specified licence from the system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to remove</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LicencesRemoveSystemLicenceAsync (string dataViewName, string systemName, int? licenceId);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Removes the specified licence from the system
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to remove</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LicencesRemoveSystemLicenceAsyncWithHttpInfo (string dataViewName, string systemName, int? licenceId);
        /// <summary>
        /// Requires OrbitAdmin: Updates the details for a particular user and licence on the given system, including  which licence bundles the user has access to
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to update the details for</param>
        /// <param name="userId">The id of the user to update the bundle details for</param>
        /// <param name="body">The details of which bundles of the specified licence to apply to the given user (optional)</param>
        /// <returns>Task of LicensedUserDetail</returns>
        System.Threading.Tasks.Task<LicensedUserDetail> LicencesUpsertLicencedUserAsync (string dataViewName, string systemName, int? licenceId, int? userId, ApplySystemLicenceToUserDetails body = null);

        /// <summary>
        /// Requires OrbitAdmin: Updates the details for a particular user and licence on the given system, including  which licence bundles the user has access to
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to update the details for</param>
        /// <param name="userId">The id of the user to update the bundle details for</param>
        /// <param name="body">The details of which bundles of the specified licence to apply to the given user (optional)</param>
        /// <returns>Task of ApiResponse (LicensedUserDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<LicensedUserDetail>> LicencesUpsertLicencedUserAsyncWithHttpInfo (string dataViewName, string systemName, int? licenceId, int? userId, ApplySystemLicenceToUserDetails body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class LicencesApi : ILicencesApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LicencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LicencesApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LicencesApi"/> class
        /// </summary>
        /// <returns></returns>
        public LicencesApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LicencesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LicencesApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Returns the list of FastStats systems available for listing licences UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsLicenceSystemSummary</returns>
        public PagedResultsLicenceSystemSummary LicencesGetLicenceSystems (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsLicenceSystemSummary> localVarResponse = LicencesGetLicenceSystemsWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Returns the list of FastStats systems available for listing licences UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsLicenceSystemSummary</returns>
        public ApiResponse< PagedResultsLicenceSystemSummary > LicencesGetLicenceSystemsWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesGetLicenceSystems");

            var localVarPath = "./{dataViewName}/Licences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesGetLicenceSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsLicenceSystemSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsLicenceSystemSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsLicenceSystemSummary)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Returns the list of FastStats systems available for listing licences UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsLicenceSystemSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsLicenceSystemSummary> LicencesGetLicenceSystemsAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsLicenceSystemSummary> localVarResponse = await LicencesGetLicenceSystemsAsyncWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Returns the list of FastStats systems available for listing licences UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsLicenceSystemSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsLicenceSystemSummary>> LicencesGetLicenceSystemsAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesGetLicenceSystems");

            var localVarPath = "./{dataViewName}/Licences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesGetLicenceSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsLicenceSystemSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsLicenceSystemSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsLicenceSystemSummary)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets the details for a particular user and licence on the given system, including  which licence bundles the user has access to UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get the details for</param>
        /// <param name="userId">The id of the user to get the bundle details for</param>
        /// <returns>LicensedUserDetail</returns>
        public LicensedUserDetail LicencesGetLicensedUser (string dataViewName, string systemName, int? licenceId, int? userId)
        {
             ApiResponse<LicensedUserDetail> localVarResponse = LicencesGetLicensedUserWithHttpInfo(dataViewName, systemName, licenceId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets the details for a particular user and licence on the given system, including  which licence bundles the user has access to UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get the details for</param>
        /// <param name="userId">The id of the user to get the bundle details for</param>
        /// <returns>ApiResponse of LicensedUserDetail</returns>
        public ApiResponse< LicensedUserDetail > LicencesGetLicensedUserWithHttpInfo (string dataViewName, string systemName, int? licenceId, int? userId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesGetLicensedUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling LicencesApi->LicencesGetLicensedUser");
            // verify the required parameter 'licenceId' is set
            if (licenceId == null)
                throw new ApiException(400, "Missing required parameter 'licenceId' when calling LicencesApi->LicencesGetLicensedUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling LicencesApi->LicencesGetLicensedUser");

            var localVarPath = "./{dataViewName}/Licences/{systemName}/{licenceId}/Users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (licenceId != null) localVarPathParams.Add("licenceId", this.Configuration.ApiClient.ParameterToString(licenceId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesGetLicensedUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicensedUserDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (LicensedUserDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicensedUserDetail)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets the details for a particular user and licence on the given system, including  which licence bundles the user has access to UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get the details for</param>
        /// <param name="userId">The id of the user to get the bundle details for</param>
        /// <returns>Task of LicensedUserDetail</returns>
        public async System.Threading.Tasks.Task<LicensedUserDetail> LicencesGetLicensedUserAsync (string dataViewName, string systemName, int? licenceId, int? userId)
        {
             ApiResponse<LicensedUserDetail> localVarResponse = await LicencesGetLicensedUserAsyncWithHttpInfo(dataViewName, systemName, licenceId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets the details for a particular user and licence on the given system, including  which licence bundles the user has access to UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get the details for</param>
        /// <param name="userId">The id of the user to get the bundle details for</param>
        /// <returns>Task of ApiResponse (LicensedUserDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LicensedUserDetail>> LicencesGetLicensedUserAsyncWithHttpInfo (string dataViewName, string systemName, int? licenceId, int? userId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesGetLicensedUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling LicencesApi->LicencesGetLicensedUser");
            // verify the required parameter 'licenceId' is set
            if (licenceId == null)
                throw new ApiException(400, "Missing required parameter 'licenceId' when calling LicencesApi->LicencesGetLicensedUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling LicencesApi->LicencesGetLicensedUser");

            var localVarPath = "./{dataViewName}/Licences/{systemName}/{licenceId}/Users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (licenceId != null) localVarPathParams.Add("licenceId", this.Configuration.ApiClient.ParameterToString(licenceId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesGetLicensedUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicensedUserDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (LicensedUserDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicensedUserDetail)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets a list of users associated with the specified licence for the given system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get the users for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Id. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Id. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsLicensedUserSummary</returns>
        public PagedResultsLicensedUserSummary LicencesGetLicensedUsers (string dataViewName, string systemName, int? licenceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsLicensedUserSummary> localVarResponse = LicencesGetLicensedUsersWithHttpInfo(dataViewName, systemName, licenceId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets a list of users associated with the specified licence for the given system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get the users for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Id. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Id. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsLicensedUserSummary</returns>
        public ApiResponse< PagedResultsLicensedUserSummary > LicencesGetLicensedUsersWithHttpInfo (string dataViewName, string systemName, int? licenceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesGetLicensedUsers");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling LicencesApi->LicencesGetLicensedUsers");
            // verify the required parameter 'licenceId' is set
            if (licenceId == null)
                throw new ApiException(400, "Missing required parameter 'licenceId' when calling LicencesApi->LicencesGetLicensedUsers");

            var localVarPath = "./{dataViewName}/Licences/{systemName}/{licenceId}/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (licenceId != null) localVarPathParams.Add("licenceId", this.Configuration.ApiClient.ParameterToString(licenceId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesGetLicensedUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsLicensedUserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsLicensedUserSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsLicensedUserSummary)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets a list of users associated with the specified licence for the given system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get the users for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Id. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Id. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsLicensedUserSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsLicensedUserSummary> LicencesGetLicensedUsersAsync (string dataViewName, string systemName, int? licenceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsLicensedUserSummary> localVarResponse = await LicencesGetLicensedUsersAsyncWithHttpInfo(dataViewName, systemName, licenceId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets a list of users associated with the specified licence for the given system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get the users for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Id. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Id. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsLicensedUserSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsLicensedUserSummary>> LicencesGetLicensedUsersAsyncWithHttpInfo (string dataViewName, string systemName, int? licenceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesGetLicensedUsers");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling LicencesApi->LicencesGetLicensedUsers");
            // verify the required parameter 'licenceId' is set
            if (licenceId == null)
                throw new ApiException(400, "Missing required parameter 'licenceId' when calling LicencesApi->LicencesGetLicensedUsers");

            var localVarPath = "./{dataViewName}/Licences/{systemName}/{licenceId}/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (licenceId != null) localVarPathParams.Add("licenceId", this.Configuration.ApiClient.ParameterToString(licenceId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesGetLicensedUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsLicensedUserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsLicensedUserSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsLicensedUserSummary)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets the details for a particular licence associated with the system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get details for</param>
        /// <returns>SystemLicenceDetail</returns>
        public SystemLicenceDetail LicencesGetSystemLicence (string dataViewName, string systemName, int? licenceId)
        {
             ApiResponse<SystemLicenceDetail> localVarResponse = LicencesGetSystemLicenceWithHttpInfo(dataViewName, systemName, licenceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets the details for a particular licence associated with the system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get details for</param>
        /// <returns>ApiResponse of SystemLicenceDetail</returns>
        public ApiResponse< SystemLicenceDetail > LicencesGetSystemLicenceWithHttpInfo (string dataViewName, string systemName, int? licenceId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesGetSystemLicence");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling LicencesApi->LicencesGetSystemLicence");
            // verify the required parameter 'licenceId' is set
            if (licenceId == null)
                throw new ApiException(400, "Missing required parameter 'licenceId' when calling LicencesApi->LicencesGetSystemLicence");

            var localVarPath = "./{dataViewName}/Licences/{systemName}/{licenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (licenceId != null) localVarPathParams.Add("licenceId", this.Configuration.ApiClient.ParameterToString(licenceId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesGetSystemLicence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemLicenceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SystemLicenceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemLicenceDetail)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets the details for a particular licence associated with the system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get details for</param>
        /// <returns>Task of SystemLicenceDetail</returns>
        public async System.Threading.Tasks.Task<SystemLicenceDetail> LicencesGetSystemLicenceAsync (string dataViewName, string systemName, int? licenceId)
        {
             ApiResponse<SystemLicenceDetail> localVarResponse = await LicencesGetSystemLicenceAsyncWithHttpInfo(dataViewName, systemName, licenceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Gets the details for a particular licence associated with the system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to get details for</param>
        /// <returns>Task of ApiResponse (SystemLicenceDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SystemLicenceDetail>> LicencesGetSystemLicenceAsyncWithHttpInfo (string dataViewName, string systemName, int? licenceId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesGetSystemLicence");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling LicencesApi->LicencesGetSystemLicence");
            // verify the required parameter 'licenceId' is set
            if (licenceId == null)
                throw new ApiException(400, "Missing required parameter 'licenceId' when calling LicencesApi->LicencesGetSystemLicence");

            var localVarPath = "./{dataViewName}/Licences/{systemName}/{licenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (licenceId != null) localVarPathParams.Add("licenceId", this.Configuration.ApiClient.ParameterToString(licenceId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesGetSystemLicence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemLicenceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SystemLicenceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemLicenceDetail)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns all the licenses applied to the specified FastStats system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to return details for</param>
        /// <param name="includeUsage">If specified, whether to include the usage for the bundles.  Defaults to false (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsSystemLicenceSummary</returns>
        public PagedResultsSystemLicenceSummary LicencesGetSystemLicences (string dataViewName, string systemName, bool? includeUsage = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsSystemLicenceSummary> localVarResponse = LicencesGetSystemLicencesWithHttpInfo(dataViewName, systemName, includeUsage, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns all the licenses applied to the specified FastStats system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to return details for</param>
        /// <param name="includeUsage">If specified, whether to include the usage for the bundles.  Defaults to false (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsSystemLicenceSummary</returns>
        public ApiResponse< PagedResultsSystemLicenceSummary > LicencesGetSystemLicencesWithHttpInfo (string dataViewName, string systemName, bool? includeUsage = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesGetSystemLicences");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling LicencesApi->LicencesGetSystemLicences");

            var localVarPath = "./{dataViewName}/Licences/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (includeUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeUsage", includeUsage)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesGetSystemLicences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsSystemLicenceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsSystemLicenceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsSystemLicenceSummary)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns all the licenses applied to the specified FastStats system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to return details for</param>
        /// <param name="includeUsage">If specified, whether to include the usage for the bundles.  Defaults to false (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsSystemLicenceSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsSystemLicenceSummary> LicencesGetSystemLicencesAsync (string dataViewName, string systemName, bool? includeUsage = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsSystemLicenceSummary> localVarResponse = await LicencesGetSystemLicencesAsyncWithHttpInfo(dataViewName, systemName, includeUsage, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Returns all the licenses applied to the specified FastStats system This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to return details for</param>
        /// <param name="includeUsage">If specified, whether to include the usage for the bundles.  Defaults to false (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsSystemLicenceSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsSystemLicenceSummary>> LicencesGetSystemLicencesAsyncWithHttpInfo (string dataViewName, string systemName, bool? includeUsage = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesGetSystemLicences");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling LicencesApi->LicencesGetSystemLicences");

            var localVarPath = "./{dataViewName}/Licences/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (includeUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeUsage", includeUsage)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesGetSystemLicences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsSystemLicenceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsSystemLicenceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsSystemLicenceSummary)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Register a licence for the specified system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details of the licence to register (optional)</param>
        /// <returns></returns>
        public void LicencesRegisterSystemLicence (string dataViewName, string systemName, RegisterSystemLicenceDetails body = null)
        {
             LicencesRegisterSystemLicenceWithHttpInfo(dataViewName, systemName, body);
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Register a licence for the specified system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details of the licence to register (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LicencesRegisterSystemLicenceWithHttpInfo (string dataViewName, string systemName, RegisterSystemLicenceDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesRegisterSystemLicence");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling LicencesApi->LicencesRegisterSystemLicence");

            var localVarPath = "./{dataViewName}/Licences/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesRegisterSystemLicence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Register a licence for the specified system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details of the licence to register (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LicencesRegisterSystemLicenceAsync (string dataViewName, string systemName, RegisterSystemLicenceDetails body = null)
        {
             await LicencesRegisterSystemLicenceAsyncWithHttpInfo(dataViewName, systemName, body);

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Register a licence for the specified system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details of the licence to register (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LicencesRegisterSystemLicenceAsyncWithHttpInfo (string dataViewName, string systemName, RegisterSystemLicenceDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesRegisterSystemLicence");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling LicencesApi->LicencesRegisterSystemLicence");

            var localVarPath = "./{dataViewName}/Licences/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesRegisterSystemLicence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Remove the user from the specified licence on the given system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to remove the user from</param>
        /// <param name="userId">The id of the user to remove from the specified licence</param>
        /// <returns></returns>
        public void LicencesRemoveLicencedUser (string dataViewName, string systemName, int? licenceId, int? userId)
        {
             LicencesRemoveLicencedUserWithHttpInfo(dataViewName, systemName, licenceId, userId);
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Remove the user from the specified licence on the given system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to remove the user from</param>
        /// <param name="userId">The id of the user to remove from the specified licence</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LicencesRemoveLicencedUserWithHttpInfo (string dataViewName, string systemName, int? licenceId, int? userId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesRemoveLicencedUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling LicencesApi->LicencesRemoveLicencedUser");
            // verify the required parameter 'licenceId' is set
            if (licenceId == null)
                throw new ApiException(400, "Missing required parameter 'licenceId' when calling LicencesApi->LicencesRemoveLicencedUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling LicencesApi->LicencesRemoveLicencedUser");

            var localVarPath = "./{dataViewName}/Licences/{systemName}/{licenceId}/Users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (licenceId != null) localVarPathParams.Add("licenceId", this.Configuration.ApiClient.ParameterToString(licenceId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesRemoveLicencedUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Remove the user from the specified licence on the given system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to remove the user from</param>
        /// <param name="userId">The id of the user to remove from the specified licence</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LicencesRemoveLicencedUserAsync (string dataViewName, string systemName, int? licenceId, int? userId)
        {
             await LicencesRemoveLicencedUserAsyncWithHttpInfo(dataViewName, systemName, licenceId, userId);

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Remove the user from the specified licence on the given system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to remove the user from</param>
        /// <param name="userId">The id of the user to remove from the specified licence</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LicencesRemoveLicencedUserAsyncWithHttpInfo (string dataViewName, string systemName, int? licenceId, int? userId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesRemoveLicencedUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling LicencesApi->LicencesRemoveLicencedUser");
            // verify the required parameter 'licenceId' is set
            if (licenceId == null)
                throw new ApiException(400, "Missing required parameter 'licenceId' when calling LicencesApi->LicencesRemoveLicencedUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling LicencesApi->LicencesRemoveLicencedUser");

            var localVarPath = "./{dataViewName}/Licences/{systemName}/{licenceId}/Users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (licenceId != null) localVarPathParams.Add("licenceId", this.Configuration.ApiClient.ParameterToString(licenceId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesRemoveLicencedUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Removes the specified licence from the system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to remove</param>
        /// <returns></returns>
        public void LicencesRemoveSystemLicence (string dataViewName, string systemName, int? licenceId)
        {
             LicencesRemoveSystemLicenceWithHttpInfo(dataViewName, systemName, licenceId);
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Removes the specified licence from the system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LicencesRemoveSystemLicenceWithHttpInfo (string dataViewName, string systemName, int? licenceId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesRemoveSystemLicence");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling LicencesApi->LicencesRemoveSystemLicence");
            // verify the required parameter 'licenceId' is set
            if (licenceId == null)
                throw new ApiException(400, "Missing required parameter 'licenceId' when calling LicencesApi->LicencesRemoveSystemLicence");

            var localVarPath = "./{dataViewName}/Licences/{systemName}/{licenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (licenceId != null) localVarPathParams.Add("licenceId", this.Configuration.ApiClient.ParameterToString(licenceId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesRemoveSystemLicence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Removes the specified licence from the system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to remove</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LicencesRemoveSystemLicenceAsync (string dataViewName, string systemName, int? licenceId)
        {
             await LicencesRemoveSystemLicenceAsyncWithHttpInfo(dataViewName, systemName, licenceId);

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Removes the specified licence from the system UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to remove</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LicencesRemoveSystemLicenceAsyncWithHttpInfo (string dataViewName, string systemName, int? licenceId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesRemoveSystemLicence");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling LicencesApi->LicencesRemoveSystemLicence");
            // verify the required parameter 'licenceId' is set
            if (licenceId == null)
                throw new ApiException(400, "Missing required parameter 'licenceId' when calling LicencesApi->LicencesRemoveSystemLicence");

            var localVarPath = "./{dataViewName}/Licences/{systemName}/{licenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (licenceId != null) localVarPathParams.Add("licenceId", this.Configuration.ApiClient.ParameterToString(licenceId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesRemoveSystemLicence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Requires OrbitAdmin: Updates the details for a particular user and licence on the given system, including  which licence bundles the user has access to This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to update the details for</param>
        /// <param name="userId">The id of the user to update the bundle details for</param>
        /// <param name="body">The details of which bundles of the specified licence to apply to the given user (optional)</param>
        /// <returns>LicensedUserDetail</returns>
        public LicensedUserDetail LicencesUpsertLicencedUser (string dataViewName, string systemName, int? licenceId, int? userId, ApplySystemLicenceToUserDetails body = null)
        {
             ApiResponse<LicensedUserDetail> localVarResponse = LicencesUpsertLicencedUserWithHttpInfo(dataViewName, systemName, licenceId, userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Updates the details for a particular user and licence on the given system, including  which licence bundles the user has access to This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to update the details for</param>
        /// <param name="userId">The id of the user to update the bundle details for</param>
        /// <param name="body">The details of which bundles of the specified licence to apply to the given user (optional)</param>
        /// <returns>ApiResponse of LicensedUserDetail</returns>
        public ApiResponse< LicensedUserDetail > LicencesUpsertLicencedUserWithHttpInfo (string dataViewName, string systemName, int? licenceId, int? userId, ApplySystemLicenceToUserDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesUpsertLicencedUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling LicencesApi->LicencesUpsertLicencedUser");
            // verify the required parameter 'licenceId' is set
            if (licenceId == null)
                throw new ApiException(400, "Missing required parameter 'licenceId' when calling LicencesApi->LicencesUpsertLicencedUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling LicencesApi->LicencesUpsertLicencedUser");

            var localVarPath = "./{dataViewName}/Licences/{systemName}/{licenceId}/Users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (licenceId != null) localVarPathParams.Add("licenceId", this.Configuration.ApiClient.ParameterToString(licenceId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesUpsertLicencedUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicensedUserDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (LicensedUserDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicensedUserDetail)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Updates the details for a particular user and licence on the given system, including  which licence bundles the user has access to This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to update the details for</param>
        /// <param name="userId">The id of the user to update the bundle details for</param>
        /// <param name="body">The details of which bundles of the specified licence to apply to the given user (optional)</param>
        /// <returns>Task of LicensedUserDetail</returns>
        public async System.Threading.Tasks.Task<LicensedUserDetail> LicencesUpsertLicencedUserAsync (string dataViewName, string systemName, int? licenceId, int? userId, ApplySystemLicenceToUserDetails body = null)
        {
             ApiResponse<LicensedUserDetail> localVarResponse = await LicencesUpsertLicencedUserAsyncWithHttpInfo(dataViewName, systemName, licenceId, userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Updates the details for a particular user and licence on the given system, including  which licence bundles the user has access to This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="licenceId">The id of the licence to update the details for</param>
        /// <param name="userId">The id of the user to update the bundle details for</param>
        /// <param name="body">The details of which bundles of the specified licence to apply to the given user (optional)</param>
        /// <returns>Task of ApiResponse (LicensedUserDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LicensedUserDetail>> LicencesUpsertLicencedUserAsyncWithHttpInfo (string dataViewName, string systemName, int? licenceId, int? userId, ApplySystemLicenceToUserDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling LicencesApi->LicencesUpsertLicencedUser");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling LicencesApi->LicencesUpsertLicencedUser");
            // verify the required parameter 'licenceId' is set
            if (licenceId == null)
                throw new ApiException(400, "Missing required parameter 'licenceId' when calling LicencesApi->LicencesUpsertLicencedUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling LicencesApi->LicencesUpsertLicencedUser");

            var localVarPath = "./{dataViewName}/Licences/{systemName}/{licenceId}/Users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (licenceId != null) localVarPathParams.Add("licenceId", this.Configuration.ApiClient.ParameterToString(licenceId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LicencesUpsertLicencedUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicensedUserDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (LicensedUserDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicensedUserDetail)));
        }

    }
}
