/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IThemesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Requires OrbitAdmin: Creates a new theme from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the theme to create.  If you want to update a specific theme then POST to the /Theme/{themeId} URL (optional)</param>
        /// <returns>Theme</returns>
        Theme ThemesCreateTheme (string dataViewName, CreateUpdateTheme body = null);

        /// <summary>
        /// Requires OrbitAdmin: Creates a new theme from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the theme to create.  If you want to update a specific theme then POST to the /Theme/{themeId} URL (optional)</param>
        /// <returns>ApiResponse of Theme</returns>
        ApiResponse<Theme> ThemesCreateThemeWithHttpInfo (string dataViewName, CreateUpdateTheme body = null);
        /// <summary>
        /// Requires OrbitAdmin: Deletes the specified theme
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The id of the theme to delete</param>
        /// <returns></returns>
        void ThemesDeleteTheme (string dataViewName, int? themeId);

        /// <summary>
        /// Requires OrbitAdmin: Deletes the specified theme
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The id of the theme to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ThemesDeleteThemeWithHttpInfo (string dataViewName, int? themeId);
        /// <summary>
        /// Returns a theme for this dataview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The themeId of the Theme to retrieve</param>
        /// <returns>Theme</returns>
        Theme ThemesGetTheme (string dataViewName, int? themeId);

        /// <summary>
        /// Returns a theme for this dataview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The themeId of the Theme to retrieve</param>
        /// <returns>ApiResponse of Theme</returns>
        ApiResponse<Theme> ThemesGetThemeWithHttpInfo (string dataViewName, int? themeId);
        /// <summary>
        /// Returns a list of all themes for this dataview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>List&lt;Theme&gt;</returns>
        List<Theme> ThemesGetThemes (string dataViewName);

        /// <summary>
        /// Returns a list of all themes for this dataview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of List&lt;Theme&gt;</returns>
        ApiResponse<List<Theme>> ThemesGetThemesWithHttpInfo (string dataViewName);
        /// <summary>
        /// Requires OrbitAdmin: Returns a list of all themes with associated usage information
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ThemeUsage</returns>
        ThemeUsage ThemesGetUsage (string dataViewName);

        /// <summary>
        /// Requires OrbitAdmin: Returns a list of all themes with associated usage information
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of ThemeUsage</returns>
        ApiResponse<ThemeUsage> ThemesGetUsageWithHttpInfo (string dataViewName);
        /// <summary>
        /// Requires OrbitAdmin: Updates the details of a particular theme.  If you don&#x27;t have an id for the  theme then POST to the /Themes URL to create a new theme.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The id of the theme to add/update</param>
        /// <param name="body">The details for the theme to update (optional)</param>
        /// <returns>Theme</returns>
        Theme ThemesUpdateTheme (string dataViewName, int? themeId, CreateUpdateTheme body = null);

        /// <summary>
        /// Requires OrbitAdmin: Updates the details of a particular theme.  If you don&#x27;t have an id for the  theme then POST to the /Themes URL to create a new theme.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The id of the theme to add/update</param>
        /// <param name="body">The details for the theme to update (optional)</param>
        /// <returns>ApiResponse of Theme</returns>
        ApiResponse<Theme> ThemesUpdateThemeWithHttpInfo (string dataViewName, int? themeId, CreateUpdateTheme body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Requires OrbitAdmin: Creates a new theme from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the theme to create.  If you want to update a specific theme then POST to the /Theme/{themeId} URL (optional)</param>
        /// <returns>Task of Theme</returns>
        System.Threading.Tasks.Task<Theme> ThemesCreateThemeAsync (string dataViewName, CreateUpdateTheme body = null);

        /// <summary>
        /// Requires OrbitAdmin: Creates a new theme from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the theme to create.  If you want to update a specific theme then POST to the /Theme/{themeId} URL (optional)</param>
        /// <returns>Task of ApiResponse (Theme)</returns>
        System.Threading.Tasks.Task<ApiResponse<Theme>> ThemesCreateThemeAsyncWithHttpInfo (string dataViewName, CreateUpdateTheme body = null);
        /// <summary>
        /// Requires OrbitAdmin: Deletes the specified theme
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The id of the theme to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ThemesDeleteThemeAsync (string dataViewName, int? themeId);

        /// <summary>
        /// Requires OrbitAdmin: Deletes the specified theme
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The id of the theme to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ThemesDeleteThemeAsyncWithHttpInfo (string dataViewName, int? themeId);
        /// <summary>
        /// Returns a theme for this dataview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The themeId of the Theme to retrieve</param>
        /// <returns>Task of Theme</returns>
        System.Threading.Tasks.Task<Theme> ThemesGetThemeAsync (string dataViewName, int? themeId);

        /// <summary>
        /// Returns a theme for this dataview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The themeId of the Theme to retrieve</param>
        /// <returns>Task of ApiResponse (Theme)</returns>
        System.Threading.Tasks.Task<ApiResponse<Theme>> ThemesGetThemeAsyncWithHttpInfo (string dataViewName, int? themeId);
        /// <summary>
        /// Returns a list of all themes for this dataview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of List&lt;Theme&gt;</returns>
        System.Threading.Tasks.Task<List<Theme>> ThemesGetThemesAsync (string dataViewName);

        /// <summary>
        /// Returns a list of all themes for this dataview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (List&lt;Theme&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Theme>>> ThemesGetThemesAsyncWithHttpInfo (string dataViewName);
        /// <summary>
        /// Requires OrbitAdmin: Returns a list of all themes with associated usage information
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ThemeUsage</returns>
        System.Threading.Tasks.Task<ThemeUsage> ThemesGetUsageAsync (string dataViewName);

        /// <summary>
        /// Requires OrbitAdmin: Returns a list of all themes with associated usage information
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (ThemeUsage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThemeUsage>> ThemesGetUsageAsyncWithHttpInfo (string dataViewName);
        /// <summary>
        /// Requires OrbitAdmin: Updates the details of a particular theme.  If you don&#x27;t have an id for the  theme then POST to the /Themes URL to create a new theme.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The id of the theme to add/update</param>
        /// <param name="body">The details for the theme to update (optional)</param>
        /// <returns>Task of Theme</returns>
        System.Threading.Tasks.Task<Theme> ThemesUpdateThemeAsync (string dataViewName, int? themeId, CreateUpdateTheme body = null);

        /// <summary>
        /// Requires OrbitAdmin: Updates the details of a particular theme.  If you don&#x27;t have an id for the  theme then POST to the /Themes URL to create a new theme.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The id of the theme to add/update</param>
        /// <param name="body">The details for the theme to update (optional)</param>
        /// <returns>Task of ApiResponse (Theme)</returns>
        System.Threading.Tasks.Task<ApiResponse<Theme>> ThemesUpdateThemeAsyncWithHttpInfo (string dataViewName, int? themeId, CreateUpdateTheme body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ThemesApi : IThemesApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ThemesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ThemesApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ThemesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ThemesApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ThemesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ThemesApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Requires OrbitAdmin: Creates a new theme from the given details for the logged in user. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the theme to create.  If you want to update a specific theme then POST to the /Theme/{themeId} URL (optional)</param>
        /// <returns>Theme</returns>
        public Theme ThemesCreateTheme (string dataViewName, CreateUpdateTheme body = null)
        {
             ApiResponse<Theme> localVarResponse = ThemesCreateThemeWithHttpInfo(dataViewName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Creates a new theme from the given details for the logged in user. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the theme to create.  If you want to update a specific theme then POST to the /Theme/{themeId} URL (optional)</param>
        /// <returns>ApiResponse of Theme</returns>
        public ApiResponse< Theme > ThemesCreateThemeWithHttpInfo (string dataViewName, CreateUpdateTheme body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ThemesApi->ThemesCreateTheme");

            var localVarPath = "./{dataViewName}/Themes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ThemesCreateTheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Theme>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Theme) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Theme)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Creates a new theme from the given details for the logged in user. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the theme to create.  If you want to update a specific theme then POST to the /Theme/{themeId} URL (optional)</param>
        /// <returns>Task of Theme</returns>
        public async System.Threading.Tasks.Task<Theme> ThemesCreateThemeAsync (string dataViewName, CreateUpdateTheme body = null)
        {
             ApiResponse<Theme> localVarResponse = await ThemesCreateThemeAsyncWithHttpInfo(dataViewName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Creates a new theme from the given details for the logged in user. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the theme to create.  If you want to update a specific theme then POST to the /Theme/{themeId} URL (optional)</param>
        /// <returns>Task of ApiResponse (Theme)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Theme>> ThemesCreateThemeAsyncWithHttpInfo (string dataViewName, CreateUpdateTheme body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ThemesApi->ThemesCreateTheme");

            var localVarPath = "./{dataViewName}/Themes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ThemesCreateTheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Theme>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Theme) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Theme)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Deletes the specified theme This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The id of the theme to delete</param>
        /// <returns></returns>
        public void ThemesDeleteTheme (string dataViewName, int? themeId)
        {
             ThemesDeleteThemeWithHttpInfo(dataViewName, themeId);
        }

        /// <summary>
        /// Requires OrbitAdmin: Deletes the specified theme This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The id of the theme to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ThemesDeleteThemeWithHttpInfo (string dataViewName, int? themeId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ThemesApi->ThemesDeleteTheme");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling ThemesApi->ThemesDeleteTheme");

            var localVarPath = "./{dataViewName}/Themes/{themeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ThemesDeleteTheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Requires OrbitAdmin: Deletes the specified theme This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The id of the theme to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ThemesDeleteThemeAsync (string dataViewName, int? themeId)
        {
             await ThemesDeleteThemeAsyncWithHttpInfo(dataViewName, themeId);

        }

        /// <summary>
        /// Requires OrbitAdmin: Deletes the specified theme This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The id of the theme to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ThemesDeleteThemeAsyncWithHttpInfo (string dataViewName, int? themeId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ThemesApi->ThemesDeleteTheme");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling ThemesApi->ThemesDeleteTheme");

            var localVarPath = "./{dataViewName}/Themes/{themeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ThemesDeleteTheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns a theme for this dataview 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The themeId of the Theme to retrieve</param>
        /// <returns>Theme</returns>
        public Theme ThemesGetTheme (string dataViewName, int? themeId)
        {
             ApiResponse<Theme> localVarResponse = ThemesGetThemeWithHttpInfo(dataViewName, themeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a theme for this dataview 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The themeId of the Theme to retrieve</param>
        /// <returns>ApiResponse of Theme</returns>
        public ApiResponse< Theme > ThemesGetThemeWithHttpInfo (string dataViewName, int? themeId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ThemesApi->ThemesGetTheme");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling ThemesApi->ThemesGetTheme");

            var localVarPath = "./{dataViewName}/Themes/{themeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ThemesGetTheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Theme>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Theme) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Theme)));
        }

        /// <summary>
        /// Returns a theme for this dataview 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The themeId of the Theme to retrieve</param>
        /// <returns>Task of Theme</returns>
        public async System.Threading.Tasks.Task<Theme> ThemesGetThemeAsync (string dataViewName, int? themeId)
        {
             ApiResponse<Theme> localVarResponse = await ThemesGetThemeAsyncWithHttpInfo(dataViewName, themeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a theme for this dataview 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The themeId of the Theme to retrieve</param>
        /// <returns>Task of ApiResponse (Theme)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Theme>> ThemesGetThemeAsyncWithHttpInfo (string dataViewName, int? themeId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ThemesApi->ThemesGetTheme");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling ThemesApi->ThemesGetTheme");

            var localVarPath = "./{dataViewName}/Themes/{themeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ThemesGetTheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Theme>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Theme) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Theme)));
        }

        /// <summary>
        /// Returns a list of all themes for this dataview 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>List&lt;Theme&gt;</returns>
        public List<Theme> ThemesGetThemes (string dataViewName)
        {
             ApiResponse<List<Theme>> localVarResponse = ThemesGetThemesWithHttpInfo(dataViewName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of all themes for this dataview 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of List&lt;Theme&gt;</returns>
        public ApiResponse< List<Theme> > ThemesGetThemesWithHttpInfo (string dataViewName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ThemesApi->ThemesGetThemes");

            var localVarPath = "./{dataViewName}/Themes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ThemesGetThemes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Theme>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Theme>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Theme>)));
        }

        /// <summary>
        /// Returns a list of all themes for this dataview 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of List&lt;Theme&gt;</returns>
        public async System.Threading.Tasks.Task<List<Theme>> ThemesGetThemesAsync (string dataViewName)
        {
             ApiResponse<List<Theme>> localVarResponse = await ThemesGetThemesAsyncWithHttpInfo(dataViewName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of all themes for this dataview 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (List&lt;Theme&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Theme>>> ThemesGetThemesAsyncWithHttpInfo (string dataViewName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ThemesApi->ThemesGetThemes");

            var localVarPath = "./{dataViewName}/Themes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ThemesGetThemes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Theme>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Theme>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Theme>)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns a list of all themes with associated usage information This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ThemeUsage</returns>
        public ThemeUsage ThemesGetUsage (string dataViewName)
        {
             ApiResponse<ThemeUsage> localVarResponse = ThemesGetUsageWithHttpInfo(dataViewName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns a list of all themes with associated usage information This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of ThemeUsage</returns>
        public ApiResponse< ThemeUsage > ThemesGetUsageWithHttpInfo (string dataViewName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ThemesApi->ThemesGetUsage");

            var localVarPath = "./{dataViewName}/Themes/Usage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ThemesGetUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThemeUsage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ThemeUsage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThemeUsage)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns a list of all themes with associated usage information This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ThemeUsage</returns>
        public async System.Threading.Tasks.Task<ThemeUsage> ThemesGetUsageAsync (string dataViewName)
        {
             ApiResponse<ThemeUsage> localVarResponse = await ThemesGetUsageAsyncWithHttpInfo(dataViewName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Returns a list of all themes with associated usage information This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (ThemeUsage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThemeUsage>> ThemesGetUsageAsyncWithHttpInfo (string dataViewName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ThemesApi->ThemesGetUsage");

            var localVarPath = "./{dataViewName}/Themes/Usage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ThemesGetUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThemeUsage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ThemeUsage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThemeUsage)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Updates the details of a particular theme.  If you don&#x27;t have an id for the  theme then POST to the /Themes URL to create a new theme. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The id of the theme to add/update</param>
        /// <param name="body">The details for the theme to update (optional)</param>
        /// <returns>Theme</returns>
        public Theme ThemesUpdateTheme (string dataViewName, int? themeId, CreateUpdateTheme body = null)
        {
             ApiResponse<Theme> localVarResponse = ThemesUpdateThemeWithHttpInfo(dataViewName, themeId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Updates the details of a particular theme.  If you don&#x27;t have an id for the  theme then POST to the /Themes URL to create a new theme. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The id of the theme to add/update</param>
        /// <param name="body">The details for the theme to update (optional)</param>
        /// <returns>ApiResponse of Theme</returns>
        public ApiResponse< Theme > ThemesUpdateThemeWithHttpInfo (string dataViewName, int? themeId, CreateUpdateTheme body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ThemesApi->ThemesUpdateTheme");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling ThemesApi->ThemesUpdateTheme");

            var localVarPath = "./{dataViewName}/Themes/{themeId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ThemesUpdateTheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Theme>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Theme) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Theme)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Updates the details of a particular theme.  If you don&#x27;t have an id for the  theme then POST to the /Themes URL to create a new theme. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The id of the theme to add/update</param>
        /// <param name="body">The details for the theme to update (optional)</param>
        /// <returns>Task of Theme</returns>
        public async System.Threading.Tasks.Task<Theme> ThemesUpdateThemeAsync (string dataViewName, int? themeId, CreateUpdateTheme body = null)
        {
             ApiResponse<Theme> localVarResponse = await ThemesUpdateThemeAsyncWithHttpInfo(dataViewName, themeId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Updates the details of a particular theme.  If you don&#x27;t have an id for the  theme then POST to the /Themes URL to create a new theme. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="themeId">The id of the theme to add/update</param>
        /// <param name="body">The details for the theme to update (optional)</param>
        /// <returns>Task of ApiResponse (Theme)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Theme>> ThemesUpdateThemeAsyncWithHttpInfo (string dataViewName, int? themeId, CreateUpdateTheme body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ThemesApi->ThemesUpdateTheme");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling ThemesApi->ThemesUpdateTheme");

            var localVarPath = "./{dataViewName}/Themes/{themeId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ThemesUpdateTheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Theme>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Theme) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Theme)));
        }

    }
}
