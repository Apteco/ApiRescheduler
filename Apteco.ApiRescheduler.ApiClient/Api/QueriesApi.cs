/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IQueriesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the query definition in the specified file
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <returns>QueryResult</returns>
        QueryResult QueriesPerformGetQueryFileDefinitionSynchronously (string dataViewName, string systemName, QueryFile body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Get the query definition in the specified file
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of QueryResult</returns>
        ApiResponse<QueryResult> QueriesPerformGetQueryFileDefinitionSynchronouslyWithHttpInfo (string dataViewName, string systemName, QueryFile body = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Counts the given query and returns the results
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The query definition to count (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the query&#x27;s definition in the results.  Default is false. (optional)</param>
        /// <returns>QueryResult</returns>
        QueryResult QueriesPerformQueryCountSynchronously (string dataViewName, string systemName, Query body = null, int? timeoutInSeconds = null, bool? returnDefinition = null);

        /// <summary>
        /// Counts the given query and returns the results
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The query definition to count (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the query&#x27;s definition in the results.  Default is false. (optional)</param>
        /// <returns>ApiResponse of QueryResult</returns>
        ApiResponse<QueryResult> QueriesPerformQueryCountSynchronouslyWithHttpInfo (string dataViewName, string systemName, Query body = null, int? timeoutInSeconds = null, bool? returnDefinition = null);
        /// <summary>
        /// Counts the query in the specified file and returns the results
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition to count (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the query&#x27;s definition in the results.  Default is false. (optional)</param>
        /// <returns>QueryResult</returns>
        QueryResult QueriesPerformQueryFileCountSynchronously (string dataViewName, string systemName, QueryFile body = null, int? timeoutInSeconds = null, bool? returnDefinition = null);

        /// <summary>
        /// Counts the query in the specified file and returns the results
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition to count (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the query&#x27;s definition in the results.  Default is false. (optional)</param>
        /// <returns>ApiResponse of QueryResult</returns>
        ApiResponse<QueryResult> QueriesPerformQueryFileCountSynchronouslyWithHttpInfo (string dataViewName, string systemName, QueryFile body = null, int? timeoutInSeconds = null, bool? returnDefinition = null);
        /// <summary>
        /// Saves the given query to the specified file
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <returns></returns>
        void QueriesPerformSaveQueryFileDefinitionSynchronously (string dataViewName, string systemName, SaveQueryFile body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Saves the given query to the specified file
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> QueriesPerformSaveQueryFileDefinitionSynchronouslyWithHttpInfo (string dataViewName, string systemName, SaveQueryFile body = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Checks whether the given expression is valid
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The expression to validate (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the expression definition in the results.  Default is false. (optional)</param>
        /// <returns>ExpressionValidationResult</returns>
        ExpressionValidationResult QueriesValidateExpressionSynchronously (string dataViewName, string systemName, Expression body = null, int? timeoutInSeconds = null, bool? returnDefinition = null);

        /// <summary>
        /// Checks whether the given expression is valid
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The expression to validate (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the expression definition in the results.  Default is false. (optional)</param>
        /// <returns>ApiResponse of ExpressionValidationResult</returns>
        ApiResponse<ExpressionValidationResult> QueriesValidateExpressionSynchronouslyWithHttpInfo (string dataViewName, string systemName, Expression body = null, int? timeoutInSeconds = null, bool? returnDefinition = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the query definition in the specified file
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <returns>Task of QueryResult</returns>
        System.Threading.Tasks.Task<QueryResult> QueriesPerformGetQueryFileDefinitionSynchronouslyAsync (string dataViewName, string systemName, QueryFile body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Get the query definition in the specified file
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (QueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryResult>> QueriesPerformGetQueryFileDefinitionSynchronouslyAsyncWithHttpInfo (string dataViewName, string systemName, QueryFile body = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Counts the given query and returns the results
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The query definition to count (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the query&#x27;s definition in the results.  Default is false. (optional)</param>
        /// <returns>Task of QueryResult</returns>
        System.Threading.Tasks.Task<QueryResult> QueriesPerformQueryCountSynchronouslyAsync (string dataViewName, string systemName, Query body = null, int? timeoutInSeconds = null, bool? returnDefinition = null);

        /// <summary>
        /// Counts the given query and returns the results
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The query definition to count (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the query&#x27;s definition in the results.  Default is false. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryResult>> QueriesPerformQueryCountSynchronouslyAsyncWithHttpInfo (string dataViewName, string systemName, Query body = null, int? timeoutInSeconds = null, bool? returnDefinition = null);
        /// <summary>
        /// Counts the query in the specified file and returns the results
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition to count (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the query&#x27;s definition in the results.  Default is false. (optional)</param>
        /// <returns>Task of QueryResult</returns>
        System.Threading.Tasks.Task<QueryResult> QueriesPerformQueryFileCountSynchronouslyAsync (string dataViewName, string systemName, QueryFile body = null, int? timeoutInSeconds = null, bool? returnDefinition = null);

        /// <summary>
        /// Counts the query in the specified file and returns the results
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition to count (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the query&#x27;s definition in the results.  Default is false. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryResult>> QueriesPerformQueryFileCountSynchronouslyAsyncWithHttpInfo (string dataViewName, string systemName, QueryFile body = null, int? timeoutInSeconds = null, bool? returnDefinition = null);
        /// <summary>
        /// Saves the given query to the specified file
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task QueriesPerformSaveQueryFileDefinitionSynchronouslyAsync (string dataViewName, string systemName, SaveQueryFile body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Saves the given query to the specified file
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> QueriesPerformSaveQueryFileDefinitionSynchronouslyAsyncWithHttpInfo (string dataViewName, string systemName, SaveQueryFile body = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Checks whether the given expression is valid
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The expression to validate (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the expression definition in the results.  Default is false. (optional)</param>
        /// <returns>Task of ExpressionValidationResult</returns>
        System.Threading.Tasks.Task<ExpressionValidationResult> QueriesValidateExpressionSynchronouslyAsync (string dataViewName, string systemName, Expression body = null, int? timeoutInSeconds = null, bool? returnDefinition = null);

        /// <summary>
        /// Checks whether the given expression is valid
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AdvancedQuery]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The expression to validate (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the expression definition in the results.  Default is false. (optional)</param>
        /// <returns>Task of ApiResponse (ExpressionValidationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpressionValidationResult>> QueriesValidateExpressionSynchronouslyAsyncWithHttpInfo (string dataViewName, string systemName, Expression body = null, int? timeoutInSeconds = null, bool? returnDefinition = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class QueriesApi : IQueriesApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QueriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QueriesApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueriesApi"/> class
        /// </summary>
        /// <returns></returns>
        public QueriesApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QueriesApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the query definition in the specified file Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <returns>QueryResult</returns>
        public QueryResult QueriesPerformGetQueryFileDefinitionSynchronously (string dataViewName, string systemName, QueryFile body = null, int? timeoutInSeconds = null)
        {
             ApiResponse<QueryResult> localVarResponse = QueriesPerformGetQueryFileDefinitionSynchronouslyWithHttpInfo(dataViewName, systemName, body, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the query definition in the specified file Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of QueryResult</returns>
        public ApiResponse< QueryResult > QueriesPerformGetQueryFileDefinitionSynchronouslyWithHttpInfo (string dataViewName, string systemName, QueryFile body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling QueriesApi->QueriesPerformGetQueryFileDefinitionSynchronously");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling QueriesApi->QueriesPerformGetQueryFileDefinitionSynchronously");

            var localVarPath = "./{dataViewName}/Queries/{systemName}/GetFileSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueriesPerformGetQueryFileDefinitionSynchronously", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (QueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResult)));
        }

        /// <summary>
        /// Get the query definition in the specified file Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <returns>Task of QueryResult</returns>
        public async System.Threading.Tasks.Task<QueryResult> QueriesPerformGetQueryFileDefinitionSynchronouslyAsync (string dataViewName, string systemName, QueryFile body = null, int? timeoutInSeconds = null)
        {
             ApiResponse<QueryResult> localVarResponse = await QueriesPerformGetQueryFileDefinitionSynchronouslyAsyncWithHttpInfo(dataViewName, systemName, body, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the query definition in the specified file Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (QueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryResult>> QueriesPerformGetQueryFileDefinitionSynchronouslyAsyncWithHttpInfo (string dataViewName, string systemName, QueryFile body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling QueriesApi->QueriesPerformGetQueryFileDefinitionSynchronously");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling QueriesApi->QueriesPerformGetQueryFileDefinitionSynchronously");

            var localVarPath = "./{dataViewName}/Queries/{systemName}/GetFileSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueriesPerformGetQueryFileDefinitionSynchronously", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (QueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResult)));
        }

        /// <summary>
        /// Counts the given query and returns the results Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The query definition to count (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the query&#x27;s definition in the results.  Default is false. (optional)</param>
        /// <returns>QueryResult</returns>
        public QueryResult QueriesPerformQueryCountSynchronously (string dataViewName, string systemName, Query body = null, int? timeoutInSeconds = null, bool? returnDefinition = null)
        {
             ApiResponse<QueryResult> localVarResponse = QueriesPerformQueryCountSynchronouslyWithHttpInfo(dataViewName, systemName, body, timeoutInSeconds, returnDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts the given query and returns the results Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The query definition to count (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the query&#x27;s definition in the results.  Default is false. (optional)</param>
        /// <returns>ApiResponse of QueryResult</returns>
        public ApiResponse< QueryResult > QueriesPerformQueryCountSynchronouslyWithHttpInfo (string dataViewName, string systemName, Query body = null, int? timeoutInSeconds = null, bool? returnDefinition = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling QueriesApi->QueriesPerformQueryCountSynchronously");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling QueriesApi->QueriesPerformQueryCountSynchronously");

            var localVarPath = "./{dataViewName}/Queries/{systemName}/CountSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (returnDefinition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "returnDefinition", returnDefinition)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueriesPerformQueryCountSynchronously", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (QueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResult)));
        }

        /// <summary>
        /// Counts the given query and returns the results Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The query definition to count (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the query&#x27;s definition in the results.  Default is false. (optional)</param>
        /// <returns>Task of QueryResult</returns>
        public async System.Threading.Tasks.Task<QueryResult> QueriesPerformQueryCountSynchronouslyAsync (string dataViewName, string systemName, Query body = null, int? timeoutInSeconds = null, bool? returnDefinition = null)
        {
             ApiResponse<QueryResult> localVarResponse = await QueriesPerformQueryCountSynchronouslyAsyncWithHttpInfo(dataViewName, systemName, body, timeoutInSeconds, returnDefinition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts the given query and returns the results Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The query definition to count (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the query&#x27;s definition in the results.  Default is false. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryResult>> QueriesPerformQueryCountSynchronouslyAsyncWithHttpInfo (string dataViewName, string systemName, Query body = null, int? timeoutInSeconds = null, bool? returnDefinition = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling QueriesApi->QueriesPerformQueryCountSynchronously");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling QueriesApi->QueriesPerformQueryCountSynchronously");

            var localVarPath = "./{dataViewName}/Queries/{systemName}/CountSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (returnDefinition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "returnDefinition", returnDefinition)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueriesPerformQueryCountSynchronously", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (QueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResult)));
        }

        /// <summary>
        /// Counts the query in the specified file and returns the results Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition to count (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the query&#x27;s definition in the results.  Default is false. (optional)</param>
        /// <returns>QueryResult</returns>
        public QueryResult QueriesPerformQueryFileCountSynchronously (string dataViewName, string systemName, QueryFile body = null, int? timeoutInSeconds = null, bool? returnDefinition = null)
        {
             ApiResponse<QueryResult> localVarResponse = QueriesPerformQueryFileCountSynchronouslyWithHttpInfo(dataViewName, systemName, body, timeoutInSeconds, returnDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts the query in the specified file and returns the results Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition to count (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the query&#x27;s definition in the results.  Default is false. (optional)</param>
        /// <returns>ApiResponse of QueryResult</returns>
        public ApiResponse< QueryResult > QueriesPerformQueryFileCountSynchronouslyWithHttpInfo (string dataViewName, string systemName, QueryFile body = null, int? timeoutInSeconds = null, bool? returnDefinition = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling QueriesApi->QueriesPerformQueryFileCountSynchronously");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling QueriesApi->QueriesPerformQueryFileCountSynchronously");

            var localVarPath = "./{dataViewName}/Queries/{systemName}/CountFileSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (returnDefinition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "returnDefinition", returnDefinition)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueriesPerformQueryFileCountSynchronously", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (QueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResult)));
        }

        /// <summary>
        /// Counts the query in the specified file and returns the results Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition to count (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the query&#x27;s definition in the results.  Default is false. (optional)</param>
        /// <returns>Task of QueryResult</returns>
        public async System.Threading.Tasks.Task<QueryResult> QueriesPerformQueryFileCountSynchronouslyAsync (string dataViewName, string systemName, QueryFile body = null, int? timeoutInSeconds = null, bool? returnDefinition = null)
        {
             ApiResponse<QueryResult> localVarResponse = await QueriesPerformQueryFileCountSynchronouslyAsyncWithHttpInfo(dataViewName, systemName, body, timeoutInSeconds, returnDefinition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts the query in the specified file and returns the results Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition to count (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the query&#x27;s definition in the results.  Default is false. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryResult>> QueriesPerformQueryFileCountSynchronouslyAsyncWithHttpInfo (string dataViewName, string systemName, QueryFile body = null, int? timeoutInSeconds = null, bool? returnDefinition = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling QueriesApi->QueriesPerformQueryFileCountSynchronously");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling QueriesApi->QueriesPerformQueryFileCountSynchronously");

            var localVarPath = "./{dataViewName}/Queries/{systemName}/CountFileSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (returnDefinition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "returnDefinition", returnDefinition)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueriesPerformQueryFileCountSynchronously", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (QueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResult)));
        }

        /// <summary>
        /// Saves the given query to the specified file Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <returns></returns>
        public void QueriesPerformSaveQueryFileDefinitionSynchronously (string dataViewName, string systemName, SaveQueryFile body = null, int? timeoutInSeconds = null)
        {
             QueriesPerformSaveQueryFileDefinitionSynchronouslyWithHttpInfo(dataViewName, systemName, body, timeoutInSeconds);
        }

        /// <summary>
        /// Saves the given query to the specified file Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> QueriesPerformSaveQueryFileDefinitionSynchronouslyWithHttpInfo (string dataViewName, string systemName, SaveQueryFile body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling QueriesApi->QueriesPerformSaveQueryFileDefinitionSynchronously");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling QueriesApi->QueriesPerformSaveQueryFileDefinitionSynchronously");

            var localVarPath = "./{dataViewName}/Queries/{systemName}/SaveFileSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueriesPerformSaveQueryFileDefinitionSynchronously", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Saves the given query to the specified file Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task QueriesPerformSaveQueryFileDefinitionSynchronouslyAsync (string dataViewName, string systemName, SaveQueryFile body = null, int? timeoutInSeconds = null)
        {
             await QueriesPerformSaveQueryFileDefinitionSynchronouslyAsyncWithHttpInfo(dataViewName, systemName, body, timeoutInSeconds);

        }

        /// <summary>
        /// Saves the given query to the specified file Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The file that holds the query definition (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> QueriesPerformSaveQueryFileDefinitionSynchronouslyAsyncWithHttpInfo (string dataViewName, string systemName, SaveQueryFile body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling QueriesApi->QueriesPerformSaveQueryFileDefinitionSynchronously");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling QueriesApi->QueriesPerformSaveQueryFileDefinitionSynchronously");

            var localVarPath = "./{dataViewName}/Queries/{systemName}/SaveFileSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueriesPerformSaveQueryFileDefinitionSynchronously", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Checks whether the given expression is valid Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The expression to validate (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the expression definition in the results.  Default is false. (optional)</param>
        /// <returns>ExpressionValidationResult</returns>
        public ExpressionValidationResult QueriesValidateExpressionSynchronously (string dataViewName, string systemName, Expression body = null, int? timeoutInSeconds = null, bool? returnDefinition = null)
        {
             ApiResponse<ExpressionValidationResult> localVarResponse = QueriesValidateExpressionSynchronouslyWithHttpInfo(dataViewName, systemName, body, timeoutInSeconds, returnDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Checks whether the given expression is valid Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The expression to validate (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the expression definition in the results.  Default is false. (optional)</param>
        /// <returns>ApiResponse of ExpressionValidationResult</returns>
        public ApiResponse< ExpressionValidationResult > QueriesValidateExpressionSynchronouslyWithHttpInfo (string dataViewName, string systemName, Expression body = null, int? timeoutInSeconds = null, bool? returnDefinition = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling QueriesApi->QueriesValidateExpressionSynchronously");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling QueriesApi->QueriesValidateExpressionSynchronously");

            var localVarPath = "./{dataViewName}/Queries/{systemName}/ValidateExpressionSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (returnDefinition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "returnDefinition", returnDefinition)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueriesValidateExpressionSynchronously", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpressionValidationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ExpressionValidationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpressionValidationResult)));
        }

        /// <summary>
        /// Checks whether the given expression is valid Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The expression to validate (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the expression definition in the results.  Default is false. (optional)</param>
        /// <returns>Task of ExpressionValidationResult</returns>
        public async System.Threading.Tasks.Task<ExpressionValidationResult> QueriesValidateExpressionSynchronouslyAsync (string dataViewName, string systemName, Expression body = null, int? timeoutInSeconds = null, bool? returnDefinition = null)
        {
             ApiResponse<ExpressionValidationResult> localVarResponse = await QueriesValidateExpressionSynchronouslyAsyncWithHttpInfo(dataViewName, systemName, body, timeoutInSeconds, returnDefinition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Checks whether the given expression is valid Requires licence flags [AdvancedQuery]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The expression to validate (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service&#x27;s configuration (optional)</param>
        /// <param name="returnDefinition">Whether to include the expression definition in the results.  Default is false. (optional)</param>
        /// <returns>Task of ApiResponse (ExpressionValidationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExpressionValidationResult>> QueriesValidateExpressionSynchronouslyAsyncWithHttpInfo (string dataViewName, string systemName, Expression body = null, int? timeoutInSeconds = null, bool? returnDefinition = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling QueriesApi->QueriesValidateExpressionSynchronously");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling QueriesApi->QueriesValidateExpressionSynchronously");

            var localVarPath = "./{dataViewName}/Queries/{systemName}/ValidateExpressionSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (returnDefinition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "returnDefinition", returnDefinition)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueriesValidateExpressionSynchronously", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpressionValidationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ExpressionValidationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpressionValidationResult)));
        }

    }
}
