/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISessionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates an API session token from a traditional FastStats session id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>SessionDetails</returns>
        SessionDetails SessionsConvertSessionToAccessToken (string sessionId, string dataViewName);

        /// <summary>
        /// Creates an API session token from a traditional FastStats session id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of SessionDetails</returns>
        ApiResponse<SessionDetails> SessionsConvertSessionToAccessTokenWithHttpInfo (string sessionId, string dataViewName);
        /// <summary>
        /// Creates a new set of parameters to use when creating a new session via the salted login method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>CreateSessionParameters</returns>
        CreateSessionParameters SessionsCreateLoginParameters (string username, string dataViewName);

        /// <summary>
        /// Creates a new set of parameters to use when creating a new session via the salted login method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of CreateSessionParameters</returns>
        ApiResponse<CreateSessionParameters> SessionsCreateLoginParametersWithHttpInfo (string username, string dataViewName);
        /// <summary>
        /// Creates a session to use for other API requests given a JWT login token from the Apteco Login Service.  The API must have the appriopriate JWT issuer, audience and signing key specified to be able to validate the token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details used to create the session (optional)</param>
        /// <returns>SessionDetails</returns>
        SessionDetails SessionsCreateSessionFromLoginToken (string dataViewName, TokenLoginDetails body = null);

        /// <summary>
        /// Creates a session to use for other API requests given a JWT login token from the Apteco Login Service.  The API must have the appriopriate JWT issuer, audience and signing key specified to be able to validate the token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details used to create the session (optional)</param>
        /// <returns>ApiResponse of SessionDetails</returns>
        ApiResponse<SessionDetails> SessionsCreateSessionFromLoginTokenWithHttpInfo (string dataViewName, TokenLoginDetails body = null);
        /// <summary>
        /// Creates a session to use for other API requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="loginSalt"></param>
        /// <param name="passwordHash"></param>
        /// <param name="clientType"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>SessionDetails</returns>
        SessionDetails SessionsCreateSessionSalted (string username, string loginSalt, string passwordHash, string clientType, string dataViewName);

        /// <summary>
        /// Creates a session to use for other API requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="loginSalt"></param>
        /// <param name="passwordHash"></param>
        /// <param name="clientType"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of SessionDetails</returns>
        ApiResponse<SessionDetails> SessionsCreateSessionSaltedWithHttpInfo (string username, string loginSalt, string passwordHash, string clientType, string dataViewName);
        /// <summary>
        /// Creates a session to use for other API requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLogin"></param>
        /// <param name="password"></param>
        /// <param name="clientType"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>SessionDetails</returns>
        SessionDetails SessionsCreateSessionSimple (string userLogin, string password, string clientType, string dataViewName);

        /// <summary>
        /// Creates a session to use for other API requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLogin"></param>
        /// <param name="password"></param>
        /// <param name="clientType"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of SessionDetails</returns>
        ApiResponse<SessionDetails> SessionsCreateSessionSimpleWithHttpInfo (string userLogin, string password, string clientType, string dataViewName);
        /// <summary>
        /// Gets some simple user details for the given session id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to look up</param>
        /// <returns>SessionAndUserDetails</returns>
        SessionAndUserDetails SessionsGetSessionDetails (string dataViewName, string sessionId);

        /// <summary>
        /// Gets some simple user details for the given session id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to look up</param>
        /// <returns>ApiResponse of SessionAndUserDetails</returns>
        ApiResponse<SessionAndUserDetails> SessionsGetSessionDetailsWithHttpInfo (string dataViewName, string sessionId);
        /// <summary>
        /// Requires OrbitAdmin: Gets some simple user details for all currently valid sessions.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsSessionAndUserDetails</returns>
        PagedResultsSessionAndUserDetails SessionsGetSessionDetailsList (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Requires OrbitAdmin: Gets some simple user details for all currently valid sessions.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsSessionAndUserDetails</returns>
        ApiResponse<PagedResultsSessionAndUserDetails> SessionsGetSessionDetailsListWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Logs out the specified session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to log out from</param>
        /// <returns></returns>
        void SessionsLogoutSession (string dataViewName, string sessionId);

        /// <summary>
        /// Logs out the specified session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to log out from</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SessionsLogoutSessionWithHttpInfo (string dataViewName, string sessionId);
        /// <summary>
        /// Checks if a given session id is valid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to look up</param>
        /// <returns></returns>
        void SessionsValidSession (string dataViewName, string sessionId);

        /// <summary>
        /// Checks if a given session id is valid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to look up</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SessionsValidSessionWithHttpInfo (string dataViewName, string sessionId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates an API session token from a traditional FastStats session id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of SessionDetails</returns>
        System.Threading.Tasks.Task<SessionDetails> SessionsConvertSessionToAccessTokenAsync (string sessionId, string dataViewName);

        /// <summary>
        /// Creates an API session token from a traditional FastStats session id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (SessionDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionDetails>> SessionsConvertSessionToAccessTokenAsyncWithHttpInfo (string sessionId, string dataViewName);
        /// <summary>
        /// Creates a new set of parameters to use when creating a new session via the salted login method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of CreateSessionParameters</returns>
        System.Threading.Tasks.Task<CreateSessionParameters> SessionsCreateLoginParametersAsync (string username, string dataViewName);

        /// <summary>
        /// Creates a new set of parameters to use when creating a new session via the salted login method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (CreateSessionParameters)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSessionParameters>> SessionsCreateLoginParametersAsyncWithHttpInfo (string username, string dataViewName);
        /// <summary>
        /// Creates a session to use for other API requests given a JWT login token from the Apteco Login Service.  The API must have the appriopriate JWT issuer, audience and signing key specified to be able to validate the token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details used to create the session (optional)</param>
        /// <returns>Task of SessionDetails</returns>
        System.Threading.Tasks.Task<SessionDetails> SessionsCreateSessionFromLoginTokenAsync (string dataViewName, TokenLoginDetails body = null);

        /// <summary>
        /// Creates a session to use for other API requests given a JWT login token from the Apteco Login Service.  The API must have the appriopriate JWT issuer, audience and signing key specified to be able to validate the token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details used to create the session (optional)</param>
        /// <returns>Task of ApiResponse (SessionDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionDetails>> SessionsCreateSessionFromLoginTokenAsyncWithHttpInfo (string dataViewName, TokenLoginDetails body = null);
        /// <summary>
        /// Creates a session to use for other API requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="loginSalt"></param>
        /// <param name="passwordHash"></param>
        /// <param name="clientType"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of SessionDetails</returns>
        System.Threading.Tasks.Task<SessionDetails> SessionsCreateSessionSaltedAsync (string username, string loginSalt, string passwordHash, string clientType, string dataViewName);

        /// <summary>
        /// Creates a session to use for other API requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="loginSalt"></param>
        /// <param name="passwordHash"></param>
        /// <param name="clientType"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (SessionDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionDetails>> SessionsCreateSessionSaltedAsyncWithHttpInfo (string username, string loginSalt, string passwordHash, string clientType, string dataViewName);
        /// <summary>
        /// Creates a session to use for other API requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLogin"></param>
        /// <param name="password"></param>
        /// <param name="clientType"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of SessionDetails</returns>
        System.Threading.Tasks.Task<SessionDetails> SessionsCreateSessionSimpleAsync (string userLogin, string password, string clientType, string dataViewName);

        /// <summary>
        /// Creates a session to use for other API requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLogin"></param>
        /// <param name="password"></param>
        /// <param name="clientType"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (SessionDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionDetails>> SessionsCreateSessionSimpleAsyncWithHttpInfo (string userLogin, string password, string clientType, string dataViewName);
        /// <summary>
        /// Gets some simple user details for the given session id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to look up</param>
        /// <returns>Task of SessionAndUserDetails</returns>
        System.Threading.Tasks.Task<SessionAndUserDetails> SessionsGetSessionDetailsAsync (string dataViewName, string sessionId);

        /// <summary>
        /// Gets some simple user details for the given session id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to look up</param>
        /// <returns>Task of ApiResponse (SessionAndUserDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionAndUserDetails>> SessionsGetSessionDetailsAsyncWithHttpInfo (string dataViewName, string sessionId);
        /// <summary>
        /// Requires OrbitAdmin: Gets some simple user details for all currently valid sessions.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsSessionAndUserDetails</returns>
        System.Threading.Tasks.Task<PagedResultsSessionAndUserDetails> SessionsGetSessionDetailsListAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Requires OrbitAdmin: Gets some simple user details for all currently valid sessions.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsSessionAndUserDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsSessionAndUserDetails>> SessionsGetSessionDetailsListAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Logs out the specified session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to log out from</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SessionsLogoutSessionAsync (string dataViewName, string sessionId);

        /// <summary>
        /// Logs out the specified session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to log out from</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SessionsLogoutSessionAsyncWithHttpInfo (string dataViewName, string sessionId);
        /// <summary>
        /// Checks if a given session id is valid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to look up</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SessionsValidSessionAsync (string dataViewName, string sessionId);

        /// <summary>
        /// Checks if a given session id is valid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to look up</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SessionsValidSessionAsyncWithHttpInfo (string dataViewName, string sessionId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SessionsApi : ISessionsApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionsApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public SessionsApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SessionsApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates an API session token from a traditional FastStats session id 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>SessionDetails</returns>
        public SessionDetails SessionsConvertSessionToAccessToken (string sessionId, string dataViewName)
        {
             ApiResponse<SessionDetails> localVarResponse = SessionsConvertSessionToAccessTokenWithHttpInfo(sessionId, dataViewName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an API session token from a traditional FastStats session id 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of SessionDetails</returns>
        public ApiResponse< SessionDetails > SessionsConvertSessionToAccessTokenWithHttpInfo (string sessionId, string dataViewName)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->SessionsConvertSessionToAccessToken");
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsConvertSessionToAccessToken");

            var localVarPath = "./{dataViewName}/Sessions/ConvertSession";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (sessionId != null) localVarFormParams.Add("SessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsConvertSessionToAccessToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SessionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionDetails)));
        }

        /// <summary>
        /// Creates an API session token from a traditional FastStats session id 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of SessionDetails</returns>
        public async System.Threading.Tasks.Task<SessionDetails> SessionsConvertSessionToAccessTokenAsync (string sessionId, string dataViewName)
        {
             ApiResponse<SessionDetails> localVarResponse = await SessionsConvertSessionToAccessTokenAsyncWithHttpInfo(sessionId, dataViewName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an API session token from a traditional FastStats session id 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (SessionDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionDetails>> SessionsConvertSessionToAccessTokenAsyncWithHttpInfo (string sessionId, string dataViewName)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->SessionsConvertSessionToAccessToken");
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsConvertSessionToAccessToken");

            var localVarPath = "./{dataViewName}/Sessions/ConvertSession";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (sessionId != null) localVarFormParams.Add("SessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsConvertSessionToAccessToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SessionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionDetails)));
        }

        /// <summary>
        /// Creates a new set of parameters to use when creating a new session via the salted login method. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>CreateSessionParameters</returns>
        public CreateSessionParameters SessionsCreateLoginParameters (string username, string dataViewName)
        {
             ApiResponse<CreateSessionParameters> localVarResponse = SessionsCreateLoginParametersWithHttpInfo(username, dataViewName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new set of parameters to use when creating a new session via the salted login method. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of CreateSessionParameters</returns>
        public ApiResponse< CreateSessionParameters > SessionsCreateLoginParametersWithHttpInfo (string username, string dataViewName)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling SessionsApi->SessionsCreateLoginParameters");
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsCreateLoginParameters");

            var localVarPath = "./{dataViewName}/Sessions/LoginParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarFormParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsCreateLoginParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSessionParameters>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CreateSessionParameters) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSessionParameters)));
        }

        /// <summary>
        /// Creates a new set of parameters to use when creating a new session via the salted login method. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of CreateSessionParameters</returns>
        public async System.Threading.Tasks.Task<CreateSessionParameters> SessionsCreateLoginParametersAsync (string username, string dataViewName)
        {
             ApiResponse<CreateSessionParameters> localVarResponse = await SessionsCreateLoginParametersAsyncWithHttpInfo(username, dataViewName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new set of parameters to use when creating a new session via the salted login method. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (CreateSessionParameters)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSessionParameters>> SessionsCreateLoginParametersAsyncWithHttpInfo (string username, string dataViewName)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling SessionsApi->SessionsCreateLoginParameters");
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsCreateLoginParameters");

            var localVarPath = "./{dataViewName}/Sessions/LoginParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarFormParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsCreateLoginParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSessionParameters>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CreateSessionParameters) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSessionParameters)));
        }

        /// <summary>
        /// Creates a session to use for other API requests given a JWT login token from the Apteco Login Service.  The API must have the appriopriate JWT issuer, audience and signing key specified to be able to validate the token. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details used to create the session (optional)</param>
        /// <returns>SessionDetails</returns>
        public SessionDetails SessionsCreateSessionFromLoginToken (string dataViewName, TokenLoginDetails body = null)
        {
             ApiResponse<SessionDetails> localVarResponse = SessionsCreateSessionFromLoginTokenWithHttpInfo(dataViewName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a session to use for other API requests given a JWT login token from the Apteco Login Service.  The API must have the appriopriate JWT issuer, audience and signing key specified to be able to validate the token. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details used to create the session (optional)</param>
        /// <returns>ApiResponse of SessionDetails</returns>
        public ApiResponse< SessionDetails > SessionsCreateSessionFromLoginTokenWithHttpInfo (string dataViewName, TokenLoginDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsCreateSessionFromLoginToken");

            var localVarPath = "./{dataViewName}/Sessions/TokenLogin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsCreateSessionFromLoginToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SessionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionDetails)));
        }

        /// <summary>
        /// Creates a session to use for other API requests given a JWT login token from the Apteco Login Service.  The API must have the appriopriate JWT issuer, audience and signing key specified to be able to validate the token. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details used to create the session (optional)</param>
        /// <returns>Task of SessionDetails</returns>
        public async System.Threading.Tasks.Task<SessionDetails> SessionsCreateSessionFromLoginTokenAsync (string dataViewName, TokenLoginDetails body = null)
        {
             ApiResponse<SessionDetails> localVarResponse = await SessionsCreateSessionFromLoginTokenAsyncWithHttpInfo(dataViewName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a session to use for other API requests given a JWT login token from the Apteco Login Service.  The API must have the appriopriate JWT issuer, audience and signing key specified to be able to validate the token. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details used to create the session (optional)</param>
        /// <returns>Task of ApiResponse (SessionDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionDetails>> SessionsCreateSessionFromLoginTokenAsyncWithHttpInfo (string dataViewName, TokenLoginDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsCreateSessionFromLoginToken");

            var localVarPath = "./{dataViewName}/Sessions/TokenLogin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsCreateSessionFromLoginToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SessionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionDetails)));
        }

        /// <summary>
        /// Creates a session to use for other API requests 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="loginSalt"></param>
        /// <param name="passwordHash"></param>
        /// <param name="clientType"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>SessionDetails</returns>
        public SessionDetails SessionsCreateSessionSalted (string username, string loginSalt, string passwordHash, string clientType, string dataViewName)
        {
             ApiResponse<SessionDetails> localVarResponse = SessionsCreateSessionSaltedWithHttpInfo(username, loginSalt, passwordHash, clientType, dataViewName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a session to use for other API requests 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="loginSalt"></param>
        /// <param name="passwordHash"></param>
        /// <param name="clientType"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of SessionDetails</returns>
        public ApiResponse< SessionDetails > SessionsCreateSessionSaltedWithHttpInfo (string username, string loginSalt, string passwordHash, string clientType, string dataViewName)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling SessionsApi->SessionsCreateSessionSalted");
            // verify the required parameter 'loginSalt' is set
            if (loginSalt == null)
                throw new ApiException(400, "Missing required parameter 'loginSalt' when calling SessionsApi->SessionsCreateSessionSalted");
            // verify the required parameter 'passwordHash' is set
            if (passwordHash == null)
                throw new ApiException(400, "Missing required parameter 'passwordHash' when calling SessionsApi->SessionsCreateSessionSalted");
            // verify the required parameter 'clientType' is set
            if (clientType == null)
                throw new ApiException(400, "Missing required parameter 'clientType' when calling SessionsApi->SessionsCreateSessionSalted");
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsCreateSessionSalted");

            var localVarPath = "./{dataViewName}/Sessions/SaltedLogin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarFormParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (loginSalt != null) localVarFormParams.Add("LoginSalt", this.Configuration.ApiClient.ParameterToString(loginSalt)); // form parameter
            if (passwordHash != null) localVarFormParams.Add("PasswordHash", this.Configuration.ApiClient.ParameterToString(passwordHash)); // form parameter
            if (clientType != null) localVarFormParams.Add("ClientType", this.Configuration.ApiClient.ParameterToString(clientType)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsCreateSessionSalted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SessionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionDetails)));
        }

        /// <summary>
        /// Creates a session to use for other API requests 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="loginSalt"></param>
        /// <param name="passwordHash"></param>
        /// <param name="clientType"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of SessionDetails</returns>
        public async System.Threading.Tasks.Task<SessionDetails> SessionsCreateSessionSaltedAsync (string username, string loginSalt, string passwordHash, string clientType, string dataViewName)
        {
             ApiResponse<SessionDetails> localVarResponse = await SessionsCreateSessionSaltedAsyncWithHttpInfo(username, loginSalt, passwordHash, clientType, dataViewName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a session to use for other API requests 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="loginSalt"></param>
        /// <param name="passwordHash"></param>
        /// <param name="clientType"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (SessionDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionDetails>> SessionsCreateSessionSaltedAsyncWithHttpInfo (string username, string loginSalt, string passwordHash, string clientType, string dataViewName)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling SessionsApi->SessionsCreateSessionSalted");
            // verify the required parameter 'loginSalt' is set
            if (loginSalt == null)
                throw new ApiException(400, "Missing required parameter 'loginSalt' when calling SessionsApi->SessionsCreateSessionSalted");
            // verify the required parameter 'passwordHash' is set
            if (passwordHash == null)
                throw new ApiException(400, "Missing required parameter 'passwordHash' when calling SessionsApi->SessionsCreateSessionSalted");
            // verify the required parameter 'clientType' is set
            if (clientType == null)
                throw new ApiException(400, "Missing required parameter 'clientType' when calling SessionsApi->SessionsCreateSessionSalted");
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsCreateSessionSalted");

            var localVarPath = "./{dataViewName}/Sessions/SaltedLogin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarFormParams.Add("Username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (loginSalt != null) localVarFormParams.Add("LoginSalt", this.Configuration.ApiClient.ParameterToString(loginSalt)); // form parameter
            if (passwordHash != null) localVarFormParams.Add("PasswordHash", this.Configuration.ApiClient.ParameterToString(passwordHash)); // form parameter
            if (clientType != null) localVarFormParams.Add("ClientType", this.Configuration.ApiClient.ParameterToString(clientType)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsCreateSessionSalted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SessionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionDetails)));
        }

        /// <summary>
        /// Creates a session to use for other API requests 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLogin"></param>
        /// <param name="password"></param>
        /// <param name="clientType"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>SessionDetails</returns>
        public SessionDetails SessionsCreateSessionSimple (string userLogin, string password, string clientType, string dataViewName)
        {
             ApiResponse<SessionDetails> localVarResponse = SessionsCreateSessionSimpleWithHttpInfo(userLogin, password, clientType, dataViewName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a session to use for other API requests 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLogin"></param>
        /// <param name="password"></param>
        /// <param name="clientType"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of SessionDetails</returns>
        public ApiResponse< SessionDetails > SessionsCreateSessionSimpleWithHttpInfo (string userLogin, string password, string clientType, string dataViewName)
        {
            // verify the required parameter 'userLogin' is set
            if (userLogin == null)
                throw new ApiException(400, "Missing required parameter 'userLogin' when calling SessionsApi->SessionsCreateSessionSimple");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling SessionsApi->SessionsCreateSessionSimple");
            // verify the required parameter 'clientType' is set
            if (clientType == null)
                throw new ApiException(400, "Missing required parameter 'clientType' when calling SessionsApi->SessionsCreateSessionSimple");
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsCreateSessionSimple");

            var localVarPath = "./{dataViewName}/Sessions/SimpleLogin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (userLogin != null) localVarFormParams.Add("UserLogin", this.Configuration.ApiClient.ParameterToString(userLogin)); // form parameter
            if (password != null) localVarFormParams.Add("Password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (clientType != null) localVarFormParams.Add("ClientType", this.Configuration.ApiClient.ParameterToString(clientType)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsCreateSessionSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SessionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionDetails)));
        }

        /// <summary>
        /// Creates a session to use for other API requests 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLogin"></param>
        /// <param name="password"></param>
        /// <param name="clientType"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of SessionDetails</returns>
        public async System.Threading.Tasks.Task<SessionDetails> SessionsCreateSessionSimpleAsync (string userLogin, string password, string clientType, string dataViewName)
        {
             ApiResponse<SessionDetails> localVarResponse = await SessionsCreateSessionSimpleAsyncWithHttpInfo(userLogin, password, clientType, dataViewName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a session to use for other API requests 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLogin"></param>
        /// <param name="password"></param>
        /// <param name="clientType"></param>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (SessionDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionDetails>> SessionsCreateSessionSimpleAsyncWithHttpInfo (string userLogin, string password, string clientType, string dataViewName)
        {
            // verify the required parameter 'userLogin' is set
            if (userLogin == null)
                throw new ApiException(400, "Missing required parameter 'userLogin' when calling SessionsApi->SessionsCreateSessionSimple");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling SessionsApi->SessionsCreateSessionSimple");
            // verify the required parameter 'clientType' is set
            if (clientType == null)
                throw new ApiException(400, "Missing required parameter 'clientType' when calling SessionsApi->SessionsCreateSessionSimple");
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsCreateSessionSimple");

            var localVarPath = "./{dataViewName}/Sessions/SimpleLogin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (userLogin != null) localVarFormParams.Add("UserLogin", this.Configuration.ApiClient.ParameterToString(userLogin)); // form parameter
            if (password != null) localVarFormParams.Add("Password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (clientType != null) localVarFormParams.Add("ClientType", this.Configuration.ApiClient.ParameterToString(clientType)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsCreateSessionSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SessionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionDetails)));
        }

        /// <summary>
        /// Gets some simple user details for the given session id 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to look up</param>
        /// <returns>SessionAndUserDetails</returns>
        public SessionAndUserDetails SessionsGetSessionDetails (string dataViewName, string sessionId)
        {
             ApiResponse<SessionAndUserDetails> localVarResponse = SessionsGetSessionDetailsWithHttpInfo(dataViewName, sessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets some simple user details for the given session id 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to look up</param>
        /// <returns>ApiResponse of SessionAndUserDetails</returns>
        public ApiResponse< SessionAndUserDetails > SessionsGetSessionDetailsWithHttpInfo (string dataViewName, string sessionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsGetSessionDetails");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->SessionsGetSessionDetails");

            var localVarPath = "./{dataViewName}/Sessions/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsGetSessionDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionAndUserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SessionAndUserDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionAndUserDetails)));
        }

        /// <summary>
        /// Gets some simple user details for the given session id 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to look up</param>
        /// <returns>Task of SessionAndUserDetails</returns>
        public async System.Threading.Tasks.Task<SessionAndUserDetails> SessionsGetSessionDetailsAsync (string dataViewName, string sessionId)
        {
             ApiResponse<SessionAndUserDetails> localVarResponse = await SessionsGetSessionDetailsAsyncWithHttpInfo(dataViewName, sessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets some simple user details for the given session id 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to look up</param>
        /// <returns>Task of ApiResponse (SessionAndUserDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionAndUserDetails>> SessionsGetSessionDetailsAsyncWithHttpInfo (string dataViewName, string sessionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsGetSessionDetails");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->SessionsGetSessionDetails");

            var localVarPath = "./{dataViewName}/Sessions/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsGetSessionDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionAndUserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SessionAndUserDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionAndUserDetails)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Gets some simple user details for all currently valid sessions. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsSessionAndUserDetails</returns>
        public PagedResultsSessionAndUserDetails SessionsGetSessionDetailsList (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsSessionAndUserDetails> localVarResponse = SessionsGetSessionDetailsListWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Gets some simple user details for all currently valid sessions. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsSessionAndUserDetails</returns>
        public ApiResponse< PagedResultsSessionAndUserDetails > SessionsGetSessionDetailsListWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsGetSessionDetailsList");

            var localVarPath = "./{dataViewName}/Sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsGetSessionDetailsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsSessionAndUserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsSessionAndUserDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsSessionAndUserDetails)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Gets some simple user details for all currently valid sessions. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsSessionAndUserDetails</returns>
        public async System.Threading.Tasks.Task<PagedResultsSessionAndUserDetails> SessionsGetSessionDetailsListAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsSessionAndUserDetails> localVarResponse = await SessionsGetSessionDetailsListAsyncWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Gets some simple user details for all currently valid sessions. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsSessionAndUserDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsSessionAndUserDetails>> SessionsGetSessionDetailsListAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsGetSessionDetailsList");

            var localVarPath = "./{dataViewName}/Sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsGetSessionDetailsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsSessionAndUserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsSessionAndUserDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsSessionAndUserDetails)));
        }

        /// <summary>
        /// Logs out the specified session 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to log out from</param>
        /// <returns></returns>
        public void SessionsLogoutSession (string dataViewName, string sessionId)
        {
             SessionsLogoutSessionWithHttpInfo(dataViewName, sessionId);
        }

        /// <summary>
        /// Logs out the specified session 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to log out from</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SessionsLogoutSessionWithHttpInfo (string dataViewName, string sessionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsLogoutSession");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->SessionsLogoutSession");

            var localVarPath = "./{dataViewName}/Sessions/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsLogoutSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Logs out the specified session 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to log out from</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SessionsLogoutSessionAsync (string dataViewName, string sessionId)
        {
             await SessionsLogoutSessionAsyncWithHttpInfo(dataViewName, sessionId);

        }

        /// <summary>
        /// Logs out the specified session 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to log out from</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SessionsLogoutSessionAsyncWithHttpInfo (string dataViewName, string sessionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsLogoutSession");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->SessionsLogoutSession");

            var localVarPath = "./{dataViewName}/Sessions/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsLogoutSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Checks if a given session id is valid 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to look up</param>
        /// <returns></returns>
        public void SessionsValidSession (string dataViewName, string sessionId)
        {
             SessionsValidSessionWithHttpInfo(dataViewName, sessionId);
        }

        /// <summary>
        /// Checks if a given session id is valid 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to look up</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SessionsValidSessionWithHttpInfo (string dataViewName, string sessionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsValidSession");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->SessionsValidSession");

            var localVarPath = "./{dataViewName}/Sessions/{sessionId}/Valid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsValidSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Checks if a given session id is valid 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to look up</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SessionsValidSessionAsync (string dataViewName, string sessionId)
        {
             await SessionsValidSessionAsyncWithHttpInfo(dataViewName, sessionId);

        }

        /// <summary>
        /// Checks if a given session id is valid 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="sessionId">The session id to look up</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SessionsValidSessionAsyncWithHttpInfo (string dataViewName, string sessionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling SessionsApi->SessionsValidSession");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->SessionsValidSession");

            var localVarPath = "./{dataViewName}/Sessions/{sessionId}/Valid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionsValidSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

    }
}
