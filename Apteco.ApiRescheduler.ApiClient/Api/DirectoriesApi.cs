/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDirectoriesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes directory at location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path to the directory to be deleted</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <returns></returns>
        void DirectoriesDeleteDirectory (string dataViewName, string systemName, string directoryPath, int? timeoutInSeconds = null);

        /// <summary>
        /// Deletes directory at location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path to the directory to be deleted</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DirectoriesDeleteDirectoryWithHttpInfo (string dataViewName, string systemName, string directoryPath, int? timeoutInSeconds = null);
        /// <summary>
        /// Returns the list of files and subdirectories under the given directory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path of the directory to list the contents of</param>
        /// <param name="recursiveSearchPattern">If specified a deep recursive search will be performed, returning items matching the given pattern (optional)</param>
        /// <param name="recursiveListingType">If specified, whether to list files only, directories only or both.  Defaults to both and is ignored if no recursiveSearchPattern is provided (optional)</param>
        /// <param name="recursiveMaxResults">If specified, the maximum number of items to search for.  Defaults to 1000 and is ignored if no recursiveSearchPattern is provided (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Type, HasParameters, TableName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Type, HasParameters, TableName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsFileEntry</returns>
        PagedResultsFileEntry DirectoriesGetFileEntries (string dataViewName, string systemName, string directoryPath, string recursiveSearchPattern = null, string recursiveListingType = null, int? recursiveMaxResults = null, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of files and subdirectories under the given directory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path of the directory to list the contents of</param>
        /// <param name="recursiveSearchPattern">If specified a deep recursive search will be performed, returning items matching the given pattern (optional)</param>
        /// <param name="recursiveListingType">If specified, whether to list files only, directories only or both.  Defaults to both and is ignored if no recursiveSearchPattern is provided (optional)</param>
        /// <param name="recursiveMaxResults">If specified, the maximum number of items to search for.  Defaults to 1000 and is ignored if no recursiveSearchPattern is provided (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Type, HasParameters, TableName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Type, HasParameters, TableName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsFileEntry</returns>
        ApiResponse<PagedResultsFileEntry> DirectoriesGetFileEntriesWithHttpInfo (string dataViewName, string systemName, string directoryPath, string recursiveSearchPattern = null, string recursiveListingType = null, int? recursiveMaxResults = null, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of systems that have access to a filesystem
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsFileSystemSummary</returns>
        PagedResultsFileSystemSummary DirectoriesGetFileSystems (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of systems that have access to a filesystem
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsFileSystemSummary</returns>
        ApiResponse<PagedResultsFileSystemSummary> DirectoriesGetFileSystemsWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of root directories configured in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsFileEntry</returns>
        PagedResultsFileEntry DirectoriesGetRootFileEntries (string dataViewName, string systemName, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of root directories configured in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsFileEntry</returns>
        ApiResponse<PagedResultsFileEntry> DirectoriesGetRootFileEntriesWithHttpInfo (string dataViewName, string systemName, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Ensure that a directory exists in a location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path to the directory that should exist</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <returns>FileEntry</returns>
        FileEntry DirectoriesUpsertDirectory (string dataViewName, string systemName, string directoryPath, int? timeoutInSeconds = null);

        /// <summary>
        /// Ensure that a directory exists in a location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path to the directory that should exist</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of FileEntry</returns>
        ApiResponse<FileEntry> DirectoriesUpsertDirectoryWithHttpInfo (string dataViewName, string systemName, string directoryPath, int? timeoutInSeconds = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes directory at location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path to the directory to be deleted</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DirectoriesDeleteDirectoryAsync (string dataViewName, string systemName, string directoryPath, int? timeoutInSeconds = null);

        /// <summary>
        /// Deletes directory at location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path to the directory to be deleted</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DirectoriesDeleteDirectoryAsyncWithHttpInfo (string dataViewName, string systemName, string directoryPath, int? timeoutInSeconds = null);
        /// <summary>
        /// Returns the list of files and subdirectories under the given directory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path of the directory to list the contents of</param>
        /// <param name="recursiveSearchPattern">If specified a deep recursive search will be performed, returning items matching the given pattern (optional)</param>
        /// <param name="recursiveListingType">If specified, whether to list files only, directories only or both.  Defaults to both and is ignored if no recursiveSearchPattern is provided (optional)</param>
        /// <param name="recursiveMaxResults">If specified, the maximum number of items to search for.  Defaults to 1000 and is ignored if no recursiveSearchPattern is provided (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Type, HasParameters, TableName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Type, HasParameters, TableName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsFileEntry</returns>
        System.Threading.Tasks.Task<PagedResultsFileEntry> DirectoriesGetFileEntriesAsync (string dataViewName, string systemName, string directoryPath, string recursiveSearchPattern = null, string recursiveListingType = null, int? recursiveMaxResults = null, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of files and subdirectories under the given directory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path of the directory to list the contents of</param>
        /// <param name="recursiveSearchPattern">If specified a deep recursive search will be performed, returning items matching the given pattern (optional)</param>
        /// <param name="recursiveListingType">If specified, whether to list files only, directories only or both.  Defaults to both and is ignored if no recursiveSearchPattern is provided (optional)</param>
        /// <param name="recursiveMaxResults">If specified, the maximum number of items to search for.  Defaults to 1000 and is ignored if no recursiveSearchPattern is provided (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Type, HasParameters, TableName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Type, HasParameters, TableName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsFileEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsFileEntry>> DirectoriesGetFileEntriesAsyncWithHttpInfo (string dataViewName, string systemName, string directoryPath, string recursiveSearchPattern = null, string recursiveListingType = null, int? recursiveMaxResults = null, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of systems that have access to a filesystem
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsFileSystemSummary</returns>
        System.Threading.Tasks.Task<PagedResultsFileSystemSummary> DirectoriesGetFileSystemsAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of systems that have access to a filesystem
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsFileSystemSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsFileSystemSummary>> DirectoriesGetFileSystemsAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of root directories configured in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsFileEntry</returns>
        System.Threading.Tasks.Task<PagedResultsFileEntry> DirectoriesGetRootFileEntriesAsync (string dataViewName, string systemName, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of root directories configured in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsFileEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsFileEntry>> DirectoriesGetRootFileEntriesAsyncWithHttpInfo (string dataViewName, string systemName, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Ensure that a directory exists in a location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path to the directory that should exist</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <returns>Task of FileEntry</returns>
        System.Threading.Tasks.Task<FileEntry> DirectoriesUpsertDirectoryAsync (string dataViewName, string systemName, string directoryPath, int? timeoutInSeconds = null);

        /// <summary>
        /// Ensure that a directory exists in a location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path to the directory that should exist</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (FileEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileEntry>> DirectoriesUpsertDirectoryAsyncWithHttpInfo (string dataViewName, string systemName, string directoryPath, int? timeoutInSeconds = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DirectoriesApi : IDirectoriesApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DirectoriesApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectoriesApi"/> class
        /// </summary>
        /// <returns></returns>
        public DirectoriesApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectoriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DirectoriesApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes directory at location 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path to the directory to be deleted</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <returns></returns>
        public void DirectoriesDeleteDirectory (string dataViewName, string systemName, string directoryPath, int? timeoutInSeconds = null)
        {
             DirectoriesDeleteDirectoryWithHttpInfo(dataViewName, systemName, directoryPath, timeoutInSeconds);
        }

        /// <summary>
        /// Deletes directory at location 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path to the directory to be deleted</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DirectoriesDeleteDirectoryWithHttpInfo (string dataViewName, string systemName, string directoryPath, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DirectoriesApi->DirectoriesDeleteDirectory");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DirectoriesApi->DirectoriesDeleteDirectory");
            // verify the required parameter 'directoryPath' is set
            if (directoryPath == null)
                throw new ApiException(400, "Missing required parameter 'directoryPath' when calling DirectoriesApi->DirectoriesDeleteDirectory");

            var localVarPath = "./{dataViewName}/Directories/{systemName}/{directoryPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (directoryPath != null) localVarPathParams.Add("directoryPath", this.Configuration.ApiClient.ParameterToString(directoryPath)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectoriesDeleteDirectory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes directory at location 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path to the directory to be deleted</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DirectoriesDeleteDirectoryAsync (string dataViewName, string systemName, string directoryPath, int? timeoutInSeconds = null)
        {
             await DirectoriesDeleteDirectoryAsyncWithHttpInfo(dataViewName, systemName, directoryPath, timeoutInSeconds);

        }

        /// <summary>
        /// Deletes directory at location 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path to the directory to be deleted</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DirectoriesDeleteDirectoryAsyncWithHttpInfo (string dataViewName, string systemName, string directoryPath, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DirectoriesApi->DirectoriesDeleteDirectory");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DirectoriesApi->DirectoriesDeleteDirectory");
            // verify the required parameter 'directoryPath' is set
            if (directoryPath == null)
                throw new ApiException(400, "Missing required parameter 'directoryPath' when calling DirectoriesApi->DirectoriesDeleteDirectory");

            var localVarPath = "./{dataViewName}/Directories/{systemName}/{directoryPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (directoryPath != null) localVarPathParams.Add("directoryPath", this.Configuration.ApiClient.ParameterToString(directoryPath)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectoriesDeleteDirectory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns the list of files and subdirectories under the given directory 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path of the directory to list the contents of</param>
        /// <param name="recursiveSearchPattern">If specified a deep recursive search will be performed, returning items matching the given pattern (optional)</param>
        /// <param name="recursiveListingType">If specified, whether to list files only, directories only or both.  Defaults to both and is ignored if no recursiveSearchPattern is provided (optional)</param>
        /// <param name="recursiveMaxResults">If specified, the maximum number of items to search for.  Defaults to 1000 and is ignored if no recursiveSearchPattern is provided (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Type, HasParameters, TableName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Type, HasParameters, TableName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsFileEntry</returns>
        public PagedResultsFileEntry DirectoriesGetFileEntries (string dataViewName, string systemName, string directoryPath, string recursiveSearchPattern = null, string recursiveListingType = null, int? recursiveMaxResults = null, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsFileEntry> localVarResponse = DirectoriesGetFileEntriesWithHttpInfo(dataViewName, systemName, directoryPath, recursiveSearchPattern, recursiveListingType, recursiveMaxResults, timeoutInSeconds, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of files and subdirectories under the given directory 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path of the directory to list the contents of</param>
        /// <param name="recursiveSearchPattern">If specified a deep recursive search will be performed, returning items matching the given pattern (optional)</param>
        /// <param name="recursiveListingType">If specified, whether to list files only, directories only or both.  Defaults to both and is ignored if no recursiveSearchPattern is provided (optional)</param>
        /// <param name="recursiveMaxResults">If specified, the maximum number of items to search for.  Defaults to 1000 and is ignored if no recursiveSearchPattern is provided (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Type, HasParameters, TableName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Type, HasParameters, TableName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsFileEntry</returns>
        public ApiResponse< PagedResultsFileEntry > DirectoriesGetFileEntriesWithHttpInfo (string dataViewName, string systemName, string directoryPath, string recursiveSearchPattern = null, string recursiveListingType = null, int? recursiveMaxResults = null, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DirectoriesApi->DirectoriesGetFileEntries");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DirectoriesApi->DirectoriesGetFileEntries");
            // verify the required parameter 'directoryPath' is set
            if (directoryPath == null)
                throw new ApiException(400, "Missing required parameter 'directoryPath' when calling DirectoriesApi->DirectoriesGetFileEntries");

            var localVarPath = "./{dataViewName}/Directories/{systemName}/{directoryPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (directoryPath != null) localVarPathParams.Add("directoryPath", this.Configuration.ApiClient.ParameterToString(directoryPath)); // path parameter
            if (recursiveSearchPattern != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recursiveSearchPattern", recursiveSearchPattern)); // query parameter
            if (recursiveListingType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recursiveListingType", recursiveListingType)); // query parameter
            if (recursiveMaxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recursiveMaxResults", recursiveMaxResults)); // query parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectoriesGetFileEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsFileEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsFileEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsFileEntry)));
        }

        /// <summary>
        /// Returns the list of files and subdirectories under the given directory 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path of the directory to list the contents of</param>
        /// <param name="recursiveSearchPattern">If specified a deep recursive search will be performed, returning items matching the given pattern (optional)</param>
        /// <param name="recursiveListingType">If specified, whether to list files only, directories only or both.  Defaults to both and is ignored if no recursiveSearchPattern is provided (optional)</param>
        /// <param name="recursiveMaxResults">If specified, the maximum number of items to search for.  Defaults to 1000 and is ignored if no recursiveSearchPattern is provided (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Type, HasParameters, TableName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Type, HasParameters, TableName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsFileEntry</returns>
        public async System.Threading.Tasks.Task<PagedResultsFileEntry> DirectoriesGetFileEntriesAsync (string dataViewName, string systemName, string directoryPath, string recursiveSearchPattern = null, string recursiveListingType = null, int? recursiveMaxResults = null, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsFileEntry> localVarResponse = await DirectoriesGetFileEntriesAsyncWithHttpInfo(dataViewName, systemName, directoryPath, recursiveSearchPattern, recursiveListingType, recursiveMaxResults, timeoutInSeconds, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of files and subdirectories under the given directory 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path of the directory to list the contents of</param>
        /// <param name="recursiveSearchPattern">If specified a deep recursive search will be performed, returning items matching the given pattern (optional)</param>
        /// <param name="recursiveListingType">If specified, whether to list files only, directories only or both.  Defaults to both and is ignored if no recursiveSearchPattern is provided (optional)</param>
        /// <param name="recursiveMaxResults">If specified, the maximum number of items to search for.  Defaults to 1000 and is ignored if no recursiveSearchPattern is provided (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Type, HasParameters, TableName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Type, HasParameters, TableName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsFileEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsFileEntry>> DirectoriesGetFileEntriesAsyncWithHttpInfo (string dataViewName, string systemName, string directoryPath, string recursiveSearchPattern = null, string recursiveListingType = null, int? recursiveMaxResults = null, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DirectoriesApi->DirectoriesGetFileEntries");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DirectoriesApi->DirectoriesGetFileEntries");
            // verify the required parameter 'directoryPath' is set
            if (directoryPath == null)
                throw new ApiException(400, "Missing required parameter 'directoryPath' when calling DirectoriesApi->DirectoriesGetFileEntries");

            var localVarPath = "./{dataViewName}/Directories/{systemName}/{directoryPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (directoryPath != null) localVarPathParams.Add("directoryPath", this.Configuration.ApiClient.ParameterToString(directoryPath)); // path parameter
            if (recursiveSearchPattern != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recursiveSearchPattern", recursiveSearchPattern)); // query parameter
            if (recursiveListingType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recursiveListingType", recursiveListingType)); // query parameter
            if (recursiveMaxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recursiveMaxResults", recursiveMaxResults)); // query parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectoriesGetFileEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsFileEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsFileEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsFileEntry)));
        }

        /// <summary>
        /// Returns the list of systems that have access to a filesystem 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsFileSystemSummary</returns>
        public PagedResultsFileSystemSummary DirectoriesGetFileSystems (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsFileSystemSummary> localVarResponse = DirectoriesGetFileSystemsWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of systems that have access to a filesystem 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsFileSystemSummary</returns>
        public ApiResponse< PagedResultsFileSystemSummary > DirectoriesGetFileSystemsWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DirectoriesApi->DirectoriesGetFileSystems");

            var localVarPath = "./{dataViewName}/Directories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectoriesGetFileSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsFileSystemSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsFileSystemSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsFileSystemSummary)));
        }

        /// <summary>
        /// Returns the list of systems that have access to a filesystem 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsFileSystemSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsFileSystemSummary> DirectoriesGetFileSystemsAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsFileSystemSummary> localVarResponse = await DirectoriesGetFileSystemsAsyncWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of systems that have access to a filesystem 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsFileSystemSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsFileSystemSummary>> DirectoriesGetFileSystemsAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DirectoriesApi->DirectoriesGetFileSystems");

            var localVarPath = "./{dataViewName}/Directories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectoriesGetFileSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsFileSystemSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsFileSystemSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsFileSystemSummary)));
        }

        /// <summary>
        /// Returns the list of root directories configured in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsFileEntry</returns>
        public PagedResultsFileEntry DirectoriesGetRootFileEntries (string dataViewName, string systemName, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsFileEntry> localVarResponse = DirectoriesGetRootFileEntriesWithHttpInfo(dataViewName, systemName, timeoutInSeconds, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of root directories configured in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsFileEntry</returns>
        public ApiResponse< PagedResultsFileEntry > DirectoriesGetRootFileEntriesWithHttpInfo (string dataViewName, string systemName, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DirectoriesApi->DirectoriesGetRootFileEntries");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DirectoriesApi->DirectoriesGetRootFileEntries");

            var localVarPath = "./{dataViewName}/Directories/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectoriesGetRootFileEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsFileEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsFileEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsFileEntry)));
        }

        /// <summary>
        /// Returns the list of root directories configured in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsFileEntry</returns>
        public async System.Threading.Tasks.Task<PagedResultsFileEntry> DirectoriesGetRootFileEntriesAsync (string dataViewName, string systemName, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsFileEntry> localVarResponse = await DirectoriesGetRootFileEntriesAsyncWithHttpInfo(dataViewName, systemName, timeoutInSeconds, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of root directories configured in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Name, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Name, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsFileEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsFileEntry>> DirectoriesGetRootFileEntriesAsyncWithHttpInfo (string dataViewName, string systemName, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DirectoriesApi->DirectoriesGetRootFileEntries");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DirectoriesApi->DirectoriesGetRootFileEntries");

            var localVarPath = "./{dataViewName}/Directories/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectoriesGetRootFileEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsFileEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsFileEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsFileEntry)));
        }

        /// <summary>
        /// Ensure that a directory exists in a location 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path to the directory that should exist</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <returns>FileEntry</returns>
        public FileEntry DirectoriesUpsertDirectory (string dataViewName, string systemName, string directoryPath, int? timeoutInSeconds = null)
        {
             ApiResponse<FileEntry> localVarResponse = DirectoriesUpsertDirectoryWithHttpInfo(dataViewName, systemName, directoryPath, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ensure that a directory exists in a location 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path to the directory that should exist</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of FileEntry</returns>
        public ApiResponse< FileEntry > DirectoriesUpsertDirectoryWithHttpInfo (string dataViewName, string systemName, string directoryPath, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DirectoriesApi->DirectoriesUpsertDirectory");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DirectoriesApi->DirectoriesUpsertDirectory");
            // verify the required parameter 'directoryPath' is set
            if (directoryPath == null)
                throw new ApiException(400, "Missing required parameter 'directoryPath' when calling DirectoriesApi->DirectoriesUpsertDirectory");

            var localVarPath = "./{dataViewName}/Directories/{systemName}/{directoryPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (directoryPath != null) localVarPathParams.Add("directoryPath", this.Configuration.ApiClient.ParameterToString(directoryPath)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectoriesUpsertDirectory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (FileEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileEntry)));
        }

        /// <summary>
        /// Ensure that a directory exists in a location 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path to the directory that should exist</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <returns>Task of FileEntry</returns>
        public async System.Threading.Tasks.Task<FileEntry> DirectoriesUpsertDirectoryAsync (string dataViewName, string systemName, string directoryPath, int? timeoutInSeconds = null)
        {
             ApiResponse<FileEntry> localVarResponse = await DirectoriesUpsertDirectoryAsyncWithHttpInfo(dataViewName, systemName, directoryPath, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ensure that a directory exists in a location 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="directoryPath">The path to the directory that should exist</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (FileEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileEntry>> DirectoriesUpsertDirectoryAsyncWithHttpInfo (string dataViewName, string systemName, string directoryPath, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling DirectoriesApi->DirectoriesUpsertDirectory");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling DirectoriesApi->DirectoriesUpsertDirectory");
            // verify the required parameter 'directoryPath' is set
            if (directoryPath == null)
                throw new ApiException(400, "Missing required parameter 'directoryPath' when calling DirectoriesApi->DirectoriesUpsertDirectory");

            var localVarPath = "./{dataViewName}/Directories/{systemName}/{directoryPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (directoryPath != null) localVarPathParams.Add("directoryPath", this.Configuration.ApiClient.ParameterToString(directoryPath)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectoriesUpsertDirectory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (FileEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileEntry)));
        }

    }
}
