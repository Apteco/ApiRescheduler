/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IWorkspacesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new workspace from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the workspace to create.  If you want to update a specific workspace then POST to the /Workspaces/{workspaceId} URL (optional)</param>
        /// <returns>WorkspaceDetail</returns>
        WorkspaceDetail WorkspacesCreateWorkspace (string dataViewName, CreateWorkspaceDetail body = null);

        /// <summary>
        /// Creates a new workspace from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the workspace to create.  If you want to update a specific workspace then POST to the /Workspaces/{workspaceId} URL (optional)</param>
        /// <returns>ApiResponse of WorkspaceDetail</returns>
        ApiResponse<WorkspaceDetail> WorkspacesCreateWorkspaceWithHttpInfo (string dataViewName, CreateWorkspaceDetail body = null);
        /// <summary>
        /// Updates the details of a particular workspace.  If you don&#x27;t have an id for the  workspace then POST to the /Workspaces URL to create a new workspace.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to add/update</param>
        /// <param name="body">The details for the workspace to add/update (optional)</param>
        /// <returns>WorkspaceUpdateDetail</returns>
        WorkspaceUpdateDetail WorkspacesCreateWorkspaceUpdate (string dataViewName, int? workspaceId, CreateWorkspaceUpdate body = null);

        /// <summary>
        /// Updates the details of a particular workspace.  If you don&#x27;t have an id for the  workspace then POST to the /Workspaces URL to create a new workspace.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to add/update</param>
        /// <param name="body">The details for the workspace to add/update (optional)</param>
        /// <returns>ApiResponse of WorkspaceUpdateDetail</returns>
        ApiResponse<WorkspaceUpdateDetail> WorkspacesCreateWorkspaceUpdateWithHttpInfo (string dataViewName, int? workspaceId, CreateWorkspaceUpdate body = null);
        /// <summary>
        /// Deletes the specified workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to delete</param>
        /// <returns></returns>
        void WorkspacesDeleteWorkspace (string dataViewName, int? workspaceId);

        /// <summary>
        /// Deletes the specified workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspacesDeleteWorkspaceWithHttpInfo (string dataViewName, int? workspaceId);
        /// <summary>
        /// Returns the details of a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to view</param>
        /// <returns>WorkspaceDetail</returns>
        WorkspaceDetail WorkspacesGetWorkspace (string dataViewName, int? workspaceId);

        /// <summary>
        /// Returns the details of a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to view</param>
        /// <returns>ApiResponse of WorkspaceDetail</returns>
        ApiResponse<WorkspaceDetail> WorkspacesGetWorkspaceWithHttpInfo (string dataViewName, int? workspaceId);
        /// <summary>
        /// Returns all the resources associated with a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the resources</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsWorkspaceResource</returns>
        PagedResultsWorkspaceResource WorkspacesGetWorkspaceResources (string dataViewName, int? workspaceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all the resources associated with a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the resources</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsWorkspaceResource</returns>
        ApiResponse<PagedResultsWorkspaceResource> WorkspacesGetWorkspaceResourcesWithHttpInfo (string dataViewName, int? workspaceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns details of an update for a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <returns>WorkspaceUpdateDetail</returns>
        WorkspaceUpdateDetail WorkspacesGetWorkspaceUpdate (string dataViewName, int? workspaceId, int? workspaceUpdateId);

        /// <summary>
        /// Returns details of an update for a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <returns>ApiResponse of WorkspaceUpdateDetail</returns>
        ApiResponse<WorkspaceUpdateDetail> WorkspacesGetWorkspaceUpdateWithHttpInfo (string dataViewName, int? workspaceId, int? workspaceUpdateId);
        /// <summary>
        /// Returns all the resources that were added to the specified update for a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsWorkspaceResource</returns>
        PagedResultsWorkspaceResource WorkspacesGetWorkspaceUpdateAddedResources (string dataViewName, int? workspaceId, int? workspaceUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all the resources that were added to the specified update for a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsWorkspaceResource</returns>
        ApiResponse<PagedResultsWorkspaceResource> WorkspacesGetWorkspaceUpdateAddedResourcesWithHttpInfo (string dataViewName, int? workspaceId, int? workspaceUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns all the resources that were added to the specified update for a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsWorkspaceResource</returns>
        PagedResultsWorkspaceResource WorkspacesGetWorkspaceUpdateRemovedResources (string dataViewName, int? workspaceId, int? workspaceUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all the resources that were added to the specified update for a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsWorkspaceResource</returns>
        ApiResponse<PagedResultsWorkspaceResource> WorkspacesGetWorkspaceUpdateRemovedResourcesWithHttpInfo (string dataViewName, int? workspaceId, int? workspaceUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns a summary of the updates to a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsWorkspaceUpdateSummary</returns>
        PagedResultsWorkspaceUpdateSummary WorkspacesGetWorkspaceUpdates (string dataViewName, int? workspaceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the updates to a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsWorkspaceUpdateSummary</returns>
        ApiResponse<PagedResultsWorkspaceUpdateSummary> WorkspacesGetWorkspaceUpdatesWithHttpInfo (string dataViewName, int? workspaceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each workspace in the DataView.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsWorkspaceSummary</returns>
        PagedResultsWorkspaceSummary WorkspacesGetWorkspaces (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each workspace in the DataView.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsWorkspaceSummary</returns>
        ApiResponse<PagedResultsWorkspaceSummary> WorkspacesGetWorkspacesWithHttpInfo (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Transfer ownership of an workspace from the current user to a new owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to transfer.</param>
        /// <param name="body">The details for transferring ownership of the workspace. (optional)</param>
        /// <returns>WorkspaceDetail</returns>
        WorkspaceDetail WorkspacesTransferWorkspaceOwnership (string dataViewName, int? workspaceId, TransferWorkspaceOwnershipDetails body = null);

        /// <summary>
        /// Transfer ownership of an workspace from the current user to a new owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to transfer.</param>
        /// <param name="body">The details for transferring ownership of the workspace. (optional)</param>
        /// <returns>ApiResponse of WorkspaceDetail</returns>
        ApiResponse<WorkspaceDetail> WorkspacesTransferWorkspaceOwnershipWithHttpInfo (string dataViewName, int? workspaceId, TransferWorkspaceOwnershipDetails body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new workspace from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the workspace to create.  If you want to update a specific workspace then POST to the /Workspaces/{workspaceId} URL (optional)</param>
        /// <returns>Task of WorkspaceDetail</returns>
        System.Threading.Tasks.Task<WorkspaceDetail> WorkspacesCreateWorkspaceAsync (string dataViewName, CreateWorkspaceDetail body = null);

        /// <summary>
        /// Creates a new workspace from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the workspace to create.  If you want to update a specific workspace then POST to the /Workspaces/{workspaceId} URL (optional)</param>
        /// <returns>Task of ApiResponse (WorkspaceDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkspaceDetail>> WorkspacesCreateWorkspaceAsyncWithHttpInfo (string dataViewName, CreateWorkspaceDetail body = null);
        /// <summary>
        /// Updates the details of a particular workspace.  If you don&#x27;t have an id for the  workspace then POST to the /Workspaces URL to create a new workspace.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to add/update</param>
        /// <param name="body">The details for the workspace to add/update (optional)</param>
        /// <returns>Task of WorkspaceUpdateDetail</returns>
        System.Threading.Tasks.Task<WorkspaceUpdateDetail> WorkspacesCreateWorkspaceUpdateAsync (string dataViewName, int? workspaceId, CreateWorkspaceUpdate body = null);

        /// <summary>
        /// Updates the details of a particular workspace.  If you don&#x27;t have an id for the  workspace then POST to the /Workspaces URL to create a new workspace.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to add/update</param>
        /// <param name="body">The details for the workspace to add/update (optional)</param>
        /// <returns>Task of ApiResponse (WorkspaceUpdateDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkspaceUpdateDetail>> WorkspacesCreateWorkspaceUpdateAsyncWithHttpInfo (string dataViewName, int? workspaceId, CreateWorkspaceUpdate body = null);
        /// <summary>
        /// Deletes the specified workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspacesDeleteWorkspaceAsync (string dataViewName, int? workspaceId);

        /// <summary>
        /// Deletes the specified workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspacesDeleteWorkspaceAsyncWithHttpInfo (string dataViewName, int? workspaceId);
        /// <summary>
        /// Returns the details of a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to view</param>
        /// <returns>Task of WorkspaceDetail</returns>
        System.Threading.Tasks.Task<WorkspaceDetail> WorkspacesGetWorkspaceAsync (string dataViewName, int? workspaceId);

        /// <summary>
        /// Returns the details of a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to view</param>
        /// <returns>Task of ApiResponse (WorkspaceDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkspaceDetail>> WorkspacesGetWorkspaceAsyncWithHttpInfo (string dataViewName, int? workspaceId);
        /// <summary>
        /// Returns all the resources associated with a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the resources</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsWorkspaceResource</returns>
        System.Threading.Tasks.Task<PagedResultsWorkspaceResource> WorkspacesGetWorkspaceResourcesAsync (string dataViewName, int? workspaceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all the resources associated with a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the resources</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsWorkspaceResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsWorkspaceResource>> WorkspacesGetWorkspaceResourcesAsyncWithHttpInfo (string dataViewName, int? workspaceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns details of an update for a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <returns>Task of WorkspaceUpdateDetail</returns>
        System.Threading.Tasks.Task<WorkspaceUpdateDetail> WorkspacesGetWorkspaceUpdateAsync (string dataViewName, int? workspaceId, int? workspaceUpdateId);

        /// <summary>
        /// Returns details of an update for a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <returns>Task of ApiResponse (WorkspaceUpdateDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkspaceUpdateDetail>> WorkspacesGetWorkspaceUpdateAsyncWithHttpInfo (string dataViewName, int? workspaceId, int? workspaceUpdateId);
        /// <summary>
        /// Returns all the resources that were added to the specified update for a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsWorkspaceResource</returns>
        System.Threading.Tasks.Task<PagedResultsWorkspaceResource> WorkspacesGetWorkspaceUpdateAddedResourcesAsync (string dataViewName, int? workspaceId, int? workspaceUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all the resources that were added to the specified update for a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsWorkspaceResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsWorkspaceResource>> WorkspacesGetWorkspaceUpdateAddedResourcesAsyncWithHttpInfo (string dataViewName, int? workspaceId, int? workspaceUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns all the resources that were added to the specified update for a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsWorkspaceResource</returns>
        System.Threading.Tasks.Task<PagedResultsWorkspaceResource> WorkspacesGetWorkspaceUpdateRemovedResourcesAsync (string dataViewName, int? workspaceId, int? workspaceUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all the resources that were added to the specified update for a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsWorkspaceResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsWorkspaceResource>> WorkspacesGetWorkspaceUpdateRemovedResourcesAsyncWithHttpInfo (string dataViewName, int? workspaceId, int? workspaceUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns a summary of the updates to a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsWorkspaceUpdateSummary</returns>
        System.Threading.Tasks.Task<PagedResultsWorkspaceUpdateSummary> WorkspacesGetWorkspaceUpdatesAsync (string dataViewName, int? workspaceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the updates to a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsWorkspaceUpdateSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsWorkspaceUpdateSummary>> WorkspacesGetWorkspaceUpdatesAsyncWithHttpInfo (string dataViewName, int? workspaceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each workspace in the DataView.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsWorkspaceSummary</returns>
        System.Threading.Tasks.Task<PagedResultsWorkspaceSummary> WorkspacesGetWorkspacesAsync (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each workspace in the DataView.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsWorkspaceSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsWorkspaceSummary>> WorkspacesGetWorkspacesAsyncWithHttpInfo (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Transfer ownership of an workspace from the current user to a new owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to transfer.</param>
        /// <param name="body">The details for transferring ownership of the workspace. (optional)</param>
        /// <returns>Task of WorkspaceDetail</returns>
        System.Threading.Tasks.Task<WorkspaceDetail> WorkspacesTransferWorkspaceOwnershipAsync (string dataViewName, int? workspaceId, TransferWorkspaceOwnershipDetails body = null);

        /// <summary>
        /// Transfer ownership of an workspace from the current user to a new owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to transfer.</param>
        /// <param name="body">The details for transferring ownership of the workspace. (optional)</param>
        /// <returns>Task of ApiResponse (WorkspaceDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkspaceDetail>> WorkspacesTransferWorkspaceOwnershipAsyncWithHttpInfo (string dataViewName, int? workspaceId, TransferWorkspaceOwnershipDetails body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class WorkspacesApi : IWorkspacesApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspacesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkspacesApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspacesApi"/> class
        /// </summary>
        /// <returns></returns>
        public WorkspacesApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspacesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkspacesApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new workspace from the given details for the logged in user. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the workspace to create.  If you want to update a specific workspace then POST to the /Workspaces/{workspaceId} URL (optional)</param>
        /// <returns>WorkspaceDetail</returns>
        public WorkspaceDetail WorkspacesCreateWorkspace (string dataViewName, CreateWorkspaceDetail body = null)
        {
             ApiResponse<WorkspaceDetail> localVarResponse = WorkspacesCreateWorkspaceWithHttpInfo(dataViewName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new workspace from the given details for the logged in user. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the workspace to create.  If you want to update a specific workspace then POST to the /Workspaces/{workspaceId} URL (optional)</param>
        /// <returns>ApiResponse of WorkspaceDetail</returns>
        public ApiResponse< WorkspaceDetail > WorkspacesCreateWorkspaceWithHttpInfo (string dataViewName, CreateWorkspaceDetail body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesCreateWorkspace");

            var localVarPath = "./{dataViewName}/Workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesCreateWorkspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (WorkspaceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceDetail)));
        }

        /// <summary>
        /// Creates a new workspace from the given details for the logged in user. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the workspace to create.  If you want to update a specific workspace then POST to the /Workspaces/{workspaceId} URL (optional)</param>
        /// <returns>Task of WorkspaceDetail</returns>
        public async System.Threading.Tasks.Task<WorkspaceDetail> WorkspacesCreateWorkspaceAsync (string dataViewName, CreateWorkspaceDetail body = null)
        {
             ApiResponse<WorkspaceDetail> localVarResponse = await WorkspacesCreateWorkspaceAsyncWithHttpInfo(dataViewName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new workspace from the given details for the logged in user. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the workspace to create.  If you want to update a specific workspace then POST to the /Workspaces/{workspaceId} URL (optional)</param>
        /// <returns>Task of ApiResponse (WorkspaceDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkspaceDetail>> WorkspacesCreateWorkspaceAsyncWithHttpInfo (string dataViewName, CreateWorkspaceDetail body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesCreateWorkspace");

            var localVarPath = "./{dataViewName}/Workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesCreateWorkspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (WorkspaceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceDetail)));
        }

        /// <summary>
        /// Updates the details of a particular workspace.  If you don&#x27;t have an id for the  workspace then POST to the /Workspaces URL to create a new workspace. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to add/update</param>
        /// <param name="body">The details for the workspace to add/update (optional)</param>
        /// <returns>WorkspaceUpdateDetail</returns>
        public WorkspaceUpdateDetail WorkspacesCreateWorkspaceUpdate (string dataViewName, int? workspaceId, CreateWorkspaceUpdate body = null)
        {
             ApiResponse<WorkspaceUpdateDetail> localVarResponse = WorkspacesCreateWorkspaceUpdateWithHttpInfo(dataViewName, workspaceId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the details of a particular workspace.  If you don&#x27;t have an id for the  workspace then POST to the /Workspaces URL to create a new workspace. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to add/update</param>
        /// <param name="body">The details for the workspace to add/update (optional)</param>
        /// <returns>ApiResponse of WorkspaceUpdateDetail</returns>
        public ApiResponse< WorkspaceUpdateDetail > WorkspacesCreateWorkspaceUpdateWithHttpInfo (string dataViewName, int? workspaceId, CreateWorkspaceUpdate body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesCreateWorkspaceUpdate");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesCreateWorkspaceUpdate");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesCreateWorkspaceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceUpdateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (WorkspaceUpdateDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceUpdateDetail)));
        }

        /// <summary>
        /// Updates the details of a particular workspace.  If you don&#x27;t have an id for the  workspace then POST to the /Workspaces URL to create a new workspace. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to add/update</param>
        /// <param name="body">The details for the workspace to add/update (optional)</param>
        /// <returns>Task of WorkspaceUpdateDetail</returns>
        public async System.Threading.Tasks.Task<WorkspaceUpdateDetail> WorkspacesCreateWorkspaceUpdateAsync (string dataViewName, int? workspaceId, CreateWorkspaceUpdate body = null)
        {
             ApiResponse<WorkspaceUpdateDetail> localVarResponse = await WorkspacesCreateWorkspaceUpdateAsyncWithHttpInfo(dataViewName, workspaceId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the details of a particular workspace.  If you don&#x27;t have an id for the  workspace then POST to the /Workspaces URL to create a new workspace. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to add/update</param>
        /// <param name="body">The details for the workspace to add/update (optional)</param>
        /// <returns>Task of ApiResponse (WorkspaceUpdateDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkspaceUpdateDetail>> WorkspacesCreateWorkspaceUpdateAsyncWithHttpInfo (string dataViewName, int? workspaceId, CreateWorkspaceUpdate body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesCreateWorkspaceUpdate");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesCreateWorkspaceUpdate");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesCreateWorkspaceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceUpdateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (WorkspaceUpdateDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceUpdateDetail)));
        }

        /// <summary>
        /// Deletes the specified workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to delete</param>
        /// <returns></returns>
        public void WorkspacesDeleteWorkspace (string dataViewName, int? workspaceId)
        {
             WorkspacesDeleteWorkspaceWithHttpInfo(dataViewName, workspaceId);
        }

        /// <summary>
        /// Deletes the specified workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspacesDeleteWorkspaceWithHttpInfo (string dataViewName, int? workspaceId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesDeleteWorkspace");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesDeleteWorkspace");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesDeleteWorkspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes the specified workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspacesDeleteWorkspaceAsync (string dataViewName, int? workspaceId)
        {
             await WorkspacesDeleteWorkspaceAsyncWithHttpInfo(dataViewName, workspaceId);

        }

        /// <summary>
        /// Deletes the specified workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspacesDeleteWorkspaceAsyncWithHttpInfo (string dataViewName, int? workspaceId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesDeleteWorkspace");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesDeleteWorkspace");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesDeleteWorkspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns the details of a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to view</param>
        /// <returns>WorkspaceDetail</returns>
        public WorkspaceDetail WorkspacesGetWorkspace (string dataViewName, int? workspaceId)
        {
             ApiResponse<WorkspaceDetail> localVarResponse = WorkspacesGetWorkspaceWithHttpInfo(dataViewName, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to view</param>
        /// <returns>ApiResponse of WorkspaceDetail</returns>
        public ApiResponse< WorkspaceDetail > WorkspacesGetWorkspaceWithHttpInfo (string dataViewName, int? workspaceId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesGetWorkspace");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesGetWorkspace");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesGetWorkspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (WorkspaceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceDetail)));
        }

        /// <summary>
        /// Returns the details of a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to view</param>
        /// <returns>Task of WorkspaceDetail</returns>
        public async System.Threading.Tasks.Task<WorkspaceDetail> WorkspacesGetWorkspaceAsync (string dataViewName, int? workspaceId)
        {
             ApiResponse<WorkspaceDetail> localVarResponse = await WorkspacesGetWorkspaceAsyncWithHttpInfo(dataViewName, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to view</param>
        /// <returns>Task of ApiResponse (WorkspaceDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkspaceDetail>> WorkspacesGetWorkspaceAsyncWithHttpInfo (string dataViewName, int? workspaceId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesGetWorkspace");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesGetWorkspace");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesGetWorkspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (WorkspaceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceDetail)));
        }

        /// <summary>
        /// Returns all the resources associated with a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the resources</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsWorkspaceResource</returns>
        public PagedResultsWorkspaceResource WorkspacesGetWorkspaceResources (string dataViewName, int? workspaceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsWorkspaceResource> localVarResponse = WorkspacesGetWorkspaceResourcesWithHttpInfo(dataViewName, workspaceId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all the resources associated with a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the resources</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsWorkspaceResource</returns>
        public ApiResponse< PagedResultsWorkspaceResource > WorkspacesGetWorkspaceResourcesWithHttpInfo (string dataViewName, int? workspaceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesGetWorkspaceResources");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesGetWorkspaceResources");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}/Resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesGetWorkspaceResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsWorkspaceResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsWorkspaceResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsWorkspaceResource)));
        }

        /// <summary>
        /// Returns all the resources associated with a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the resources</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsWorkspaceResource</returns>
        public async System.Threading.Tasks.Task<PagedResultsWorkspaceResource> WorkspacesGetWorkspaceResourcesAsync (string dataViewName, int? workspaceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsWorkspaceResource> localVarResponse = await WorkspacesGetWorkspaceResourcesAsyncWithHttpInfo(dataViewName, workspaceId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all the resources associated with a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the resources</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsWorkspaceResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsWorkspaceResource>> WorkspacesGetWorkspaceResourcesAsyncWithHttpInfo (string dataViewName, int? workspaceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesGetWorkspaceResources");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesGetWorkspaceResources");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}/Resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesGetWorkspaceResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsWorkspaceResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsWorkspaceResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsWorkspaceResource)));
        }

        /// <summary>
        /// Returns details of an update for a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <returns>WorkspaceUpdateDetail</returns>
        public WorkspaceUpdateDetail WorkspacesGetWorkspaceUpdate (string dataViewName, int? workspaceId, int? workspaceUpdateId)
        {
             ApiResponse<WorkspaceUpdateDetail> localVarResponse = WorkspacesGetWorkspaceUpdateWithHttpInfo(dataViewName, workspaceId, workspaceUpdateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details of an update for a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <returns>ApiResponse of WorkspaceUpdateDetail</returns>
        public ApiResponse< WorkspaceUpdateDetail > WorkspacesGetWorkspaceUpdateWithHttpInfo (string dataViewName, int? workspaceId, int? workspaceUpdateId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdate");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdate");
            // verify the required parameter 'workspaceUpdateId' is set
            if (workspaceUpdateId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceUpdateId' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdate");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}/Updates/{workspaceUpdateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceUpdateId != null) localVarPathParams.Add("workspaceUpdateId", this.Configuration.ApiClient.ParameterToString(workspaceUpdateId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesGetWorkspaceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceUpdateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (WorkspaceUpdateDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceUpdateDetail)));
        }

        /// <summary>
        /// Returns details of an update for a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <returns>Task of WorkspaceUpdateDetail</returns>
        public async System.Threading.Tasks.Task<WorkspaceUpdateDetail> WorkspacesGetWorkspaceUpdateAsync (string dataViewName, int? workspaceId, int? workspaceUpdateId)
        {
             ApiResponse<WorkspaceUpdateDetail> localVarResponse = await WorkspacesGetWorkspaceUpdateAsyncWithHttpInfo(dataViewName, workspaceId, workspaceUpdateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details of an update for a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <returns>Task of ApiResponse (WorkspaceUpdateDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkspaceUpdateDetail>> WorkspacesGetWorkspaceUpdateAsyncWithHttpInfo (string dataViewName, int? workspaceId, int? workspaceUpdateId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdate");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdate");
            // verify the required parameter 'workspaceUpdateId' is set
            if (workspaceUpdateId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceUpdateId' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdate");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}/Updates/{workspaceUpdateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceUpdateId != null) localVarPathParams.Add("workspaceUpdateId", this.Configuration.ApiClient.ParameterToString(workspaceUpdateId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesGetWorkspaceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceUpdateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (WorkspaceUpdateDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceUpdateDetail)));
        }

        /// <summary>
        /// Returns all the resources that were added to the specified update for a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsWorkspaceResource</returns>
        public PagedResultsWorkspaceResource WorkspacesGetWorkspaceUpdateAddedResources (string dataViewName, int? workspaceId, int? workspaceUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsWorkspaceResource> localVarResponse = WorkspacesGetWorkspaceUpdateAddedResourcesWithHttpInfo(dataViewName, workspaceId, workspaceUpdateId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all the resources that were added to the specified update for a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsWorkspaceResource</returns>
        public ApiResponse< PagedResultsWorkspaceResource > WorkspacesGetWorkspaceUpdateAddedResourcesWithHttpInfo (string dataViewName, int? workspaceId, int? workspaceUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdateAddedResources");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdateAddedResources");
            // verify the required parameter 'workspaceUpdateId' is set
            if (workspaceUpdateId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceUpdateId' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdateAddedResources");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}/Updates/{workspaceUpdateId}/AddedResources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceUpdateId != null) localVarPathParams.Add("workspaceUpdateId", this.Configuration.ApiClient.ParameterToString(workspaceUpdateId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesGetWorkspaceUpdateAddedResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsWorkspaceResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsWorkspaceResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsWorkspaceResource)));
        }

        /// <summary>
        /// Returns all the resources that were added to the specified update for a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsWorkspaceResource</returns>
        public async System.Threading.Tasks.Task<PagedResultsWorkspaceResource> WorkspacesGetWorkspaceUpdateAddedResourcesAsync (string dataViewName, int? workspaceId, int? workspaceUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsWorkspaceResource> localVarResponse = await WorkspacesGetWorkspaceUpdateAddedResourcesAsyncWithHttpInfo(dataViewName, workspaceId, workspaceUpdateId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all the resources that were added to the specified update for a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsWorkspaceResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsWorkspaceResource>> WorkspacesGetWorkspaceUpdateAddedResourcesAsyncWithHttpInfo (string dataViewName, int? workspaceId, int? workspaceUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdateAddedResources");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdateAddedResources");
            // verify the required parameter 'workspaceUpdateId' is set
            if (workspaceUpdateId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceUpdateId' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdateAddedResources");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}/Updates/{workspaceUpdateId}/AddedResources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceUpdateId != null) localVarPathParams.Add("workspaceUpdateId", this.Configuration.ApiClient.ParameterToString(workspaceUpdateId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesGetWorkspaceUpdateAddedResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsWorkspaceResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsWorkspaceResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsWorkspaceResource)));
        }

        /// <summary>
        /// Returns all the resources that were added to the specified update for a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsWorkspaceResource</returns>
        public PagedResultsWorkspaceResource WorkspacesGetWorkspaceUpdateRemovedResources (string dataViewName, int? workspaceId, int? workspaceUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsWorkspaceResource> localVarResponse = WorkspacesGetWorkspaceUpdateRemovedResourcesWithHttpInfo(dataViewName, workspaceId, workspaceUpdateId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all the resources that were added to the specified update for a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsWorkspaceResource</returns>
        public ApiResponse< PagedResultsWorkspaceResource > WorkspacesGetWorkspaceUpdateRemovedResourcesWithHttpInfo (string dataViewName, int? workspaceId, int? workspaceUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdateRemovedResources");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdateRemovedResources");
            // verify the required parameter 'workspaceUpdateId' is set
            if (workspaceUpdateId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceUpdateId' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdateRemovedResources");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}/Updates/{workspaceUpdateId}/RemovedResources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceUpdateId != null) localVarPathParams.Add("workspaceUpdateId", this.Configuration.ApiClient.ParameterToString(workspaceUpdateId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesGetWorkspaceUpdateRemovedResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsWorkspaceResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsWorkspaceResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsWorkspaceResource)));
        }

        /// <summary>
        /// Returns all the resources that were added to the specified update for a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsWorkspaceResource</returns>
        public async System.Threading.Tasks.Task<PagedResultsWorkspaceResource> WorkspacesGetWorkspaceUpdateRemovedResourcesAsync (string dataViewName, int? workspaceId, int? workspaceUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsWorkspaceResource> localVarResponse = await WorkspacesGetWorkspaceUpdateRemovedResourcesAsyncWithHttpInfo(dataViewName, workspaceId, workspaceUpdateId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all the resources that were added to the specified update for a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace that contains the update</param>
        /// <param name="workspaceUpdateId">The id of the update for the workspace</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsWorkspaceResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsWorkspaceResource>> WorkspacesGetWorkspaceUpdateRemovedResourcesAsyncWithHttpInfo (string dataViewName, int? workspaceId, int? workspaceUpdateId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdateRemovedResources");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdateRemovedResources");
            // verify the required parameter 'workspaceUpdateId' is set
            if (workspaceUpdateId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceUpdateId' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdateRemovedResources");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}/Updates/{workspaceUpdateId}/RemovedResources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceUpdateId != null) localVarPathParams.Add("workspaceUpdateId", this.Configuration.ApiClient.ParameterToString(workspaceUpdateId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesGetWorkspaceUpdateRemovedResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsWorkspaceResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsWorkspaceResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsWorkspaceResource)));
        }

        /// <summary>
        /// Returns a summary of the updates to a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsWorkspaceUpdateSummary</returns>
        public PagedResultsWorkspaceUpdateSummary WorkspacesGetWorkspaceUpdates (string dataViewName, int? workspaceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsWorkspaceUpdateSummary> localVarResponse = WorkspacesGetWorkspaceUpdatesWithHttpInfo(dataViewName, workspaceId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a summary of the updates to a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsWorkspaceUpdateSummary</returns>
        public ApiResponse< PagedResultsWorkspaceUpdateSummary > WorkspacesGetWorkspaceUpdatesWithHttpInfo (string dataViewName, int? workspaceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdates");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdates");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesGetWorkspaceUpdates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsWorkspaceUpdateSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsWorkspaceUpdateSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsWorkspaceUpdateSummary)));
        }

        /// <summary>
        /// Returns a summary of the updates to a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsWorkspaceUpdateSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsWorkspaceUpdateSummary> WorkspacesGetWorkspaceUpdatesAsync (string dataViewName, int? workspaceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsWorkspaceUpdateSummary> localVarResponse = await WorkspacesGetWorkspaceUpdatesAsyncWithHttpInfo(dataViewName, workspaceId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a summary of the updates to a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsWorkspaceUpdateSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsWorkspaceUpdateSummary>> WorkspacesGetWorkspaceUpdatesAsyncWithHttpInfo (string dataViewName, int? workspaceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdates");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesGetWorkspaceUpdates");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesGetWorkspaceUpdates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsWorkspaceUpdateSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsWorkspaceUpdateSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsWorkspaceUpdateSummary)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each workspace in the DataView. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsWorkspaceSummary</returns>
        public PagedResultsWorkspaceSummary WorkspacesGetWorkspaces (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsWorkspaceSummary> localVarResponse = WorkspacesGetWorkspacesWithHttpInfo(dataViewName, includeDeleted, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each workspace in the DataView. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsWorkspaceSummary</returns>
        public ApiResponse< PagedResultsWorkspaceSummary > WorkspacesGetWorkspacesWithHttpInfo (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesGetWorkspaces");

            var localVarPath = "./{dataViewName}/Workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesGetWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsWorkspaceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsWorkspaceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsWorkspaceSummary)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each workspace in the DataView. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsWorkspaceSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsWorkspaceSummary> WorkspacesGetWorkspacesAsync (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsWorkspaceSummary> localVarResponse = await WorkspacesGetWorkspacesAsyncWithHttpInfo(dataViewName, includeDeleted, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each workspace in the DataView. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsWorkspaceSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsWorkspaceSummary>> WorkspacesGetWorkspacesAsyncWithHttpInfo (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesGetWorkspaces");

            var localVarPath = "./{dataViewName}/Workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesGetWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsWorkspaceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsWorkspaceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsWorkspaceSummary)));
        }

        /// <summary>
        /// Transfer ownership of an workspace from the current user to a new owner 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to transfer.</param>
        /// <param name="body">The details for transferring ownership of the workspace. (optional)</param>
        /// <returns>WorkspaceDetail</returns>
        public WorkspaceDetail WorkspacesTransferWorkspaceOwnership (string dataViewName, int? workspaceId, TransferWorkspaceOwnershipDetails body = null)
        {
             ApiResponse<WorkspaceDetail> localVarResponse = WorkspacesTransferWorkspaceOwnershipWithHttpInfo(dataViewName, workspaceId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer ownership of an workspace from the current user to a new owner 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to transfer.</param>
        /// <param name="body">The details for transferring ownership of the workspace. (optional)</param>
        /// <returns>ApiResponse of WorkspaceDetail</returns>
        public ApiResponse< WorkspaceDetail > WorkspacesTransferWorkspaceOwnershipWithHttpInfo (string dataViewName, int? workspaceId, TransferWorkspaceOwnershipDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesTransferWorkspaceOwnership");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesTransferWorkspaceOwnership");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}/TransferOwnership";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesTransferWorkspaceOwnership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (WorkspaceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceDetail)));
        }

        /// <summary>
        /// Transfer ownership of an workspace from the current user to a new owner 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to transfer.</param>
        /// <param name="body">The details for transferring ownership of the workspace. (optional)</param>
        /// <returns>Task of WorkspaceDetail</returns>
        public async System.Threading.Tasks.Task<WorkspaceDetail> WorkspacesTransferWorkspaceOwnershipAsync (string dataViewName, int? workspaceId, TransferWorkspaceOwnershipDetails body = null)
        {
             ApiResponse<WorkspaceDetail> localVarResponse = await WorkspacesTransferWorkspaceOwnershipAsyncWithHttpInfo(dataViewName, workspaceId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer ownership of an workspace from the current user to a new owner 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="workspaceId">The id of the workspace to transfer.</param>
        /// <param name="body">The details for transferring ownership of the workspace. (optional)</param>
        /// <returns>Task of ApiResponse (WorkspaceDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkspaceDetail>> WorkspacesTransferWorkspaceOwnershipAsyncWithHttpInfo (string dataViewName, int? workspaceId, TransferWorkspaceOwnershipDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling WorkspacesApi->WorkspacesTransferWorkspaceOwnership");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspacesApi->WorkspacesTransferWorkspaceOwnership");

            var localVarPath = "./{dataViewName}/Workspaces/{workspaceId}/TransferOwnership";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesTransferWorkspaceOwnership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (WorkspaceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceDetail)));
        }

    }
}
