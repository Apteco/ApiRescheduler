/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IFastStatsJobsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details to calcuate the stats with (optional)</param>
        /// <returns>ProcessingTimeStatistics</returns>
        ProcessingTimeStatistics FastStatsJobsCalculateProcessingTimeStatsForSystemSync (string dataViewName, string systemName, ProcessingTimeStatisticsDetails body = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details to calcuate the stats with (optional)</param>
        /// <returns>ApiResponse of ProcessingTimeStatistics</returns>
        ApiResponse<ProcessingTimeStatistics> FastStatsJobsCalculateProcessingTimeStatsForSystemSyncWithHttpInfo (string dataViewName, string systemName, ProcessingTimeStatisticsDetails body = null);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for all systems in a particular DataView.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details to calcuate the stats with (optional)</param>
        /// <returns>ProcessingTimeStatistics</returns>
        ProcessingTimeStatistics FastStatsJobsCalculateProcessingTimeStatsSync (string dataViewName, ProcessingTimeStatisticsDetails body = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for all systems in a particular DataView.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details to calcuate the stats with (optional)</param>
        /// <returns>ApiResponse of ProcessingTimeStatistics</returns>
        ApiResponse<ProcessingTimeStatistics> FastStatsJobsCalculateProcessingTimeStatsSyncWithHttpInfo (string dataViewName, ProcessingTimeStatisticsDetails body = null);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Clear the hash value column of cache in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns></returns>
        void FastStatsJobsClearCommandHash (string dataViewName, string systemName);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Clear the hash value column of cache in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FastStatsJobsClearCommandHashWithHttpInfo (string dataViewName, string systemName);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets details for a particular job in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system the job is in</param>
        /// <param name="jobId">The id of the FastStats job</param>
        /// <param name="returnRequest">Whether to return the request XML for the job.  Defaults to false (optional)</param>
        /// <param name="returnResults">Whether to return the result XML for the job.  Defaults to false (optional)</param>
        /// <returns>JobDetail</returns>
        JobDetail FastStatsJobsGetFastStatsJob (string dataViewName, string systemName, int? jobId, bool? returnRequest = null, bool? returnResults = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets details for a particular job in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system the job is in</param>
        /// <param name="jobId">The id of the FastStats job</param>
        /// <param name="returnRequest">Whether to return the request XML for the job.  Defaults to false (optional)</param>
        /// <param name="returnResults">Whether to return the result XML for the job.  Defaults to false (optional)</param>
        /// <returns>ApiResponse of JobDetail</returns>
        ApiResponse<JobDetail> FastStatsJobsGetFastStatsJobWithHttpInfo (string dataViewName, string systemName, int? jobId, bool? returnRequest = null, bool? returnResults = null);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for all systems in a particular DataView.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsJobSummary</returns>
        PagedResultsJobSummary FastStatsJobsGetFastStatsJobs (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for all systems in a particular DataView.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsJobSummary</returns>
        ApiResponse<PagedResultsJobSummary> FastStatsJobsGetFastStatsJobsWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system to return jobs for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsJobSummary</returns>
        PagedResultsJobSummary FastStatsJobsGetFastStatsJobsForSystem (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system to return jobs for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsJobSummary</returns>
        ApiResponse<PagedResultsJobSummary> FastStatsJobsGetFastStatsJobsForSystemWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Submit a new job in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system the job is in</param>
        /// <param name="body">The details of the job wanting to be created (optional)</param>
        /// <returns>int?</returns>
        int? FastStatsJobsSubmitFastStatsJob (string dataViewName, string systemName, CreateJob body = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Submit a new job in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system the job is in</param>
        /// <param name="body">The details of the job wanting to be created (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> FastStatsJobsSubmitFastStatsJobWithHttpInfo (string dataViewName, string systemName, CreateJob body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details to calcuate the stats with (optional)</param>
        /// <returns>Task of ProcessingTimeStatistics</returns>
        System.Threading.Tasks.Task<ProcessingTimeStatistics> FastStatsJobsCalculateProcessingTimeStatsForSystemSyncAsync (string dataViewName, string systemName, ProcessingTimeStatisticsDetails body = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details to calcuate the stats with (optional)</param>
        /// <returns>Task of ApiResponse (ProcessingTimeStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessingTimeStatistics>> FastStatsJobsCalculateProcessingTimeStatsForSystemSyncAsyncWithHttpInfo (string dataViewName, string systemName, ProcessingTimeStatisticsDetails body = null);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for all systems in a particular DataView.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details to calcuate the stats with (optional)</param>
        /// <returns>Task of ProcessingTimeStatistics</returns>
        System.Threading.Tasks.Task<ProcessingTimeStatistics> FastStatsJobsCalculateProcessingTimeStatsSyncAsync (string dataViewName, ProcessingTimeStatisticsDetails body = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for all systems in a particular DataView.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details to calcuate the stats with (optional)</param>
        /// <returns>Task of ApiResponse (ProcessingTimeStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessingTimeStatistics>> FastStatsJobsCalculateProcessingTimeStatsSyncAsyncWithHttpInfo (string dataViewName, ProcessingTimeStatisticsDetails body = null);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Clear the hash value column of cache in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FastStatsJobsClearCommandHashAsync (string dataViewName, string systemName);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Clear the hash value column of cache in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FastStatsJobsClearCommandHashAsyncWithHttpInfo (string dataViewName, string systemName);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets details for a particular job in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system the job is in</param>
        /// <param name="jobId">The id of the FastStats job</param>
        /// <param name="returnRequest">Whether to return the request XML for the job.  Defaults to false (optional)</param>
        /// <param name="returnResults">Whether to return the result XML for the job.  Defaults to false (optional)</param>
        /// <returns>Task of JobDetail</returns>
        System.Threading.Tasks.Task<JobDetail> FastStatsJobsGetFastStatsJobAsync (string dataViewName, string systemName, int? jobId, bool? returnRequest = null, bool? returnResults = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets details for a particular job in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system the job is in</param>
        /// <param name="jobId">The id of the FastStats job</param>
        /// <param name="returnRequest">Whether to return the request XML for the job.  Defaults to false (optional)</param>
        /// <param name="returnResults">Whether to return the result XML for the job.  Defaults to false (optional)</param>
        /// <returns>Task of ApiResponse (JobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobDetail>> FastStatsJobsGetFastStatsJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId, bool? returnRequest = null, bool? returnResults = null);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for all systems in a particular DataView.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsJobSummary</returns>
        System.Threading.Tasks.Task<PagedResultsJobSummary> FastStatsJobsGetFastStatsJobsAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for all systems in a particular DataView.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsJobSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsJobSummary>> FastStatsJobsGetFastStatsJobsAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system to return jobs for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsJobSummary</returns>
        System.Threading.Tasks.Task<PagedResultsJobSummary> FastStatsJobsGetFastStatsJobsForSystemAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system to return jobs for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsJobSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsJobSummary>> FastStatsJobsGetFastStatsJobsForSystemAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Submit a new job in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system the job is in</param>
        /// <param name="body">The details of the job wanting to be created (optional)</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> FastStatsJobsSubmitFastStatsJobAsync (string dataViewName, string systemName, CreateJob body = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Submit a new job in the FastStats job queue for the given system.
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system the job is in</param>
        /// <param name="body">The details of the job wanting to be created (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> FastStatsJobsSubmitFastStatsJobAsyncWithHttpInfo (string dataViewName, string systemName, CreateJob body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class FastStatsJobsApi : IFastStatsJobsApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FastStatsJobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FastStatsJobsApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FastStatsJobsApi"/> class
        /// </summary>
        /// <returns></returns>
        public FastStatsJobsApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FastStatsJobsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FastStatsJobsApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details to calcuate the stats with (optional)</param>
        /// <returns>ProcessingTimeStatistics</returns>
        public ProcessingTimeStatistics FastStatsJobsCalculateProcessingTimeStatsForSystemSync (string dataViewName, string systemName, ProcessingTimeStatisticsDetails body = null)
        {
             ApiResponse<ProcessingTimeStatistics> localVarResponse = FastStatsJobsCalculateProcessingTimeStatsForSystemSyncWithHttpInfo(dataViewName, systemName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details to calcuate the stats with (optional)</param>
        /// <returns>ApiResponse of ProcessingTimeStatistics</returns>
        public ApiResponse< ProcessingTimeStatistics > FastStatsJobsCalculateProcessingTimeStatsForSystemSyncWithHttpInfo (string dataViewName, string systemName, ProcessingTimeStatisticsDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsJobsApi->FastStatsJobsCalculateProcessingTimeStatsForSystemSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsJobsApi->FastStatsJobsCalculateProcessingTimeStatsForSystemSync");

            var localVarPath = "./{dataViewName}/FastStatsJobs/{systemName}/CalculateProcessingTimeStatsSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsJobsCalculateProcessingTimeStatsForSystemSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessingTimeStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ProcessingTimeStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessingTimeStatistics)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details to calcuate the stats with (optional)</param>
        /// <returns>Task of ProcessingTimeStatistics</returns>
        public async System.Threading.Tasks.Task<ProcessingTimeStatistics> FastStatsJobsCalculateProcessingTimeStatsForSystemSyncAsync (string dataViewName, string systemName, ProcessingTimeStatisticsDetails body = null)
        {
             ApiResponse<ProcessingTimeStatistics> localVarResponse = await FastStatsJobsCalculateProcessingTimeStatsForSystemSyncAsyncWithHttpInfo(dataViewName, systemName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details to calcuate the stats with (optional)</param>
        /// <returns>Task of ApiResponse (ProcessingTimeStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessingTimeStatistics>> FastStatsJobsCalculateProcessingTimeStatsForSystemSyncAsyncWithHttpInfo (string dataViewName, string systemName, ProcessingTimeStatisticsDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsJobsApi->FastStatsJobsCalculateProcessingTimeStatsForSystemSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsJobsApi->FastStatsJobsCalculateProcessingTimeStatsForSystemSync");

            var localVarPath = "./{dataViewName}/FastStatsJobs/{systemName}/CalculateProcessingTimeStatsSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsJobsCalculateProcessingTimeStatsForSystemSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessingTimeStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ProcessingTimeStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessingTimeStatistics)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for all systems in a particular DataView. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details to calcuate the stats with (optional)</param>
        /// <returns>ProcessingTimeStatistics</returns>
        public ProcessingTimeStatistics FastStatsJobsCalculateProcessingTimeStatsSync (string dataViewName, ProcessingTimeStatisticsDetails body = null)
        {
             ApiResponse<ProcessingTimeStatistics> localVarResponse = FastStatsJobsCalculateProcessingTimeStatsSyncWithHttpInfo(dataViewName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for all systems in a particular DataView. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details to calcuate the stats with (optional)</param>
        /// <returns>ApiResponse of ProcessingTimeStatistics</returns>
        public ApiResponse< ProcessingTimeStatistics > FastStatsJobsCalculateProcessingTimeStatsSyncWithHttpInfo (string dataViewName, ProcessingTimeStatisticsDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsJobsApi->FastStatsJobsCalculateProcessingTimeStatsSync");

            var localVarPath = "./{dataViewName}/FastStatsJobs/CalculateProcessingTimeStatsSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsJobsCalculateProcessingTimeStatsSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessingTimeStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ProcessingTimeStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessingTimeStatistics)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for all systems in a particular DataView. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details to calcuate the stats with (optional)</param>
        /// <returns>Task of ProcessingTimeStatistics</returns>
        public async System.Threading.Tasks.Task<ProcessingTimeStatistics> FastStatsJobsCalculateProcessingTimeStatsSyncAsync (string dataViewName, ProcessingTimeStatisticsDetails body = null)
        {
             ApiResponse<ProcessingTimeStatistics> localVarResponse = await FastStatsJobsCalculateProcessingTimeStatsSyncAsyncWithHttpInfo(dataViewName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for all systems in a particular DataView. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details to calcuate the stats with (optional)</param>
        /// <returns>Task of ApiResponse (ProcessingTimeStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessingTimeStatistics>> FastStatsJobsCalculateProcessingTimeStatsSyncAsyncWithHttpInfo (string dataViewName, ProcessingTimeStatisticsDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsJobsApi->FastStatsJobsCalculateProcessingTimeStatsSync");

            var localVarPath = "./{dataViewName}/FastStatsJobs/CalculateProcessingTimeStatsSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsJobsCalculateProcessingTimeStatsSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessingTimeStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ProcessingTimeStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessingTimeStatistics)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Clear the hash value column of cache in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns></returns>
        public void FastStatsJobsClearCommandHash (string dataViewName, string systemName)
        {
             FastStatsJobsClearCommandHashWithHttpInfo(dataViewName, systemName);
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Clear the hash value column of cache in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FastStatsJobsClearCommandHashWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsJobsApi->FastStatsJobsClearCommandHash");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsJobsApi->FastStatsJobsClearCommandHash");

            var localVarPath = "./{dataViewName}/FastStatsJobs/{systemName}/ClearCommandHash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsJobsClearCommandHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Clear the hash value column of cache in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FastStatsJobsClearCommandHashAsync (string dataViewName, string systemName)
        {
             await FastStatsJobsClearCommandHashAsyncWithHttpInfo(dataViewName, systemName);

        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Clear the hash value column of cache in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FastStatsJobsClearCommandHashAsyncWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsJobsApi->FastStatsJobsClearCommandHash");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsJobsApi->FastStatsJobsClearCommandHash");

            var localVarPath = "./{dataViewName}/FastStatsJobs/{systemName}/ClearCommandHash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsJobsClearCommandHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets details for a particular job in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system the job is in</param>
        /// <param name="jobId">The id of the FastStats job</param>
        /// <param name="returnRequest">Whether to return the request XML for the job.  Defaults to false (optional)</param>
        /// <param name="returnResults">Whether to return the result XML for the job.  Defaults to false (optional)</param>
        /// <returns>JobDetail</returns>
        public JobDetail FastStatsJobsGetFastStatsJob (string dataViewName, string systemName, int? jobId, bool? returnRequest = null, bool? returnResults = null)
        {
             ApiResponse<JobDetail> localVarResponse = FastStatsJobsGetFastStatsJobWithHttpInfo(dataViewName, systemName, jobId, returnRequest, returnResults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets details for a particular job in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system the job is in</param>
        /// <param name="jobId">The id of the FastStats job</param>
        /// <param name="returnRequest">Whether to return the request XML for the job.  Defaults to false (optional)</param>
        /// <param name="returnResults">Whether to return the result XML for the job.  Defaults to false (optional)</param>
        /// <returns>ApiResponse of JobDetail</returns>
        public ApiResponse< JobDetail > FastStatsJobsGetFastStatsJobWithHttpInfo (string dataViewName, string systemName, int? jobId, bool? returnRequest = null, bool? returnResults = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsJobsApi->FastStatsJobsGetFastStatsJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsJobsApi->FastStatsJobsGetFastStatsJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling FastStatsJobsApi->FastStatsJobsGetFastStatsJob");

            var localVarPath = "./{dataViewName}/FastStatsJobs/{systemName}/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (returnRequest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "returnRequest", returnRequest)); // query parameter
            if (returnResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "returnResults", returnResults)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsJobsGetFastStatsJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobDetail)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets details for a particular job in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system the job is in</param>
        /// <param name="jobId">The id of the FastStats job</param>
        /// <param name="returnRequest">Whether to return the request XML for the job.  Defaults to false (optional)</param>
        /// <param name="returnResults">Whether to return the result XML for the job.  Defaults to false (optional)</param>
        /// <returns>Task of JobDetail</returns>
        public async System.Threading.Tasks.Task<JobDetail> FastStatsJobsGetFastStatsJobAsync (string dataViewName, string systemName, int? jobId, bool? returnRequest = null, bool? returnResults = null)
        {
             ApiResponse<JobDetail> localVarResponse = await FastStatsJobsGetFastStatsJobAsyncWithHttpInfo(dataViewName, systemName, jobId, returnRequest, returnResults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets details for a particular job in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system the job is in</param>
        /// <param name="jobId">The id of the FastStats job</param>
        /// <param name="returnRequest">Whether to return the request XML for the job.  Defaults to false (optional)</param>
        /// <param name="returnResults">Whether to return the result XML for the job.  Defaults to false (optional)</param>
        /// <returns>Task of ApiResponse (JobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobDetail>> FastStatsJobsGetFastStatsJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId, bool? returnRequest = null, bool? returnResults = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsJobsApi->FastStatsJobsGetFastStatsJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsJobsApi->FastStatsJobsGetFastStatsJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling FastStatsJobsApi->FastStatsJobsGetFastStatsJob");

            var localVarPath = "./{dataViewName}/FastStatsJobs/{systemName}/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (returnRequest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "returnRequest", returnRequest)); // query parameter
            if (returnResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "returnResults", returnResults)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsJobsGetFastStatsJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobDetail)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for all systems in a particular DataView. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsJobSummary</returns>
        public PagedResultsJobSummary FastStatsJobsGetFastStatsJobs (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsJobSummary> localVarResponse = FastStatsJobsGetFastStatsJobsWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for all systems in a particular DataView. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsJobSummary</returns>
        public ApiResponse< PagedResultsJobSummary > FastStatsJobsGetFastStatsJobsWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsJobsApi->FastStatsJobsGetFastStatsJobs");

            var localVarPath = "./{dataViewName}/FastStatsJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsJobsGetFastStatsJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsJobSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsJobSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsJobSummary)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for all systems in a particular DataView. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsJobSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsJobSummary> FastStatsJobsGetFastStatsJobsAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsJobSummary> localVarResponse = await FastStatsJobsGetFastStatsJobsAsyncWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for all systems in a particular DataView. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsJobSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsJobSummary>> FastStatsJobsGetFastStatsJobsAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsJobsApi->FastStatsJobsGetFastStatsJobs");

            var localVarPath = "./{dataViewName}/FastStatsJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsJobsGetFastStatsJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsJobSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsJobSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsJobSummary)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system to return jobs for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsJobSummary</returns>
        public PagedResultsJobSummary FastStatsJobsGetFastStatsJobsForSystem (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsJobSummary> localVarResponse = FastStatsJobsGetFastStatsJobsForSystemWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system to return jobs for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsJobSummary</returns>
        public ApiResponse< PagedResultsJobSummary > FastStatsJobsGetFastStatsJobsForSystemWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsJobsApi->FastStatsJobsGetFastStatsJobsForSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsJobsApi->FastStatsJobsGetFastStatsJobsForSystem");

            var localVarPath = "./{dataViewName}/FastStatsJobs/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsJobsGetFastStatsJobsForSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsJobSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsJobSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsJobSummary)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system to return jobs for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsJobSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsJobSummary> FastStatsJobsGetFastStatsJobsForSystemAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsJobSummary> localVarResponse = await FastStatsJobsGetFastStatsJobsForSystemAsyncWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system to return jobs for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsJobSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsJobSummary>> FastStatsJobsGetFastStatsJobsForSystemAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsJobsApi->FastStatsJobsGetFastStatsJobsForSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsJobsApi->FastStatsJobsGetFastStatsJobsForSystem");

            var localVarPath = "./{dataViewName}/FastStatsJobs/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsJobsGetFastStatsJobsForSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsJobSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsJobSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsJobSummary)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Submit a new job in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system the job is in</param>
        /// <param name="body">The details of the job wanting to be created (optional)</param>
        /// <returns>int?</returns>
        public int? FastStatsJobsSubmitFastStatsJob (string dataViewName, string systemName, CreateJob body = null)
        {
             ApiResponse<int?> localVarResponse = FastStatsJobsSubmitFastStatsJobWithHttpInfo(dataViewName, systemName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Submit a new job in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system the job is in</param>
        /// <param name="body">The details of the job wanting to be created (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > FastStatsJobsSubmitFastStatsJobWithHttpInfo (string dataViewName, string systemName, CreateJob body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsJobsApi->FastStatsJobsSubmitFastStatsJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsJobsApi->FastStatsJobsSubmitFastStatsJob");

            var localVarPath = "./{dataViewName}/FastStatsJobs/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsJobsSubmitFastStatsJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Submit a new job in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system the job is in</param>
        /// <param name="body">The details of the job wanting to be created (optional)</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> FastStatsJobsSubmitFastStatsJobAsync (string dataViewName, string systemName, CreateJob body = null)
        {
             ApiResponse<int?> localVarResponse = await FastStatsJobsSubmitFastStatsJobAsyncWithHttpInfo(dataViewName, systemName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Submit a new job in the FastStats job queue for the given system. EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the system the job is in</param>
        /// <param name="body">The details of the job wanting to be created (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> FastStatsJobsSubmitFastStatsJobAsyncWithHttpInfo (string dataViewName, string systemName, CreateJob body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsJobsApi->FastStatsJobsSubmitFastStatsJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsJobsApi->FastStatsJobsSubmitFastStatsJob");

            var localVarPath = "./{dataViewName}/FastStatsJobs/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsJobsSubmitFastStatsJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

    }
}
