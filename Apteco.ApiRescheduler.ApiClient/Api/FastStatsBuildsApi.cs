/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IFastStatsBuildsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Cancel a running data purchasing job
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        void FastStatsBuildsCancelFastStatsBuildJob (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Cancel a running data purchasing job
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FastStatsBuildsCancelFastStatsBuildJobWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Create a new job to builds a FastStats system from the given definition
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details needed to build the system (optional)</param>
        /// <returns>BuildJobDetail</returns>
        BuildJobDetail FastStatsBuildsCreateFastStatsBuildJob (string dataViewName, string systemName, BuildDefinition body = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Create a new job to builds a FastStats system from the given definition
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details needed to build the system (optional)</param>
        /// <returns>ApiResponse of BuildJobDetail</returns>
        ApiResponse<BuildJobDetail> FastStatsBuildsCreateFastStatsBuildJobWithHttpInfo (string dataViewName, string systemName, BuildDefinition body = null);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Builds a FastStats system from the given definition
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details needed to build the system (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the build service&#x27;s configuration (optional)</param>
        /// <returns>BuildResult</returns>
        BuildResult FastStatsBuildsFastStatsBuildSync (string dataViewName, string systemName, BuildDefinition body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Builds a FastStats system from the given definition
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details needed to build the system (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the build service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of BuildResult</returns>
        ApiResponse<BuildResult> FastStatsBuildsFastStatsBuildSyncWithHttpInfo (string dataViewName, string systemName, BuildDefinition body = null, int? timeoutInSeconds = null);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Get the status of a running FastStats build job
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>BuildJobDetail</returns>
        BuildJobDetail FastStatsBuildsGetFastStatsBuildJob (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Get the status of a running FastStats build job
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of BuildJobDetail</returns>
        ApiResponse<BuildJobDetail> FastStatsBuildsGetFastStatsBuildJobWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Get the status of salesforce credentials token for a system
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>SalesforceTokenStatus</returns>
        SalesforceTokenStatus FastStatsBuildsGetSalesforceCredentialsStatus (string dataViewName, string systemName);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Get the status of salesforce credentials token for a system
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of SalesforceTokenStatus</returns>
        ApiResponse<SalesforceTokenStatus> FastStatsBuildsGetSalesforceCredentialsStatusWithHttpInfo (string dataViewName, string systemName);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Updates SystemBuildSettings at the given path
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The system name to apply the settings for</param>
        /// <param name="type">The type of the settings</param>
        /// <param name="body">The contents of the SystemBuildSettings (optional)</param>
        /// <returns>Object</returns>
        Object FastStatsBuildsSetSystemBuildSettings (string dataViewName, string systemName, string type, Object body = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Updates SystemBuildSettings at the given path
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The system name to apply the settings for</param>
        /// <param name="type">The type of the settings</param>
        /// <param name="body">The contents of the SystemBuildSettings (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> FastStatsBuildsSetSystemBuildSettingsWithHttpInfo (string dataViewName, string systemName, string type, Object body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Cancel a running data purchasing job
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FastStatsBuildsCancelFastStatsBuildJobAsync (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Cancel a running data purchasing job
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FastStatsBuildsCancelFastStatsBuildJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Create a new job to builds a FastStats system from the given definition
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details needed to build the system (optional)</param>
        /// <returns>Task of BuildJobDetail</returns>
        System.Threading.Tasks.Task<BuildJobDetail> FastStatsBuildsCreateFastStatsBuildJobAsync (string dataViewName, string systemName, BuildDefinition body = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Create a new job to builds a FastStats system from the given definition
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details needed to build the system (optional)</param>
        /// <returns>Task of ApiResponse (BuildJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildJobDetail>> FastStatsBuildsCreateFastStatsBuildJobAsyncWithHttpInfo (string dataViewName, string systemName, BuildDefinition body = null);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Builds a FastStats system from the given definition
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details needed to build the system (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the build service&#x27;s configuration (optional)</param>
        /// <returns>Task of BuildResult</returns>
        System.Threading.Tasks.Task<BuildResult> FastStatsBuildsFastStatsBuildSyncAsync (string dataViewName, string systemName, BuildDefinition body = null, int? timeoutInSeconds = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Builds a FastStats system from the given definition
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details needed to build the system (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the build service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (BuildResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildResult>> FastStatsBuildsFastStatsBuildSyncAsyncWithHttpInfo (string dataViewName, string systemName, BuildDefinition body = null, int? timeoutInSeconds = null);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Get the status of a running FastStats build job
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of BuildJobDetail</returns>
        System.Threading.Tasks.Task<BuildJobDetail> FastStatsBuildsGetFastStatsBuildJobAsync (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Get the status of a running FastStats build job
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (BuildJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildJobDetail>> FastStatsBuildsGetFastStatsBuildJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Get the status of salesforce credentials token for a system
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of SalesforceTokenStatus</returns>
        System.Threading.Tasks.Task<SalesforceTokenStatus> FastStatsBuildsGetSalesforceCredentialsStatusAsync (string dataViewName, string systemName);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Get the status of salesforce credentials token for a system
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse (SalesforceTokenStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalesforceTokenStatus>> FastStatsBuildsGetSalesforceCredentialsStatusAsyncWithHttpInfo (string dataViewName, string systemName);
        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Updates SystemBuildSettings at the given path
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The system name to apply the settings for</param>
        /// <param name="type">The type of the settings</param>
        /// <param name="body">The contents of the SystemBuildSettings (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> FastStatsBuildsSetSystemBuildSettingsAsync (string dataViewName, string systemName, string type, Object body = null);

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Updates SystemBuildSettings at the given path
        /// </summary>
        /// <remarks>
        /// EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The system name to apply the settings for</param>
        /// <param name="type">The type of the settings</param>
        /// <param name="body">The contents of the SystemBuildSettings (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FastStatsBuildsSetSystemBuildSettingsAsyncWithHttpInfo (string dataViewName, string systemName, string type, Object body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class FastStatsBuildsApi : IFastStatsBuildsApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FastStatsBuildsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FastStatsBuildsApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FastStatsBuildsApi"/> class
        /// </summary>
        /// <returns></returns>
        public FastStatsBuildsApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FastStatsBuildsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FastStatsBuildsApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Cancel a running data purchasing job EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        public void FastStatsBuildsCancelFastStatsBuildJob (string dataViewName, string systemName, int? jobId)
        {
             FastStatsBuildsCancelFastStatsBuildJobWithHttpInfo(dataViewName, systemName, jobId);
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Cancel a running data purchasing job EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FastStatsBuildsCancelFastStatsBuildJobWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsBuildsApi->FastStatsBuildsCancelFastStatsBuildJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsBuildsApi->FastStatsBuildsCancelFastStatsBuildJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling FastStatsBuildsApi->FastStatsBuildsCancelFastStatsBuildJob");

            var localVarPath = "./{dataViewName}/FastStatsBuilds/{systemName}/BuildJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsBuildsCancelFastStatsBuildJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Cancel a running data purchasing job EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FastStatsBuildsCancelFastStatsBuildJobAsync (string dataViewName, string systemName, int? jobId)
        {
             await FastStatsBuildsCancelFastStatsBuildJobAsyncWithHttpInfo(dataViewName, systemName, jobId);

        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Cancel a running data purchasing job EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FastStatsBuildsCancelFastStatsBuildJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsBuildsApi->FastStatsBuildsCancelFastStatsBuildJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsBuildsApi->FastStatsBuildsCancelFastStatsBuildJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling FastStatsBuildsApi->FastStatsBuildsCancelFastStatsBuildJob");

            var localVarPath = "./{dataViewName}/FastStatsBuilds/{systemName}/BuildJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsBuildsCancelFastStatsBuildJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Create a new job to builds a FastStats system from the given definition EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details needed to build the system (optional)</param>
        /// <returns>BuildJobDetail</returns>
        public BuildJobDetail FastStatsBuildsCreateFastStatsBuildJob (string dataViewName, string systemName, BuildDefinition body = null)
        {
             ApiResponse<BuildJobDetail> localVarResponse = FastStatsBuildsCreateFastStatsBuildJobWithHttpInfo(dataViewName, systemName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Create a new job to builds a FastStats system from the given definition EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details needed to build the system (optional)</param>
        /// <returns>ApiResponse of BuildJobDetail</returns>
        public ApiResponse< BuildJobDetail > FastStatsBuildsCreateFastStatsBuildJobWithHttpInfo (string dataViewName, string systemName, BuildDefinition body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsBuildsApi->FastStatsBuildsCreateFastStatsBuildJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsBuildsApi->FastStatsBuildsCreateFastStatsBuildJob");

            var localVarPath = "./{dataViewName}/FastStatsBuilds/{systemName}/BuildJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsBuildsCreateFastStatsBuildJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BuildJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildJobDetail)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Create a new job to builds a FastStats system from the given definition EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details needed to build the system (optional)</param>
        /// <returns>Task of BuildJobDetail</returns>
        public async System.Threading.Tasks.Task<BuildJobDetail> FastStatsBuildsCreateFastStatsBuildJobAsync (string dataViewName, string systemName, BuildDefinition body = null)
        {
             ApiResponse<BuildJobDetail> localVarResponse = await FastStatsBuildsCreateFastStatsBuildJobAsyncWithHttpInfo(dataViewName, systemName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Create a new job to builds a FastStats system from the given definition EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details needed to build the system (optional)</param>
        /// <returns>Task of ApiResponse (BuildJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildJobDetail>> FastStatsBuildsCreateFastStatsBuildJobAsyncWithHttpInfo (string dataViewName, string systemName, BuildDefinition body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsBuildsApi->FastStatsBuildsCreateFastStatsBuildJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsBuildsApi->FastStatsBuildsCreateFastStatsBuildJob");

            var localVarPath = "./{dataViewName}/FastStatsBuilds/{systemName}/BuildJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsBuildsCreateFastStatsBuildJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BuildJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildJobDetail)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Builds a FastStats system from the given definition EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details needed to build the system (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the build service&#x27;s configuration (optional)</param>
        /// <returns>BuildResult</returns>
        public BuildResult FastStatsBuildsFastStatsBuildSync (string dataViewName, string systemName, BuildDefinition body = null, int? timeoutInSeconds = null)
        {
             ApiResponse<BuildResult> localVarResponse = FastStatsBuildsFastStatsBuildSyncWithHttpInfo(dataViewName, systemName, body, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Builds a FastStats system from the given definition EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details needed to build the system (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the build service&#x27;s configuration (optional)</param>
        /// <returns>ApiResponse of BuildResult</returns>
        public ApiResponse< BuildResult > FastStatsBuildsFastStatsBuildSyncWithHttpInfo (string dataViewName, string systemName, BuildDefinition body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsBuildsApi->FastStatsBuildsFastStatsBuildSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsBuildsApi->FastStatsBuildsFastStatsBuildSync");

            var localVarPath = "./{dataViewName}/FastStatsBuilds/{systemName}/BuildSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsBuildsFastStatsBuildSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BuildResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildResult)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Builds a FastStats system from the given definition EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details needed to build the system (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the build service&#x27;s configuration (optional)</param>
        /// <returns>Task of BuildResult</returns>
        public async System.Threading.Tasks.Task<BuildResult> FastStatsBuildsFastStatsBuildSyncAsync (string dataViewName, string systemName, BuildDefinition body = null, int? timeoutInSeconds = null)
        {
             ApiResponse<BuildResult> localVarResponse = await FastStatsBuildsFastStatsBuildSyncAsyncWithHttpInfo(dataViewName, systemName, body, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Builds a FastStats system from the given definition EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="body">The details needed to build the system (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the build service&#x27;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (BuildResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildResult>> FastStatsBuildsFastStatsBuildSyncAsyncWithHttpInfo (string dataViewName, string systemName, BuildDefinition body = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsBuildsApi->FastStatsBuildsFastStatsBuildSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsBuildsApi->FastStatsBuildsFastStatsBuildSync");

            var localVarPath = "./{dataViewName}/FastStatsBuilds/{systemName}/BuildSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsBuildsFastStatsBuildSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BuildResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildResult)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Get the status of a running FastStats build job EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>BuildJobDetail</returns>
        public BuildJobDetail FastStatsBuildsGetFastStatsBuildJob (string dataViewName, string systemName, int? jobId)
        {
             ApiResponse<BuildJobDetail> localVarResponse = FastStatsBuildsGetFastStatsBuildJobWithHttpInfo(dataViewName, systemName, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Get the status of a running FastStats build job EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of BuildJobDetail</returns>
        public ApiResponse< BuildJobDetail > FastStatsBuildsGetFastStatsBuildJobWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsBuildsApi->FastStatsBuildsGetFastStatsBuildJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsBuildsApi->FastStatsBuildsGetFastStatsBuildJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling FastStatsBuildsApi->FastStatsBuildsGetFastStatsBuildJob");

            var localVarPath = "./{dataViewName}/FastStatsBuilds/{systemName}/BuildJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsBuildsGetFastStatsBuildJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BuildJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildJobDetail)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Get the status of a running FastStats build job EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of BuildJobDetail</returns>
        public async System.Threading.Tasks.Task<BuildJobDetail> FastStatsBuildsGetFastStatsBuildJobAsync (string dataViewName, string systemName, int? jobId)
        {
             ApiResponse<BuildJobDetail> localVarResponse = await FastStatsBuildsGetFastStatsBuildJobAsyncWithHttpInfo(dataViewName, systemName, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Get the status of a running FastStats build job EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (BuildJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildJobDetail>> FastStatsBuildsGetFastStatsBuildJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsBuildsApi->FastStatsBuildsGetFastStatsBuildJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsBuildsApi->FastStatsBuildsGetFastStatsBuildJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling FastStatsBuildsApi->FastStatsBuildsGetFastStatsBuildJob");

            var localVarPath = "./{dataViewName}/FastStatsBuilds/{systemName}/BuildJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsBuildsGetFastStatsBuildJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BuildJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildJobDetail)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Get the status of salesforce credentials token for a system EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>SalesforceTokenStatus</returns>
        public SalesforceTokenStatus FastStatsBuildsGetSalesforceCredentialsStatus (string dataViewName, string systemName)
        {
             ApiResponse<SalesforceTokenStatus> localVarResponse = FastStatsBuildsGetSalesforceCredentialsStatusWithHttpInfo(dataViewName, systemName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Get the status of salesforce credentials token for a system EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of SalesforceTokenStatus</returns>
        public ApiResponse< SalesforceTokenStatus > FastStatsBuildsGetSalesforceCredentialsStatusWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsBuildsApi->FastStatsBuildsGetSalesforceCredentialsStatus");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsBuildsApi->FastStatsBuildsGetSalesforceCredentialsStatus");

            var localVarPath = "./{dataViewName}/FastStatsBuilds/{systemName}/Settings/SalesforceCredentials/Status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsBuildsGetSalesforceCredentialsStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SalesforceTokenStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SalesforceTokenStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SalesforceTokenStatus)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Get the status of salesforce credentials token for a system EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of SalesforceTokenStatus</returns>
        public async System.Threading.Tasks.Task<SalesforceTokenStatus> FastStatsBuildsGetSalesforceCredentialsStatusAsync (string dataViewName, string systemName)
        {
             ApiResponse<SalesforceTokenStatus> localVarResponse = await FastStatsBuildsGetSalesforceCredentialsStatusAsyncWithHttpInfo(dataViewName, systemName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Get the status of salesforce credentials token for a system EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse (SalesforceTokenStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SalesforceTokenStatus>> FastStatsBuildsGetSalesforceCredentialsStatusAsyncWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsBuildsApi->FastStatsBuildsGetSalesforceCredentialsStatus");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsBuildsApi->FastStatsBuildsGetSalesforceCredentialsStatus");

            var localVarPath = "./{dataViewName}/FastStatsBuilds/{systemName}/Settings/SalesforceCredentials/Status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsBuildsGetSalesforceCredentialsStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SalesforceTokenStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SalesforceTokenStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SalesforceTokenStatus)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Updates SystemBuildSettings at the given path EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The system name to apply the settings for</param>
        /// <param name="type">The type of the settings</param>
        /// <param name="body">The contents of the SystemBuildSettings (optional)</param>
        /// <returns>Object</returns>
        public Object FastStatsBuildsSetSystemBuildSettings (string dataViewName, string systemName, string type, Object body = null)
        {
             ApiResponse<Object> localVarResponse = FastStatsBuildsSetSystemBuildSettingsWithHttpInfo(dataViewName, systemName, type, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Updates SystemBuildSettings at the given path EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The system name to apply the settings for</param>
        /// <param name="type">The type of the settings</param>
        /// <param name="body">The contents of the SystemBuildSettings (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > FastStatsBuildsSetSystemBuildSettingsWithHttpInfo (string dataViewName, string systemName, string type, Object body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsBuildsApi->FastStatsBuildsSetSystemBuildSettings");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsBuildsApi->FastStatsBuildsSetSystemBuildSettings");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling FastStatsBuildsApi->FastStatsBuildsSetSystemBuildSettings");

            var localVarPath = "./{dataViewName}/FastStatsBuilds/{systemName}/Settings/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsBuildsSetSystemBuildSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Updates SystemBuildSettings at the given path EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The system name to apply the settings for</param>
        /// <param name="type">The type of the settings</param>
        /// <param name="body">The contents of the SystemBuildSettings (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> FastStatsBuildsSetSystemBuildSettingsAsync (string dataViewName, string systemName, string type, Object body = null)
        {
             ApiResponse<Object> localVarResponse = await FastStatsBuildsSetSystemBuildSettingsAsyncWithHttpInfo(dataViewName, systemName, type, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// EXPERIMENTAL: Requires OrbitAdmin: Updates SystemBuildSettings at the given path EXPERIMENTAL  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The system name to apply the settings for</param>
        /// <param name="type">The type of the settings</param>
        /// <param name="body">The contents of the SystemBuildSettings (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FastStatsBuildsSetSystemBuildSettingsAsyncWithHttpInfo (string dataViewName, string systemName, string type, Object body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling FastStatsBuildsApi->FastStatsBuildsSetSystemBuildSettings");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling FastStatsBuildsApi->FastStatsBuildsSetSystemBuildSettings");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling FastStatsBuildsApi->FastStatsBuildsSetSystemBuildSettings");

            var localVarPath = "./{dataViewName}/FastStatsBuilds/{systemName}/Settings/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FastStatsBuildsSetSystemBuildSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
