/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IUserInvitationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accepts a given user invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>UserInvitationAcceptanceDetails</returns>
        UserInvitationAcceptanceDetails UserInvitationsAcceptInvitation (string dataViewName, string token);

        /// <summary>
        /// Accepts a given user invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>ApiResponse of UserInvitationAcceptanceDetails</returns>
        ApiResponse<UserInvitationAcceptanceDetails> UserInvitationsAcceptInvitationWithHttpInfo (string dataViewName, string token);
        /// <summary>
        /// Marks a given user invitation as complete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>UserInvitationCompletionDetails</returns>
        UserInvitationCompletionDetails UserInvitationsCompleteInvitation (string dataViewName, string token);

        /// <summary>
        /// Marks a given user invitation as complete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>ApiResponse of UserInvitationCompletionDetails</returns>
        ApiResponse<UserInvitationCompletionDetails> UserInvitationsCompleteInvitationWithHttpInfo (string dataViewName, string token);
        /// <summary>
        /// Creates a new user invitation, which will check the sign-up details and then issue an invite notification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details needed to create the invitation (optional)</param>
        /// <returns>UserInvitationDetail</returns>
        UserInvitationDetail UserInvitationsCreateInvitation (string dataViewName, CreateUserInvitation body = null);

        /// <summary>
        /// Creates a new user invitation, which will check the sign-up details and then issue an invite notification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details needed to create the invitation (optional)</param>
        /// <returns>ApiResponse of UserInvitationDetail</returns>
        ApiResponse<UserInvitationDetail> UserInvitationsCreateInvitationWithHttpInfo (string dataViewName, CreateUserInvitation body = null);
        /// <summary>
        /// Marks a given user invitation as expired
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>UserInvitationCompletionDetails</returns>
        UserInvitationCompletionDetails UserInvitationsExpireInvitation (string dataViewName, string token);

        /// <summary>
        /// Marks a given user invitation as expired
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>ApiResponse of UserInvitationCompletionDetails</returns>
        ApiResponse<UserInvitationCompletionDetails> UserInvitationsExpireInvitationWithHttpInfo (string dataViewName, string token);
        /// <summary>
        /// Requires OrbitAdmin: Returns details for a given user invitation
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>UserInvitationDetail</returns>
        UserInvitationDetail UserInvitationsGetInvitation (string dataViewName, string token);

        /// <summary>
        /// Requires OrbitAdmin: Returns details for a given user invitation
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>ApiResponse of UserInvitationDetail</returns>
        ApiResponse<UserInvitationDetail> UserInvitationsGetInvitationWithHttpInfo (string dataViewName, string token);
        /// <summary>
        /// Requires OrbitAdmin: Returns all the current user invitations in the system.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserInvitationSummary</returns>
        PagedResultsUserInvitationSummary UserInvitationsGetInvitations (string dataViewName, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Requires OrbitAdmin: Returns all the current user invitations in the system.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserInvitationSummary</returns>
        ApiResponse<PagedResultsUserInvitationSummary> UserInvitationsGetInvitationsWithHttpInfo (string dataViewName, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns all the current user invitations in the system with a particular invitation reason.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="reason">The type of invitation reason</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserInvitationSummary</returns>
        PagedResultsUserInvitationSummary UserInvitationsGetInvitationsForReason (string dataViewName, string reason, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all the current user invitations in the system with a particular invitation reason.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="reason">The type of invitation reason</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserInvitationSummary</returns>
        ApiResponse<PagedResultsUserInvitationSummary> UserInvitationsGetInvitationsForReasonWithHttpInfo (string dataViewName, string reason, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Accepts a given user invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>Task of UserInvitationAcceptanceDetails</returns>
        System.Threading.Tasks.Task<UserInvitationAcceptanceDetails> UserInvitationsAcceptInvitationAsync (string dataViewName, string token);

        /// <summary>
        /// Accepts a given user invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>Task of ApiResponse (UserInvitationAcceptanceDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInvitationAcceptanceDetails>> UserInvitationsAcceptInvitationAsyncWithHttpInfo (string dataViewName, string token);
        /// <summary>
        /// Marks a given user invitation as complete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>Task of UserInvitationCompletionDetails</returns>
        System.Threading.Tasks.Task<UserInvitationCompletionDetails> UserInvitationsCompleteInvitationAsync (string dataViewName, string token);

        /// <summary>
        /// Marks a given user invitation as complete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>Task of ApiResponse (UserInvitationCompletionDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInvitationCompletionDetails>> UserInvitationsCompleteInvitationAsyncWithHttpInfo (string dataViewName, string token);
        /// <summary>
        /// Creates a new user invitation, which will check the sign-up details and then issue an invite notification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details needed to create the invitation (optional)</param>
        /// <returns>Task of UserInvitationDetail</returns>
        System.Threading.Tasks.Task<UserInvitationDetail> UserInvitationsCreateInvitationAsync (string dataViewName, CreateUserInvitation body = null);

        /// <summary>
        /// Creates a new user invitation, which will check the sign-up details and then issue an invite notification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details needed to create the invitation (optional)</param>
        /// <returns>Task of ApiResponse (UserInvitationDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInvitationDetail>> UserInvitationsCreateInvitationAsyncWithHttpInfo (string dataViewName, CreateUserInvitation body = null);
        /// <summary>
        /// Marks a given user invitation as expired
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>Task of UserInvitationCompletionDetails</returns>
        System.Threading.Tasks.Task<UserInvitationCompletionDetails> UserInvitationsExpireInvitationAsync (string dataViewName, string token);

        /// <summary>
        /// Marks a given user invitation as expired
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>Task of ApiResponse (UserInvitationCompletionDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInvitationCompletionDetails>> UserInvitationsExpireInvitationAsyncWithHttpInfo (string dataViewName, string token);
        /// <summary>
        /// Requires OrbitAdmin: Returns details for a given user invitation
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>Task of UserInvitationDetail</returns>
        System.Threading.Tasks.Task<UserInvitationDetail> UserInvitationsGetInvitationAsync (string dataViewName, string token);

        /// <summary>
        /// Requires OrbitAdmin: Returns details for a given user invitation
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>Task of ApiResponse (UserInvitationDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInvitationDetail>> UserInvitationsGetInvitationAsyncWithHttpInfo (string dataViewName, string token);
        /// <summary>
        /// Requires OrbitAdmin: Returns all the current user invitations in the system.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserInvitationSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserInvitationSummary> UserInvitationsGetInvitationsAsync (string dataViewName, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Requires OrbitAdmin: Returns all the current user invitations in the system.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserInvitationSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserInvitationSummary>> UserInvitationsGetInvitationsAsyncWithHttpInfo (string dataViewName, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns all the current user invitations in the system with a particular invitation reason.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="reason">The type of invitation reason</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserInvitationSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserInvitationSummary> UserInvitationsGetInvitationsForReasonAsync (string dataViewName, string reason, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all the current user invitations in the system with a particular invitation reason.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="reason">The type of invitation reason</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserInvitationSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserInvitationSummary>> UserInvitationsGetInvitationsForReasonAsyncWithHttpInfo (string dataViewName, string reason, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class UserInvitationsApi : IUserInvitationsApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserInvitationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserInvitationsApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserInvitationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public UserInvitationsApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserInvitationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserInvitationsApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Accepts a given user invitation 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>UserInvitationAcceptanceDetails</returns>
        public UserInvitationAcceptanceDetails UserInvitationsAcceptInvitation (string dataViewName, string token)
        {
             ApiResponse<UserInvitationAcceptanceDetails> localVarResponse = UserInvitationsAcceptInvitationWithHttpInfo(dataViewName, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accepts a given user invitation 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>ApiResponse of UserInvitationAcceptanceDetails</returns>
        public ApiResponse< UserInvitationAcceptanceDetails > UserInvitationsAcceptInvitationWithHttpInfo (string dataViewName, string token)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserInvitationsApi->UserInvitationsAcceptInvitation");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserInvitationsApi->UserInvitationsAcceptInvitation");

            var localVarPath = "./{dataViewName}/UserInvitations/{token}/Accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserInvitationsAcceptInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInvitationAcceptanceDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserInvitationAcceptanceDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInvitationAcceptanceDetails)));
        }

        /// <summary>
        /// Accepts a given user invitation 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>Task of UserInvitationAcceptanceDetails</returns>
        public async System.Threading.Tasks.Task<UserInvitationAcceptanceDetails> UserInvitationsAcceptInvitationAsync (string dataViewName, string token)
        {
             ApiResponse<UserInvitationAcceptanceDetails> localVarResponse = await UserInvitationsAcceptInvitationAsyncWithHttpInfo(dataViewName, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accepts a given user invitation 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>Task of ApiResponse (UserInvitationAcceptanceDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInvitationAcceptanceDetails>> UserInvitationsAcceptInvitationAsyncWithHttpInfo (string dataViewName, string token)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserInvitationsApi->UserInvitationsAcceptInvitation");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserInvitationsApi->UserInvitationsAcceptInvitation");

            var localVarPath = "./{dataViewName}/UserInvitations/{token}/Accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserInvitationsAcceptInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInvitationAcceptanceDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserInvitationAcceptanceDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInvitationAcceptanceDetails)));
        }

        /// <summary>
        /// Marks a given user invitation as complete 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>UserInvitationCompletionDetails</returns>
        public UserInvitationCompletionDetails UserInvitationsCompleteInvitation (string dataViewName, string token)
        {
             ApiResponse<UserInvitationCompletionDetails> localVarResponse = UserInvitationsCompleteInvitationWithHttpInfo(dataViewName, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Marks a given user invitation as complete 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>ApiResponse of UserInvitationCompletionDetails</returns>
        public ApiResponse< UserInvitationCompletionDetails > UserInvitationsCompleteInvitationWithHttpInfo (string dataViewName, string token)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserInvitationsApi->UserInvitationsCompleteInvitation");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserInvitationsApi->UserInvitationsCompleteInvitation");

            var localVarPath = "./{dataViewName}/UserInvitations/{token}/Complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserInvitationsCompleteInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInvitationCompletionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserInvitationCompletionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInvitationCompletionDetails)));
        }

        /// <summary>
        /// Marks a given user invitation as complete 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>Task of UserInvitationCompletionDetails</returns>
        public async System.Threading.Tasks.Task<UserInvitationCompletionDetails> UserInvitationsCompleteInvitationAsync (string dataViewName, string token)
        {
             ApiResponse<UserInvitationCompletionDetails> localVarResponse = await UserInvitationsCompleteInvitationAsyncWithHttpInfo(dataViewName, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Marks a given user invitation as complete 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>Task of ApiResponse (UserInvitationCompletionDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInvitationCompletionDetails>> UserInvitationsCompleteInvitationAsyncWithHttpInfo (string dataViewName, string token)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserInvitationsApi->UserInvitationsCompleteInvitation");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserInvitationsApi->UserInvitationsCompleteInvitation");

            var localVarPath = "./{dataViewName}/UserInvitations/{token}/Complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserInvitationsCompleteInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInvitationCompletionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserInvitationCompletionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInvitationCompletionDetails)));
        }

        /// <summary>
        /// Creates a new user invitation, which will check the sign-up details and then issue an invite notification 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details needed to create the invitation (optional)</param>
        /// <returns>UserInvitationDetail</returns>
        public UserInvitationDetail UserInvitationsCreateInvitation (string dataViewName, CreateUserInvitation body = null)
        {
             ApiResponse<UserInvitationDetail> localVarResponse = UserInvitationsCreateInvitationWithHttpInfo(dataViewName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new user invitation, which will check the sign-up details and then issue an invite notification 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details needed to create the invitation (optional)</param>
        /// <returns>ApiResponse of UserInvitationDetail</returns>
        public ApiResponse< UserInvitationDetail > UserInvitationsCreateInvitationWithHttpInfo (string dataViewName, CreateUserInvitation body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserInvitationsApi->UserInvitationsCreateInvitation");

            var localVarPath = "./{dataViewName}/UserInvitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserInvitationsCreateInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInvitationDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserInvitationDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInvitationDetail)));
        }

        /// <summary>
        /// Creates a new user invitation, which will check the sign-up details and then issue an invite notification 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details needed to create the invitation (optional)</param>
        /// <returns>Task of UserInvitationDetail</returns>
        public async System.Threading.Tasks.Task<UserInvitationDetail> UserInvitationsCreateInvitationAsync (string dataViewName, CreateUserInvitation body = null)
        {
             ApiResponse<UserInvitationDetail> localVarResponse = await UserInvitationsCreateInvitationAsyncWithHttpInfo(dataViewName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new user invitation, which will check the sign-up details and then issue an invite notification 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details needed to create the invitation (optional)</param>
        /// <returns>Task of ApiResponse (UserInvitationDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInvitationDetail>> UserInvitationsCreateInvitationAsyncWithHttpInfo (string dataViewName, CreateUserInvitation body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserInvitationsApi->UserInvitationsCreateInvitation");

            var localVarPath = "./{dataViewName}/UserInvitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserInvitationsCreateInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInvitationDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserInvitationDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInvitationDetail)));
        }

        /// <summary>
        /// Marks a given user invitation as expired 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>UserInvitationCompletionDetails</returns>
        public UserInvitationCompletionDetails UserInvitationsExpireInvitation (string dataViewName, string token)
        {
             ApiResponse<UserInvitationCompletionDetails> localVarResponse = UserInvitationsExpireInvitationWithHttpInfo(dataViewName, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Marks a given user invitation as expired 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>ApiResponse of UserInvitationCompletionDetails</returns>
        public ApiResponse< UserInvitationCompletionDetails > UserInvitationsExpireInvitationWithHttpInfo (string dataViewName, string token)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserInvitationsApi->UserInvitationsExpireInvitation");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserInvitationsApi->UserInvitationsExpireInvitation");

            var localVarPath = "./{dataViewName}/UserInvitations/{token}/Expire";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserInvitationsExpireInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInvitationCompletionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserInvitationCompletionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInvitationCompletionDetails)));
        }

        /// <summary>
        /// Marks a given user invitation as expired 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>Task of UserInvitationCompletionDetails</returns>
        public async System.Threading.Tasks.Task<UserInvitationCompletionDetails> UserInvitationsExpireInvitationAsync (string dataViewName, string token)
        {
             ApiResponse<UserInvitationCompletionDetails> localVarResponse = await UserInvitationsExpireInvitationAsyncWithHttpInfo(dataViewName, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Marks a given user invitation as expired 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>Task of ApiResponse (UserInvitationCompletionDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInvitationCompletionDetails>> UserInvitationsExpireInvitationAsyncWithHttpInfo (string dataViewName, string token)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserInvitationsApi->UserInvitationsExpireInvitation");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserInvitationsApi->UserInvitationsExpireInvitation");

            var localVarPath = "./{dataViewName}/UserInvitations/{token}/Expire";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserInvitationsExpireInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInvitationCompletionDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserInvitationCompletionDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInvitationCompletionDetails)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns details for a given user invitation This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>UserInvitationDetail</returns>
        public UserInvitationDetail UserInvitationsGetInvitation (string dataViewName, string token)
        {
             ApiResponse<UserInvitationDetail> localVarResponse = UserInvitationsGetInvitationWithHttpInfo(dataViewName, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns details for a given user invitation This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>ApiResponse of UserInvitationDetail</returns>
        public ApiResponse< UserInvitationDetail > UserInvitationsGetInvitationWithHttpInfo (string dataViewName, string token)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserInvitationsApi->UserInvitationsGetInvitation");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserInvitationsApi->UserInvitationsGetInvitation");

            var localVarPath = "./{dataViewName}/UserInvitations/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserInvitationsGetInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInvitationDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserInvitationDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInvitationDetail)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns details for a given user invitation This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>Task of UserInvitationDetail</returns>
        public async System.Threading.Tasks.Task<UserInvitationDetail> UserInvitationsGetInvitationAsync (string dataViewName, string token)
        {
             ApiResponse<UserInvitationDetail> localVarResponse = await UserInvitationsGetInvitationAsyncWithHttpInfo(dataViewName, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Returns details for a given user invitation This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="token">The token of the invitation</param>
        /// <returns>Task of ApiResponse (UserInvitationDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInvitationDetail>> UserInvitationsGetInvitationAsyncWithHttpInfo (string dataViewName, string token)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserInvitationsApi->UserInvitationsGetInvitation");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserInvitationsApi->UserInvitationsGetInvitation");

            var localVarPath = "./{dataViewName}/UserInvitations/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserInvitationsGetInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInvitationDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserInvitationDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInvitationDetail)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns all the current user invitations in the system. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserInvitationSummary</returns>
        public PagedResultsUserInvitationSummary UserInvitationsGetInvitations (string dataViewName, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserInvitationSummary> localVarResponse = UserInvitationsGetInvitationsWithHttpInfo(dataViewName, includeAccepted, includeCompleted, includeExpired, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns all the current user invitations in the system. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserInvitationSummary</returns>
        public ApiResponse< PagedResultsUserInvitationSummary > UserInvitationsGetInvitationsWithHttpInfo (string dataViewName, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserInvitationsApi->UserInvitationsGetInvitations");

            var localVarPath = "./{dataViewName}/UserInvitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (includeAccepted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAccepted", includeAccepted)); // query parameter
            if (includeCompleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCompleted", includeCompleted)); // query parameter
            if (includeExpired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeExpired", includeExpired)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserInvitationsGetInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserInvitationSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserInvitationSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserInvitationSummary)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Returns all the current user invitations in the system. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserInvitationSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserInvitationSummary> UserInvitationsGetInvitationsAsync (string dataViewName, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserInvitationSummary> localVarResponse = await UserInvitationsGetInvitationsAsyncWithHttpInfo(dataViewName, includeAccepted, includeCompleted, includeExpired, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Returns all the current user invitations in the system. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserInvitationSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserInvitationSummary>> UserInvitationsGetInvitationsAsyncWithHttpInfo (string dataViewName, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserInvitationsApi->UserInvitationsGetInvitations");

            var localVarPath = "./{dataViewName}/UserInvitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (includeAccepted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAccepted", includeAccepted)); // query parameter
            if (includeCompleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCompleted", includeCompleted)); // query parameter
            if (includeExpired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeExpired", includeExpired)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserInvitationsGetInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserInvitationSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserInvitationSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserInvitationSummary)));
        }

        /// <summary>
        /// Returns all the current user invitations in the system with a particular invitation reason. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="reason">The type of invitation reason</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserInvitationSummary</returns>
        public PagedResultsUserInvitationSummary UserInvitationsGetInvitationsForReason (string dataViewName, string reason, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserInvitationSummary> localVarResponse = UserInvitationsGetInvitationsForReasonWithHttpInfo(dataViewName, reason, includeAccepted, includeCompleted, includeExpired, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all the current user invitations in the system with a particular invitation reason. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="reason">The type of invitation reason</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserInvitationSummary</returns>
        public ApiResponse< PagedResultsUserInvitationSummary > UserInvitationsGetInvitationsForReasonWithHttpInfo (string dataViewName, string reason, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserInvitationsApi->UserInvitationsGetInvitationsForReason");
            // verify the required parameter 'reason' is set
            if (reason == null)
                throw new ApiException(400, "Missing required parameter 'reason' when calling UserInvitationsApi->UserInvitationsGetInvitationsForReason");

            var localVarPath = "./{dataViewName}/UserInvitations/Reasons/{reason}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (reason != null) localVarPathParams.Add("reason", this.Configuration.ApiClient.ParameterToString(reason)); // path parameter
            if (includeAccepted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAccepted", includeAccepted)); // query parameter
            if (includeCompleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCompleted", includeCompleted)); // query parameter
            if (includeExpired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeExpired", includeExpired)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserInvitationsGetInvitationsForReason", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserInvitationSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserInvitationSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserInvitationSummary)));
        }

        /// <summary>
        /// Returns all the current user invitations in the system with a particular invitation reason. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="reason">The type of invitation reason</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserInvitationSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserInvitationSummary> UserInvitationsGetInvitationsForReasonAsync (string dataViewName, string reason, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserInvitationSummary> localVarResponse = await UserInvitationsGetInvitationsForReasonAsyncWithHttpInfo(dataViewName, reason, includeAccepted, includeCompleted, includeExpired, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all the current user invitations in the system with a particular invitation reason. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="reason">The type of invitation reason</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are EmailAddress, InvitationReason, InviterUsername, CreationDate, AcceptedDate, ExpiredDate, HasNotificationBeenSent. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserInvitationSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserInvitationSummary>> UserInvitationsGetInvitationsForReasonAsyncWithHttpInfo (string dataViewName, string reason, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UserInvitationsApi->UserInvitationsGetInvitationsForReason");
            // verify the required parameter 'reason' is set
            if (reason == null)
                throw new ApiException(400, "Missing required parameter 'reason' when calling UserInvitationsApi->UserInvitationsGetInvitationsForReason");

            var localVarPath = "./{dataViewName}/UserInvitations/Reasons/{reason}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (reason != null) localVarPathParams.Add("reason", this.Configuration.ApiClient.ParameterToString(reason)); // path parameter
            if (includeAccepted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAccepted", includeAccepted)); // query parameter
            if (includeCompleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCompleted", includeCompleted)); // query parameter
            if (includeExpired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeExpired", includeExpired)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserInvitationsGetInvitationsForReason", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserInvitationSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserInvitationSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserInvitationSummary)));
        }

    }
}
