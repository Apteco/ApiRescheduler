/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiRescheduler.ApiClient.Client;
using Apteco.ApiRescheduler.ApiClient.Model;

namespace Apteco.ApiRescheduler.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Change the password for the user with the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s current and new password (optional)</param>
        /// <returns></returns>
        void UsersChangeUserPassword (string dataViewName, string username, ChangePasswordDetails body = null);

        /// <summary>
        /// Change the password for the user with the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s current and new password (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersChangeUserPasswordWithHttpInfo (string dataViewName, string username, ChangePasswordDetails body = null);
        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the user to create. (optional)</param>
        /// <param name="systemName">The system name for the user to be associated with. (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>UserSummary</returns>
        UserSummary UsersCreateUser (string dataViewName, CreateUserDetails body = null, string systemName = null, string scope = null);

        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the user to create. (optional)</param>
        /// <param name="systemName">The system name for the user to be associated with. (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>ApiResponse of UserSummary</returns>
        ApiResponse<UserSummary> UsersCreateUserWithHttpInfo (string dataViewName, CreateUserDetails body = null, string systemName = null, string scope = null);
        /// <summary>
        /// Deletes the specified user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to delete</param>
        /// <param name="systemName">If specified, whether to delete the user from this system only (optional)</param>
        /// <returns></returns>
        void UsersDeleteUser (string dataViewName, string username, string systemName = null);

        /// <summary>
        /// Deletes the specified user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to delete</param>
        /// <param name="systemName">If specified, whether to delete the user from this system only (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersDeleteUserWithHttpInfo (string dataViewName, string username, string systemName = null);
        /// <summary>
        /// Gets a list of users last login history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName"></param>
        /// <param name="username">The user to get login history for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, ClientType, SystemName, Timestamp. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, ClientType, SystemName, Timestamp. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserLogin</returns>
        PagedResultsUserLogin UsersGetPreviousLoginHistory (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets a list of users last login history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName"></param>
        /// <param name="username">The user to get login history for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, ClientType, SystemName, Timestamp. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, ClientType, SystemName, Timestamp. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserLogin</returns>
        ApiResponse<PagedResultsUserLogin> UsersGetPreviousLoginHistoryWithHttpInfo (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the details of a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the audience for</param>
        /// <param name="audienceId">The id of the audience to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <param name="includeWorkbookItems">If specified, whether to include the workbook items for this audience or not.  Defaults to true - to return the workbook items (optional)</param>
        /// <returns>UserAudienceDetail</returns>
        UserAudienceDetail UsersGetUserAudience (string dataViewName, string username, int? audienceId, bool? includeQueries = null, bool? includeBrief = null, bool? includeWorkbookItems = null);

        /// <summary>
        /// Returns the details of a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the audience for</param>
        /// <param name="audienceId">The id of the audience to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <param name="includeWorkbookItems">If specified, whether to include the workbook items for this audience or not.  Defaults to true - to return the workbook items (optional)</param>
        /// <returns>ApiResponse of UserAudienceDetail</returns>
        ApiResponse<UserAudienceDetail> UsersGetUserAudienceWithHttpInfo (string dataViewName, string username, int? audienceId, bool? includeQueries = null, bool? includeBrief = null, bool? includeWorkbookItems = null);
        /// <summary>
        /// Returns the details of a particular composition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the composition for</param>
        /// <param name="compositionId">The id of the composition to view</param>
        /// <returns>UserAudienceCompositionDetail</returns>
        UserAudienceCompositionDetail UsersGetUserAudienceComposition (string dataViewName, string username, int? compositionId);

        /// <summary>
        /// Returns the details of a particular composition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the composition for</param>
        /// <param name="compositionId">The id of the composition to view</param>
        /// <returns>ApiResponse of UserAudienceCompositionDetail</returns>
        ApiResponse<UserAudienceCompositionDetail> UsersGetUserAudienceCompositionWithHttpInfo (string dataViewName, string username, int? compositionId);
        /// <summary>
        /// Returns the list of audience compositions associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audience compositions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserAudienceCompositionSummary</returns>
        PagedResultsUserAudienceCompositionSummary UsersGetUserAudienceCompositions (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of audience compositions associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audience compositions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserAudienceCompositionSummary</returns>
        ApiResponse<PagedResultsUserAudienceCompositionSummary> UsersGetUserAudienceCompositionsWithHttpInfo (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the details of a particular audience export template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the audience export template for</param>
        /// <param name="exportTemplateId">The id of the audience export template to view</param>
        /// <returns>UserAudienceExportTemplateDetail</returns>
        UserAudienceExportTemplateDetail UsersGetUserAudienceExportTemplate (string dataViewName, string username, int? exportTemplateId);

        /// <summary>
        /// Returns the details of a particular audience export template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the audience export template for</param>
        /// <param name="exportTemplateId">The id of the audience export template to view</param>
        /// <returns>ApiResponse of UserAudienceExportTemplateDetail</returns>
        ApiResponse<UserAudienceExportTemplateDetail> UsersGetUserAudienceExportTemplateWithHttpInfo (string dataViewName, string username, int? exportTemplateId);
        /// <summary>
        /// Returns the list of audience export templates associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audience export templates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserAudienceExportTemplateDetail</returns>
        PagedResultsUserAudienceExportTemplateDetail UsersGetUserAudienceExportTemplates (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of audience export templates associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audience export templates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserAudienceExportTemplateDetail</returns>
        ApiResponse<PagedResultsUserAudienceExportTemplateDetail> UsersGetUserAudienceExportTemplatesWithHttpInfo (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="audienceId">The id of the audience to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserWorkspaceSummary</returns>
        PagedResultsUserWorkspaceSummary UsersGetUserAudienceWorkspaces (string dataViewName, string username, int? audienceId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="audienceId">The id of the audience to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserWorkspaceSummary</returns>
        ApiResponse<PagedResultsUserWorkspaceSummary> UsersGetUserAudienceWorkspacesWithHttpInfo (string dataViewName, string username, int? audienceId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of audiences associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audiences for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted audiences, not deleted audiences or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned audiences are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="includeResults">If specified, whether to include results (inc counts).  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserAudienceSummary</returns>
        PagedResultsUserAudienceSummary UsersGetUserAudiences (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, bool? includeResults = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of audiences associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audiences for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted audiences, not deleted audiences or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned audiences are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="includeResults">If specified, whether to include results (inc counts).  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserAudienceSummary</returns>
        ApiResponse<PagedResultsUserAudienceSummary> UsersGetUserAudiencesWithHttpInfo (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, bool? includeResults = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the details of a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the collection for</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>UserCollectionDetail</returns>
        UserCollectionDetail UsersGetUserCollection (string dataViewName, string username, int? collectionId);

        /// <summary>
        /// Returns the details of a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the collection for</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>ApiResponse of UserCollectionDetail</returns>
        ApiResponse<UserCollectionDetail> UsersGetUserCollectionWithHttpInfo (string dataViewName, string username, int? collectionId);
        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="collectionId">The id of the collection to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserWorkspaceSummary</returns>
        PagedResultsUserWorkspaceSummary UsersGetUserCollectionWorkspaces (string dataViewName, string username, int? collectionId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="collectionId">The id of the collection to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserWorkspaceSummary</returns>
        ApiResponse<PagedResultsUserWorkspaceSummary> UsersGetUserCollectionWorkspacesWithHttpInfo (string dataViewName, string username, int? collectionId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of collections associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the collections for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned collections are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserCollectionSummary</returns>
        PagedResultsUserCollectionSummary UsersGetUserCollections (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of collections associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the collections for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned collections are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserCollectionSummary</returns>
        ApiResponse<PagedResultsUserCollectionSummary> UsersGetUserCollectionsWithHttpInfo (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets the user configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>UserConfigurationDetails</returns>
        UserConfigurationDetails UsersGetUserConfiguration (string dataViewName);

        /// <summary>
        /// Gets the user configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of UserConfigurationDetails</returns>
        ApiResponse<UserConfigurationDetails> UsersGetUserConfigurationWithHttpInfo (string dataViewName);
        /// <summary>
        /// Gets a dashboard in the DataView.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the dashboard for</param>
        /// <param name="dashboardId">The Id for the dashboard</param>
        /// <returns>UserDashboardDetail</returns>
        UserDashboardDetail UsersGetUserDashboard (string dataViewName, string username, int? dashboardId);

        /// <summary>
        /// Gets a dashboard in the DataView.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the dashboard for</param>
        /// <param name="dashboardId">The Id for the dashboard</param>
        /// <returns>ApiResponse of UserDashboardDetail</returns>
        ApiResponse<UserDashboardDetail> UsersGetUserDashboardWithHttpInfo (string dataViewName, string username, int? dashboardId);
        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="dashboardId">The id of the dashboard to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserWorkspaceSummary</returns>
        PagedResultsUserWorkspaceSummary UsersGetUserDashboardWorkspaces (string dataViewName, string username, int? dashboardId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="dashboardId">The id of the dashboard to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserWorkspaceSummary</returns>
        ApiResponse<PagedResultsUserWorkspaceSummary> UsersGetUserDashboardWorkspacesWithHttpInfo (string dataViewName, string username, int? dashboardId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets a list of dashboards in the DataView.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the dashboard for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted dashboards, not deleted dashboards or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned dashboards are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="doSystemLookup">If specified, whether to perform a synchronous eager system lookup for the base queries of the dashboards in the list. N.B. the results of the lookups are not returned in the results but the cache will be populated for subsequent dashboard detail calls. Defaults to false (optional)</param>
        /// <param name="includeNumberOfHits">If specified, whether to include the number of hits a dashboard has receieved. Defaults to include the hits. (optional, default to true)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserDashboardSummary</returns>
        PagedResultsUserDashboardSummary UsersGetUserDashboards (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, bool? doSystemLookup = null, bool? includeNumberOfHits = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets a list of dashboards in the DataView.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the dashboard for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted dashboards, not deleted dashboards or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned dashboards are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="doSystemLookup">If specified, whether to perform a synchronous eager system lookup for the base queries of the dashboards in the list. N.B. the results of the lookups are not returned in the results but the cache will be populated for subsequent dashboard detail calls. Defaults to false (optional)</param>
        /// <param name="includeNumberOfHits">If specified, whether to include the number of hits a dashboard has receieved. Defaults to include the hits. (optional, default to true)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserDashboardSummary</returns>
        ApiResponse<PagedResultsUserDashboardSummary> UsersGetUserDashboardsWithHttpInfo (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, bool? doSystemLookup = null, bool? includeNumberOfHits = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns details for the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the details for</param>
        /// <returns>UserDetail</returns>
        UserDetail UsersGetUserDetails (string dataViewName, string username);

        /// <summary>
        /// Returns details for the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the details for</param>
        /// <returns>ApiResponse of UserDetail</returns>
        ApiResponse<UserDetail> UsersGetUserDetailsWithHttpInfo (string dataViewName, string username);
        /// <summary>
        /// Returns all users in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">If specified, whether to limit to only users attached to the system name (optional)</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="scope">If specified, whether to return all users, users attached to the DataView only, or users attached to the system only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate, LastAccessDate, UserLockedOutDate, LoginFailures, TimePasswordSet, PasswordManuallyExpired, PasswordNeverExpires. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate, LastAccessDate, UserLockedOutDate, LoginFailures, TimePasswordSet, PasswordManuallyExpired, PasswordNeverExpires. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserSummary</returns>
        PagedResultsUserSummary UsersGetUserDetailsList (string dataViewName, string systemName = null, string includeDisabled = null, string scope = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all users in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">If specified, whether to limit to only users attached to the system name (optional)</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="scope">If specified, whether to return all users, users attached to the DataView only, or users attached to the system only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate, LastAccessDate, UserLockedOutDate, LoginFailures, TimePasswordSet, PasswordManuallyExpired, PasswordNeverExpires. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate, LastAccessDate, UserLockedOutDate, LoginFailures, TimePasswordSet, PasswordManuallyExpired, PasswordNeverExpires. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserSummary</returns>
        ApiResponse<PagedResultsUserSummary> UsersGetUserDetailsListWithHttpInfo (string dataViewName, string systemName = null, string includeDisabled = null, string scope = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of invitations associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the invitations for</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserInvitationSummary</returns>
        PagedResultsUserInvitationSummary UsersGetUserInvitations (string dataViewName, string username, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of invitations associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the invitations for</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserInvitationSummary</returns>
        ApiResponse<PagedResultsUserInvitationSummary> UsersGetUserInvitationsWithHttpInfo (string dataViewName, string username, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="elementId">The id of the PeopleStage element to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserWorkspaceSummary</returns>
        PagedResultsUserWorkspaceSummary UsersGetUserPeopleStageElementWorkspaces (string dataViewName, string username, string elementId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="elementId">The id of the PeopleStage element to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserWorkspaceSummary</returns>
        ApiResponse<PagedResultsUserWorkspaceSummary> UsersGetUserPeopleStageElementWorkspacesWithHttpInfo (string dataViewName, string username, string elementId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the details of a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the workspace for</param>
        /// <param name="workspaceId">The id of the workspace to view</param>
        /// <returns>UserWorkspaceDetail</returns>
        UserWorkspaceDetail UsersGetUserWorkspace (string dataViewName, string username, int? workspaceId);

        /// <summary>
        /// Returns the details of a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the workspace for</param>
        /// <param name="workspaceId">The id of the workspace to view</param>
        /// <returns>ApiResponse of UserWorkspaceDetail</returns>
        ApiResponse<UserWorkspaceDetail> UsersGetUserWorkspaceWithHttpInfo (string dataViewName, string username, int? workspaceId);
        /// <summary>
        /// Returns the list of workspaces associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserWorkspaceSummary</returns>
        PagedResultsUserWorkspaceSummary UsersGetUserWorkspaces (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of workspaces associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserWorkspaceSummary</returns>
        ApiResponse<PagedResultsUserWorkspaceSummary> UsersGetUserWorkspacesWithHttpInfo (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Updates one or more audiences
        /// </summary>
        /// <remarks>
        /// Might require licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the audiences for</param>
        /// <param name="body">The details of the audiences to update.  Any value omitted for a audience will be left unchanged (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for any returned audiences or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for any returned audiences or not.  Defaults to true - to return briefs (optional)</param>
        /// <param name="includeWorkbookItems">If specified, whether to include the workbook items for any returned audiences or not.  Defaults to true - to return workbook items (optional)</param>
        /// <param name="includeWorkbookItemDetails">If specified, whether to include the workbook item details for any returned audiences or not.  Defaults to true - to return workbook item details (optional)</param>
        /// <returns>PagedResultsModifyUserAudienceDetailResults</returns>
        PagedResultsModifyUserAudienceDetailResults UsersModifyUserAudiences (string dataViewName, string username, ModifyItemsModifyUserAudience body = null, bool? includeQueries = null, bool? includeBrief = null, bool? includeWorkbookItems = null, bool? includeWorkbookItemDetails = null);

        /// <summary>
        /// Updates one or more audiences
        /// </summary>
        /// <remarks>
        /// Might require licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the audiences for</param>
        /// <param name="body">The details of the audiences to update.  Any value omitted for a audience will be left unchanged (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for any returned audiences or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for any returned audiences or not.  Defaults to true - to return briefs (optional)</param>
        /// <param name="includeWorkbookItems">If specified, whether to include the workbook items for any returned audiences or not.  Defaults to true - to return workbook items (optional)</param>
        /// <param name="includeWorkbookItemDetails">If specified, whether to include the workbook item details for any returned audiences or not.  Defaults to true - to return workbook item details (optional)</param>
        /// <returns>ApiResponse of PagedResultsModifyUserAudienceDetailResults</returns>
        ApiResponse<PagedResultsModifyUserAudienceDetailResults> UsersModifyUserAudiencesWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserAudience body = null, bool? includeQueries = null, bool? includeBrief = null, bool? includeWorkbookItems = null, bool? includeWorkbookItemDetails = null);
        /// <summary>
        /// Updates one or more collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collections for</param>
        /// <param name="body">The details of the collections to update.  Any value omitted for a collection will be left unchanged (optional)</param>
        /// <returns>PagedResultsModifyUserCollectionDetailResults</returns>
        PagedResultsModifyUserCollectionDetailResults UsersModifyUserCollections (string dataViewName, string username, ModifyItemsModifyUserCollection body = null);

        /// <summary>
        /// Updates one or more collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collections for</param>
        /// <param name="body">The details of the collections to update.  Any value omitted for a collection will be left unchanged (optional)</param>
        /// <returns>ApiResponse of PagedResultsModifyUserCollectionDetailResults</returns>
        ApiResponse<PagedResultsModifyUserCollectionDetailResults> UsersModifyUserCollectionsWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserCollection body = null);
        /// <summary>
        /// Updates one or more dashboards
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the dashboards for</param>
        /// <param name="body">The details of the dashboards to update.  Any value omitted for a dashboard will be left unchanged (optional)</param>
        /// <returns>PagedResultsModifyUserDashboardDetailResults</returns>
        PagedResultsModifyUserDashboardDetailResults UsersModifyUserDashboards (string dataViewName, string username, ModifyItemsModifyUserDashboard body = null);

        /// <summary>
        /// Updates one or more dashboards
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the dashboards for</param>
        /// <param name="body">The details of the dashboards to update.  Any value omitted for a dashboard will be left unchanged (optional)</param>
        /// <returns>ApiResponse of PagedResultsModifyUserDashboardDetailResults</returns>
        ApiResponse<PagedResultsModifyUserDashboardDetailResults> UsersModifyUserDashboardsWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserDashboard body = null);
        /// <summary>
        /// Updates one or more workspaces
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the workspaces for</param>
        /// <param name="body">The details of the workspaces to update.  Any value omitted for a workspace will be left unchanged (optional)</param>
        /// <returns>PagedResultsModifyUserWorkspaceDetailResults</returns>
        PagedResultsModifyUserWorkspaceDetailResults UsersModifyUserWorkspaces (string dataViewName, string username, ModifyItemsModifyUserWorkspace body = null);

        /// <summary>
        /// Updates one or more workspaces
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the workspaces for</param>
        /// <param name="body">The details of the workspaces to update.  Any value omitted for a workspace will be left unchanged (optional)</param>
        /// <returns>ApiResponse of PagedResultsModifyUserWorkspaceDetailResults</returns>
        ApiResponse<PagedResultsModifyUserWorkspaceDetailResults> UsersModifyUserWorkspacesWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserWorkspace body = null);
        /// <summary>
        /// Updates user details for the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The details to update the user with (optional)</param>
        /// <param name="systemName">The system name associated with the user (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>UserSummary</returns>
        UserSummary UsersUpdateUserDetails (string dataViewName, string username, UpdateUserDetails body = null, string systemName = null, string scope = null);

        /// <summary>
        /// Updates user details for the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The details to update the user with (optional)</param>
        /// <param name="systemName">The system name associated with the user (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>ApiResponse of UserSummary</returns>
        ApiResponse<UserSummary> UsersUpdateUserDetailsWithHttpInfo (string dataViewName, string username, UpdateUserDetails body = null, string systemName = null, string scope = null);
        /// <summary>
        /// Modify the specified user groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s groups to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>UserSummary</returns>
        UserSummary UsersUpdateUserGroups (string dataViewName, string username, ModifyUserGroups body = null, string systemName = null, string scope = null);

        /// <summary>
        /// Modify the specified user groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s groups to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>ApiResponse of UserSummary</returns>
        ApiResponse<UserSummary> UsersUpdateUserGroupsWithHttpInfo (string dataViewName, string username, ModifyUserGroups body = null, string systemName = null, string scope = null);
        /// <summary>
        /// Modify the specified user&#x27;s systems
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s systems to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>UserSummary</returns>
        UserSummary UsersUpdateUserSystems (string dataViewName, string username, ModifyUserSystems body = null, string systemName = null, string scope = null);

        /// <summary>
        /// Modify the specified user&#x27;s systems
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s systems to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>ApiResponse of UserSummary</returns>
        ApiResponse<UserSummary> UsersUpdateUserSystemsWithHttpInfo (string dataViewName, string username, ModifyUserSystems body = null, string systemName = null, string scope = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Change the password for the user with the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s current and new password (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersChangeUserPasswordAsync (string dataViewName, string username, ChangePasswordDetails body = null);

        /// <summary>
        /// Change the password for the user with the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s current and new password (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersChangeUserPasswordAsyncWithHttpInfo (string dataViewName, string username, ChangePasswordDetails body = null);
        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the user to create. (optional)</param>
        /// <param name="systemName">The system name for the user to be associated with. (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of UserSummary</returns>
        System.Threading.Tasks.Task<UserSummary> UsersCreateUserAsync (string dataViewName, CreateUserDetails body = null, string systemName = null, string scope = null);

        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the user to create. (optional)</param>
        /// <param name="systemName">The system name for the user to be associated with. (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of ApiResponse (UserSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSummary>> UsersCreateUserAsyncWithHttpInfo (string dataViewName, CreateUserDetails body = null, string systemName = null, string scope = null);
        /// <summary>
        /// Deletes the specified user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to delete</param>
        /// <param name="systemName">If specified, whether to delete the user from this system only (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersDeleteUserAsync (string dataViewName, string username, string systemName = null);

        /// <summary>
        /// Deletes the specified user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to delete</param>
        /// <param name="systemName">If specified, whether to delete the user from this system only (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersDeleteUserAsyncWithHttpInfo (string dataViewName, string username, string systemName = null);
        /// <summary>
        /// Gets a list of users last login history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName"></param>
        /// <param name="username">The user to get login history for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, ClientType, SystemName, Timestamp. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, ClientType, SystemName, Timestamp. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserLogin</returns>
        System.Threading.Tasks.Task<PagedResultsUserLogin> UsersGetPreviousLoginHistoryAsync (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets a list of users last login history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName"></param>
        /// <param name="username">The user to get login history for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, ClientType, SystemName, Timestamp. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, ClientType, SystemName, Timestamp. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserLogin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserLogin>> UsersGetPreviousLoginHistoryAsyncWithHttpInfo (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the details of a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the audience for</param>
        /// <param name="audienceId">The id of the audience to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <param name="includeWorkbookItems">If specified, whether to include the workbook items for this audience or not.  Defaults to true - to return the workbook items (optional)</param>
        /// <returns>Task of UserAudienceDetail</returns>
        System.Threading.Tasks.Task<UserAudienceDetail> UsersGetUserAudienceAsync (string dataViewName, string username, int? audienceId, bool? includeQueries = null, bool? includeBrief = null, bool? includeWorkbookItems = null);

        /// <summary>
        /// Returns the details of a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the audience for</param>
        /// <param name="audienceId">The id of the audience to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <param name="includeWorkbookItems">If specified, whether to include the workbook items for this audience or not.  Defaults to true - to return the workbook items (optional)</param>
        /// <returns>Task of ApiResponse (UserAudienceDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAudienceDetail>> UsersGetUserAudienceAsyncWithHttpInfo (string dataViewName, string username, int? audienceId, bool? includeQueries = null, bool? includeBrief = null, bool? includeWorkbookItems = null);
        /// <summary>
        /// Returns the details of a particular composition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the composition for</param>
        /// <param name="compositionId">The id of the composition to view</param>
        /// <returns>Task of UserAudienceCompositionDetail</returns>
        System.Threading.Tasks.Task<UserAudienceCompositionDetail> UsersGetUserAudienceCompositionAsync (string dataViewName, string username, int? compositionId);

        /// <summary>
        /// Returns the details of a particular composition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the composition for</param>
        /// <param name="compositionId">The id of the composition to view</param>
        /// <returns>Task of ApiResponse (UserAudienceCompositionDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAudienceCompositionDetail>> UsersGetUserAudienceCompositionAsyncWithHttpInfo (string dataViewName, string username, int? compositionId);
        /// <summary>
        /// Returns the list of audience compositions associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audience compositions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserAudienceCompositionSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserAudienceCompositionSummary> UsersGetUserAudienceCompositionsAsync (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of audience compositions associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audience compositions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserAudienceCompositionSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserAudienceCompositionSummary>> UsersGetUserAudienceCompositionsAsyncWithHttpInfo (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the details of a particular audience export template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the audience export template for</param>
        /// <param name="exportTemplateId">The id of the audience export template to view</param>
        /// <returns>Task of UserAudienceExportTemplateDetail</returns>
        System.Threading.Tasks.Task<UserAudienceExportTemplateDetail> UsersGetUserAudienceExportTemplateAsync (string dataViewName, string username, int? exportTemplateId);

        /// <summary>
        /// Returns the details of a particular audience export template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the audience export template for</param>
        /// <param name="exportTemplateId">The id of the audience export template to view</param>
        /// <returns>Task of ApiResponse (UserAudienceExportTemplateDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAudienceExportTemplateDetail>> UsersGetUserAudienceExportTemplateAsyncWithHttpInfo (string dataViewName, string username, int? exportTemplateId);
        /// <summary>
        /// Returns the list of audience export templates associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audience export templates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserAudienceExportTemplateDetail</returns>
        System.Threading.Tasks.Task<PagedResultsUserAudienceExportTemplateDetail> UsersGetUserAudienceExportTemplatesAsync (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of audience export templates associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audience export templates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserAudienceExportTemplateDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserAudienceExportTemplateDetail>> UsersGetUserAudienceExportTemplatesAsyncWithHttpInfo (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="audienceId">The id of the audience to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserWorkspaceSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserWorkspaceSummary> UsersGetUserAudienceWorkspacesAsync (string dataViewName, string username, int? audienceId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="audienceId">The id of the audience to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserWorkspaceSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserWorkspaceSummary>> UsersGetUserAudienceWorkspacesAsyncWithHttpInfo (string dataViewName, string username, int? audienceId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of audiences associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audiences for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted audiences, not deleted audiences or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned audiences are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="includeResults">If specified, whether to include results (inc counts).  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserAudienceSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserAudienceSummary> UsersGetUserAudiencesAsync (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, bool? includeResults = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of audiences associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audiences for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted audiences, not deleted audiences or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned audiences are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="includeResults">If specified, whether to include results (inc counts).  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserAudienceSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserAudienceSummary>> UsersGetUserAudiencesAsyncWithHttpInfo (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, bool? includeResults = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the details of a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the collection for</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>Task of UserCollectionDetail</returns>
        System.Threading.Tasks.Task<UserCollectionDetail> UsersGetUserCollectionAsync (string dataViewName, string username, int? collectionId);

        /// <summary>
        /// Returns the details of a particular collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the collection for</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>Task of ApiResponse (UserCollectionDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCollectionDetail>> UsersGetUserCollectionAsyncWithHttpInfo (string dataViewName, string username, int? collectionId);
        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="collectionId">The id of the collection to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserWorkspaceSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserWorkspaceSummary> UsersGetUserCollectionWorkspacesAsync (string dataViewName, string username, int? collectionId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="collectionId">The id of the collection to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserWorkspaceSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserWorkspaceSummary>> UsersGetUserCollectionWorkspacesAsyncWithHttpInfo (string dataViewName, string username, int? collectionId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of collections associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the collections for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned collections are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserCollectionSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserCollectionSummary> UsersGetUserCollectionsAsync (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of collections associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the collections for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned collections are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserCollectionSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserCollectionSummary>> UsersGetUserCollectionsAsyncWithHttpInfo (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets the user configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of UserConfigurationDetails</returns>
        System.Threading.Tasks.Task<UserConfigurationDetails> UsersGetUserConfigurationAsync (string dataViewName);

        /// <summary>
        /// Gets the user configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (UserConfigurationDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserConfigurationDetails>> UsersGetUserConfigurationAsyncWithHttpInfo (string dataViewName);
        /// <summary>
        /// Gets a dashboard in the DataView.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the dashboard for</param>
        /// <param name="dashboardId">The Id for the dashboard</param>
        /// <returns>Task of UserDashboardDetail</returns>
        System.Threading.Tasks.Task<UserDashboardDetail> UsersGetUserDashboardAsync (string dataViewName, string username, int? dashboardId);

        /// <summary>
        /// Gets a dashboard in the DataView.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the dashboard for</param>
        /// <param name="dashboardId">The Id for the dashboard</param>
        /// <returns>Task of ApiResponse (UserDashboardDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDashboardDetail>> UsersGetUserDashboardAsyncWithHttpInfo (string dataViewName, string username, int? dashboardId);
        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="dashboardId">The id of the dashboard to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserWorkspaceSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserWorkspaceSummary> UsersGetUserDashboardWorkspacesAsync (string dataViewName, string username, int? dashboardId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="dashboardId">The id of the dashboard to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserWorkspaceSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserWorkspaceSummary>> UsersGetUserDashboardWorkspacesAsyncWithHttpInfo (string dataViewName, string username, int? dashboardId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets a list of dashboards in the DataView.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the dashboard for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted dashboards, not deleted dashboards or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned dashboards are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="doSystemLookup">If specified, whether to perform a synchronous eager system lookup for the base queries of the dashboards in the list. N.B. the results of the lookups are not returned in the results but the cache will be populated for subsequent dashboard detail calls. Defaults to false (optional)</param>
        /// <param name="includeNumberOfHits">If specified, whether to include the number of hits a dashboard has receieved. Defaults to include the hits. (optional, default to true)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserDashboardSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserDashboardSummary> UsersGetUserDashboardsAsync (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, bool? doSystemLookup = null, bool? includeNumberOfHits = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets a list of dashboards in the DataView.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the dashboard for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted dashboards, not deleted dashboards or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned dashboards are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="doSystemLookup">If specified, whether to perform a synchronous eager system lookup for the base queries of the dashboards in the list. N.B. the results of the lookups are not returned in the results but the cache will be populated for subsequent dashboard detail calls. Defaults to false (optional)</param>
        /// <param name="includeNumberOfHits">If specified, whether to include the number of hits a dashboard has receieved. Defaults to include the hits. (optional, default to true)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserDashboardSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserDashboardSummary>> UsersGetUserDashboardsAsyncWithHttpInfo (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, bool? doSystemLookup = null, bool? includeNumberOfHits = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns details for the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the details for</param>
        /// <returns>Task of UserDetail</returns>
        System.Threading.Tasks.Task<UserDetail> UsersGetUserDetailsAsync (string dataViewName, string username);

        /// <summary>
        /// Returns details for the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the details for</param>
        /// <returns>Task of ApiResponse (UserDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDetail>> UsersGetUserDetailsAsyncWithHttpInfo (string dataViewName, string username);
        /// <summary>
        /// Returns all users in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">If specified, whether to limit to only users attached to the system name (optional)</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="scope">If specified, whether to return all users, users attached to the DataView only, or users attached to the system only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate, LastAccessDate, UserLockedOutDate, LoginFailures, TimePasswordSet, PasswordManuallyExpired, PasswordNeverExpires. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate, LastAccessDate, UserLockedOutDate, LoginFailures, TimePasswordSet, PasswordManuallyExpired, PasswordNeverExpires. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserSummary> UsersGetUserDetailsListAsync (string dataViewName, string systemName = null, string includeDisabled = null, string scope = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all users in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">If specified, whether to limit to only users attached to the system name (optional)</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="scope">If specified, whether to return all users, users attached to the DataView only, or users attached to the system only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate, LastAccessDate, UserLockedOutDate, LoginFailures, TimePasswordSet, PasswordManuallyExpired, PasswordNeverExpires. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate, LastAccessDate, UserLockedOutDate, LoginFailures, TimePasswordSet, PasswordManuallyExpired, PasswordNeverExpires. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserSummary>> UsersGetUserDetailsListAsyncWithHttpInfo (string dataViewName, string systemName = null, string includeDisabled = null, string scope = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of invitations associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the invitations for</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserInvitationSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserInvitationSummary> UsersGetUserInvitationsAsync (string dataViewName, string username, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of invitations associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the invitations for</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserInvitationSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserInvitationSummary>> UsersGetUserInvitationsAsyncWithHttpInfo (string dataViewName, string username, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="elementId">The id of the PeopleStage element to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserWorkspaceSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserWorkspaceSummary> UsersGetUserPeopleStageElementWorkspacesAsync (string dataViewName, string username, string elementId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="elementId">The id of the PeopleStage element to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserWorkspaceSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserWorkspaceSummary>> UsersGetUserPeopleStageElementWorkspacesAsyncWithHttpInfo (string dataViewName, string username, string elementId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the details of a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the workspace for</param>
        /// <param name="workspaceId">The id of the workspace to view</param>
        /// <returns>Task of UserWorkspaceDetail</returns>
        System.Threading.Tasks.Task<UserWorkspaceDetail> UsersGetUserWorkspaceAsync (string dataViewName, string username, int? workspaceId);

        /// <summary>
        /// Returns the details of a particular workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the workspace for</param>
        /// <param name="workspaceId">The id of the workspace to view</param>
        /// <returns>Task of ApiResponse (UserWorkspaceDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserWorkspaceDetail>> UsersGetUserWorkspaceAsyncWithHttpInfo (string dataViewName, string username, int? workspaceId);
        /// <summary>
        /// Returns the list of workspaces associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserWorkspaceSummary</returns>
        System.Threading.Tasks.Task<PagedResultsUserWorkspaceSummary> UsersGetUserWorkspacesAsync (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of workspaces associated with the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserWorkspaceSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsUserWorkspaceSummary>> UsersGetUserWorkspacesAsyncWithHttpInfo (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Updates one or more audiences
        /// </summary>
        /// <remarks>
        /// Might require licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the audiences for</param>
        /// <param name="body">The details of the audiences to update.  Any value omitted for a audience will be left unchanged (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for any returned audiences or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for any returned audiences or not.  Defaults to true - to return briefs (optional)</param>
        /// <param name="includeWorkbookItems">If specified, whether to include the workbook items for any returned audiences or not.  Defaults to true - to return workbook items (optional)</param>
        /// <param name="includeWorkbookItemDetails">If specified, whether to include the workbook item details for any returned audiences or not.  Defaults to true - to return workbook item details (optional)</param>
        /// <returns>Task of PagedResultsModifyUserAudienceDetailResults</returns>
        System.Threading.Tasks.Task<PagedResultsModifyUserAudienceDetailResults> UsersModifyUserAudiencesAsync (string dataViewName, string username, ModifyItemsModifyUserAudience body = null, bool? includeQueries = null, bool? includeBrief = null, bool? includeWorkbookItems = null, bool? includeWorkbookItemDetails = null);

        /// <summary>
        /// Updates one or more audiences
        /// </summary>
        /// <remarks>
        /// Might require licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the audiences for</param>
        /// <param name="body">The details of the audiences to update.  Any value omitted for a audience will be left unchanged (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for any returned audiences or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for any returned audiences or not.  Defaults to true - to return briefs (optional)</param>
        /// <param name="includeWorkbookItems">If specified, whether to include the workbook items for any returned audiences or not.  Defaults to true - to return workbook items (optional)</param>
        /// <param name="includeWorkbookItemDetails">If specified, whether to include the workbook item details for any returned audiences or not.  Defaults to true - to return workbook item details (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsModifyUserAudienceDetailResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsModifyUserAudienceDetailResults>> UsersModifyUserAudiencesAsyncWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserAudience body = null, bool? includeQueries = null, bool? includeBrief = null, bool? includeWorkbookItems = null, bool? includeWorkbookItemDetails = null);
        /// <summary>
        /// Updates one or more collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collections for</param>
        /// <param name="body">The details of the collections to update.  Any value omitted for a collection will be left unchanged (optional)</param>
        /// <returns>Task of PagedResultsModifyUserCollectionDetailResults</returns>
        System.Threading.Tasks.Task<PagedResultsModifyUserCollectionDetailResults> UsersModifyUserCollectionsAsync (string dataViewName, string username, ModifyItemsModifyUserCollection body = null);

        /// <summary>
        /// Updates one or more collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collections for</param>
        /// <param name="body">The details of the collections to update.  Any value omitted for a collection will be left unchanged (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsModifyUserCollectionDetailResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsModifyUserCollectionDetailResults>> UsersModifyUserCollectionsAsyncWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserCollection body = null);
        /// <summary>
        /// Updates one or more dashboards
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the dashboards for</param>
        /// <param name="body">The details of the dashboards to update.  Any value omitted for a dashboard will be left unchanged (optional)</param>
        /// <returns>Task of PagedResultsModifyUserDashboardDetailResults</returns>
        System.Threading.Tasks.Task<PagedResultsModifyUserDashboardDetailResults> UsersModifyUserDashboardsAsync (string dataViewName, string username, ModifyItemsModifyUserDashboard body = null);

        /// <summary>
        /// Updates one or more dashboards
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Dashboards]
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the dashboards for</param>
        /// <param name="body">The details of the dashboards to update.  Any value omitted for a dashboard will be left unchanged (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsModifyUserDashboardDetailResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsModifyUserDashboardDetailResults>> UsersModifyUserDashboardsAsyncWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserDashboard body = null);
        /// <summary>
        /// Updates one or more workspaces
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the workspaces for</param>
        /// <param name="body">The details of the workspaces to update.  Any value omitted for a workspace will be left unchanged (optional)</param>
        /// <returns>Task of PagedResultsModifyUserWorkspaceDetailResults</returns>
        System.Threading.Tasks.Task<PagedResultsModifyUserWorkspaceDetailResults> UsersModifyUserWorkspacesAsync (string dataViewName, string username, ModifyItemsModifyUserWorkspace body = null);

        /// <summary>
        /// Updates one or more workspaces
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the workspaces for</param>
        /// <param name="body">The details of the workspaces to update.  Any value omitted for a workspace will be left unchanged (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsModifyUserWorkspaceDetailResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsModifyUserWorkspaceDetailResults>> UsersModifyUserWorkspacesAsyncWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserWorkspace body = null);
        /// <summary>
        /// Updates user details for the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The details to update the user with (optional)</param>
        /// <param name="systemName">The system name associated with the user (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of UserSummary</returns>
        System.Threading.Tasks.Task<UserSummary> UsersUpdateUserDetailsAsync (string dataViewName, string username, UpdateUserDetails body = null, string systemName = null, string scope = null);

        /// <summary>
        /// Updates user details for the given username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The details to update the user with (optional)</param>
        /// <param name="systemName">The system name associated with the user (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of ApiResponse (UserSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSummary>> UsersUpdateUserDetailsAsyncWithHttpInfo (string dataViewName, string username, UpdateUserDetails body = null, string systemName = null, string scope = null);
        /// <summary>
        /// Modify the specified user groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s groups to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of UserSummary</returns>
        System.Threading.Tasks.Task<UserSummary> UsersUpdateUserGroupsAsync (string dataViewName, string username, ModifyUserGroups body = null, string systemName = null, string scope = null);

        /// <summary>
        /// Modify the specified user groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s groups to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of ApiResponse (UserSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSummary>> UsersUpdateUserGroupsAsyncWithHttpInfo (string dataViewName, string username, ModifyUserGroups body = null, string systemName = null, string scope = null);
        /// <summary>
        /// Modify the specified user&#x27;s systems
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s systems to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of UserSummary</returns>
        System.Threading.Tasks.Task<UserSummary> UsersUpdateUserSystemsAsync (string dataViewName, string username, ModifyUserSystems body = null, string systemName = null, string scope = null);

        /// <summary>
        /// Modify the specified user&#x27;s systems
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s systems to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of ApiResponse (UserSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSummary>> UsersUpdateUserSystemsAsyncWithHttpInfo (string dataViewName, string username, ModifyUserSystems body = null, string systemName = null, string scope = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class UsersApi : IUsersApi
    {
        private Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new Apteco.ApiRescheduler.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// </summary>
        /// <returns></returns>
        public UsersApi()
        {
            this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Apteco.ApiRescheduler.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.ApiRescheduler.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiRescheduler.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.ApiRescheduler.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiRescheduler.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Change the password for the user with the given username 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s current and new password (optional)</param>
        /// <returns></returns>
        public void UsersChangeUserPassword (string dataViewName, string username, ChangePasswordDetails body = null)
        {
             UsersChangeUserPasswordWithHttpInfo(dataViewName, username, body);
        }

        /// <summary>
        /// Change the password for the user with the given username 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s current and new password (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersChangeUserPasswordWithHttpInfo (string dataViewName, string username, ChangePasswordDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersChangeUserPassword");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersChangeUserPassword");

            var localVarPath = "./{dataViewName}/Users/{username}/ChangePassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersChangeUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Change the password for the user with the given username 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s current and new password (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersChangeUserPasswordAsync (string dataViewName, string username, ChangePasswordDetails body = null)
        {
             await UsersChangeUserPasswordAsyncWithHttpInfo(dataViewName, username, body);

        }

        /// <summary>
        /// Change the password for the user with the given username 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s current and new password (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersChangeUserPasswordAsyncWithHttpInfo (string dataViewName, string username, ChangePasswordDetails body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersChangeUserPassword");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersChangeUserPassword");

            var localVarPath = "./{dataViewName}/Users/{username}/ChangePassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersChangeUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Creates a new user. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the user to create. (optional)</param>
        /// <param name="systemName">The system name for the user to be associated with. (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>UserSummary</returns>
        public UserSummary UsersCreateUser (string dataViewName, CreateUserDetails body = null, string systemName = null, string scope = null)
        {
             ApiResponse<UserSummary> localVarResponse = UsersCreateUserWithHttpInfo(dataViewName, body, systemName, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new user. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the user to create. (optional)</param>
        /// <param name="systemName">The system name for the user to be associated with. (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>ApiResponse of UserSummary</returns>
        public ApiResponse< UserSummary > UsersCreateUserWithHttpInfo (string dataViewName, CreateUserDetails body = null, string systemName = null, string scope = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersCreateUser");

            var localVarPath = "./{dataViewName}/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersCreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSummary)));
        }

        /// <summary>
        /// Creates a new user. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the user to create. (optional)</param>
        /// <param name="systemName">The system name for the user to be associated with. (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of UserSummary</returns>
        public async System.Threading.Tasks.Task<UserSummary> UsersCreateUserAsync (string dataViewName, CreateUserDetails body = null, string systemName = null, string scope = null)
        {
             ApiResponse<UserSummary> localVarResponse = await UsersCreateUserAsyncWithHttpInfo(dataViewName, body, systemName, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new user. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="body">The details for the user to create. (optional)</param>
        /// <param name="systemName">The system name for the user to be associated with. (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of ApiResponse (UserSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSummary>> UsersCreateUserAsyncWithHttpInfo (string dataViewName, CreateUserDetails body = null, string systemName = null, string scope = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersCreateUser");

            var localVarPath = "./{dataViewName}/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersCreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSummary)));
        }

        /// <summary>
        /// Deletes the specified user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to delete</param>
        /// <param name="systemName">If specified, whether to delete the user from this system only (optional)</param>
        /// <returns></returns>
        public void UsersDeleteUser (string dataViewName, string username, string systemName = null)
        {
             UsersDeleteUserWithHttpInfo(dataViewName, username, systemName);
        }

        /// <summary>
        /// Deletes the specified user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to delete</param>
        /// <param name="systemName">If specified, whether to delete the user from this system only (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersDeleteUserWithHttpInfo (string dataViewName, string username, string systemName = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersDeleteUser");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersDeleteUser");

            var localVarPath = "./{dataViewName}/Users/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersDeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes the specified user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to delete</param>
        /// <param name="systemName">If specified, whether to delete the user from this system only (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersDeleteUserAsync (string dataViewName, string username, string systemName = null)
        {
             await UsersDeleteUserAsyncWithHttpInfo(dataViewName, username, systemName);

        }

        /// <summary>
        /// Deletes the specified user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to delete</param>
        /// <param name="systemName">If specified, whether to delete the user from this system only (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersDeleteUserAsyncWithHttpInfo (string dataViewName, string username, string systemName = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersDeleteUser");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersDeleteUser");

            var localVarPath = "./{dataViewName}/Users/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersDeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets a list of users last login history 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName"></param>
        /// <param name="username">The user to get login history for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, ClientType, SystemName, Timestamp. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, ClientType, SystemName, Timestamp. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserLogin</returns>
        public PagedResultsUserLogin UsersGetPreviousLoginHistory (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserLogin> localVarResponse = UsersGetPreviousLoginHistoryWithHttpInfo(dataViewName, username, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of users last login history 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName"></param>
        /// <param name="username">The user to get login history for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, ClientType, SystemName, Timestamp. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, ClientType, SystemName, Timestamp. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserLogin</returns>
        public ApiResponse< PagedResultsUserLogin > UsersGetPreviousLoginHistoryWithHttpInfo (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetPreviousLoginHistory");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetPreviousLoginHistory");

            var localVarPath = "./{dataViewName}/Users/{username}/LoginHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetPreviousLoginHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserLogin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserLogin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserLogin)));
        }

        /// <summary>
        /// Gets a list of users last login history 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName"></param>
        /// <param name="username">The user to get login history for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, ClientType, SystemName, Timestamp. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, ClientType, SystemName, Timestamp. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserLogin</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserLogin> UsersGetPreviousLoginHistoryAsync (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserLogin> localVarResponse = await UsersGetPreviousLoginHistoryAsyncWithHttpInfo(dataViewName, username, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of users last login history 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName"></param>
        /// <param name="username">The user to get login history for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, ClientType, SystemName, Timestamp. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, ClientType, SystemName, Timestamp. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserLogin)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserLogin>> UsersGetPreviousLoginHistoryAsyncWithHttpInfo (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetPreviousLoginHistory");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetPreviousLoginHistory");

            var localVarPath = "./{dataViewName}/Users/{username}/LoginHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetPreviousLoginHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserLogin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserLogin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserLogin)));
        }

        /// <summary>
        /// Returns the details of a particular audience 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the audience for</param>
        /// <param name="audienceId">The id of the audience to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <param name="includeWorkbookItems">If specified, whether to include the workbook items for this audience or not.  Defaults to true - to return the workbook items (optional)</param>
        /// <returns>UserAudienceDetail</returns>
        public UserAudienceDetail UsersGetUserAudience (string dataViewName, string username, int? audienceId, bool? includeQueries = null, bool? includeBrief = null, bool? includeWorkbookItems = null)
        {
             ApiResponse<UserAudienceDetail> localVarResponse = UsersGetUserAudienceWithHttpInfo(dataViewName, username, audienceId, includeQueries, includeBrief, includeWorkbookItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular audience 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the audience for</param>
        /// <param name="audienceId">The id of the audience to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <param name="includeWorkbookItems">If specified, whether to include the workbook items for this audience or not.  Defaults to true - to return the workbook items (optional)</param>
        /// <returns>ApiResponse of UserAudienceDetail</returns>
        public ApiResponse< UserAudienceDetail > UsersGetUserAudienceWithHttpInfo (string dataViewName, string username, int? audienceId, bool? includeQueries = null, bool? includeBrief = null, bool? includeWorkbookItems = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserAudience");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserAudience");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling UsersApi->UsersGetUserAudience");

            var localVarPath = "./{dataViewName}/Users/{username}/Audiences/{audienceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter
            if (includeWorkbookItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeWorkbookItems", includeWorkbookItems)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAudienceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserAudienceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAudienceDetail)));
        }

        /// <summary>
        /// Returns the details of a particular audience 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the audience for</param>
        /// <param name="audienceId">The id of the audience to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <param name="includeWorkbookItems">If specified, whether to include the workbook items for this audience or not.  Defaults to true - to return the workbook items (optional)</param>
        /// <returns>Task of UserAudienceDetail</returns>
        public async System.Threading.Tasks.Task<UserAudienceDetail> UsersGetUserAudienceAsync (string dataViewName, string username, int? audienceId, bool? includeQueries = null, bool? includeBrief = null, bool? includeWorkbookItems = null)
        {
             ApiResponse<UserAudienceDetail> localVarResponse = await UsersGetUserAudienceAsyncWithHttpInfo(dataViewName, username, audienceId, includeQueries, includeBrief, includeWorkbookItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular audience 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the audience for</param>
        /// <param name="audienceId">The id of the audience to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <param name="includeWorkbookItems">If specified, whether to include the workbook items for this audience or not.  Defaults to true - to return the workbook items (optional)</param>
        /// <returns>Task of ApiResponse (UserAudienceDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAudienceDetail>> UsersGetUserAudienceAsyncWithHttpInfo (string dataViewName, string username, int? audienceId, bool? includeQueries = null, bool? includeBrief = null, bool? includeWorkbookItems = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserAudience");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserAudience");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling UsersApi->UsersGetUserAudience");

            var localVarPath = "./{dataViewName}/Users/{username}/Audiences/{audienceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter
            if (includeWorkbookItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeWorkbookItems", includeWorkbookItems)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAudienceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserAudienceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAudienceDetail)));
        }

        /// <summary>
        /// Returns the details of a particular composition 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the composition for</param>
        /// <param name="compositionId">The id of the composition to view</param>
        /// <returns>UserAudienceCompositionDetail</returns>
        public UserAudienceCompositionDetail UsersGetUserAudienceComposition (string dataViewName, string username, int? compositionId)
        {
             ApiResponse<UserAudienceCompositionDetail> localVarResponse = UsersGetUserAudienceCompositionWithHttpInfo(dataViewName, username, compositionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular composition 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the composition for</param>
        /// <param name="compositionId">The id of the composition to view</param>
        /// <returns>ApiResponse of UserAudienceCompositionDetail</returns>
        public ApiResponse< UserAudienceCompositionDetail > UsersGetUserAudienceCompositionWithHttpInfo (string dataViewName, string username, int? compositionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserAudienceComposition");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserAudienceComposition");
            // verify the required parameter 'compositionId' is set
            if (compositionId == null)
                throw new ApiException(400, "Missing required parameter 'compositionId' when calling UsersApi->UsersGetUserAudienceComposition");

            var localVarPath = "./{dataViewName}/Users/{username}/AudienceCompositions/{compositionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (compositionId != null) localVarPathParams.Add("compositionId", this.Configuration.ApiClient.ParameterToString(compositionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserAudienceComposition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAudienceCompositionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserAudienceCompositionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAudienceCompositionDetail)));
        }

        /// <summary>
        /// Returns the details of a particular composition 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the composition for</param>
        /// <param name="compositionId">The id of the composition to view</param>
        /// <returns>Task of UserAudienceCompositionDetail</returns>
        public async System.Threading.Tasks.Task<UserAudienceCompositionDetail> UsersGetUserAudienceCompositionAsync (string dataViewName, string username, int? compositionId)
        {
             ApiResponse<UserAudienceCompositionDetail> localVarResponse = await UsersGetUserAudienceCompositionAsyncWithHttpInfo(dataViewName, username, compositionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular composition 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the composition for</param>
        /// <param name="compositionId">The id of the composition to view</param>
        /// <returns>Task of ApiResponse (UserAudienceCompositionDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAudienceCompositionDetail>> UsersGetUserAudienceCompositionAsyncWithHttpInfo (string dataViewName, string username, int? compositionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserAudienceComposition");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserAudienceComposition");
            // verify the required parameter 'compositionId' is set
            if (compositionId == null)
                throw new ApiException(400, "Missing required parameter 'compositionId' when calling UsersApi->UsersGetUserAudienceComposition");

            var localVarPath = "./{dataViewName}/Users/{username}/AudienceCompositions/{compositionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (compositionId != null) localVarPathParams.Add("compositionId", this.Configuration.ApiClient.ParameterToString(compositionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserAudienceComposition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAudienceCompositionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserAudienceCompositionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAudienceCompositionDetail)));
        }

        /// <summary>
        /// Returns the list of audience compositions associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audience compositions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserAudienceCompositionSummary</returns>
        public PagedResultsUserAudienceCompositionSummary UsersGetUserAudienceCompositions (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserAudienceCompositionSummary> localVarResponse = UsersGetUserAudienceCompositionsWithHttpInfo(dataViewName, username, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of audience compositions associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audience compositions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserAudienceCompositionSummary</returns>
        public ApiResponse< PagedResultsUserAudienceCompositionSummary > UsersGetUserAudienceCompositionsWithHttpInfo (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserAudienceCompositions");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserAudienceCompositions");

            var localVarPath = "./{dataViewName}/Users/{username}/AudienceCompositions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserAudienceCompositions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserAudienceCompositionSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserAudienceCompositionSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserAudienceCompositionSummary)));
        }

        /// <summary>
        /// Returns the list of audience compositions associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audience compositions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserAudienceCompositionSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserAudienceCompositionSummary> UsersGetUserAudienceCompositionsAsync (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserAudienceCompositionSummary> localVarResponse = await UsersGetUserAudienceCompositionsAsyncWithHttpInfo(dataViewName, username, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of audience compositions associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audience compositions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserAudienceCompositionSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserAudienceCompositionSummary>> UsersGetUserAudienceCompositionsAsyncWithHttpInfo (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserAudienceCompositions");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserAudienceCompositions");

            var localVarPath = "./{dataViewName}/Users/{username}/AudienceCompositions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserAudienceCompositions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserAudienceCompositionSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserAudienceCompositionSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserAudienceCompositionSummary)));
        }

        /// <summary>
        /// Returns the details of a particular audience export template 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the audience export template for</param>
        /// <param name="exportTemplateId">The id of the audience export template to view</param>
        /// <returns>UserAudienceExportTemplateDetail</returns>
        public UserAudienceExportTemplateDetail UsersGetUserAudienceExportTemplate (string dataViewName, string username, int? exportTemplateId)
        {
             ApiResponse<UserAudienceExportTemplateDetail> localVarResponse = UsersGetUserAudienceExportTemplateWithHttpInfo(dataViewName, username, exportTemplateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular audience export template 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the audience export template for</param>
        /// <param name="exportTemplateId">The id of the audience export template to view</param>
        /// <returns>ApiResponse of UserAudienceExportTemplateDetail</returns>
        public ApiResponse< UserAudienceExportTemplateDetail > UsersGetUserAudienceExportTemplateWithHttpInfo (string dataViewName, string username, int? exportTemplateId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserAudienceExportTemplate");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserAudienceExportTemplate");
            // verify the required parameter 'exportTemplateId' is set
            if (exportTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'exportTemplateId' when calling UsersApi->UsersGetUserAudienceExportTemplate");

            var localVarPath = "./{dataViewName}/Users/{username}/AudienceExportTemplates/{exportTemplateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (exportTemplateId != null) localVarPathParams.Add("exportTemplateId", this.Configuration.ApiClient.ParameterToString(exportTemplateId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserAudienceExportTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAudienceExportTemplateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserAudienceExportTemplateDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAudienceExportTemplateDetail)));
        }

        /// <summary>
        /// Returns the details of a particular audience export template 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the audience export template for</param>
        /// <param name="exportTemplateId">The id of the audience export template to view</param>
        /// <returns>Task of UserAudienceExportTemplateDetail</returns>
        public async System.Threading.Tasks.Task<UserAudienceExportTemplateDetail> UsersGetUserAudienceExportTemplateAsync (string dataViewName, string username, int? exportTemplateId)
        {
             ApiResponse<UserAudienceExportTemplateDetail> localVarResponse = await UsersGetUserAudienceExportTemplateAsyncWithHttpInfo(dataViewName, username, exportTemplateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular audience export template 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the audience export template for</param>
        /// <param name="exportTemplateId">The id of the audience export template to view</param>
        /// <returns>Task of ApiResponse (UserAudienceExportTemplateDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAudienceExportTemplateDetail>> UsersGetUserAudienceExportTemplateAsyncWithHttpInfo (string dataViewName, string username, int? exportTemplateId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserAudienceExportTemplate");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserAudienceExportTemplate");
            // verify the required parameter 'exportTemplateId' is set
            if (exportTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'exportTemplateId' when calling UsersApi->UsersGetUserAudienceExportTemplate");

            var localVarPath = "./{dataViewName}/Users/{username}/AudienceExportTemplates/{exportTemplateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (exportTemplateId != null) localVarPathParams.Add("exportTemplateId", this.Configuration.ApiClient.ParameterToString(exportTemplateId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserAudienceExportTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAudienceExportTemplateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserAudienceExportTemplateDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAudienceExportTemplateDetail)));
        }

        /// <summary>
        /// Returns the list of audience export templates associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audience export templates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserAudienceExportTemplateDetail</returns>
        public PagedResultsUserAudienceExportTemplateDetail UsersGetUserAudienceExportTemplates (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserAudienceExportTemplateDetail> localVarResponse = UsersGetUserAudienceExportTemplatesWithHttpInfo(dataViewName, username, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of audience export templates associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audience export templates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserAudienceExportTemplateDetail</returns>
        public ApiResponse< PagedResultsUserAudienceExportTemplateDetail > UsersGetUserAudienceExportTemplatesWithHttpInfo (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserAudienceExportTemplates");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserAudienceExportTemplates");

            var localVarPath = "./{dataViewName}/Users/{username}/AudienceExportTemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserAudienceExportTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserAudienceExportTemplateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserAudienceExportTemplateDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserAudienceExportTemplateDetail)));
        }

        /// <summary>
        /// Returns the list of audience export templates associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audience export templates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserAudienceExportTemplateDetail</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserAudienceExportTemplateDetail> UsersGetUserAudienceExportTemplatesAsync (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserAudienceExportTemplateDetail> localVarResponse = await UsersGetUserAudienceExportTemplatesAsyncWithHttpInfo(dataViewName, username, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of audience export templates associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audience export templates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserAudienceExportTemplateDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserAudienceExportTemplateDetail>> UsersGetUserAudienceExportTemplatesAsyncWithHttpInfo (string dataViewName, string username, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserAudienceExportTemplates");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserAudienceExportTemplates");

            var localVarPath = "./{dataViewName}/Users/{username}/AudienceExportTemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserAudienceExportTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserAudienceExportTemplateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserAudienceExportTemplateDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserAudienceExportTemplateDetail)));
        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given audience 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="audienceId">The id of the audience to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserWorkspaceSummary</returns>
        public PagedResultsUserWorkspaceSummary UsersGetUserAudienceWorkspaces (string dataViewName, string username, int? audienceId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserWorkspaceSummary> localVarResponse = UsersGetUserAudienceWorkspacesWithHttpInfo(dataViewName, username, audienceId, includeDeleted, applyPinnedSort, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given audience 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="audienceId">The id of the audience to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserWorkspaceSummary</returns>
        public ApiResponse< PagedResultsUserWorkspaceSummary > UsersGetUserAudienceWorkspacesWithHttpInfo (string dataViewName, string username, int? audienceId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserAudienceWorkspaces");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserAudienceWorkspaces");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling UsersApi->UsersGetUserAudienceWorkspaces");

            var localVarPath = "./{dataViewName}/Users/{username}/Audiences/{audienceId}/Workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (applyPinnedSort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyPinnedSort", applyPinnedSort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserAudienceWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserWorkspaceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserWorkspaceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserWorkspaceSummary)));
        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given audience 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="audienceId">The id of the audience to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserWorkspaceSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserWorkspaceSummary> UsersGetUserAudienceWorkspacesAsync (string dataViewName, string username, int? audienceId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserWorkspaceSummary> localVarResponse = await UsersGetUserAudienceWorkspacesAsyncWithHttpInfo(dataViewName, username, audienceId, includeDeleted, applyPinnedSort, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given audience 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="audienceId">The id of the audience to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserWorkspaceSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserWorkspaceSummary>> UsersGetUserAudienceWorkspacesAsyncWithHttpInfo (string dataViewName, string username, int? audienceId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserAudienceWorkspaces");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserAudienceWorkspaces");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling UsersApi->UsersGetUserAudienceWorkspaces");

            var localVarPath = "./{dataViewName}/Users/{username}/Audiences/{audienceId}/Workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (applyPinnedSort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyPinnedSort", applyPinnedSort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserAudienceWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserWorkspaceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserWorkspaceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserWorkspaceSummary)));
        }

        /// <summary>
        /// Returns the list of audiences associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audiences for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted audiences, not deleted audiences or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned audiences are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="includeResults">If specified, whether to include results (inc counts).  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserAudienceSummary</returns>
        public PagedResultsUserAudienceSummary UsersGetUserAudiences (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, bool? includeResults = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserAudienceSummary> localVarResponse = UsersGetUserAudiencesWithHttpInfo(dataViewName, username, includeDeleted, applyPinnedSort, includeResults, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of audiences associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audiences for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted audiences, not deleted audiences or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned audiences are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="includeResults">If specified, whether to include results (inc counts).  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserAudienceSummary</returns>
        public ApiResponse< PagedResultsUserAudienceSummary > UsersGetUserAudiencesWithHttpInfo (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, bool? includeResults = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserAudiences");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserAudiences");

            var localVarPath = "./{dataViewName}/Users/{username}/Audiences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (applyPinnedSort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyPinnedSort", applyPinnedSort)); // query parameter
            if (includeResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeResults", includeResults)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserAudiences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserAudienceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserAudienceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserAudienceSummary)));
        }

        /// <summary>
        /// Returns the list of audiences associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audiences for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted audiences, not deleted audiences or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned audiences are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="includeResults">If specified, whether to include results (inc counts).  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserAudienceSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserAudienceSummary> UsersGetUserAudiencesAsync (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, bool? includeResults = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserAudienceSummary> localVarResponse = await UsersGetUserAudiencesAsyncWithHttpInfo(dataViewName, username, includeDeleted, applyPinnedSort, includeResults, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of audiences associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the audiences for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted audiences, not deleted audiences or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned audiences are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="includeResults">If specified, whether to include results (inc counts).  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserAudienceSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserAudienceSummary>> UsersGetUserAudiencesAsyncWithHttpInfo (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, bool? includeResults = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserAudiences");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserAudiences");

            var localVarPath = "./{dataViewName}/Users/{username}/Audiences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (applyPinnedSort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyPinnedSort", applyPinnedSort)); // query parameter
            if (includeResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeResults", includeResults)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserAudiences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserAudienceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserAudienceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserAudienceSummary)));
        }

        /// <summary>
        /// Returns the details of a particular collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the collection for</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>UserCollectionDetail</returns>
        public UserCollectionDetail UsersGetUserCollection (string dataViewName, string username, int? collectionId)
        {
             ApiResponse<UserCollectionDetail> localVarResponse = UsersGetUserCollectionWithHttpInfo(dataViewName, username, collectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the collection for</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>ApiResponse of UserCollectionDetail</returns>
        public ApiResponse< UserCollectionDetail > UsersGetUserCollectionWithHttpInfo (string dataViewName, string username, int? collectionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserCollection");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling UsersApi->UsersGetUserCollection");

            var localVarPath = "./{dataViewName}/Users/{username}/Collections/{collectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCollectionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserCollectionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCollectionDetail)));
        }

        /// <summary>
        /// Returns the details of a particular collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the collection for</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>Task of UserCollectionDetail</returns>
        public async System.Threading.Tasks.Task<UserCollectionDetail> UsersGetUserCollectionAsync (string dataViewName, string username, int? collectionId)
        {
             ApiResponse<UserCollectionDetail> localVarResponse = await UsersGetUserCollectionAsyncWithHttpInfo(dataViewName, username, collectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the collection for</param>
        /// <param name="collectionId">The id of the collection to view</param>
        /// <returns>Task of ApiResponse (UserCollectionDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCollectionDetail>> UsersGetUserCollectionAsyncWithHttpInfo (string dataViewName, string username, int? collectionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserCollection");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserCollection");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling UsersApi->UsersGetUserCollection");

            var localVarPath = "./{dataViewName}/Users/{username}/Collections/{collectionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCollectionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserCollectionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCollectionDetail)));
        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="collectionId">The id of the collection to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserWorkspaceSummary</returns>
        public PagedResultsUserWorkspaceSummary UsersGetUserCollectionWorkspaces (string dataViewName, string username, int? collectionId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserWorkspaceSummary> localVarResponse = UsersGetUserCollectionWorkspacesWithHttpInfo(dataViewName, username, collectionId, includeDeleted, applyPinnedSort, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="collectionId">The id of the collection to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserWorkspaceSummary</returns>
        public ApiResponse< PagedResultsUserWorkspaceSummary > UsersGetUserCollectionWorkspacesWithHttpInfo (string dataViewName, string username, int? collectionId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserCollectionWorkspaces");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserCollectionWorkspaces");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling UsersApi->UsersGetUserCollectionWorkspaces");

            var localVarPath = "./{dataViewName}/Users/{username}/Collections/{collectionId}/Workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (applyPinnedSort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyPinnedSort", applyPinnedSort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserCollectionWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserWorkspaceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserWorkspaceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserWorkspaceSummary)));
        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="collectionId">The id of the collection to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserWorkspaceSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserWorkspaceSummary> UsersGetUserCollectionWorkspacesAsync (string dataViewName, string username, int? collectionId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserWorkspaceSummary> localVarResponse = await UsersGetUserCollectionWorkspacesAsyncWithHttpInfo(dataViewName, username, collectionId, includeDeleted, applyPinnedSort, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given collection 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="collectionId">The id of the collection to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserWorkspaceSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserWorkspaceSummary>> UsersGetUserCollectionWorkspacesAsyncWithHttpInfo (string dataViewName, string username, int? collectionId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserCollectionWorkspaces");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserCollectionWorkspaces");
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling UsersApi->UsersGetUserCollectionWorkspaces");

            var localVarPath = "./{dataViewName}/Users/{username}/Collections/{collectionId}/Workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (applyPinnedSort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyPinnedSort", applyPinnedSort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserCollectionWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserWorkspaceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserWorkspaceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserWorkspaceSummary)));
        }

        /// <summary>
        /// Returns the list of collections associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the collections for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned collections are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserCollectionSummary</returns>
        public PagedResultsUserCollectionSummary UsersGetUserCollections (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserCollectionSummary> localVarResponse = UsersGetUserCollectionsWithHttpInfo(dataViewName, username, includeDeleted, applyPinnedSort, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of collections associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the collections for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned collections are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserCollectionSummary</returns>
        public ApiResponse< PagedResultsUserCollectionSummary > UsersGetUserCollectionsWithHttpInfo (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserCollections");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserCollections");

            var localVarPath = "./{dataViewName}/Users/{username}/Collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (applyPinnedSort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyPinnedSort", applyPinnedSort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserCollections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserCollectionSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserCollectionSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserCollectionSummary)));
        }

        /// <summary>
        /// Returns the list of collections associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the collections for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned collections are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserCollectionSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserCollectionSummary> UsersGetUserCollectionsAsync (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserCollectionSummary> localVarResponse = await UsersGetUserCollectionsAsyncWithHttpInfo(dataViewName, username, includeDeleted, applyPinnedSort, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of collections associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the collections for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned collections are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserCollectionSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserCollectionSummary>> UsersGetUserCollectionsAsyncWithHttpInfo (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserCollections");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserCollections");

            var localVarPath = "./{dataViewName}/Users/{username}/Collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (applyPinnedSort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyPinnedSort", applyPinnedSort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserCollections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserCollectionSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserCollectionSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserCollectionSummary)));
        }

        /// <summary>
        /// Gets the user configuration 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>UserConfigurationDetails</returns>
        public UserConfigurationDetails UsersGetUserConfiguration (string dataViewName)
        {
             ApiResponse<UserConfigurationDetails> localVarResponse = UsersGetUserConfigurationWithHttpInfo(dataViewName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the user configuration 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>ApiResponse of UserConfigurationDetails</returns>
        public ApiResponse< UserConfigurationDetails > UsersGetUserConfigurationWithHttpInfo (string dataViewName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserConfiguration");

            var localVarPath = "./{dataViewName}/Users/Configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserConfigurationDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserConfigurationDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserConfigurationDetails)));
        }

        /// <summary>
        /// Gets the user configuration 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of UserConfigurationDetails</returns>
        public async System.Threading.Tasks.Task<UserConfigurationDetails> UsersGetUserConfigurationAsync (string dataViewName)
        {
             ApiResponse<UserConfigurationDetails> localVarResponse = await UsersGetUserConfigurationAsyncWithHttpInfo(dataViewName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the user configuration 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <returns>Task of ApiResponse (UserConfigurationDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserConfigurationDetails>> UsersGetUserConfigurationAsyncWithHttpInfo (string dataViewName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserConfiguration");

            var localVarPath = "./{dataViewName}/Users/Configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserConfigurationDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserConfigurationDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserConfigurationDetails)));
        }

        /// <summary>
        /// Gets a dashboard in the DataView. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the dashboard for</param>
        /// <param name="dashboardId">The Id for the dashboard</param>
        /// <returns>UserDashboardDetail</returns>
        public UserDashboardDetail UsersGetUserDashboard (string dataViewName, string username, int? dashboardId)
        {
             ApiResponse<UserDashboardDetail> localVarResponse = UsersGetUserDashboardWithHttpInfo(dataViewName, username, dashboardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a dashboard in the DataView. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the dashboard for</param>
        /// <param name="dashboardId">The Id for the dashboard</param>
        /// <returns>ApiResponse of UserDashboardDetail</returns>
        public ApiResponse< UserDashboardDetail > UsersGetUserDashboardWithHttpInfo (string dataViewName, string username, int? dashboardId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserDashboard");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserDashboard");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling UsersApi->UsersGetUserDashboard");

            var localVarPath = "./{dataViewName}/Users/{username}/Dashboards/{dashboardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserDashboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDashboardDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserDashboardDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDashboardDetail)));
        }

        /// <summary>
        /// Gets a dashboard in the DataView. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the dashboard for</param>
        /// <param name="dashboardId">The Id for the dashboard</param>
        /// <returns>Task of UserDashboardDetail</returns>
        public async System.Threading.Tasks.Task<UserDashboardDetail> UsersGetUserDashboardAsync (string dataViewName, string username, int? dashboardId)
        {
             ApiResponse<UserDashboardDetail> localVarResponse = await UsersGetUserDashboardAsyncWithHttpInfo(dataViewName, username, dashboardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a dashboard in the DataView. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the dashboard for</param>
        /// <param name="dashboardId">The Id for the dashboard</param>
        /// <returns>Task of ApiResponse (UserDashboardDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDashboardDetail>> UsersGetUserDashboardAsyncWithHttpInfo (string dataViewName, string username, int? dashboardId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserDashboard");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserDashboard");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling UsersApi->UsersGetUserDashboard");

            var localVarPath = "./{dataViewName}/Users/{username}/Dashboards/{dashboardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserDashboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDashboardDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserDashboardDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDashboardDetail)));
        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given dashboard 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="dashboardId">The id of the dashboard to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserWorkspaceSummary</returns>
        public PagedResultsUserWorkspaceSummary UsersGetUserDashboardWorkspaces (string dataViewName, string username, int? dashboardId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserWorkspaceSummary> localVarResponse = UsersGetUserDashboardWorkspacesWithHttpInfo(dataViewName, username, dashboardId, includeDeleted, applyPinnedSort, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given dashboard 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="dashboardId">The id of the dashboard to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserWorkspaceSummary</returns>
        public ApiResponse< PagedResultsUserWorkspaceSummary > UsersGetUserDashboardWorkspacesWithHttpInfo (string dataViewName, string username, int? dashboardId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserDashboardWorkspaces");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserDashboardWorkspaces");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling UsersApi->UsersGetUserDashboardWorkspaces");

            var localVarPath = "./{dataViewName}/Users/{username}/Dashboards/{dashboardId}/Workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (applyPinnedSort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyPinnedSort", applyPinnedSort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserDashboardWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserWorkspaceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserWorkspaceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserWorkspaceSummary)));
        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given dashboard 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="dashboardId">The id of the dashboard to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserWorkspaceSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserWorkspaceSummary> UsersGetUserDashboardWorkspacesAsync (string dataViewName, string username, int? dashboardId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserWorkspaceSummary> localVarResponse = await UsersGetUserDashboardWorkspacesAsyncWithHttpInfo(dataViewName, username, dashboardId, includeDeleted, applyPinnedSort, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given dashboard 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="dashboardId">The id of the dashboard to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserWorkspaceSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserWorkspaceSummary>> UsersGetUserDashboardWorkspacesAsyncWithHttpInfo (string dataViewName, string username, int? dashboardId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserDashboardWorkspaces");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserDashboardWorkspaces");
            // verify the required parameter 'dashboardId' is set
            if (dashboardId == null)
                throw new ApiException(400, "Missing required parameter 'dashboardId' when calling UsersApi->UsersGetUserDashboardWorkspaces");

            var localVarPath = "./{dataViewName}/Users/{username}/Dashboards/{dashboardId}/Workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (dashboardId != null) localVarPathParams.Add("dashboardId", this.Configuration.ApiClient.ParameterToString(dashboardId)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (applyPinnedSort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyPinnedSort", applyPinnedSort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserDashboardWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserWorkspaceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserWorkspaceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserWorkspaceSummary)));
        }

        /// <summary>
        /// Gets a list of dashboards in the DataView. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the dashboard for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted dashboards, not deleted dashboards or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned dashboards are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="doSystemLookup">If specified, whether to perform a synchronous eager system lookup for the base queries of the dashboards in the list. N.B. the results of the lookups are not returned in the results but the cache will be populated for subsequent dashboard detail calls. Defaults to false (optional)</param>
        /// <param name="includeNumberOfHits">If specified, whether to include the number of hits a dashboard has receieved. Defaults to include the hits. (optional, default to true)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserDashboardSummary</returns>
        public PagedResultsUserDashboardSummary UsersGetUserDashboards (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, bool? doSystemLookup = null, bool? includeNumberOfHits = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserDashboardSummary> localVarResponse = UsersGetUserDashboardsWithHttpInfo(dataViewName, username, includeDeleted, applyPinnedSort, doSystemLookup, includeNumberOfHits, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of dashboards in the DataView. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the dashboard for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted dashboards, not deleted dashboards or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned dashboards are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="doSystemLookup">If specified, whether to perform a synchronous eager system lookup for the base queries of the dashboards in the list. N.B. the results of the lookups are not returned in the results but the cache will be populated for subsequent dashboard detail calls. Defaults to false (optional)</param>
        /// <param name="includeNumberOfHits">If specified, whether to include the number of hits a dashboard has receieved. Defaults to include the hits. (optional, default to true)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserDashboardSummary</returns>
        public ApiResponse< PagedResultsUserDashboardSummary > UsersGetUserDashboardsWithHttpInfo (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, bool? doSystemLookup = null, bool? includeNumberOfHits = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserDashboards");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserDashboards");

            var localVarPath = "./{dataViewName}/Users/{username}/Dashboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (applyPinnedSort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyPinnedSort", applyPinnedSort)); // query parameter
            if (doSystemLookup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "doSystemLookup", doSystemLookup)); // query parameter
            if (includeNumberOfHits != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeNumberOfHits", includeNumberOfHits)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserDashboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserDashboardSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserDashboardSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserDashboardSummary)));
        }

        /// <summary>
        /// Gets a list of dashboards in the DataView. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the dashboard for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted dashboards, not deleted dashboards or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned dashboards are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="doSystemLookup">If specified, whether to perform a synchronous eager system lookup for the base queries of the dashboards in the list. N.B. the results of the lookups are not returned in the results but the cache will be populated for subsequent dashboard detail calls. Defaults to false (optional)</param>
        /// <param name="includeNumberOfHits">If specified, whether to include the number of hits a dashboard has receieved. Defaults to include the hits. (optional, default to true)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserDashboardSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserDashboardSummary> UsersGetUserDashboardsAsync (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, bool? doSystemLookup = null, bool? includeNumberOfHits = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserDashboardSummary> localVarResponse = await UsersGetUserDashboardsAsyncWithHttpInfo(dataViewName, username, includeDeleted, applyPinnedSort, doSystemLookup, includeNumberOfHits, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of dashboards in the DataView. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the dashboard for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted dashboards, not deleted dashboards or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned dashboards are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="doSystemLookup">If specified, whether to perform a synchronous eager system lookup for the base queries of the dashboards in the list. N.B. the results of the lookups are not returned in the results but the cache will be populated for subsequent dashboard detail calls. Defaults to false (optional)</param>
        /// <param name="includeNumberOfHits">If specified, whether to include the number of hits a dashboard has receieved. Defaults to include the hits. (optional, default to true)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserDashboardSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserDashboardSummary>> UsersGetUserDashboardsAsyncWithHttpInfo (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, bool? doSystemLookup = null, bool? includeNumberOfHits = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserDashboards");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserDashboards");

            var localVarPath = "./{dataViewName}/Users/{username}/Dashboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (applyPinnedSort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyPinnedSort", applyPinnedSort)); // query parameter
            if (doSystemLookup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "doSystemLookup", doSystemLookup)); // query parameter
            if (includeNumberOfHits != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeNumberOfHits", includeNumberOfHits)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserDashboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserDashboardSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserDashboardSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserDashboardSummary)));
        }

        /// <summary>
        /// Returns details for the given username 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the details for</param>
        /// <returns>UserDetail</returns>
        public UserDetail UsersGetUserDetails (string dataViewName, string username)
        {
             ApiResponse<UserDetail> localVarResponse = UsersGetUserDetailsWithHttpInfo(dataViewName, username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details for the given username 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the details for</param>
        /// <returns>ApiResponse of UserDetail</returns>
        public ApiResponse< UserDetail > UsersGetUserDetailsWithHttpInfo (string dataViewName, string username)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserDetails");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserDetails");

            var localVarPath = "./{dataViewName}/Users/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDetail)));
        }

        /// <summary>
        /// Returns details for the given username 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the details for</param>
        /// <returns>Task of UserDetail</returns>
        public async System.Threading.Tasks.Task<UserDetail> UsersGetUserDetailsAsync (string dataViewName, string username)
        {
             ApiResponse<UserDetail> localVarResponse = await UsersGetUserDetailsAsyncWithHttpInfo(dataViewName, username);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details for the given username 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the details for</param>
        /// <returns>Task of ApiResponse (UserDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDetail>> UsersGetUserDetailsAsyncWithHttpInfo (string dataViewName, string username)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserDetails");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserDetails");

            var localVarPath = "./{dataViewName}/Users/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDetail)));
        }

        /// <summary>
        /// Returns all users in the system. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">If specified, whether to limit to only users attached to the system name (optional)</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="scope">If specified, whether to return all users, users attached to the DataView only, or users attached to the system only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate, LastAccessDate, UserLockedOutDate, LoginFailures, TimePasswordSet, PasswordManuallyExpired, PasswordNeverExpires. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate, LastAccessDate, UserLockedOutDate, LoginFailures, TimePasswordSet, PasswordManuallyExpired, PasswordNeverExpires. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserSummary</returns>
        public PagedResultsUserSummary UsersGetUserDetailsList (string dataViewName, string systemName = null, string includeDisabled = null, string scope = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserSummary> localVarResponse = UsersGetUserDetailsListWithHttpInfo(dataViewName, systemName, includeDisabled, scope, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all users in the system. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">If specified, whether to limit to only users attached to the system name (optional)</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="scope">If specified, whether to return all users, users attached to the DataView only, or users attached to the system only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate, LastAccessDate, UserLockedOutDate, LoginFailures, TimePasswordSet, PasswordManuallyExpired, PasswordNeverExpires. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate, LastAccessDate, UserLockedOutDate, LoginFailures, TimePasswordSet, PasswordManuallyExpired, PasswordNeverExpires. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserSummary</returns>
        public ApiResponse< PagedResultsUserSummary > UsersGetUserDetailsListWithHttpInfo (string dataViewName, string systemName = null, string includeDisabled = null, string scope = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserDetailsList");

            var localVarPath = "./{dataViewName}/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (includeDisabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDisabled", includeDisabled)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserDetailsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserSummary)));
        }

        /// <summary>
        /// Returns all users in the system. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">If specified, whether to limit to only users attached to the system name (optional)</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="scope">If specified, whether to return all users, users attached to the DataView only, or users attached to the system only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate, LastAccessDate, UserLockedOutDate, LoginFailures, TimePasswordSet, PasswordManuallyExpired, PasswordNeverExpires. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate, LastAccessDate, UserLockedOutDate, LoginFailures, TimePasswordSet, PasswordManuallyExpired, PasswordNeverExpires. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserSummary> UsersGetUserDetailsListAsync (string dataViewName, string systemName = null, string includeDisabled = null, string scope = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserSummary> localVarResponse = await UsersGetUserDetailsListAsyncWithHttpInfo(dataViewName, systemName, includeDisabled, scope, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all users in the system. 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">If specified, whether to limit to only users attached to the system name (optional)</param>
        /// <param name="includeDisabled">If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only (optional)</param>
        /// <param name="scope">If specified, whether to return all users, users attached to the DataView only, or users attached to the system only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate, LastAccessDate, UserLockedOutDate, LoginFailures, TimePasswordSet, PasswordManuallyExpired, PasswordNeverExpires. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate, LastAccessDate, UserLockedOutDate, LoginFailures, TimePasswordSet, PasswordManuallyExpired, PasswordNeverExpires. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserSummary>> UsersGetUserDetailsListAsyncWithHttpInfo (string dataViewName, string systemName = null, string includeDisabled = null, string scope = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserDetailsList");

            var localVarPath = "./{dataViewName}/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (includeDisabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDisabled", includeDisabled)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserDetailsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserSummary)));
        }

        /// <summary>
        /// Returns the list of invitations associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the invitations for</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserInvitationSummary</returns>
        public PagedResultsUserInvitationSummary UsersGetUserInvitations (string dataViewName, string username, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserInvitationSummary> localVarResponse = UsersGetUserInvitationsWithHttpInfo(dataViewName, username, includeAccepted, includeCompleted, includeExpired, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of invitations associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the invitations for</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserInvitationSummary</returns>
        public ApiResponse< PagedResultsUserInvitationSummary > UsersGetUserInvitationsWithHttpInfo (string dataViewName, string username, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserInvitations");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserInvitations");

            var localVarPath = "./{dataViewName}/Users/{username}/Invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (includeAccepted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAccepted", includeAccepted)); // query parameter
            if (includeCompleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCompleted", includeCompleted)); // query parameter
            if (includeExpired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeExpired", includeExpired)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserInvitationSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserInvitationSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserInvitationSummary)));
        }

        /// <summary>
        /// Returns the list of invitations associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the invitations for</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserInvitationSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserInvitationSummary> UsersGetUserInvitationsAsync (string dataViewName, string username, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserInvitationSummary> localVarResponse = await UsersGetUserInvitationsAsyncWithHttpInfo(dataViewName, username, includeAccepted, includeCompleted, includeExpired, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of invitations associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the invitations for</param>
        /// <param name="includeAccepted">If specified, whether to include accepted invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeCompleted">If specified, whether to include completed invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="includeExpired">If specified, whether to include expired invitations.  Defaults to include all invitations (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserInvitationSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserInvitationSummary>> UsersGetUserInvitationsAsyncWithHttpInfo (string dataViewName, string username, bool? includeAccepted = null, bool? includeCompleted = null, bool? includeExpired = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserInvitations");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserInvitations");

            var localVarPath = "./{dataViewName}/Users/{username}/Invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (includeAccepted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAccepted", includeAccepted)); // query parameter
            if (includeCompleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCompleted", includeCompleted)); // query parameter
            if (includeExpired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeExpired", includeExpired)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserInvitationSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserInvitationSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserInvitationSummary)));
        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="elementId">The id of the PeopleStage element to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserWorkspaceSummary</returns>
        public PagedResultsUserWorkspaceSummary UsersGetUserPeopleStageElementWorkspaces (string dataViewName, string username, string elementId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserWorkspaceSummary> localVarResponse = UsersGetUserPeopleStageElementWorkspacesWithHttpInfo(dataViewName, username, elementId, includeDeleted, applyPinnedSort, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="elementId">The id of the PeopleStage element to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserWorkspaceSummary</returns>
        public ApiResponse< PagedResultsUserWorkspaceSummary > UsersGetUserPeopleStageElementWorkspacesWithHttpInfo (string dataViewName, string username, string elementId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserPeopleStageElementWorkspaces");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserPeopleStageElementWorkspaces");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling UsersApi->UsersGetUserPeopleStageElementWorkspaces");

            var localVarPath = "./{dataViewName}/Users/{username}/PeopleStageElements/{elementId}/Workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (applyPinnedSort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyPinnedSort", applyPinnedSort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserPeopleStageElementWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserWorkspaceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserWorkspaceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserWorkspaceSummary)));
        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="elementId">The id of the PeopleStage element to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserWorkspaceSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserWorkspaceSummary> UsersGetUserPeopleStageElementWorkspacesAsync (string dataViewName, string username, string elementId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserWorkspaceSummary> localVarResponse = await UsersGetUserPeopleStageElementWorkspacesAsyncWithHttpInfo(dataViewName, username, elementId, includeDeleted, applyPinnedSort, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user containing the given PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="elementId">The id of the PeopleStage element to view workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserWorkspaceSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserWorkspaceSummary>> UsersGetUserPeopleStageElementWorkspacesAsyncWithHttpInfo (string dataViewName, string username, string elementId, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserPeopleStageElementWorkspaces");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserPeopleStageElementWorkspaces");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling UsersApi->UsersGetUserPeopleStageElementWorkspaces");

            var localVarPath = "./{dataViewName}/Users/{username}/PeopleStageElements/{elementId}/Workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (applyPinnedSort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyPinnedSort", applyPinnedSort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserPeopleStageElementWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserWorkspaceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserWorkspaceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserWorkspaceSummary)));
        }

        /// <summary>
        /// Returns the details of a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the workspace for</param>
        /// <param name="workspaceId">The id of the workspace to view</param>
        /// <returns>UserWorkspaceDetail</returns>
        public UserWorkspaceDetail UsersGetUserWorkspace (string dataViewName, string username, int? workspaceId)
        {
             ApiResponse<UserWorkspaceDetail> localVarResponse = UsersGetUserWorkspaceWithHttpInfo(dataViewName, username, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the workspace for</param>
        /// <param name="workspaceId">The id of the workspace to view</param>
        /// <returns>ApiResponse of UserWorkspaceDetail</returns>
        public ApiResponse< UserWorkspaceDetail > UsersGetUserWorkspaceWithHttpInfo (string dataViewName, string username, int? workspaceId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserWorkspace");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserWorkspace");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->UsersGetUserWorkspace");

            var localVarPath = "./{dataViewName}/Users/{username}/Workspaces/{workspaceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserWorkspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserWorkspaceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserWorkspaceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserWorkspaceDetail)));
        }

        /// <summary>
        /// Returns the details of a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the workspace for</param>
        /// <param name="workspaceId">The id of the workspace to view</param>
        /// <returns>Task of UserWorkspaceDetail</returns>
        public async System.Threading.Tasks.Task<UserWorkspaceDetail> UsersGetUserWorkspaceAsync (string dataViewName, string username, int? workspaceId)
        {
             ApiResponse<UserWorkspaceDetail> localVarResponse = await UsersGetUserWorkspaceAsyncWithHttpInfo(dataViewName, username, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular workspace 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to get the workspace for</param>
        /// <param name="workspaceId">The id of the workspace to view</param>
        /// <returns>Task of ApiResponse (UserWorkspaceDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserWorkspaceDetail>> UsersGetUserWorkspaceAsyncWithHttpInfo (string dataViewName, string username, int? workspaceId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserWorkspace");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserWorkspace");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling UsersApi->UsersGetUserWorkspace");

            var localVarPath = "./{dataViewName}/Users/{username}/Workspaces/{workspaceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", this.Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserWorkspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserWorkspaceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserWorkspaceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserWorkspaceDetail)));
        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsUserWorkspaceSummary</returns>
        public PagedResultsUserWorkspaceSummary UsersGetUserWorkspaces (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserWorkspaceSummary> localVarResponse = UsersGetUserWorkspacesWithHttpInfo(dataViewName, username, includeDeleted, applyPinnedSort, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsUserWorkspaceSummary</returns>
        public ApiResponse< PagedResultsUserWorkspaceSummary > UsersGetUserWorkspacesWithHttpInfo (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserWorkspaces");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserWorkspaces");

            var localVarPath = "./{dataViewName}/Users/{username}/Workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (applyPinnedSort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyPinnedSort", applyPinnedSort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserWorkspaceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserWorkspaceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserWorkspaceSummary)));
        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsUserWorkspaceSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsUserWorkspaceSummary> UsersGetUserWorkspacesAsync (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsUserWorkspaceSummary> localVarResponse = await UsersGetUserWorkspacesAsyncWithHttpInfo(dataViewName, username, includeDeleted, applyPinnedSort, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of workspaces associated with the given user 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to view the workspaces for</param>
        /// <param name="includeDeleted">If specified, whether to include deleted workspaces, not deleted workspaces or both.  Defaults to not deleted only (optional)</param>
        /// <param name="applyPinnedSort">If specified, whether to ensure that pinned workspaces are returned first in the list.  Defaults to true (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsUserWorkspaceSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsUserWorkspaceSummary>> UsersGetUserWorkspacesAsyncWithHttpInfo (string dataViewName, string username, string includeDeleted = null, bool? applyPinnedSort = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersGetUserWorkspaces");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersGetUserWorkspaces");

            var localVarPath = "./{dataViewName}/Users/{username}/Workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (applyPinnedSort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applyPinnedSort", applyPinnedSort)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUserWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsUserWorkspaceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsUserWorkspaceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsUserWorkspaceSummary)));
        }

        /// <summary>
        /// Updates one or more audiences Might require licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the audiences for</param>
        /// <param name="body">The details of the audiences to update.  Any value omitted for a audience will be left unchanged (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for any returned audiences or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for any returned audiences or not.  Defaults to true - to return briefs (optional)</param>
        /// <param name="includeWorkbookItems">If specified, whether to include the workbook items for any returned audiences or not.  Defaults to true - to return workbook items (optional)</param>
        /// <param name="includeWorkbookItemDetails">If specified, whether to include the workbook item details for any returned audiences or not.  Defaults to true - to return workbook item details (optional)</param>
        /// <returns>PagedResultsModifyUserAudienceDetailResults</returns>
        public PagedResultsModifyUserAudienceDetailResults UsersModifyUserAudiences (string dataViewName, string username, ModifyItemsModifyUserAudience body = null, bool? includeQueries = null, bool? includeBrief = null, bool? includeWorkbookItems = null, bool? includeWorkbookItemDetails = null)
        {
             ApiResponse<PagedResultsModifyUserAudienceDetailResults> localVarResponse = UsersModifyUserAudiencesWithHttpInfo(dataViewName, username, body, includeQueries, includeBrief, includeWorkbookItems, includeWorkbookItemDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates one or more audiences Might require licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the audiences for</param>
        /// <param name="body">The details of the audiences to update.  Any value omitted for a audience will be left unchanged (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for any returned audiences or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for any returned audiences or not.  Defaults to true - to return briefs (optional)</param>
        /// <param name="includeWorkbookItems">If specified, whether to include the workbook items for any returned audiences or not.  Defaults to true - to return workbook items (optional)</param>
        /// <param name="includeWorkbookItemDetails">If specified, whether to include the workbook item details for any returned audiences or not.  Defaults to true - to return workbook item details (optional)</param>
        /// <returns>ApiResponse of PagedResultsModifyUserAudienceDetailResults</returns>
        public ApiResponse< PagedResultsModifyUserAudienceDetailResults > UsersModifyUserAudiencesWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserAudience body = null, bool? includeQueries = null, bool? includeBrief = null, bool? includeWorkbookItems = null, bool? includeWorkbookItemDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersModifyUserAudiences");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersModifyUserAudiences");

            var localVarPath = "./{dataViewName}/Users/{username}/Audiences/Modify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter
            if (includeWorkbookItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeWorkbookItems", includeWorkbookItems)); // query parameter
            if (includeWorkbookItemDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeWorkbookItemDetails", includeWorkbookItemDetails)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersModifyUserAudiences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsModifyUserAudienceDetailResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsModifyUserAudienceDetailResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsModifyUserAudienceDetailResults)));
        }

        /// <summary>
        /// Updates one or more audiences Might require licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the audiences for</param>
        /// <param name="body">The details of the audiences to update.  Any value omitted for a audience will be left unchanged (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for any returned audiences or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for any returned audiences or not.  Defaults to true - to return briefs (optional)</param>
        /// <param name="includeWorkbookItems">If specified, whether to include the workbook items for any returned audiences or not.  Defaults to true - to return workbook items (optional)</param>
        /// <param name="includeWorkbookItemDetails">If specified, whether to include the workbook item details for any returned audiences or not.  Defaults to true - to return workbook item details (optional)</param>
        /// <returns>Task of PagedResultsModifyUserAudienceDetailResults</returns>
        public async System.Threading.Tasks.Task<PagedResultsModifyUserAudienceDetailResults> UsersModifyUserAudiencesAsync (string dataViewName, string username, ModifyItemsModifyUserAudience body = null, bool? includeQueries = null, bool? includeBrief = null, bool? includeWorkbookItems = null, bool? includeWorkbookItemDetails = null)
        {
             ApiResponse<PagedResultsModifyUserAudienceDetailResults> localVarResponse = await UsersModifyUserAudiencesAsyncWithHttpInfo(dataViewName, username, body, includeQueries, includeBrief, includeWorkbookItems, includeWorkbookItemDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates one or more audiences Might require licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the audiences for</param>
        /// <param name="body">The details of the audiences to update.  Any value omitted for a audience will be left unchanged (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for any returned audiences or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for any returned audiences or not.  Defaults to true - to return briefs (optional)</param>
        /// <param name="includeWorkbookItems">If specified, whether to include the workbook items for any returned audiences or not.  Defaults to true - to return workbook items (optional)</param>
        /// <param name="includeWorkbookItemDetails">If specified, whether to include the workbook item details for any returned audiences or not.  Defaults to true - to return workbook item details (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsModifyUserAudienceDetailResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsModifyUserAudienceDetailResults>> UsersModifyUserAudiencesAsyncWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserAudience body = null, bool? includeQueries = null, bool? includeBrief = null, bool? includeWorkbookItems = null, bool? includeWorkbookItemDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersModifyUserAudiences");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersModifyUserAudiences");

            var localVarPath = "./{dataViewName}/Users/{username}/Audiences/Modify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter
            if (includeWorkbookItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeWorkbookItems", includeWorkbookItems)); // query parameter
            if (includeWorkbookItemDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeWorkbookItemDetails", includeWorkbookItemDetails)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersModifyUserAudiences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsModifyUserAudienceDetailResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsModifyUserAudienceDetailResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsModifyUserAudienceDetailResults)));
        }

        /// <summary>
        /// Updates one or more collections 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collections for</param>
        /// <param name="body">The details of the collections to update.  Any value omitted for a collection will be left unchanged (optional)</param>
        /// <returns>PagedResultsModifyUserCollectionDetailResults</returns>
        public PagedResultsModifyUserCollectionDetailResults UsersModifyUserCollections (string dataViewName, string username, ModifyItemsModifyUserCollection body = null)
        {
             ApiResponse<PagedResultsModifyUserCollectionDetailResults> localVarResponse = UsersModifyUserCollectionsWithHttpInfo(dataViewName, username, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates one or more collections 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collections for</param>
        /// <param name="body">The details of the collections to update.  Any value omitted for a collection will be left unchanged (optional)</param>
        /// <returns>ApiResponse of PagedResultsModifyUserCollectionDetailResults</returns>
        public ApiResponse< PagedResultsModifyUserCollectionDetailResults > UsersModifyUserCollectionsWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserCollection body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersModifyUserCollections");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersModifyUserCollections");

            var localVarPath = "./{dataViewName}/Users/{username}/Collections/Modify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersModifyUserCollections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsModifyUserCollectionDetailResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsModifyUserCollectionDetailResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsModifyUserCollectionDetailResults)));
        }

        /// <summary>
        /// Updates one or more collections 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collections for</param>
        /// <param name="body">The details of the collections to update.  Any value omitted for a collection will be left unchanged (optional)</param>
        /// <returns>Task of PagedResultsModifyUserCollectionDetailResults</returns>
        public async System.Threading.Tasks.Task<PagedResultsModifyUserCollectionDetailResults> UsersModifyUserCollectionsAsync (string dataViewName, string username, ModifyItemsModifyUserCollection body = null)
        {
             ApiResponse<PagedResultsModifyUserCollectionDetailResults> localVarResponse = await UsersModifyUserCollectionsAsyncWithHttpInfo(dataViewName, username, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates one or more collections 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the collections for</param>
        /// <param name="body">The details of the collections to update.  Any value omitted for a collection will be left unchanged (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsModifyUserCollectionDetailResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsModifyUserCollectionDetailResults>> UsersModifyUserCollectionsAsyncWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserCollection body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersModifyUserCollections");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersModifyUserCollections");

            var localVarPath = "./{dataViewName}/Users/{username}/Collections/Modify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersModifyUserCollections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsModifyUserCollectionDetailResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsModifyUserCollectionDetailResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsModifyUserCollectionDetailResults)));
        }

        /// <summary>
        /// Updates one or more dashboards Might require licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the dashboards for</param>
        /// <param name="body">The details of the dashboards to update.  Any value omitted for a dashboard will be left unchanged (optional)</param>
        /// <returns>PagedResultsModifyUserDashboardDetailResults</returns>
        public PagedResultsModifyUserDashboardDetailResults UsersModifyUserDashboards (string dataViewName, string username, ModifyItemsModifyUserDashboard body = null)
        {
             ApiResponse<PagedResultsModifyUserDashboardDetailResults> localVarResponse = UsersModifyUserDashboardsWithHttpInfo(dataViewName, username, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates one or more dashboards Might require licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the dashboards for</param>
        /// <param name="body">The details of the dashboards to update.  Any value omitted for a dashboard will be left unchanged (optional)</param>
        /// <returns>ApiResponse of PagedResultsModifyUserDashboardDetailResults</returns>
        public ApiResponse< PagedResultsModifyUserDashboardDetailResults > UsersModifyUserDashboardsWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserDashboard body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersModifyUserDashboards");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersModifyUserDashboards");

            var localVarPath = "./{dataViewName}/Users/{username}/Dashboards/Modify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersModifyUserDashboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsModifyUserDashboardDetailResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsModifyUserDashboardDetailResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsModifyUserDashboardDetailResults)));
        }

        /// <summary>
        /// Updates one or more dashboards Might require licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the dashboards for</param>
        /// <param name="body">The details of the dashboards to update.  Any value omitted for a dashboard will be left unchanged (optional)</param>
        /// <returns>Task of PagedResultsModifyUserDashboardDetailResults</returns>
        public async System.Threading.Tasks.Task<PagedResultsModifyUserDashboardDetailResults> UsersModifyUserDashboardsAsync (string dataViewName, string username, ModifyItemsModifyUserDashboard body = null)
        {
             ApiResponse<PagedResultsModifyUserDashboardDetailResults> localVarResponse = await UsersModifyUserDashboardsAsyncWithHttpInfo(dataViewName, username, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates one or more dashboards Might require licence flags [Dashboards]
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the dashboards for</param>
        /// <param name="body">The details of the dashboards to update.  Any value omitted for a dashboard will be left unchanged (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsModifyUserDashboardDetailResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsModifyUserDashboardDetailResults>> UsersModifyUserDashboardsAsyncWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserDashboard body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersModifyUserDashboards");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersModifyUserDashboards");

            var localVarPath = "./{dataViewName}/Users/{username}/Dashboards/Modify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersModifyUserDashboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsModifyUserDashboardDetailResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsModifyUserDashboardDetailResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsModifyUserDashboardDetailResults)));
        }

        /// <summary>
        /// Updates one or more workspaces 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the workspaces for</param>
        /// <param name="body">The details of the workspaces to update.  Any value omitted for a workspace will be left unchanged (optional)</param>
        /// <returns>PagedResultsModifyUserWorkspaceDetailResults</returns>
        public PagedResultsModifyUserWorkspaceDetailResults UsersModifyUserWorkspaces (string dataViewName, string username, ModifyItemsModifyUserWorkspace body = null)
        {
             ApiResponse<PagedResultsModifyUserWorkspaceDetailResults> localVarResponse = UsersModifyUserWorkspacesWithHttpInfo(dataViewName, username, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates one or more workspaces 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the workspaces for</param>
        /// <param name="body">The details of the workspaces to update.  Any value omitted for a workspace will be left unchanged (optional)</param>
        /// <returns>ApiResponse of PagedResultsModifyUserWorkspaceDetailResults</returns>
        public ApiResponse< PagedResultsModifyUserWorkspaceDetailResults > UsersModifyUserWorkspacesWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserWorkspace body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersModifyUserWorkspaces");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersModifyUserWorkspaces");

            var localVarPath = "./{dataViewName}/Users/{username}/Workspaces/Modify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersModifyUserWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsModifyUserWorkspaceDetailResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsModifyUserWorkspaceDetailResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsModifyUserWorkspaceDetailResults)));
        }

        /// <summary>
        /// Updates one or more workspaces 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the workspaces for</param>
        /// <param name="body">The details of the workspaces to update.  Any value omitted for a workspace will be left unchanged (optional)</param>
        /// <returns>Task of PagedResultsModifyUserWorkspaceDetailResults</returns>
        public async System.Threading.Tasks.Task<PagedResultsModifyUserWorkspaceDetailResults> UsersModifyUserWorkspacesAsync (string dataViewName, string username, ModifyItemsModifyUserWorkspace body = null)
        {
             ApiResponse<PagedResultsModifyUserWorkspaceDetailResults> localVarResponse = await UsersModifyUserWorkspacesAsyncWithHttpInfo(dataViewName, username, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates one or more workspaces 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username to update the workspaces for</param>
        /// <param name="body">The details of the workspaces to update.  Any value omitted for a workspace will be left unchanged (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsModifyUserWorkspaceDetailResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsModifyUserWorkspaceDetailResults>> UsersModifyUserWorkspacesAsyncWithHttpInfo (string dataViewName, string username, ModifyItemsModifyUserWorkspace body = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersModifyUserWorkspaces");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersModifyUserWorkspaces");

            var localVarPath = "./{dataViewName}/Users/{username}/Workspaces/Modify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersModifyUserWorkspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsModifyUserWorkspaceDetailResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResultsModifyUserWorkspaceDetailResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsModifyUserWorkspaceDetailResults)));
        }

        /// <summary>
        /// Updates user details for the given username 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The details to update the user with (optional)</param>
        /// <param name="systemName">The system name associated with the user (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>UserSummary</returns>
        public UserSummary UsersUpdateUserDetails (string dataViewName, string username, UpdateUserDetails body = null, string systemName = null, string scope = null)
        {
             ApiResponse<UserSummary> localVarResponse = UsersUpdateUserDetailsWithHttpInfo(dataViewName, username, body, systemName, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates user details for the given username 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The details to update the user with (optional)</param>
        /// <param name="systemName">The system name associated with the user (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>ApiResponse of UserSummary</returns>
        public ApiResponse< UserSummary > UsersUpdateUserDetailsWithHttpInfo (string dataViewName, string username, UpdateUserDetails body = null, string systemName = null, string scope = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersUpdateUserDetails");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersUpdateUserDetails");

            var localVarPath = "./{dataViewName}/Users/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdateUserDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSummary)));
        }

        /// <summary>
        /// Updates user details for the given username 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The details to update the user with (optional)</param>
        /// <param name="systemName">The system name associated with the user (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of UserSummary</returns>
        public async System.Threading.Tasks.Task<UserSummary> UsersUpdateUserDetailsAsync (string dataViewName, string username, UpdateUserDetails body = null, string systemName = null, string scope = null)
        {
             ApiResponse<UserSummary> localVarResponse = await UsersUpdateUserDetailsAsyncWithHttpInfo(dataViewName, username, body, systemName, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates user details for the given username 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The details to update the user with (optional)</param>
        /// <param name="systemName">The system name associated with the user (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of ApiResponse (UserSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSummary>> UsersUpdateUserDetailsAsyncWithHttpInfo (string dataViewName, string username, UpdateUserDetails body = null, string systemName = null, string scope = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersUpdateUserDetails");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersUpdateUserDetails");

            var localVarPath = "./{dataViewName}/Users/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdateUserDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSummary)));
        }

        /// <summary>
        /// Modify the specified user groups 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s groups to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>UserSummary</returns>
        public UserSummary UsersUpdateUserGroups (string dataViewName, string username, ModifyUserGroups body = null, string systemName = null, string scope = null)
        {
             ApiResponse<UserSummary> localVarResponse = UsersUpdateUserGroupsWithHttpInfo(dataViewName, username, body, systemName, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify the specified user groups 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s groups to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>ApiResponse of UserSummary</returns>
        public ApiResponse< UserSummary > UsersUpdateUserGroupsWithHttpInfo (string dataViewName, string username, ModifyUserGroups body = null, string systemName = null, string scope = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersUpdateUserGroups");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersUpdateUserGroups");

            var localVarPath = "./{dataViewName}/Users/{username}/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdateUserGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSummary)));
        }

        /// <summary>
        /// Modify the specified user groups 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s groups to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of UserSummary</returns>
        public async System.Threading.Tasks.Task<UserSummary> UsersUpdateUserGroupsAsync (string dataViewName, string username, ModifyUserGroups body = null, string systemName = null, string scope = null)
        {
             ApiResponse<UserSummary> localVarResponse = await UsersUpdateUserGroupsAsyncWithHttpInfo(dataViewName, username, body, systemName, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify the specified user groups 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s groups to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of ApiResponse (UserSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSummary>> UsersUpdateUserGroupsAsyncWithHttpInfo (string dataViewName, string username, ModifyUserGroups body = null, string systemName = null, string scope = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersUpdateUserGroups");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersUpdateUserGroups");

            var localVarPath = "./{dataViewName}/Users/{username}/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdateUserGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSummary)));
        }

        /// <summary>
        /// Modify the specified user&#x27;s systems 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s systems to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>UserSummary</returns>
        public UserSummary UsersUpdateUserSystems (string dataViewName, string username, ModifyUserSystems body = null, string systemName = null, string scope = null)
        {
             ApiResponse<UserSummary> localVarResponse = UsersUpdateUserSystemsWithHttpInfo(dataViewName, username, body, systemName, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify the specified user&#x27;s systems 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s systems to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>ApiResponse of UserSummary</returns>
        public ApiResponse< UserSummary > UsersUpdateUserSystemsWithHttpInfo (string dataViewName, string username, ModifyUserSystems body = null, string systemName = null, string scope = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersUpdateUserSystems");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersUpdateUserSystems");

            var localVarPath = "./{dataViewName}/Users/{username}/Systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdateUserSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSummary)));
        }

        /// <summary>
        /// Modify the specified user&#x27;s systems 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s systems to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of UserSummary</returns>
        public async System.Threading.Tasks.Task<UserSummary> UsersUpdateUserSystemsAsync (string dataViewName, string username, ModifyUserSystems body = null, string systemName = null, string scope = null)
        {
             ApiResponse<UserSummary> localVarResponse = await UsersUpdateUserSystemsAsyncWithHttpInfo(dataViewName, username, body, systemName, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify the specified user&#x27;s systems 
        /// </summary>
        /// <exception cref="Apteco.ApiRescheduler.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="username">The username of the user to update</param>
        /// <param name="body">The user&#x27;s systems to modify (optional)</param>
        /// <param name="systemName">The name of the system (optional)</param>
        /// <param name="scope">If specified, whether to return information for all systems, systems in the DataView only, or this system only (optional)</param>
        /// <returns>Task of ApiResponse (UserSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSummary>> UsersUpdateUserSystemsAsyncWithHttpInfo (string dataViewName, string username, ModifyUserSystems body = null, string systemName = null, string scope = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling UsersApi->UsersUpdateUserSystems");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersUpdateUserSystems");

            var localVarPath = "./{dataViewName}/Users/{username}/Systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (systemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "systemName", systemName)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdateUserSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSummary)));
        }

    }
}
