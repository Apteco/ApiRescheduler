/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Hold information for a string attribute value
    /// </summary>
    [DataContract]
        public partial class SingleAttributeValue :  IEquatable<SingleAttributeValue>
    {
        /// <summary>
        /// The channel list name attribute value, if one exists
        /// </summary>
        /// <value>The channel list name attribute value, if one exists</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum FixedString for value: FixedString
            /// </summary>
            [EnumMember(Value = "FixedString")]
            FixedString = 1,
            /// <summary>
            /// Enum ChannelMessageName for value: ChannelMessageName
            /// </summary>
            [EnumMember(Value = "ChannelMessageName")]
            ChannelMessageName = 2,
            /// <summary>
            /// Enum ChannelListName for value: ChannelListName
            /// </summary>
            [EnumMember(Value = "ChannelListName")]
            ChannelListName = 3,
            /// <summary>
            /// Enum Path for value: Path
            /// </summary>
            [EnumMember(Value = "Path")]
            Path = 4        }
        /// <summary>
        /// The channel list name attribute value, if one exists
        /// </summary>
        /// <value>The channel list name attribute value, if one exists</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SingleAttributeValue" /> class.
        /// </summary>
        /// <param name="type">The channel list name attribute value, if one exists.</param>
        /// <param name="value">value.</param>
        /// <param name="parameters">parameters.</param>
        public SingleAttributeValue(TypeEnum? type = default(TypeEnum?), string value = default(string), Dictionary<string, string> parameters = default(Dictionary<string, string>))
        {
            this.Type = type;
            this.Value = value;
            this.Parameters = parameters;
        }
        

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public Dictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SingleAttributeValue {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SingleAttributeValue);
        }

        /// <summary>
        /// Returns true if SingleAttributeValue instances are equal
        /// </summary>
        /// <param name="input">Instance of SingleAttributeValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SingleAttributeValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    input.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                return hashCode;
            }
        }
    }
}
