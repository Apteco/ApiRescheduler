/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details to create a group with
    /// </summary>
    [DataContract]
        public partial class CreateGroupDetails :  IEquatable<CreateGroupDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateGroupDetails" /> class.
        /// </summary>
        /// <param name="name">The name for the new group (required).</param>
        /// <param name="userIds">The userIds to add to the new group (required).</param>
        public CreateGroupDetails(string name = default(string), List<int?> userIds = default(List<int?>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CreateGroupDetails and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "userIds" is required (not null)
            if (userIds == null)
            {
                throw new InvalidDataException("userIds is a required property for CreateGroupDetails and cannot be null");
            }
            else
            {
                this.UserIds = userIds;
            }
        }
        
        /// <summary>
        /// The name for the new group
        /// </summary>
        /// <value>The name for the new group</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The userIds to add to the new group
        /// </summary>
        /// <value>The userIds to add to the new group</value>
        [DataMember(Name="userIds", EmitDefaultValue=false)]
        public List<int?> UserIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateGroupDetails {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateGroupDetails);
        }

        /// <summary>
        /// Returns true if CreateGroupDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateGroupDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateGroupDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.UserIds == input.UserIds ||
                    this.UserIds != null &&
                    input.UserIds != null &&
                    this.UserIds.SequenceEqual(input.UserIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.UserIds != null)
                    hashCode = hashCode * 59 + this.UserIds.GetHashCode();
                return hashCode;
            }
        }
    }
}
