/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details for a group
    /// </summary>
    [DataContract]
        public partial class GroupDetail :  IEquatable<GroupDetail>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupDetail" /> class.
        /// </summary>
        /// <param name="id">The group&#x27;s id (required).</param>
        /// <param name="name">The group&#x27;s name (required).</param>
        /// <param name="systems">The systems that the group is connected to (required).</param>
        /// <param name="userMembership">The users that the group contains (required).</param>
        /// <param name="userMembershipCount">The user count that the group contains (required).</param>
        /// <param name="systemMembership">Whether the group includes the system (required).</param>
        public GroupDetail(int? id = default(int?), string name = default(string), List<string> systems = default(List<string>), List<UserSummary> userMembership = default(List<UserSummary>), int? userMembershipCount = default(int?), bool? systemMembership = default(bool?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for GroupDetail and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for GroupDetail and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "systems" is required (not null)
            if (systems == null)
            {
                throw new InvalidDataException("systems is a required property for GroupDetail and cannot be null");
            }
            else
            {
                this.Systems = systems;
            }
            // to ensure "userMembership" is required (not null)
            if (userMembership == null)
            {
                throw new InvalidDataException("userMembership is a required property for GroupDetail and cannot be null");
            }
            else
            {
                this.UserMembership = userMembership;
            }
            // to ensure "userMembershipCount" is required (not null)
            if (userMembershipCount == null)
            {
                throw new InvalidDataException("userMembershipCount is a required property for GroupDetail and cannot be null");
            }
            else
            {
                this.UserMembershipCount = userMembershipCount;
            }
            // to ensure "systemMembership" is required (not null)
            if (systemMembership == null)
            {
                throw new InvalidDataException("systemMembership is a required property for GroupDetail and cannot be null");
            }
            else
            {
                this.SystemMembership = systemMembership;
            }
        }
        
        /// <summary>
        /// The group&#x27;s id
        /// </summary>
        /// <value>The group&#x27;s id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The group&#x27;s name
        /// </summary>
        /// <value>The group&#x27;s name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The systems that the group is connected to
        /// </summary>
        /// <value>The systems that the group is connected to</value>
        [DataMember(Name="systems", EmitDefaultValue=false)]
        public List<string> Systems { get; set; }

        /// <summary>
        /// The users that the group contains
        /// </summary>
        /// <value>The users that the group contains</value>
        [DataMember(Name="userMembership", EmitDefaultValue=false)]
        public List<UserSummary> UserMembership { get; set; }

        /// <summary>
        /// The user count that the group contains
        /// </summary>
        /// <value>The user count that the group contains</value>
        [DataMember(Name="userMembershipCount", EmitDefaultValue=false)]
        public int? UserMembershipCount { get; set; }

        /// <summary>
        /// Whether the group includes the system
        /// </summary>
        /// <value>Whether the group includes the system</value>
        [DataMember(Name="systemMembership", EmitDefaultValue=false)]
        public bool? SystemMembership { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupDetail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Systems: ").Append(Systems).Append("\n");
            sb.Append("  UserMembership: ").Append(UserMembership).Append("\n");
            sb.Append("  UserMembershipCount: ").Append(UserMembershipCount).Append("\n");
            sb.Append("  SystemMembership: ").Append(SystemMembership).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupDetail);
        }

        /// <summary>
        /// Returns true if GroupDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Systems == input.Systems ||
                    this.Systems != null &&
                    input.Systems != null &&
                    this.Systems.SequenceEqual(input.Systems)
                ) && 
                (
                    this.UserMembership == input.UserMembership ||
                    this.UserMembership != null &&
                    input.UserMembership != null &&
                    this.UserMembership.SequenceEqual(input.UserMembership)
                ) && 
                (
                    this.UserMembershipCount == input.UserMembershipCount ||
                    (this.UserMembershipCount != null &&
                    this.UserMembershipCount.Equals(input.UserMembershipCount))
                ) && 
                (
                    this.SystemMembership == input.SystemMembership ||
                    (this.SystemMembership != null &&
                    this.SystemMembership.Equals(input.SystemMembership))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Systems != null)
                    hashCode = hashCode * 59 + this.Systems.GetHashCode();
                if (this.UserMembership != null)
                    hashCode = hashCode * 59 + this.UserMembership.GetHashCode();
                if (this.UserMembershipCount != null)
                    hashCode = hashCode * 59 + this.UserMembershipCount.GetHashCode();
                if (this.SystemMembership != null)
                    hashCode = hashCode * 59 + this.SystemMembership.GetHashCode();
                return hashCode;
            }
        }
    }
}
