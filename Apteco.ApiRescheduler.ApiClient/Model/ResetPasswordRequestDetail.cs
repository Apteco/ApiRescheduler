/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details of a reset password request
    /// </summary>
    [DataContract]
        public partial class ResetPasswordRequestDetail :  IEquatable<ResetPasswordRequestDetail>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResetPasswordRequestDetail" /> class.
        /// </summary>
        /// <param name="resetPasswordUrl">The URL sent in the notification to the user to allow them to confirm they want to reset their password..</param>
        /// <param name="hasNotificationBeenSent">Whether the notification has been sent to the user or not. (required).</param>
        /// <param name="emailAddress">The email address of the user requesting the reset password (required).</param>
        /// <param name="creationDate">The date and time this request was created (required).</param>
        /// <param name="confirmedDate">The date and time this request was confirmed.</param>
        /// <param name="expiredDate">The date and time this request expired.</param>
        public ResetPasswordRequestDetail(string resetPasswordUrl = default(string), bool? hasNotificationBeenSent = default(bool?), string emailAddress = default(string), DateTime? creationDate = default(DateTime?), DateTime? confirmedDate = default(DateTime?), DateTime? expiredDate = default(DateTime?))
        {
            // to ensure "hasNotificationBeenSent" is required (not null)
            if (hasNotificationBeenSent == null)
            {
                throw new InvalidDataException("hasNotificationBeenSent is a required property for ResetPasswordRequestDetail and cannot be null");
            }
            else
            {
                this.HasNotificationBeenSent = hasNotificationBeenSent;
            }
            // to ensure "emailAddress" is required (not null)
            if (emailAddress == null)
            {
                throw new InvalidDataException("emailAddress is a required property for ResetPasswordRequestDetail and cannot be null");
            }
            else
            {
                this.EmailAddress = emailAddress;
            }
            // to ensure "creationDate" is required (not null)
            if (creationDate == null)
            {
                throw new InvalidDataException("creationDate is a required property for ResetPasswordRequestDetail and cannot be null");
            }
            else
            {
                this.CreationDate = creationDate;
            }
            this.ResetPasswordUrl = resetPasswordUrl;
            this.ConfirmedDate = confirmedDate;
            this.ExpiredDate = expiredDate;
        }
        
        /// <summary>
        /// The URL sent in the notification to the user to allow them to confirm they want to reset their password.
        /// </summary>
        /// <value>The URL sent in the notification to the user to allow them to confirm they want to reset their password.</value>
        [DataMember(Name="resetPasswordUrl", EmitDefaultValue=false)]
        public string ResetPasswordUrl { get; set; }

        /// <summary>
        /// Whether the notification has been sent to the user or not.
        /// </summary>
        /// <value>Whether the notification has been sent to the user or not.</value>
        [DataMember(Name="hasNotificationBeenSent", EmitDefaultValue=false)]
        public bool? HasNotificationBeenSent { get; set; }

        /// <summary>
        /// The email address of the user requesting the reset password
        /// </summary>
        /// <value>The email address of the user requesting the reset password</value>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// The date and time this request was created
        /// </summary>
        /// <value>The date and time this request was created</value>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// The date and time this request was confirmed
        /// </summary>
        /// <value>The date and time this request was confirmed</value>
        [DataMember(Name="confirmedDate", EmitDefaultValue=false)]
        public DateTime? ConfirmedDate { get; set; }

        /// <summary>
        /// The date and time this request expired
        /// </summary>
        /// <value>The date and time this request expired</value>
        [DataMember(Name="expiredDate", EmitDefaultValue=false)]
        public DateTime? ExpiredDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResetPasswordRequestDetail {\n");
            sb.Append("  ResetPasswordUrl: ").Append(ResetPasswordUrl).Append("\n");
            sb.Append("  HasNotificationBeenSent: ").Append(HasNotificationBeenSent).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  ConfirmedDate: ").Append(ConfirmedDate).Append("\n");
            sb.Append("  ExpiredDate: ").Append(ExpiredDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResetPasswordRequestDetail);
        }

        /// <summary>
        /// Returns true if ResetPasswordRequestDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ResetPasswordRequestDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResetPasswordRequestDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResetPasswordUrl == input.ResetPasswordUrl ||
                    (this.ResetPasswordUrl != null &&
                    this.ResetPasswordUrl.Equals(input.ResetPasswordUrl))
                ) && 
                (
                    this.HasNotificationBeenSent == input.HasNotificationBeenSent ||
                    (this.HasNotificationBeenSent != null &&
                    this.HasNotificationBeenSent.Equals(input.HasNotificationBeenSent))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.ConfirmedDate == input.ConfirmedDate ||
                    (this.ConfirmedDate != null &&
                    this.ConfirmedDate.Equals(input.ConfirmedDate))
                ) && 
                (
                    this.ExpiredDate == input.ExpiredDate ||
                    (this.ExpiredDate != null &&
                    this.ExpiredDate.Equals(input.ExpiredDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResetPasswordUrl != null)
                    hashCode = hashCode * 59 + this.ResetPasswordUrl.GetHashCode();
                if (this.HasNotificationBeenSent != null)
                    hashCode = hashCode * 59 + this.HasNotificationBeenSent.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.ConfirmedDate != null)
                    hashCode = hashCode * 59 + this.ConfirmedDate.GetHashCode();
                if (this.ExpiredDate != null)
                    hashCode = hashCode * 59 + this.ExpiredDate.GetHashCode();
                return hashCode;
            }
        }
    }
}
