/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// AnalysisColumn
    /// </summary>
    [DataContract]
        public partial class AnalysisColumn :  IEquatable<AnalysisColumn>
    {
        /// <summary>
        /// Whether to display the code or description for the column variable
        /// </summary>
        /// <value>Whether to display the code or description for the column variable</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ExportDetailEnum
        {
            /// <summary>
            /// Enum Code for value: Code
            /// </summary>
            [EnumMember(Value = "Code")]
            Code = 1,
            /// <summary>
            /// Enum Description for value: Description
            /// </summary>
            [EnumMember(Value = "Description")]
            Description = 2        }
        /// <summary>
        /// Whether to display the code or description for the column variable
        /// </summary>
        /// <value>Whether to display the code or description for the column variable</value>
        [DataMember(Name="exportDetail", EmitDefaultValue=false)]
        public ExportDetailEnum ExportDetail { get; set; }
        /// <summary>
        /// The format used for displaying unclassified results
        /// </summary>
        /// <value>The format used for displaying unclassified results</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ExportUnclassifiedAsEnum
        {
            /// <summary>
            /// Enum FromDesign for value: FromDesign
            /// </summary>
            [EnumMember(Value = "FromDesign")]
            FromDesign = 1,
            /// <summary>
            /// Enum Empty for value: Empty
            /// </summary>
            [EnumMember(Value = "Empty")]
            Empty = 2        }
        /// <summary>
        /// The format used for displaying unclassified results
        /// </summary>
        /// <value>The format used for displaying unclassified results</value>
        [DataMember(Name="exportUnclassifiedAs", EmitDefaultValue=false)]
        public ExportUnclassifiedAsEnum? ExportUnclassifiedAs { get; set; }
        /// <summary>
        /// The format used to display column values
        /// </summary>
        /// <value>The format used to display column values</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ValueFormatEnum
        {
            /// <summary>
            /// Enum Unformatted for value: Unformatted
            /// </summary>
            [EnumMember(Value = "Unformatted")]
            Unformatted = 1,
            /// <summary>
            /// Enum UpperCase for value: UpperCase
            /// </summary>
            [EnumMember(Value = "UpperCase")]
            UpperCase = 2,
            /// <summary>
            /// Enum LowerCase for value: LowerCase
            /// </summary>
            [EnumMember(Value = "LowerCase")]
            LowerCase = 3,
            /// <summary>
            /// Enum TitleCase for value: TitleCase
            /// </summary>
            [EnumMember(Value = "TitleCase")]
            TitleCase = 4        }
        /// <summary>
        /// The format used to display column values
        /// </summary>
        /// <value>The format used to display column values</value>
        [DataMember(Name="valueFormat", EmitDefaultValue=false)]
        public ValueFormatEnum? ValueFormat { get; set; }
        /// <summary>
        /// The type of aggregation function used for the column
        /// </summary>
        /// <value>The type of aggregation function used for the column</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AggregationEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            /// <summary>
            /// Enum First for value: First
            /// </summary>
            [EnumMember(Value = "First")]
            First = 2,
            /// <summary>
            /// Enum Last for value: Last
            /// </summary>
            [EnumMember(Value = "Last")]
            Last = 3,
            /// <summary>
            /// Enum Populated for value: Populated
            /// </summary>
            [EnumMember(Value = "Populated")]
            Populated = 4,
            /// <summary>
            /// Enum CountDistinct for value: CountDistinct
            /// </summary>
            [EnumMember(Value = "CountDistinct")]
            CountDistinct = 5,
            /// <summary>
            /// Enum ListDistinct for value: ListDistinct
            /// </summary>
            [EnumMember(Value = "ListDistinct")]
            ListDistinct = 6,
            /// <summary>
            /// Enum Sum for value: Sum
            /// </summary>
            [EnumMember(Value = "Sum")]
            Sum = 7,
            /// <summary>
            /// Enum Mean for value: Mean
            /// </summary>
            [EnumMember(Value = "Mean")]
            Mean = 8,
            /// <summary>
            /// Enum Median for value: Median
            /// </summary>
            [EnumMember(Value = "Median")]
            Median = 9,
            /// <summary>
            /// Enum Min for value: Min
            /// </summary>
            [EnumMember(Value = "Min")]
            Min = 10,
            /// <summary>
            /// Enum Max for value: Max
            /// </summary>
            [EnumMember(Value = "Max")]
            Max = 11,
            /// <summary>
            /// Enum Select for value: Select
            /// </summary>
            [EnumMember(Value = "Select")]
            Select = 12,
            /// <summary>
            /// Enum RankCoefficient for value: RankCoefficient
            /// </summary>
            [EnumMember(Value = "RankCoefficient")]
            RankCoefficient = 13,
            /// <summary>
            /// Enum DistinctMax for value: DistinctMax
            /// </summary>
            [EnumMember(Value = "DistinctMax")]
            DistinctMax = 14,
            /// <summary>
            /// Enum Variance for value: Variance
            /// </summary>
            [EnumMember(Value = "Variance")]
            Variance = 15,
            /// <summary>
            /// Enum StdDev for value: StdDev
            /// </summary>
            [EnumMember(Value = "StdDev")]
            StdDev = 16,
            /// <summary>
            /// Enum ModalCategory for value: ModalCategory
            /// </summary>
            [EnumMember(Value = "ModalCategory")]
            ModalCategory = 17,
            /// <summary>
            /// Enum MaxGroupSum for value: MaxGroupSum
            /// </summary>
            [EnumMember(Value = "MaxGroupSum")]
            MaxGroupSum = 18,
            /// <summary>
            /// Enum MaxGroupCategory for value: MaxGroupCategory
            /// </summary>
            [EnumMember(Value = "MaxGroupCategory")]
            MaxGroupCategory = 19,
            /// <summary>
            /// Enum MaxGroupFreq for value: MaxGroupFreq
            /// </summary>
            [EnumMember(Value = "MaxGroupFreq")]
            MaxGroupFreq = 20,
            /// <summary>
            /// Enum MaxGroupMean for value: MaxGroupMean
            /// </summary>
            [EnumMember(Value = "MaxGroupMean")]
            MaxGroupMean = 21        }
        /// <summary>
        /// The type of aggregation function used for the column
        /// </summary>
        /// <value>The type of aggregation function used for the column</value>
        [DataMember(Name="aggregation", EmitDefaultValue=false)]
        public AggregationEnum? Aggregation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalysisColumn" /> class.
        /// </summary>
        /// <param name="columnId">The column id (required).</param>
        /// <param name="scope">scope (required).</param>
        /// <param name="description">The column description (required).</param>
        /// <param name="exportDetail">Whether to display the code or description for the column variable (required).</param>
        /// <param name="exportUnclassifiedAs">The format used for displaying unclassified results.</param>
        /// <param name="valueFormat">The format used to display column values.</param>
        /// <param name="aggregation">The type of aggregation function used for the column.</param>
        /// <param name="columnAggregation">columnAggregation.</param>
        /// <param name="expression">expression.</param>
        /// <param name="browsable">Whether the column is browsable.</param>
        /// <param name="exportable">Whether the column is exportable.</param>
        public AnalysisColumn(string columnId = default(string), DimensionScope scope = default(DimensionScope), string description = default(string), ExportDetailEnum exportDetail = default(ExportDetailEnum), ExportUnclassifiedAsEnum? exportUnclassifiedAs = default(ExportUnclassifiedAsEnum?), ValueFormatEnum? valueFormat = default(ValueFormatEnum?), AggregationEnum? aggregation = default(AggregationEnum?), ColumnAggregation columnAggregation = default(ColumnAggregation), Expression expression = default(Expression), bool? browsable = default(bool?), bool? exportable = default(bool?))
        {
            // to ensure "columnId" is required (not null)
            if (columnId == null)
            {
                throw new InvalidDataException("columnId is a required property for AnalysisColumn and cannot be null");
            }
            else
            {
                this.ColumnId = columnId;
            }
            // to ensure "scope" is required (not null)
            if (scope == null)
            {
                throw new InvalidDataException("scope is a required property for AnalysisColumn and cannot be null");
            }
            else
            {
                this.Scope = scope;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for AnalysisColumn and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "exportDetail" is required (not null)
            if (exportDetail == null)
            {
                throw new InvalidDataException("exportDetail is a required property for AnalysisColumn and cannot be null");
            }
            else
            {
                this.ExportDetail = exportDetail;
            }
            this.ExportUnclassifiedAs = exportUnclassifiedAs;
            this.ValueFormat = valueFormat;
            this.Aggregation = aggregation;
            this.ColumnAggregation = columnAggregation;
            this.Expression = expression;
            this.Browsable = browsable;
            this.Exportable = exportable;
        }
        
        /// <summary>
        /// The column id
        /// </summary>
        /// <value>The column id</value>
        [DataMember(Name="columnId", EmitDefaultValue=false)]
        public string ColumnId { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public DimensionScope Scope { get; set; }

        /// <summary>
        /// The column description
        /// </summary>
        /// <value>The column description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }





        /// <summary>
        /// Gets or Sets ColumnAggregation
        /// </summary>
        [DataMember(Name="columnAggregation", EmitDefaultValue=false)]
        public ColumnAggregation ColumnAggregation { get; set; }

        /// <summary>
        /// Gets or Sets Expression
        /// </summary>
        [DataMember(Name="expression", EmitDefaultValue=false)]
        public Expression Expression { get; set; }

        /// <summary>
        /// Whether the column is browsable
        /// </summary>
        /// <value>Whether the column is browsable</value>
        [DataMember(Name="browsable", EmitDefaultValue=false)]
        public bool? Browsable { get; set; }

        /// <summary>
        /// Whether the column is exportable
        /// </summary>
        /// <value>Whether the column is exportable</value>
        [DataMember(Name="exportable", EmitDefaultValue=false)]
        public bool? Exportable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalysisColumn {\n");
            sb.Append("  ColumnId: ").Append(ColumnId).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExportDetail: ").Append(ExportDetail).Append("\n");
            sb.Append("  ExportUnclassifiedAs: ").Append(ExportUnclassifiedAs).Append("\n");
            sb.Append("  ValueFormat: ").Append(ValueFormat).Append("\n");
            sb.Append("  Aggregation: ").Append(Aggregation).Append("\n");
            sb.Append("  ColumnAggregation: ").Append(ColumnAggregation).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  Browsable: ").Append(Browsable).Append("\n");
            sb.Append("  Exportable: ").Append(Exportable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalysisColumn);
        }

        /// <summary>
        /// Returns true if AnalysisColumn instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalysisColumn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalysisColumn input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ColumnId == input.ColumnId ||
                    (this.ColumnId != null &&
                    this.ColumnId.Equals(input.ColumnId))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExportDetail == input.ExportDetail ||
                    (this.ExportDetail != null &&
                    this.ExportDetail.Equals(input.ExportDetail))
                ) && 
                (
                    this.ExportUnclassifiedAs == input.ExportUnclassifiedAs ||
                    (this.ExportUnclassifiedAs != null &&
                    this.ExportUnclassifiedAs.Equals(input.ExportUnclassifiedAs))
                ) && 
                (
                    this.ValueFormat == input.ValueFormat ||
                    (this.ValueFormat != null &&
                    this.ValueFormat.Equals(input.ValueFormat))
                ) && 
                (
                    this.Aggregation == input.Aggregation ||
                    (this.Aggregation != null &&
                    this.Aggregation.Equals(input.Aggregation))
                ) && 
                (
                    this.ColumnAggregation == input.ColumnAggregation ||
                    (this.ColumnAggregation != null &&
                    this.ColumnAggregation.Equals(input.ColumnAggregation))
                ) && 
                (
                    this.Expression == input.Expression ||
                    (this.Expression != null &&
                    this.Expression.Equals(input.Expression))
                ) && 
                (
                    this.Browsable == input.Browsable ||
                    (this.Browsable != null &&
                    this.Browsable.Equals(input.Browsable))
                ) && 
                (
                    this.Exportable == input.Exportable ||
                    (this.Exportable != null &&
                    this.Exportable.Equals(input.Exportable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ColumnId != null)
                    hashCode = hashCode * 59 + this.ColumnId.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ExportDetail != null)
                    hashCode = hashCode * 59 + this.ExportDetail.GetHashCode();
                if (this.ExportUnclassifiedAs != null)
                    hashCode = hashCode * 59 + this.ExportUnclassifiedAs.GetHashCode();
                if (this.ValueFormat != null)
                    hashCode = hashCode * 59 + this.ValueFormat.GetHashCode();
                if (this.Aggregation != null)
                    hashCode = hashCode * 59 + this.Aggregation.GetHashCode();
                if (this.ColumnAggregation != null)
                    hashCode = hashCode * 59 + this.ColumnAggregation.GetHashCode();
                if (this.Expression != null)
                    hashCode = hashCode * 59 + this.Expression.GetHashCode();
                if (this.Browsable != null)
                    hashCode = hashCode * 59 + this.Browsable.GetHashCode();
                if (this.Exportable != null)
                    hashCode = hashCode * 59 + this.Exportable.GetHashCode();
                return hashCode;
            }
        }
    }
}
