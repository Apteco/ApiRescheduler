/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// LimitsInformation
    /// </summary>
    [DataContract]
        public partial class LimitsInformation :  IEquatable<LimitsInformation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LimitsInformation" /> class.
        /// </summary>
        /// <param name="bufferTotal">The maximum number of rows to return in the browse results  Any browse results returned will be constrained by both this value and the BufferMemorySizeinMB. (required).</param>
        /// <param name="bufferMemorySizeinMB">The maximum amount of memory to use when returning browse results.  If not specified defaults to 8MB.  Any browse results returned will be constrained by both this value and the BufferTotal..</param>
        public LimitsInformation(long? bufferTotal = default(long?), int? bufferMemorySizeinMB = default(int?))
        {
            // to ensure "bufferTotal" is required (not null)
            if (bufferTotal == null)
            {
                throw new InvalidDataException("bufferTotal is a required property for LimitsInformation and cannot be null");
            }
            else
            {
                this.BufferTotal = bufferTotal;
            }
            this.BufferMemorySizeinMB = bufferMemorySizeinMB;
        }
        
        /// <summary>
        /// The maximum number of rows to return in the browse results  Any browse results returned will be constrained by both this value and the BufferMemorySizeinMB.
        /// </summary>
        /// <value>The maximum number of rows to return in the browse results  Any browse results returned will be constrained by both this value and the BufferMemorySizeinMB.</value>
        [DataMember(Name="bufferTotal", EmitDefaultValue=false)]
        public long? BufferTotal { get; set; }

        /// <summary>
        /// The maximum amount of memory to use when returning browse results.  If not specified defaults to 8MB.  Any browse results returned will be constrained by both this value and the BufferTotal.
        /// </summary>
        /// <value>The maximum amount of memory to use when returning browse results.  If not specified defaults to 8MB.  Any browse results returned will be constrained by both this value and the BufferTotal.</value>
        [DataMember(Name="bufferMemorySizeinMB", EmitDefaultValue=false)]
        public int? BufferMemorySizeinMB { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LimitsInformation {\n");
            sb.Append("  BufferTotal: ").Append(BufferTotal).Append("\n");
            sb.Append("  BufferMemorySizeinMB: ").Append(BufferMemorySizeinMB).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LimitsInformation);
        }

        /// <summary>
        /// Returns true if LimitsInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of LimitsInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LimitsInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BufferTotal == input.BufferTotal ||
                    (this.BufferTotal != null &&
                    this.BufferTotal.Equals(input.BufferTotal))
                ) && 
                (
                    this.BufferMemorySizeinMB == input.BufferMemorySizeinMB ||
                    (this.BufferMemorySizeinMB != null &&
                    this.BufferMemorySizeinMB.Equals(input.BufferMemorySizeinMB))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BufferTotal != null)
                    hashCode = hashCode * 59 + this.BufferTotal.GetHashCode();
                if (this.BufferMemorySizeinMB != null)
                    hashCode = hashCode * 59 + this.BufferMemorySizeinMB.GetHashCode();
                return hashCode;
            }
        }
    }
}
