/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// TopN
    /// </summary>
    [DataContract]
        public partial class TopN :  IEquatable<TopN>
    {
        /// <summary>
        /// Defines Direction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DirectionEnum
        {
            /// <summary>
            /// Enum Top for value: Top
            /// </summary>
            [EnumMember(Value = "Top")]
            Top = 1,
            /// <summary>
            /// Enum Bottom for value: Bottom
            /// </summary>
            [EnumMember(Value = "Bottom")]
            Bottom = 2,
            /// <summary>
            /// Enum RangeTopDown for value: RangeTopDown
            /// </summary>
            [EnumMember(Value = "RangeTopDown")]
            RangeTopDown = 3,
            /// <summary>
            /// Enum RangeBottomUp for value: RangeBottomUp
            /// </summary>
            [EnumMember(Value = "RangeBottomUp")]
            RangeBottomUp = 4,
            /// <summary>
            /// Enum PercentRangeTopDown for value: PercentRangeTopDown
            /// </summary>
            [EnumMember(Value = "PercentRangeTopDown")]
            PercentRangeTopDown = 5,
            /// <summary>
            /// Enum PercentRangeBottomUp for value: PercentRangeBottomUp
            /// </summary>
            [EnumMember(Value = "PercentRangeBottomUp")]
            PercentRangeBottomUp = 6        }
        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public DirectionEnum? Direction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TopN" /> class.
        /// </summary>
        /// <param name="variableName">variableName.</param>
        /// <param name="orderExpression">orderExpression.</param>
        /// <param name="expression">expression.</param>
        /// <param name="direction">direction.</param>
        /// <param name="value">value.</param>
        /// <param name="percent">percent.</param>
        /// <param name="minValue">minValue.</param>
        /// <param name="maxValue">maxValue.</param>
        /// <param name="sequence">sequence.</param>
        /// <param name="groupingVariableName">groupingVariableName.</param>
        /// <param name="groupingSequenceVariableName">groupingSequenceVariableName.</param>
        /// <param name="groupingAscending">groupingAscending.</param>
        /// <param name="groupingSequence">groupingSequence.</param>
        /// <param name="groupMax">groupMax.</param>
        public TopN(string variableName = default(string), Expression orderExpression = default(Expression), string expression = default(string), DirectionEnum? direction = default(DirectionEnum?), int? value = default(int?), double? percent = default(double?), double? minValue = default(double?), double? maxValue = default(double?), string sequence = default(string), string groupingVariableName = default(string), string groupingSequenceVariableName = default(string), bool? groupingAscending = default(bool?), string groupingSequence = default(string), int? groupMax = default(int?))
        {
            this.VariableName = variableName;
            this.OrderExpression = orderExpression;
            this.Expression = expression;
            this.Direction = direction;
            this.Value = value;
            this.Percent = percent;
            this.MinValue = minValue;
            this.MaxValue = maxValue;
            this.Sequence = sequence;
            this.GroupingVariableName = groupingVariableName;
            this.GroupingSequenceVariableName = groupingSequenceVariableName;
            this.GroupingAscending = groupingAscending;
            this.GroupingSequence = groupingSequence;
            this.GroupMax = groupMax;
        }
        
        /// <summary>
        /// Gets or Sets VariableName
        /// </summary>
        [DataMember(Name="variableName", EmitDefaultValue=false)]
        public string VariableName { get; set; }

        /// <summary>
        /// Gets or Sets OrderExpression
        /// </summary>
        [DataMember(Name="orderExpression", EmitDefaultValue=false)]
        public Expression OrderExpression { get; set; }

        /// <summary>
        /// Gets or Sets Expression
        /// </summary>
        [DataMember(Name="expression", EmitDefaultValue=false)]
        public string Expression { get; set; }


        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public int? Value { get; set; }

        /// <summary>
        /// Gets or Sets Percent
        /// </summary>
        [DataMember(Name="percent", EmitDefaultValue=false)]
        public double? Percent { get; set; }

        /// <summary>
        /// Gets or Sets MinValue
        /// </summary>
        [DataMember(Name="minValue", EmitDefaultValue=false)]
        public double? MinValue { get; set; }

        /// <summary>
        /// Gets or Sets MaxValue
        /// </summary>
        [DataMember(Name="maxValue", EmitDefaultValue=false)]
        public double? MaxValue { get; set; }

        /// <summary>
        /// Gets or Sets Sequence
        /// </summary>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public string Sequence { get; set; }

        /// <summary>
        /// Gets or Sets GroupingVariableName
        /// </summary>
        [DataMember(Name="groupingVariableName", EmitDefaultValue=false)]
        public string GroupingVariableName { get; set; }

        /// <summary>
        /// Gets or Sets GroupingSequenceVariableName
        /// </summary>
        [DataMember(Name="groupingSequenceVariableName", EmitDefaultValue=false)]
        public string GroupingSequenceVariableName { get; set; }

        /// <summary>
        /// Gets or Sets GroupingAscending
        /// </summary>
        [DataMember(Name="groupingAscending", EmitDefaultValue=false)]
        public bool? GroupingAscending { get; set; }

        /// <summary>
        /// Gets or Sets GroupingSequence
        /// </summary>
        [DataMember(Name="groupingSequence", EmitDefaultValue=false)]
        public string GroupingSequence { get; set; }

        /// <summary>
        /// Gets or Sets GroupMax
        /// </summary>
        [DataMember(Name="groupMax", EmitDefaultValue=false)]
        public int? GroupMax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TopN {\n");
            sb.Append("  VariableName: ").Append(VariableName).Append("\n");
            sb.Append("  OrderExpression: ").Append(OrderExpression).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Percent: ").Append(Percent).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  GroupingVariableName: ").Append(GroupingVariableName).Append("\n");
            sb.Append("  GroupingSequenceVariableName: ").Append(GroupingSequenceVariableName).Append("\n");
            sb.Append("  GroupingAscending: ").Append(GroupingAscending).Append("\n");
            sb.Append("  GroupingSequence: ").Append(GroupingSequence).Append("\n");
            sb.Append("  GroupMax: ").Append(GroupMax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TopN);
        }

        /// <summary>
        /// Returns true if TopN instances are equal
        /// </summary>
        /// <param name="input">Instance of TopN to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TopN input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VariableName == input.VariableName ||
                    (this.VariableName != null &&
                    this.VariableName.Equals(input.VariableName))
                ) && 
                (
                    this.OrderExpression == input.OrderExpression ||
                    (this.OrderExpression != null &&
                    this.OrderExpression.Equals(input.OrderExpression))
                ) && 
                (
                    this.Expression == input.Expression ||
                    (this.Expression != null &&
                    this.Expression.Equals(input.Expression))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Percent == input.Percent ||
                    (this.Percent != null &&
                    this.Percent.Equals(input.Percent))
                ) && 
                (
                    this.MinValue == input.MinValue ||
                    (this.MinValue != null &&
                    this.MinValue.Equals(input.MinValue))
                ) && 
                (
                    this.MaxValue == input.MaxValue ||
                    (this.MaxValue != null &&
                    this.MaxValue.Equals(input.MaxValue))
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && 
                (
                    this.GroupingVariableName == input.GroupingVariableName ||
                    (this.GroupingVariableName != null &&
                    this.GroupingVariableName.Equals(input.GroupingVariableName))
                ) && 
                (
                    this.GroupingSequenceVariableName == input.GroupingSequenceVariableName ||
                    (this.GroupingSequenceVariableName != null &&
                    this.GroupingSequenceVariableName.Equals(input.GroupingSequenceVariableName))
                ) && 
                (
                    this.GroupingAscending == input.GroupingAscending ||
                    (this.GroupingAscending != null &&
                    this.GroupingAscending.Equals(input.GroupingAscending))
                ) && 
                (
                    this.GroupingSequence == input.GroupingSequence ||
                    (this.GroupingSequence != null &&
                    this.GroupingSequence.Equals(input.GroupingSequence))
                ) && 
                (
                    this.GroupMax == input.GroupMax ||
                    (this.GroupMax != null &&
                    this.GroupMax.Equals(input.GroupMax))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VariableName != null)
                    hashCode = hashCode * 59 + this.VariableName.GetHashCode();
                if (this.OrderExpression != null)
                    hashCode = hashCode * 59 + this.OrderExpression.GetHashCode();
                if (this.Expression != null)
                    hashCode = hashCode * 59 + this.Expression.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Percent != null)
                    hashCode = hashCode * 59 + this.Percent.GetHashCode();
                if (this.MinValue != null)
                    hashCode = hashCode * 59 + this.MinValue.GetHashCode();
                if (this.MaxValue != null)
                    hashCode = hashCode * 59 + this.MaxValue.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.GroupingVariableName != null)
                    hashCode = hashCode * 59 + this.GroupingVariableName.GetHashCode();
                if (this.GroupingSequenceVariableName != null)
                    hashCode = hashCode * 59 + this.GroupingSequenceVariableName.GetHashCode();
                if (this.GroupingAscending != null)
                    hashCode = hashCode * 59 + this.GroupingAscending.GetHashCode();
                if (this.GroupingSequence != null)
                    hashCode = hashCode * 59 + this.GroupingSequence.GetHashCode();
                if (this.GroupMax != null)
                    hashCode = hashCode * 59 + this.GroupMax.GetHashCode();
                return hashCode;
            }
        }
    }
}
