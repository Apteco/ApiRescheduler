/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// TelemetryBugReport
    /// </summary>
    [DataContract]
        public partial class TelemetryBugReport :  IEquatable<TelemetryBugReport>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TelemetryBugReport" /> class.
        /// </summary>
        /// <param name="occurred">The time this bug occurred.</param>
        /// <param name="errorMessage">The error message for the bug.</param>
        /// <param name="stackTrace">The stack trace collected from the bug.</param>
        public TelemetryBugReport(DateTime? occurred = default(DateTime?), string errorMessage = default(string), string stackTrace = default(string))
        {
            this.Occurred = occurred;
            this.ErrorMessage = errorMessage;
            this.StackTrace = stackTrace;
        }
        
        /// <summary>
        /// The time this bug occurred
        /// </summary>
        /// <value>The time this bug occurred</value>
        [DataMember(Name="occurred", EmitDefaultValue=false)]
        public DateTime? Occurred { get; set; }

        /// <summary>
        /// The error message for the bug
        /// </summary>
        /// <value>The error message for the bug</value>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// The stack trace collected from the bug
        /// </summary>
        /// <value>The stack trace collected from the bug</value>
        [DataMember(Name="stackTrace", EmitDefaultValue=false)]
        public string StackTrace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TelemetryBugReport {\n");
            sb.Append("  Occurred: ").Append(Occurred).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  StackTrace: ").Append(StackTrace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TelemetryBugReport);
        }

        /// <summary>
        /// Returns true if TelemetryBugReport instances are equal
        /// </summary>
        /// <param name="input">Instance of TelemetryBugReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TelemetryBugReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Occurred == input.Occurred ||
                    (this.Occurred != null &&
                    this.Occurred.Equals(input.Occurred))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.StackTrace == input.StackTrace ||
                    (this.StackTrace != null &&
                    this.StackTrace.Equals(input.StackTrace))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Occurred != null)
                    hashCode = hashCode * 59 + this.Occurred.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.StackTrace != null)
                    hashCode = hashCode * 59 + this.StackTrace.GetHashCode();
                return hashCode;
            }
        }
    }
}
