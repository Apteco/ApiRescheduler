/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Status information for a PeopleStage element
    /// </summary>
    [DataContract]
        public partial class ElementStatus :  IEquatable<ElementStatus>
    {
        /// <summary>
        /// The element&#x27;s type
        /// </summary>
        /// <value>The element&#x27;s type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum Diagram for value: Diagram
            /// </summary>
            [EnumMember(Value = "Diagram")]
            Diagram = 2,
            /// <summary>
            /// Enum Programme for value: Programme
            /// </summary>
            [EnumMember(Value = "Programme")]
            Programme = 3,
            /// <summary>
            /// Enum Area for value: Area
            /// </summary>
            [EnumMember(Value = "Area")]
            Area = 4,
            /// <summary>
            /// Enum Campaign for value: Campaign
            /// </summary>
            [EnumMember(Value = "Campaign")]
            Campaign = 5,
            /// <summary>
            /// Enum Message for value: Message
            /// </summary>
            [EnumMember(Value = "Message")]
            Message = 6,
            /// <summary>
            /// Enum Group for value: Group
            /// </summary>
            [EnumMember(Value = "Group")]
            Group = 7,
            /// <summary>
            /// Enum Audience for value: Audience
            /// </summary>
            [EnumMember(Value = "Audience")]
            Audience = 8,
            /// <summary>
            /// Enum Content for value: Content
            /// </summary>
            [EnumMember(Value = "Content")]
            Content = 9,
            /// <summary>
            /// Enum Delivery for value: Delivery
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery = 10,
            /// <summary>
            /// Enum Pool for value: Pool
            /// </summary>
            [EnumMember(Value = "Pool")]
            Pool = 11,
            /// <summary>
            /// Enum Responses for value: Responses
            /// </summary>
            [EnumMember(Value = "Responses")]
            Responses = 12,
            /// <summary>
            /// Enum Transition for value: Transition
            /// </summary>
            [EnumMember(Value = "Transition")]
            Transition = 13,
            /// <summary>
            /// Enum PauseAction for value: PauseAction
            /// </summary>
            [EnumMember(Value = "PauseAction")]
            PauseAction = 14        }
        /// <summary>
        /// The element&#x27;s type
        /// </summary>
        /// <value>The element&#x27;s type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// The different types of channel that PeopleStage can deliver to
        /// </summary>
        /// <value>The different types of channel that PeopleStage can deliver to</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ChannelTypesEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum Control for value: Control
            /// </summary>
            [EnumMember(Value = "Control")]
            Control = 2,
            /// <summary>
            /// Enum Broadcast for value: Broadcast
            /// </summary>
            [EnumMember(Value = "Broadcast")]
            Broadcast = 3,
            /// <summary>
            /// Enum File for value: File
            /// </summary>
            [EnumMember(Value = "File")]
            File = 4,
            /// <summary>
            /// Enum Ftp for value: Ftp
            /// </summary>
            [EnumMember(Value = "Ftp")]
            Ftp = 5,
            /// <summary>
            /// Enum Facebook for value: Facebook
            /// </summary>
            [EnumMember(Value = "Facebook")]
            Facebook = 6,
            /// <summary>
            /// Enum MicrosoftDynamics for value: MicrosoftDynamics
            /// </summary>
            [EnumMember(Value = "MicrosoftDynamics")]
            MicrosoftDynamics = 7,
            /// <summary>
            /// Enum SalesForce for value: SalesForce
            /// </summary>
            [EnumMember(Value = "SalesForce")]
            SalesForce = 8,
            /// <summary>
            /// Enum PushNotification for value: PushNotification
            /// </summary>
            [EnumMember(Value = "PushNotification")]
            PushNotification = 9,
            /// <summary>
            /// Enum Twitter for value: Twitter
            /// </summary>
            [EnumMember(Value = "Twitter")]
            Twitter = 10,
            /// <summary>
            /// Enum Google for value: Google
            /// </summary>
            [EnumMember(Value = "Google")]
            Google = 11,
            /// <summary>
            /// Enum LinkedIn for value: LinkedIn
            /// </summary>
            [EnumMember(Value = "LinkedIn")]
            LinkedIn = 12,
            /// <summary>
            /// Enum PullMarketing for value: PullMarketing
            /// </summary>
            [EnumMember(Value = "PullMarketing")]
            PullMarketing = 13,
            /// <summary>
            /// Enum Composite for value: Composite
            /// </summary>
            [EnumMember(Value = "Composite")]
            Composite = 14,
            /// <summary>
            /// Enum Email for value: Email
            /// </summary>
            [EnumMember(Value = "Email")]
            Email = 15,
            /// <summary>
            /// Enum Sms for value: Sms
            /// </summary>
            [EnumMember(Value = "Sms")]
            Sms = 16,
            /// <summary>
            /// Enum Waba for value: Waba
            /// </summary>
            [EnumMember(Value = "Waba")]
            Waba = 17,
            /// <summary>
            /// Enum Mock for value: Mock
            /// </summary>
            [EnumMember(Value = "Mock")]
            Mock = 18        }
        /// <summary>
        /// The different types of channel that have been used by deliveries within this element
        /// </summary>
        /// <value>The different types of channel that have been used by deliveries within this element</value>
        [DataMember(Name="channelTypes", EmitDefaultValue=false)]
        public List<ChannelTypesEnum> ChannelTypes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ElementStatus" /> class.
        /// </summary>
        /// <param name="id">The element&#x27;s id (required).</param>
        /// <param name="description">The element&#x27;s description (required).</param>
        /// <param name="type">The element&#x27;s type (required).</param>
        /// <param name="successfulCampaignsCount">The number of campaigns that currently have a success status within this element.</param>
        /// <param name="erroredCampaignsCount">The number of campaigns that currently have an errored status within this element.</param>
        /// <param name="inactiveCampaignsCount">The number of campaigns that currently have an inactive status within this element.</param>
        /// <param name="needsApprovalCampaignsCount">The number of campaigns that currently have a message that needs approval within this element.</param>
        /// <param name="userPausedCampaignsCount">The number of campaigns that have been manually paused.</param>
        /// <param name="errorPausedCampaignsCount">The number of campaigns that have been automatically paused after an error.</param>
        /// <param name="channelTypes">The different types of channel that have been used by deliveries within this element.</param>
        /// <param name="firstRan">The first time that any deliveries ran within this element.</param>
        /// <param name="lastRan">The last time that any deliveries ran within this element.</param>
        /// <param name="nextRun">The next time that any deliveries will run within this element.</param>
        /// <param name="lastAction">The last time that any action ran within this element.</param>
        /// <param name="statisticsTimestamp">The date and time that the statistics were calculated.</param>
        /// <param name="path">The element&#x27;s path.</param>
        public ElementStatus(string id = default(string), string description = default(string), TypeEnum type = default(TypeEnum), int? successfulCampaignsCount = default(int?), int? erroredCampaignsCount = default(int?), int? inactiveCampaignsCount = default(int?), int? needsApprovalCampaignsCount = default(int?), int? userPausedCampaignsCount = default(int?), int? errorPausedCampaignsCount = default(int?), List<ChannelTypesEnum> channelTypes = default(List<ChannelTypesEnum>), DateTime? firstRan = default(DateTime?), DateTime? lastRan = default(DateTime?), DateTime? nextRun = default(DateTime?), DateTime? lastAction = default(DateTime?), DateTime? statisticsTimestamp = default(DateTime?), List<ElementKey> path = default(List<ElementKey>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ElementStatus and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for ElementStatus and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ElementStatus and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.SuccessfulCampaignsCount = successfulCampaignsCount;
            this.ErroredCampaignsCount = erroredCampaignsCount;
            this.InactiveCampaignsCount = inactiveCampaignsCount;
            this.NeedsApprovalCampaignsCount = needsApprovalCampaignsCount;
            this.UserPausedCampaignsCount = userPausedCampaignsCount;
            this.ErrorPausedCampaignsCount = errorPausedCampaignsCount;
            this.ChannelTypes = channelTypes;
            this.FirstRan = firstRan;
            this.LastRan = lastRan;
            this.NextRun = nextRun;
            this.LastAction = lastAction;
            this.StatisticsTimestamp = statisticsTimestamp;
            this.Path = path;
        }
        
        /// <summary>
        /// The element&#x27;s id
        /// </summary>
        /// <value>The element&#x27;s id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The element&#x27;s description
        /// </summary>
        /// <value>The element&#x27;s description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// The number of campaigns that currently have a success status within this element
        /// </summary>
        /// <value>The number of campaigns that currently have a success status within this element</value>
        [DataMember(Name="successfulCampaignsCount", EmitDefaultValue=false)]
        public int? SuccessfulCampaignsCount { get; set; }

        /// <summary>
        /// The number of campaigns that currently have an errored status within this element
        /// </summary>
        /// <value>The number of campaigns that currently have an errored status within this element</value>
        [DataMember(Name="erroredCampaignsCount", EmitDefaultValue=false)]
        public int? ErroredCampaignsCount { get; set; }

        /// <summary>
        /// The number of campaigns that currently have an inactive status within this element
        /// </summary>
        /// <value>The number of campaigns that currently have an inactive status within this element</value>
        [DataMember(Name="inactiveCampaignsCount", EmitDefaultValue=false)]
        public int? InactiveCampaignsCount { get; set; }

        /// <summary>
        /// The number of campaigns that currently have a message that needs approval within this element
        /// </summary>
        /// <value>The number of campaigns that currently have a message that needs approval within this element</value>
        [DataMember(Name="needsApprovalCampaignsCount", EmitDefaultValue=false)]
        public int? NeedsApprovalCampaignsCount { get; set; }

        /// <summary>
        /// The number of campaigns that have been manually paused
        /// </summary>
        /// <value>The number of campaigns that have been manually paused</value>
        [DataMember(Name="userPausedCampaignsCount", EmitDefaultValue=false)]
        public int? UserPausedCampaignsCount { get; set; }

        /// <summary>
        /// The number of campaigns that have been automatically paused after an error
        /// </summary>
        /// <value>The number of campaigns that have been automatically paused after an error</value>
        [DataMember(Name="errorPausedCampaignsCount", EmitDefaultValue=false)]
        public int? ErrorPausedCampaignsCount { get; set; }


        /// <summary>
        /// The first time that any deliveries ran within this element
        /// </summary>
        /// <value>The first time that any deliveries ran within this element</value>
        [DataMember(Name="firstRan", EmitDefaultValue=false)]
        public DateTime? FirstRan { get; set; }

        /// <summary>
        /// The last time that any deliveries ran within this element
        /// </summary>
        /// <value>The last time that any deliveries ran within this element</value>
        [DataMember(Name="lastRan", EmitDefaultValue=false)]
        public DateTime? LastRan { get; set; }

        /// <summary>
        /// The next time that any deliveries will run within this element
        /// </summary>
        /// <value>The next time that any deliveries will run within this element</value>
        [DataMember(Name="nextRun", EmitDefaultValue=false)]
        public DateTime? NextRun { get; set; }

        /// <summary>
        /// The last time that any action ran within this element
        /// </summary>
        /// <value>The last time that any action ran within this element</value>
        [DataMember(Name="lastAction", EmitDefaultValue=false)]
        public DateTime? LastAction { get; set; }

        /// <summary>
        /// The date and time that the statistics were calculated
        /// </summary>
        /// <value>The date and time that the statistics were calculated</value>
        [DataMember(Name="statisticsTimestamp", EmitDefaultValue=false)]
        public DateTime? StatisticsTimestamp { get; set; }

        /// <summary>
        /// The element&#x27;s path
        /// </summary>
        /// <value>The element&#x27;s path</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public List<ElementKey> Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ElementStatus {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SuccessfulCampaignsCount: ").Append(SuccessfulCampaignsCount).Append("\n");
            sb.Append("  ErroredCampaignsCount: ").Append(ErroredCampaignsCount).Append("\n");
            sb.Append("  InactiveCampaignsCount: ").Append(InactiveCampaignsCount).Append("\n");
            sb.Append("  NeedsApprovalCampaignsCount: ").Append(NeedsApprovalCampaignsCount).Append("\n");
            sb.Append("  UserPausedCampaignsCount: ").Append(UserPausedCampaignsCount).Append("\n");
            sb.Append("  ErrorPausedCampaignsCount: ").Append(ErrorPausedCampaignsCount).Append("\n");
            sb.Append("  ChannelTypes: ").Append(ChannelTypes).Append("\n");
            sb.Append("  FirstRan: ").Append(FirstRan).Append("\n");
            sb.Append("  LastRan: ").Append(LastRan).Append("\n");
            sb.Append("  NextRun: ").Append(NextRun).Append("\n");
            sb.Append("  LastAction: ").Append(LastAction).Append("\n");
            sb.Append("  StatisticsTimestamp: ").Append(StatisticsTimestamp).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ElementStatus);
        }

        /// <summary>
        /// Returns true if ElementStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of ElementStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElementStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SuccessfulCampaignsCount == input.SuccessfulCampaignsCount ||
                    (this.SuccessfulCampaignsCount != null &&
                    this.SuccessfulCampaignsCount.Equals(input.SuccessfulCampaignsCount))
                ) && 
                (
                    this.ErroredCampaignsCount == input.ErroredCampaignsCount ||
                    (this.ErroredCampaignsCount != null &&
                    this.ErroredCampaignsCount.Equals(input.ErroredCampaignsCount))
                ) && 
                (
                    this.InactiveCampaignsCount == input.InactiveCampaignsCount ||
                    (this.InactiveCampaignsCount != null &&
                    this.InactiveCampaignsCount.Equals(input.InactiveCampaignsCount))
                ) && 
                (
                    this.NeedsApprovalCampaignsCount == input.NeedsApprovalCampaignsCount ||
                    (this.NeedsApprovalCampaignsCount != null &&
                    this.NeedsApprovalCampaignsCount.Equals(input.NeedsApprovalCampaignsCount))
                ) && 
                (
                    this.UserPausedCampaignsCount == input.UserPausedCampaignsCount ||
                    (this.UserPausedCampaignsCount != null &&
                    this.UserPausedCampaignsCount.Equals(input.UserPausedCampaignsCount))
                ) && 
                (
                    this.ErrorPausedCampaignsCount == input.ErrorPausedCampaignsCount ||
                    (this.ErrorPausedCampaignsCount != null &&
                    this.ErrorPausedCampaignsCount.Equals(input.ErrorPausedCampaignsCount))
                ) && 
                (
                    this.ChannelTypes == input.ChannelTypes ||
                    this.ChannelTypes != null &&
                    input.ChannelTypes != null &&
                    this.ChannelTypes.SequenceEqual(input.ChannelTypes)
                ) && 
                (
                    this.FirstRan == input.FirstRan ||
                    (this.FirstRan != null &&
                    this.FirstRan.Equals(input.FirstRan))
                ) && 
                (
                    this.LastRan == input.LastRan ||
                    (this.LastRan != null &&
                    this.LastRan.Equals(input.LastRan))
                ) && 
                (
                    this.NextRun == input.NextRun ||
                    (this.NextRun != null &&
                    this.NextRun.Equals(input.NextRun))
                ) && 
                (
                    this.LastAction == input.LastAction ||
                    (this.LastAction != null &&
                    this.LastAction.Equals(input.LastAction))
                ) && 
                (
                    this.StatisticsTimestamp == input.StatisticsTimestamp ||
                    (this.StatisticsTimestamp != null &&
                    this.StatisticsTimestamp.Equals(input.StatisticsTimestamp))
                ) && 
                (
                    this.Path == input.Path ||
                    this.Path != null &&
                    input.Path != null &&
                    this.Path.SequenceEqual(input.Path)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SuccessfulCampaignsCount != null)
                    hashCode = hashCode * 59 + this.SuccessfulCampaignsCount.GetHashCode();
                if (this.ErroredCampaignsCount != null)
                    hashCode = hashCode * 59 + this.ErroredCampaignsCount.GetHashCode();
                if (this.InactiveCampaignsCount != null)
                    hashCode = hashCode * 59 + this.InactiveCampaignsCount.GetHashCode();
                if (this.NeedsApprovalCampaignsCount != null)
                    hashCode = hashCode * 59 + this.NeedsApprovalCampaignsCount.GetHashCode();
                if (this.UserPausedCampaignsCount != null)
                    hashCode = hashCode * 59 + this.UserPausedCampaignsCount.GetHashCode();
                if (this.ErrorPausedCampaignsCount != null)
                    hashCode = hashCode * 59 + this.ErrorPausedCampaignsCount.GetHashCode();
                if (this.ChannelTypes != null)
                    hashCode = hashCode * 59 + this.ChannelTypes.GetHashCode();
                if (this.FirstRan != null)
                    hashCode = hashCode * 59 + this.FirstRan.GetHashCode();
                if (this.LastRan != null)
                    hashCode = hashCode * 59 + this.LastRan.GetHashCode();
                if (this.NextRun != null)
                    hashCode = hashCode * 59 + this.NextRun.GetHashCode();
                if (this.LastAction != null)
                    hashCode = hashCode * 59 + this.LastAction.GetHashCode();
                if (this.StatisticsTimestamp != null)
                    hashCode = hashCode * 59 + this.StatisticsTimestamp.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                return hashCode;
            }
        }
    }
}
