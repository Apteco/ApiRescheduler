/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details for a schedule based on a date rule
    /// </summary>
    [DataContract]
        public partial class ScheduleDateRule :  IEquatable<ScheduleDateRule>
    {
        /// <summary>
        /// Defines PatternFrequency
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PatternFrequencyEnum
        {
            /// <summary>
            /// Enum Daily for value: Daily
            /// </summary>
            [EnumMember(Value = "Daily")]
            Daily = 1,
            /// <summary>
            /// Enum Weekly for value: Weekly
            /// </summary>
            [EnumMember(Value = "Weekly")]
            Weekly = 2,
            /// <summary>
            /// Enum Monthly for value: Monthly
            /// </summary>
            [EnumMember(Value = "Monthly")]
            Monthly = 3,
            /// <summary>
            /// Enum Yearly for value: Yearly
            /// </summary>
            [EnumMember(Value = "Yearly")]
            Yearly = 4        }
        /// <summary>
        /// Gets or Sets PatternFrequency
        /// </summary>
        [DataMember(Name="patternFrequency", EmitDefaultValue=false)]
        public PatternFrequencyEnum? PatternFrequency { get; set; }
        /// <summary>
        /// Defines PatternType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PatternTypeEnum
        {
            /// <summary>
            /// Enum CalculatedDay for value: CalculatedDay
            /// </summary>
            [EnumMember(Value = "CalculatedDay")]
            CalculatedDay = 1,
            /// <summary>
            /// Enum CalculatedMonth for value: CalculatedMonth
            /// </summary>
            [EnumMember(Value = "CalculatedMonth")]
            CalculatedMonth = 2,
            /// <summary>
            /// Enum CalculatedYear for value: CalculatedYear
            /// </summary>
            [EnumMember(Value = "CalculatedYear")]
            CalculatedYear = 3,
            /// <summary>
            /// Enum Explicit for value: Explicit
            /// </summary>
            [EnumMember(Value = "Explicit")]
            Explicit = 4        }
        /// <summary>
        /// Gets or Sets PatternType
        /// </summary>
        [DataMember(Name="patternType", EmitDefaultValue=false)]
        public PatternTypeEnum? PatternType { get; set; }
        /// <summary>
        /// Defines PatternDaysOfWeekArray
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PatternDaysOfWeekArrayEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 2,
            /// <summary>
            /// Enum AllWeekdays for value: AllWeekdays
            /// </summary>
            [EnumMember(Value = "AllWeekdays")]
            AllWeekdays = 3,
            /// <summary>
            /// Enum AllWeekendDays for value: AllWeekendDays
            /// </summary>
            [EnumMember(Value = "AllWeekendDays")]
            AllWeekendDays = 4,
            /// <summary>
            /// Enum Sunday for value: Sunday
            /// </summary>
            [EnumMember(Value = "Sunday")]
            Sunday = 5,
            /// <summary>
            /// Enum Monday for value: Monday
            /// </summary>
            [EnumMember(Value = "Monday")]
            Monday = 6,
            /// <summary>
            /// Enum Tuesday for value: Tuesday
            /// </summary>
            [EnumMember(Value = "Tuesday")]
            Tuesday = 7,
            /// <summary>
            /// Enum Wednesday for value: Wednesday
            /// </summary>
            [EnumMember(Value = "Wednesday")]
            Wednesday = 8,
            /// <summary>
            /// Enum Thursday for value: Thursday
            /// </summary>
            [EnumMember(Value = "Thursday")]
            Thursday = 9,
            /// <summary>
            /// Enum Friday for value: Friday
            /// </summary>
            [EnumMember(Value = "Friday")]
            Friday = 10,
            /// <summary>
            /// Enum Saturday for value: Saturday
            /// </summary>
            [EnumMember(Value = "Saturday")]
            Saturday = 11        }
        /// <summary>
        /// Gets or Sets PatternDaysOfWeekArray
        /// </summary>
        [DataMember(Name="patternDaysOfWeekArray", EmitDefaultValue=false)]
        public List<PatternDaysOfWeekArrayEnum> PatternDaysOfWeekArray { get; set; }
        /// <summary>
        /// Defines PatternOccurrenceOfDayInMonth
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PatternOccurrenceOfDayInMonthEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            /// <summary>
            /// Enum First for value: First
            /// </summary>
            [EnumMember(Value = "First")]
            First = 2,
            /// <summary>
            /// Enum Second for value: Second
            /// </summary>
            [EnumMember(Value = "Second")]
            Second = 3,
            /// <summary>
            /// Enum Third for value: Third
            /// </summary>
            [EnumMember(Value = "Third")]
            Third = 4,
            /// <summary>
            /// Enum Fourth for value: Fourth
            /// </summary>
            [EnumMember(Value = "Fourth")]
            Fourth = 5,
            /// <summary>
            /// Enum Last for value: Last
            /// </summary>
            [EnumMember(Value = "Last")]
            Last = 6        }
        /// <summary>
        /// Gets or Sets PatternOccurrenceOfDayInMonth
        /// </summary>
        [DataMember(Name="patternOccurrenceOfDayInMonth", EmitDefaultValue=false)]
        public PatternOccurrenceOfDayInMonthEnum? PatternOccurrenceOfDayInMonth { get; set; }
        /// <summary>
        /// Defines StartRangeLimit
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StartRangeLimitEnum
        {
            /// <summary>
            /// Enum Earliest for value: Earliest
            /// </summary>
            [EnumMember(Value = "Earliest")]
            Earliest = 1,
            /// <summary>
            /// Enum Latest for value: Latest
            /// </summary>
            [EnumMember(Value = "Latest")]
            Latest = 2,
            /// <summary>
            /// Enum Actual for value: Actual
            /// </summary>
            [EnumMember(Value = "Actual")]
            Actual = 3,
            /// <summary>
            /// Enum Relative for value: Relative
            /// </summary>
            [EnumMember(Value = "Relative")]
            Relative = 4        }
        /// <summary>
        /// Gets or Sets StartRangeLimit
        /// </summary>
        [DataMember(Name="startRangeLimit", EmitDefaultValue=false)]
        public StartRangeLimitEnum? StartRangeLimit { get; set; }
        /// <summary>
        /// Defines StartRangeRelative
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StartRangeRelativeEnum
        {
            /// <summary>
            /// Enum Today for value: Today
            /// </summary>
            [EnumMember(Value = "Today")]
            Today = 1,
            /// <summary>
            /// Enum Tomorrow for value: Tomorrow
            /// </summary>
            [EnumMember(Value = "Tomorrow")]
            Tomorrow = 2,
            /// <summary>
            /// Enum Yesterday for value: Yesterday
            /// </summary>
            [EnumMember(Value = "Yesterday")]
            Yesterday = 3,
            /// <summary>
            /// Enum ThisWeek for value: ThisWeek
            /// </summary>
            [EnumMember(Value = "ThisWeek")]
            ThisWeek = 4,
            /// <summary>
            /// Enum ThisMonth for value: ThisMonth
            /// </summary>
            [EnumMember(Value = "ThisMonth")]
            ThisMonth = 5,
            /// <summary>
            /// Enum ThisQuarter for value: ThisQuarter
            /// </summary>
            [EnumMember(Value = "ThisQuarter")]
            ThisQuarter = 6,
            /// <summary>
            /// Enum ThisYear for value: ThisYear
            /// </summary>
            [EnumMember(Value = "ThisYear")]
            ThisYear = 7,
            /// <summary>
            /// Enum ThisBusinessMonth for value: ThisBusinessMonth
            /// </summary>
            [EnumMember(Value = "ThisBusinessMonth")]
            ThisBusinessMonth = 8,
            /// <summary>
            /// Enum ThisBusinessQuarter for value: ThisBusinessQuarter
            /// </summary>
            [EnumMember(Value = "ThisBusinessQuarter")]
            ThisBusinessQuarter = 9,
            /// <summary>
            /// Enum ThisBusinessYear for value: ThisBusinessYear
            /// </summary>
            [EnumMember(Value = "ThisBusinessYear")]
            ThisBusinessYear = 10,
            /// <summary>
            /// Enum LoadDate for value: LoadDate
            /// </summary>
            [EnumMember(Value = "LoadDate")]
            LoadDate = 11,
            /// <summary>
            /// Enum LoadWeek for value: LoadWeek
            /// </summary>
            [EnumMember(Value = "LoadWeek")]
            LoadWeek = 12,
            /// <summary>
            /// Enum LoadMonth for value: LoadMonth
            /// </summary>
            [EnumMember(Value = "LoadMonth")]
            LoadMonth = 13,
            /// <summary>
            /// Enum LoadQuarter for value: LoadQuarter
            /// </summary>
            [EnumMember(Value = "LoadQuarter")]
            LoadQuarter = 14,
            /// <summary>
            /// Enum LoadYear for value: LoadYear
            /// </summary>
            [EnumMember(Value = "LoadYear")]
            LoadYear = 15,
            /// <summary>
            /// Enum FirstPopulatedDate for value: FirstPopulatedDate
            /// </summary>
            [EnumMember(Value = "FirstPopulatedDate")]
            FirstPopulatedDate = 16,
            /// <summary>
            /// Enum FirstPopulatedWeek for value: FirstPopulatedWeek
            /// </summary>
            [EnumMember(Value = "FirstPopulatedWeek")]
            FirstPopulatedWeek = 17,
            /// <summary>
            /// Enum FirstPopulatedMonth for value: FirstPopulatedMonth
            /// </summary>
            [EnumMember(Value = "FirstPopulatedMonth")]
            FirstPopulatedMonth = 18,
            /// <summary>
            /// Enum FirstPopulatedQuarter for value: FirstPopulatedQuarter
            /// </summary>
            [EnumMember(Value = "FirstPopulatedQuarter")]
            FirstPopulatedQuarter = 19,
            /// <summary>
            /// Enum FirstPopulatedYear for value: FirstPopulatedYear
            /// </summary>
            [EnumMember(Value = "FirstPopulatedYear")]
            FirstPopulatedYear = 20,
            /// <summary>
            /// Enum LastPopulatedDate for value: LastPopulatedDate
            /// </summary>
            [EnumMember(Value = "LastPopulatedDate")]
            LastPopulatedDate = 21,
            /// <summary>
            /// Enum LastPopulatedWeek for value: LastPopulatedWeek
            /// </summary>
            [EnumMember(Value = "LastPopulatedWeek")]
            LastPopulatedWeek = 22,
            /// <summary>
            /// Enum LastPopulatedMonth for value: LastPopulatedMonth
            /// </summary>
            [EnumMember(Value = "LastPopulatedMonth")]
            LastPopulatedMonth = 23,
            /// <summary>
            /// Enum LastPopulatedQuarter for value: LastPopulatedQuarter
            /// </summary>
            [EnumMember(Value = "LastPopulatedQuarter")]
            LastPopulatedQuarter = 24,
            /// <summary>
            /// Enum LastPopulatedYear for value: LastPopulatedYear
            /// </summary>
            [EnumMember(Value = "LastPopulatedYear")]
            LastPopulatedYear = 25,
            /// <summary>
            /// Enum CustomDate for value: CustomDate
            /// </summary>
            [EnumMember(Value = "CustomDate")]
            CustomDate = 26        }
        /// <summary>
        /// Gets or Sets StartRangeRelative
        /// </summary>
        [DataMember(Name="startRangeRelative", EmitDefaultValue=false)]
        public StartRangeRelativeEnum? StartRangeRelative { get; set; }
        /// <summary>
        /// Defines StartRangeOffsetDirection
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StartRangeOffsetDirectionEnum
        {
            /// <summary>
            /// Enum Forward for value: Forward
            /// </summary>
            [EnumMember(Value = "Forward")]
            Forward = 1,
            /// <summary>
            /// Enum Backward for value: Backward
            /// </summary>
            [EnumMember(Value = "Backward")]
            Backward = 2        }
        /// <summary>
        /// Gets or Sets StartRangeOffsetDirection
        /// </summary>
        [DataMember(Name="startRangeOffsetDirection", EmitDefaultValue=false)]
        public StartRangeOffsetDirectionEnum? StartRangeOffsetDirection { get; set; }
        /// <summary>
        /// Defines StartRangeOffsetUnits
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StartRangeOffsetUnitsEnum
        {
            /// <summary>
            /// Enum Days for value: Days
            /// </summary>
            [EnumMember(Value = "Days")]
            Days = 1,
            /// <summary>
            /// Enum Weeks for value: Weeks
            /// </summary>
            [EnumMember(Value = "Weeks")]
            Weeks = 2,
            /// <summary>
            /// Enum Months for value: Months
            /// </summary>
            [EnumMember(Value = "Months")]
            Months = 3,
            /// <summary>
            /// Enum Quarters for value: Quarters
            /// </summary>
            [EnumMember(Value = "Quarters")]
            Quarters = 4,
            /// <summary>
            /// Enum Years for value: Years
            /// </summary>
            [EnumMember(Value = "Years")]
            Years = 5        }
        /// <summary>
        /// Gets or Sets StartRangeOffsetUnits
        /// </summary>
        [DataMember(Name="startRangeOffsetUnits", EmitDefaultValue=false)]
        public StartRangeOffsetUnitsEnum? StartRangeOffsetUnits { get; set; }
        /// <summary>
        /// Defines EndRangeLimit
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EndRangeLimitEnum
        {
            /// <summary>
            /// Enum Earliest for value: Earliest
            /// </summary>
            [EnumMember(Value = "Earliest")]
            Earliest = 1,
            /// <summary>
            /// Enum Latest for value: Latest
            /// </summary>
            [EnumMember(Value = "Latest")]
            Latest = 2,
            /// <summary>
            /// Enum Actual for value: Actual
            /// </summary>
            [EnumMember(Value = "Actual")]
            Actual = 3,
            /// <summary>
            /// Enum Forward for value: Forward
            /// </summary>
            [EnumMember(Value = "Forward")]
            Forward = 4,
            /// <summary>
            /// Enum Backward for value: Backward
            /// </summary>
            [EnumMember(Value = "Backward")]
            Backward = 5,
            /// <summary>
            /// Enum Relative for value: Relative
            /// </summary>
            [EnumMember(Value = "Relative")]
            Relative = 6        }
        /// <summary>
        /// Gets or Sets EndRangeLimit
        /// </summary>
        [DataMember(Name="endRangeLimit", EmitDefaultValue=false)]
        public EndRangeLimitEnum? EndRangeLimit { get; set; }
        /// <summary>
        /// Defines EndRangeRelative
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EndRangeRelativeEnum
        {
            /// <summary>
            /// Enum Today for value: Today
            /// </summary>
            [EnumMember(Value = "Today")]
            Today = 1,
            /// <summary>
            /// Enum Tomorrow for value: Tomorrow
            /// </summary>
            [EnumMember(Value = "Tomorrow")]
            Tomorrow = 2,
            /// <summary>
            /// Enum Yesterday for value: Yesterday
            /// </summary>
            [EnumMember(Value = "Yesterday")]
            Yesterday = 3,
            /// <summary>
            /// Enum ThisWeek for value: ThisWeek
            /// </summary>
            [EnumMember(Value = "ThisWeek")]
            ThisWeek = 4,
            /// <summary>
            /// Enum ThisMonth for value: ThisMonth
            /// </summary>
            [EnumMember(Value = "ThisMonth")]
            ThisMonth = 5,
            /// <summary>
            /// Enum ThisQuarter for value: ThisQuarter
            /// </summary>
            [EnumMember(Value = "ThisQuarter")]
            ThisQuarter = 6,
            /// <summary>
            /// Enum ThisYear for value: ThisYear
            /// </summary>
            [EnumMember(Value = "ThisYear")]
            ThisYear = 7,
            /// <summary>
            /// Enum ThisBusinessMonth for value: ThisBusinessMonth
            /// </summary>
            [EnumMember(Value = "ThisBusinessMonth")]
            ThisBusinessMonth = 8,
            /// <summary>
            /// Enum ThisBusinessQuarter for value: ThisBusinessQuarter
            /// </summary>
            [EnumMember(Value = "ThisBusinessQuarter")]
            ThisBusinessQuarter = 9,
            /// <summary>
            /// Enum ThisBusinessYear for value: ThisBusinessYear
            /// </summary>
            [EnumMember(Value = "ThisBusinessYear")]
            ThisBusinessYear = 10,
            /// <summary>
            /// Enum LoadDate for value: LoadDate
            /// </summary>
            [EnumMember(Value = "LoadDate")]
            LoadDate = 11,
            /// <summary>
            /// Enum LoadWeek for value: LoadWeek
            /// </summary>
            [EnumMember(Value = "LoadWeek")]
            LoadWeek = 12,
            /// <summary>
            /// Enum LoadMonth for value: LoadMonth
            /// </summary>
            [EnumMember(Value = "LoadMonth")]
            LoadMonth = 13,
            /// <summary>
            /// Enum LoadQuarter for value: LoadQuarter
            /// </summary>
            [EnumMember(Value = "LoadQuarter")]
            LoadQuarter = 14,
            /// <summary>
            /// Enum LoadYear for value: LoadYear
            /// </summary>
            [EnumMember(Value = "LoadYear")]
            LoadYear = 15,
            /// <summary>
            /// Enum FirstPopulatedDate for value: FirstPopulatedDate
            /// </summary>
            [EnumMember(Value = "FirstPopulatedDate")]
            FirstPopulatedDate = 16,
            /// <summary>
            /// Enum FirstPopulatedWeek for value: FirstPopulatedWeek
            /// </summary>
            [EnumMember(Value = "FirstPopulatedWeek")]
            FirstPopulatedWeek = 17,
            /// <summary>
            /// Enum FirstPopulatedMonth for value: FirstPopulatedMonth
            /// </summary>
            [EnumMember(Value = "FirstPopulatedMonth")]
            FirstPopulatedMonth = 18,
            /// <summary>
            /// Enum FirstPopulatedQuarter for value: FirstPopulatedQuarter
            /// </summary>
            [EnumMember(Value = "FirstPopulatedQuarter")]
            FirstPopulatedQuarter = 19,
            /// <summary>
            /// Enum FirstPopulatedYear for value: FirstPopulatedYear
            /// </summary>
            [EnumMember(Value = "FirstPopulatedYear")]
            FirstPopulatedYear = 20,
            /// <summary>
            /// Enum LastPopulatedDate for value: LastPopulatedDate
            /// </summary>
            [EnumMember(Value = "LastPopulatedDate")]
            LastPopulatedDate = 21,
            /// <summary>
            /// Enum LastPopulatedWeek for value: LastPopulatedWeek
            /// </summary>
            [EnumMember(Value = "LastPopulatedWeek")]
            LastPopulatedWeek = 22,
            /// <summary>
            /// Enum LastPopulatedMonth for value: LastPopulatedMonth
            /// </summary>
            [EnumMember(Value = "LastPopulatedMonth")]
            LastPopulatedMonth = 23,
            /// <summary>
            /// Enum LastPopulatedQuarter for value: LastPopulatedQuarter
            /// </summary>
            [EnumMember(Value = "LastPopulatedQuarter")]
            LastPopulatedQuarter = 24,
            /// <summary>
            /// Enum LastPopulatedYear for value: LastPopulatedYear
            /// </summary>
            [EnumMember(Value = "LastPopulatedYear")]
            LastPopulatedYear = 25,
            /// <summary>
            /// Enum CustomDate for value: CustomDate
            /// </summary>
            [EnumMember(Value = "CustomDate")]
            CustomDate = 26        }
        /// <summary>
        /// Gets or Sets EndRangeRelative
        /// </summary>
        [DataMember(Name="endRangeRelative", EmitDefaultValue=false)]
        public EndRangeRelativeEnum? EndRangeRelative { get; set; }
        /// <summary>
        /// Defines EndRangeOffsetDirection
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EndRangeOffsetDirectionEnum
        {
            /// <summary>
            /// Enum Forward for value: Forward
            /// </summary>
            [EnumMember(Value = "Forward")]
            Forward = 1,
            /// <summary>
            /// Enum Backward for value: Backward
            /// </summary>
            [EnumMember(Value = "Backward")]
            Backward = 2        }
        /// <summary>
        /// Gets or Sets EndRangeOffsetDirection
        /// </summary>
        [DataMember(Name="endRangeOffsetDirection", EmitDefaultValue=false)]
        public EndRangeOffsetDirectionEnum? EndRangeOffsetDirection { get; set; }
        /// <summary>
        /// Defines EndRangeOffsetUnits
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EndRangeOffsetUnitsEnum
        {
            /// <summary>
            /// Enum Days for value: Days
            /// </summary>
            [EnumMember(Value = "Days")]
            Days = 1,
            /// <summary>
            /// Enum Weeks for value: Weeks
            /// </summary>
            [EnumMember(Value = "Weeks")]
            Weeks = 2,
            /// <summary>
            /// Enum Months for value: Months
            /// </summary>
            [EnumMember(Value = "Months")]
            Months = 3,
            /// <summary>
            /// Enum Quarters for value: Quarters
            /// </summary>
            [EnumMember(Value = "Quarters")]
            Quarters = 4,
            /// <summary>
            /// Enum Years for value: Years
            /// </summary>
            [EnumMember(Value = "Years")]
            Years = 5        }
        /// <summary>
        /// Gets or Sets EndRangeOffsetUnits
        /// </summary>
        [DataMember(Name="endRangeOffsetUnits", EmitDefaultValue=false)]
        public EndRangeOffsetUnitsEnum? EndRangeOffsetUnits { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleDateRule" /> class.
        /// </summary>
        /// <param name="patternFrequency">patternFrequency.</param>
        /// <param name="patternInterval">patternInterval.</param>
        /// <param name="patternType">patternType.</param>
        /// <param name="patternDaysOfWeekArray">patternDaysOfWeekArray.</param>
        /// <param name="patternDayOfMonth">patternDayOfMonth.</param>
        /// <param name="patternMonthOfYear">patternMonthOfYear.</param>
        /// <param name="patternOccurrenceOfDayInMonth">patternOccurrenceOfDayInMonth.</param>
        /// <param name="startRangeLimit">startRangeLimit.</param>
        /// <param name="rangeStartDate">rangeStartDate.</param>
        /// <param name="startRangeRelative">startRangeRelative.</param>
        /// <param name="startRangeOffsetDirection">startRangeOffsetDirection.</param>
        /// <param name="startRangeOffset">startRangeOffset.</param>
        /// <param name="startRangeOffsetUnits">startRangeOffsetUnits.</param>
        /// <param name="endRangeLimit">endRangeLimit.</param>
        /// <param name="rangeEndDate">rangeEndDate.</param>
        /// <param name="endRangeRelative">endRangeRelative.</param>
        /// <param name="endRangeOffsetDirection">endRangeOffsetDirection.</param>
        /// <param name="endRangeOffset">endRangeOffset.</param>
        /// <param name="endRangeOffsetUnits">endRangeOffsetUnits.</param>
        /// <param name="rangeMaxOccurrences">rangeMaxOccurrences.</param>
        public ScheduleDateRule(PatternFrequencyEnum? patternFrequency = default(PatternFrequencyEnum?), int? patternInterval = default(int?), PatternTypeEnum? patternType = default(PatternTypeEnum?), List<PatternDaysOfWeekArrayEnum> patternDaysOfWeekArray = default(List<PatternDaysOfWeekArrayEnum>), int? patternDayOfMonth = default(int?), int? patternMonthOfYear = default(int?), PatternOccurrenceOfDayInMonthEnum? patternOccurrenceOfDayInMonth = default(PatternOccurrenceOfDayInMonthEnum?), StartRangeLimitEnum? startRangeLimit = default(StartRangeLimitEnum?), DateTime? rangeStartDate = default(DateTime?), StartRangeRelativeEnum? startRangeRelative = default(StartRangeRelativeEnum?), StartRangeOffsetDirectionEnum? startRangeOffsetDirection = default(StartRangeOffsetDirectionEnum?), int? startRangeOffset = default(int?), StartRangeOffsetUnitsEnum? startRangeOffsetUnits = default(StartRangeOffsetUnitsEnum?), EndRangeLimitEnum? endRangeLimit = default(EndRangeLimitEnum?), DateTime? rangeEndDate = default(DateTime?), EndRangeRelativeEnum? endRangeRelative = default(EndRangeRelativeEnum?), EndRangeOffsetDirectionEnum? endRangeOffsetDirection = default(EndRangeOffsetDirectionEnum?), int? endRangeOffset = default(int?), EndRangeOffsetUnitsEnum? endRangeOffsetUnits = default(EndRangeOffsetUnitsEnum?), int? rangeMaxOccurrences = default(int?))
        {
            this.PatternFrequency = patternFrequency;
            this.PatternInterval = patternInterval;
            this.PatternType = patternType;
            this.PatternDaysOfWeekArray = patternDaysOfWeekArray;
            this.PatternDayOfMonth = patternDayOfMonth;
            this.PatternMonthOfYear = patternMonthOfYear;
            this.PatternOccurrenceOfDayInMonth = patternOccurrenceOfDayInMonth;
            this.StartRangeLimit = startRangeLimit;
            this.RangeStartDate = rangeStartDate;
            this.StartRangeRelative = startRangeRelative;
            this.StartRangeOffsetDirection = startRangeOffsetDirection;
            this.StartRangeOffset = startRangeOffset;
            this.StartRangeOffsetUnits = startRangeOffsetUnits;
            this.EndRangeLimit = endRangeLimit;
            this.RangeEndDate = rangeEndDate;
            this.EndRangeRelative = endRangeRelative;
            this.EndRangeOffsetDirection = endRangeOffsetDirection;
            this.EndRangeOffset = endRangeOffset;
            this.EndRangeOffsetUnits = endRangeOffsetUnits;
            this.RangeMaxOccurrences = rangeMaxOccurrences;
        }
        

        /// <summary>
        /// Gets or Sets PatternInterval
        /// </summary>
        [DataMember(Name="patternInterval", EmitDefaultValue=false)]
        public int? PatternInterval { get; set; }



        /// <summary>
        /// Gets or Sets PatternDayOfMonth
        /// </summary>
        [DataMember(Name="patternDayOfMonth", EmitDefaultValue=false)]
        public int? PatternDayOfMonth { get; set; }

        /// <summary>
        /// Gets or Sets PatternMonthOfYear
        /// </summary>
        [DataMember(Name="patternMonthOfYear", EmitDefaultValue=false)]
        public int? PatternMonthOfYear { get; set; }



        /// <summary>
        /// Gets or Sets RangeStartDate
        /// </summary>
        [DataMember(Name="rangeStartDate", EmitDefaultValue=false)]
        public DateTime? RangeStartDate { get; set; }



        /// <summary>
        /// Gets or Sets StartRangeOffset
        /// </summary>
        [DataMember(Name="startRangeOffset", EmitDefaultValue=false)]
        public int? StartRangeOffset { get; set; }



        /// <summary>
        /// Gets or Sets RangeEndDate
        /// </summary>
        [DataMember(Name="rangeEndDate", EmitDefaultValue=false)]
        public DateTime? RangeEndDate { get; set; }



        /// <summary>
        /// Gets or Sets EndRangeOffset
        /// </summary>
        [DataMember(Name="endRangeOffset", EmitDefaultValue=false)]
        public int? EndRangeOffset { get; set; }


        /// <summary>
        /// Gets or Sets RangeMaxOccurrences
        /// </summary>
        [DataMember(Name="rangeMaxOccurrences", EmitDefaultValue=false)]
        public int? RangeMaxOccurrences { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScheduleDateRule {\n");
            sb.Append("  PatternFrequency: ").Append(PatternFrequency).Append("\n");
            sb.Append("  PatternInterval: ").Append(PatternInterval).Append("\n");
            sb.Append("  PatternType: ").Append(PatternType).Append("\n");
            sb.Append("  PatternDaysOfWeekArray: ").Append(PatternDaysOfWeekArray).Append("\n");
            sb.Append("  PatternDayOfMonth: ").Append(PatternDayOfMonth).Append("\n");
            sb.Append("  PatternMonthOfYear: ").Append(PatternMonthOfYear).Append("\n");
            sb.Append("  PatternOccurrenceOfDayInMonth: ").Append(PatternOccurrenceOfDayInMonth).Append("\n");
            sb.Append("  StartRangeLimit: ").Append(StartRangeLimit).Append("\n");
            sb.Append("  RangeStartDate: ").Append(RangeStartDate).Append("\n");
            sb.Append("  StartRangeRelative: ").Append(StartRangeRelative).Append("\n");
            sb.Append("  StartRangeOffsetDirection: ").Append(StartRangeOffsetDirection).Append("\n");
            sb.Append("  StartRangeOffset: ").Append(StartRangeOffset).Append("\n");
            sb.Append("  StartRangeOffsetUnits: ").Append(StartRangeOffsetUnits).Append("\n");
            sb.Append("  EndRangeLimit: ").Append(EndRangeLimit).Append("\n");
            sb.Append("  RangeEndDate: ").Append(RangeEndDate).Append("\n");
            sb.Append("  EndRangeRelative: ").Append(EndRangeRelative).Append("\n");
            sb.Append("  EndRangeOffsetDirection: ").Append(EndRangeOffsetDirection).Append("\n");
            sb.Append("  EndRangeOffset: ").Append(EndRangeOffset).Append("\n");
            sb.Append("  EndRangeOffsetUnits: ").Append(EndRangeOffsetUnits).Append("\n");
            sb.Append("  RangeMaxOccurrences: ").Append(RangeMaxOccurrences).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleDateRule);
        }

        /// <summary>
        /// Returns true if ScheduleDateRule instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleDateRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleDateRule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PatternFrequency == input.PatternFrequency ||
                    (this.PatternFrequency != null &&
                    this.PatternFrequency.Equals(input.PatternFrequency))
                ) && 
                (
                    this.PatternInterval == input.PatternInterval ||
                    (this.PatternInterval != null &&
                    this.PatternInterval.Equals(input.PatternInterval))
                ) && 
                (
                    this.PatternType == input.PatternType ||
                    (this.PatternType != null &&
                    this.PatternType.Equals(input.PatternType))
                ) && 
                (
                    this.PatternDaysOfWeekArray == input.PatternDaysOfWeekArray ||
                    this.PatternDaysOfWeekArray != null &&
                    input.PatternDaysOfWeekArray != null &&
                    this.PatternDaysOfWeekArray.SequenceEqual(input.PatternDaysOfWeekArray)
                ) && 
                (
                    this.PatternDayOfMonth == input.PatternDayOfMonth ||
                    (this.PatternDayOfMonth != null &&
                    this.PatternDayOfMonth.Equals(input.PatternDayOfMonth))
                ) && 
                (
                    this.PatternMonthOfYear == input.PatternMonthOfYear ||
                    (this.PatternMonthOfYear != null &&
                    this.PatternMonthOfYear.Equals(input.PatternMonthOfYear))
                ) && 
                (
                    this.PatternOccurrenceOfDayInMonth == input.PatternOccurrenceOfDayInMonth ||
                    (this.PatternOccurrenceOfDayInMonth != null &&
                    this.PatternOccurrenceOfDayInMonth.Equals(input.PatternOccurrenceOfDayInMonth))
                ) && 
                (
                    this.StartRangeLimit == input.StartRangeLimit ||
                    (this.StartRangeLimit != null &&
                    this.StartRangeLimit.Equals(input.StartRangeLimit))
                ) && 
                (
                    this.RangeStartDate == input.RangeStartDate ||
                    (this.RangeStartDate != null &&
                    this.RangeStartDate.Equals(input.RangeStartDate))
                ) && 
                (
                    this.StartRangeRelative == input.StartRangeRelative ||
                    (this.StartRangeRelative != null &&
                    this.StartRangeRelative.Equals(input.StartRangeRelative))
                ) && 
                (
                    this.StartRangeOffsetDirection == input.StartRangeOffsetDirection ||
                    (this.StartRangeOffsetDirection != null &&
                    this.StartRangeOffsetDirection.Equals(input.StartRangeOffsetDirection))
                ) && 
                (
                    this.StartRangeOffset == input.StartRangeOffset ||
                    (this.StartRangeOffset != null &&
                    this.StartRangeOffset.Equals(input.StartRangeOffset))
                ) && 
                (
                    this.StartRangeOffsetUnits == input.StartRangeOffsetUnits ||
                    (this.StartRangeOffsetUnits != null &&
                    this.StartRangeOffsetUnits.Equals(input.StartRangeOffsetUnits))
                ) && 
                (
                    this.EndRangeLimit == input.EndRangeLimit ||
                    (this.EndRangeLimit != null &&
                    this.EndRangeLimit.Equals(input.EndRangeLimit))
                ) && 
                (
                    this.RangeEndDate == input.RangeEndDate ||
                    (this.RangeEndDate != null &&
                    this.RangeEndDate.Equals(input.RangeEndDate))
                ) && 
                (
                    this.EndRangeRelative == input.EndRangeRelative ||
                    (this.EndRangeRelative != null &&
                    this.EndRangeRelative.Equals(input.EndRangeRelative))
                ) && 
                (
                    this.EndRangeOffsetDirection == input.EndRangeOffsetDirection ||
                    (this.EndRangeOffsetDirection != null &&
                    this.EndRangeOffsetDirection.Equals(input.EndRangeOffsetDirection))
                ) && 
                (
                    this.EndRangeOffset == input.EndRangeOffset ||
                    (this.EndRangeOffset != null &&
                    this.EndRangeOffset.Equals(input.EndRangeOffset))
                ) && 
                (
                    this.EndRangeOffsetUnits == input.EndRangeOffsetUnits ||
                    (this.EndRangeOffsetUnits != null &&
                    this.EndRangeOffsetUnits.Equals(input.EndRangeOffsetUnits))
                ) && 
                (
                    this.RangeMaxOccurrences == input.RangeMaxOccurrences ||
                    (this.RangeMaxOccurrences != null &&
                    this.RangeMaxOccurrences.Equals(input.RangeMaxOccurrences))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PatternFrequency != null)
                    hashCode = hashCode * 59 + this.PatternFrequency.GetHashCode();
                if (this.PatternInterval != null)
                    hashCode = hashCode * 59 + this.PatternInterval.GetHashCode();
                if (this.PatternType != null)
                    hashCode = hashCode * 59 + this.PatternType.GetHashCode();
                if (this.PatternDaysOfWeekArray != null)
                    hashCode = hashCode * 59 + this.PatternDaysOfWeekArray.GetHashCode();
                if (this.PatternDayOfMonth != null)
                    hashCode = hashCode * 59 + this.PatternDayOfMonth.GetHashCode();
                if (this.PatternMonthOfYear != null)
                    hashCode = hashCode * 59 + this.PatternMonthOfYear.GetHashCode();
                if (this.PatternOccurrenceOfDayInMonth != null)
                    hashCode = hashCode * 59 + this.PatternOccurrenceOfDayInMonth.GetHashCode();
                if (this.StartRangeLimit != null)
                    hashCode = hashCode * 59 + this.StartRangeLimit.GetHashCode();
                if (this.RangeStartDate != null)
                    hashCode = hashCode * 59 + this.RangeStartDate.GetHashCode();
                if (this.StartRangeRelative != null)
                    hashCode = hashCode * 59 + this.StartRangeRelative.GetHashCode();
                if (this.StartRangeOffsetDirection != null)
                    hashCode = hashCode * 59 + this.StartRangeOffsetDirection.GetHashCode();
                if (this.StartRangeOffset != null)
                    hashCode = hashCode * 59 + this.StartRangeOffset.GetHashCode();
                if (this.StartRangeOffsetUnits != null)
                    hashCode = hashCode * 59 + this.StartRangeOffsetUnits.GetHashCode();
                if (this.EndRangeLimit != null)
                    hashCode = hashCode * 59 + this.EndRangeLimit.GetHashCode();
                if (this.RangeEndDate != null)
                    hashCode = hashCode * 59 + this.RangeEndDate.GetHashCode();
                if (this.EndRangeRelative != null)
                    hashCode = hashCode * 59 + this.EndRangeRelative.GetHashCode();
                if (this.EndRangeOffsetDirection != null)
                    hashCode = hashCode * 59 + this.EndRangeOffsetDirection.GetHashCode();
                if (this.EndRangeOffset != null)
                    hashCode = hashCode * 59 + this.EndRangeOffset.GetHashCode();
                if (this.EndRangeOffsetUnits != null)
                    hashCode = hashCode * 59 + this.EndRangeOffsetUnits.GetHashCode();
                if (this.RangeMaxOccurrences != null)
                    hashCode = hashCode * 59 + this.RangeMaxOccurrences.GetHashCode();
                return hashCode;
            }
        }
    }
}
