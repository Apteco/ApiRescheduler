/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// TelemetrySession
    /// </summary>
    [DataContract]
        public partial class TelemetrySession :  IEquatable<TelemetrySession>
    {
        /// <summary>
        /// The client type for this telemetry session
        /// </summary>
        /// <value>The client type for this telemetry session</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ClientTypeEnum
        {
            /// <summary>
            /// Enum Orbit for value: Orbit
            /// </summary>
            [EnumMember(Value = "Orbit")]
            Orbit = 1        }
        /// <summary>
        /// The client type for this telemetry session
        /// </summary>
        /// <value>The client type for this telemetry session</value>
        [DataMember(Name="clientType", EmitDefaultValue=false)]
        public ClientTypeEnum ClientType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TelemetrySession" /> class.
        /// </summary>
        /// <param name="id">The Id for this telemetry session (required).</param>
        /// <param name="apiVersion">The API version for this telemetry session.</param>
        /// <param name="clientType">The client type for this telemetry session (required).</param>
        /// <param name="clientVersion">The client version for this telemetry session.</param>
        /// <param name="sessionStart">The start time for this telemetry session.</param>
        /// <param name="sessionEnd">The end time for this telemetry session.</param>
        /// <param name="lastSessionAction">The last action time for this telemetry session.</param>
        /// <param name="userAgentDetails">The user agent details for this telemetry session.</param>
        public TelemetrySession(string id = default(string), string apiVersion = default(string), ClientTypeEnum clientType = default(ClientTypeEnum), string clientVersion = default(string), DateTime? sessionStart = default(DateTime?), DateTime? sessionEnd = default(DateTime?), DateTime? lastSessionAction = default(DateTime?), string userAgentDetails = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for TelemetrySession and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "clientType" is required (not null)
            if (clientType == null)
            {
                throw new InvalidDataException("clientType is a required property for TelemetrySession and cannot be null");
            }
            else
            {
                this.ClientType = clientType;
            }
            this.ApiVersion = apiVersion;
            this.ClientVersion = clientVersion;
            this.SessionStart = sessionStart;
            this.SessionEnd = sessionEnd;
            this.LastSessionAction = lastSessionAction;
            this.UserAgentDetails = userAgentDetails;
        }
        
        /// <summary>
        /// The Id for this telemetry session
        /// </summary>
        /// <value>The Id for this telemetry session</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The API version for this telemetry session
        /// </summary>
        /// <value>The API version for this telemetry session</value>
        [DataMember(Name="apiVersion", EmitDefaultValue=false)]
        public string ApiVersion { get; set; }


        /// <summary>
        /// The client version for this telemetry session
        /// </summary>
        /// <value>The client version for this telemetry session</value>
        [DataMember(Name="clientVersion", EmitDefaultValue=false)]
        public string ClientVersion { get; set; }

        /// <summary>
        /// The start time for this telemetry session
        /// </summary>
        /// <value>The start time for this telemetry session</value>
        [DataMember(Name="sessionStart", EmitDefaultValue=false)]
        public DateTime? SessionStart { get; set; }

        /// <summary>
        /// The end time for this telemetry session
        /// </summary>
        /// <value>The end time for this telemetry session</value>
        [DataMember(Name="sessionEnd", EmitDefaultValue=false)]
        public DateTime? SessionEnd { get; set; }

        /// <summary>
        /// The last action time for this telemetry session
        /// </summary>
        /// <value>The last action time for this telemetry session</value>
        [DataMember(Name="lastSessionAction", EmitDefaultValue=false)]
        public DateTime? LastSessionAction { get; set; }

        /// <summary>
        /// The user agent details for this telemetry session
        /// </summary>
        /// <value>The user agent details for this telemetry session</value>
        [DataMember(Name="userAgentDetails", EmitDefaultValue=false)]
        public string UserAgentDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TelemetrySession {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  ClientType: ").Append(ClientType).Append("\n");
            sb.Append("  ClientVersion: ").Append(ClientVersion).Append("\n");
            sb.Append("  SessionStart: ").Append(SessionStart).Append("\n");
            sb.Append("  SessionEnd: ").Append(SessionEnd).Append("\n");
            sb.Append("  LastSessionAction: ").Append(LastSessionAction).Append("\n");
            sb.Append("  UserAgentDetails: ").Append(UserAgentDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TelemetrySession);
        }

        /// <summary>
        /// Returns true if TelemetrySession instances are equal
        /// </summary>
        /// <param name="input">Instance of TelemetrySession to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TelemetrySession input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ApiVersion == input.ApiVersion ||
                    (this.ApiVersion != null &&
                    this.ApiVersion.Equals(input.ApiVersion))
                ) && 
                (
                    this.ClientType == input.ClientType ||
                    (this.ClientType != null &&
                    this.ClientType.Equals(input.ClientType))
                ) && 
                (
                    this.ClientVersion == input.ClientVersion ||
                    (this.ClientVersion != null &&
                    this.ClientVersion.Equals(input.ClientVersion))
                ) && 
                (
                    this.SessionStart == input.SessionStart ||
                    (this.SessionStart != null &&
                    this.SessionStart.Equals(input.SessionStart))
                ) && 
                (
                    this.SessionEnd == input.SessionEnd ||
                    (this.SessionEnd != null &&
                    this.SessionEnd.Equals(input.SessionEnd))
                ) && 
                (
                    this.LastSessionAction == input.LastSessionAction ||
                    (this.LastSessionAction != null &&
                    this.LastSessionAction.Equals(input.LastSessionAction))
                ) && 
                (
                    this.UserAgentDetails == input.UserAgentDetails ||
                    (this.UserAgentDetails != null &&
                    this.UserAgentDetails.Equals(input.UserAgentDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ApiVersion != null)
                    hashCode = hashCode * 59 + this.ApiVersion.GetHashCode();
                if (this.ClientType != null)
                    hashCode = hashCode * 59 + this.ClientType.GetHashCode();
                if (this.ClientVersion != null)
                    hashCode = hashCode * 59 + this.ClientVersion.GetHashCode();
                if (this.SessionStart != null)
                    hashCode = hashCode * 59 + this.SessionStart.GetHashCode();
                if (this.SessionEnd != null)
                    hashCode = hashCode * 59 + this.SessionEnd.GetHashCode();
                if (this.LastSessionAction != null)
                    hashCode = hashCode * 59 + this.LastSessionAction.GetHashCode();
                if (this.UserAgentDetails != null)
                    hashCode = hashCode * 59 + this.UserAgentDetails.GetHashCode();
                return hashCode;
            }
        }
    }
}
