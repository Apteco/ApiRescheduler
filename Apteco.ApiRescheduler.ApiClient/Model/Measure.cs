/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// A measure to define the figures shown for each cell created by the dimensions of the cube
    /// </summary>
    [DataContract]
        public partial class Measure :  IEquatable<Measure>
    {
        /// <summary>
        /// The function to use to aggregate up the data per cell within this measure
        /// </summary>
        /// <value>The function to use to aggregate up the data per cell within this measure</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FunctionEnum
        {
            /// <summary>
            /// Enum Count for value: Count
            /// </summary>
            [EnumMember(Value = "Count")]
            Count = 1,
            /// <summary>
            /// Enum Sum for value: Sum
            /// </summary>
            [EnumMember(Value = "Sum")]
            Sum = 2,
            /// <summary>
            /// Enum Mean for value: Mean
            /// </summary>
            [EnumMember(Value = "Mean")]
            Mean = 3,
            /// <summary>
            /// Enum VariableCount for value: VariableCount
            /// </summary>
            [EnumMember(Value = "VariableCount")]
            VariableCount = 4,
            /// <summary>
            /// Enum Minimum for value: Minimum
            /// </summary>
            [EnumMember(Value = "Minimum")]
            Minimum = 5,
            /// <summary>
            /// Enum Maximum for value: Maximum
            /// </summary>
            [EnumMember(Value = "Maximum")]
            Maximum = 6,
            /// <summary>
            /// Enum Median for value: Median
            /// </summary>
            [EnumMember(Value = "Median")]
            Median = 7,
            /// <summary>
            /// Enum Mode for value: Mode
            /// </summary>
            [EnumMember(Value = "Mode")]
            Mode = 8,
            /// <summary>
            /// Enum Variance for value: Variance
            /// </summary>
            [EnumMember(Value = "Variance")]
            Variance = 9,
            /// <summary>
            /// Enum StandardDeviation for value: StandardDeviation
            /// </summary>
            [EnumMember(Value = "StandardDeviation")]
            StandardDeviation = 10,
            /// <summary>
            /// Enum LowerQuartile for value: LowerQuartile
            /// </summary>
            [EnumMember(Value = "LowerQuartile")]
            LowerQuartile = 11,
            /// <summary>
            /// Enum UpperQuartile for value: UpperQuartile
            /// </summary>
            [EnumMember(Value = "UpperQuartile")]
            UpperQuartile = 12,
            /// <summary>
            /// Enum InterQuartileRange for value: InterQuartileRange
            /// </summary>
            [EnumMember(Value = "InterQuartileRange")]
            InterQuartileRange = 13,
            /// <summary>
            /// Enum Derived for value: Derived
            /// </summary>
            [EnumMember(Value = "Derived")]
            Derived = 14,
            /// <summary>
            /// Enum CramersV for value: CramersV
            /// </summary>
            [EnumMember(Value = "CramersV")]
            CramersV = 15,
            /// <summary>
            /// Enum UCR for value: UCR
            /// </summary>
            [EnumMember(Value = "UCR")]
            UCR = 16,
            /// <summary>
            /// Enum Phi for value: Phi
            /// </summary>
            [EnumMember(Value = "Phi")]
            Phi = 17,
            /// <summary>
            /// Enum ChiSq for value: ChiSq
            /// </summary>
            [EnumMember(Value = "ChiSq")]
            ChiSq = 18,
            /// <summary>
            /// Enum ChiSqProb for value: ChiSqProb
            /// </summary>
            [EnumMember(Value = "ChiSqProb")]
            ChiSqProb = 19,
            /// <summary>
            /// Enum ContCoef for value: ContCoef
            /// </summary>
            [EnumMember(Value = "ContCoef")]
            ContCoef = 20,
            /// <summary>
            /// Enum ZeroCells for value: ZeroCells
            /// </summary>
            [EnumMember(Value = "ZeroCells")]
            ZeroCells = 21,
            /// <summary>
            /// Enum LowCells for value: LowCells
            /// </summary>
            [EnumMember(Value = "LowCells")]
            LowCells = 22,
            /// <summary>
            /// Enum QueryCount for value: QueryCount
            /// </summary>
            [EnumMember(Value = "QueryCount")]
            QueryCount = 23,
            /// <summary>
            /// Enum Percentile for value: Percentile
            /// </summary>
            [EnumMember(Value = "Percentile")]
            Percentile = 24,
            /// <summary>
            /// Enum CountDistinct for value: CountDistinct
            /// </summary>
            [EnumMember(Value = "CountDistinct")]
            CountDistinct = 25,
            /// <summary>
            /// Enum MaxDistinctCount for value: MaxDistinctCount
            /// </summary>
            [EnumMember(Value = "MaxDistinctCount")]
            MaxDistinctCount = 26        }
        /// <summary>
        /// The function to use to aggregate up the data per cell within this measure
        /// </summary>
        /// <value>The function to use to aggregate up the data per cell within this measure</value>
        [DataMember(Name="function", EmitDefaultValue=false)]
        public FunctionEnum Function { get; set; }
        /// <summary>
        /// How the cells are sorted in this measure
        /// </summary>
        /// <value>How the cells are sorted in this measure</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SortEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            /// <summary>
            /// Enum Ascending for value: Ascending
            /// </summary>
            [EnumMember(Value = "Ascending")]
            Ascending = 2,
            /// <summary>
            /// Enum Descending for value: Descending
            /// </summary>
            [EnumMember(Value = "Descending")]
            Descending = 3        }
        /// <summary>
        /// How the cells are sorted in this measure
        /// </summary>
        /// <value>How the cells are sorted in this measure</value>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public SortEnum? Sort { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Measure" /> class.
        /// </summary>
        /// <param name="id">The id of the measure (required).</param>
        /// <param name="displayName">The display name of the measure.</param>
        /// <param name="resolveTableName">The name of the table to resolve this measure to.  I.e. all the counts in this measure will be counts of entities from this table (required).</param>
        /// <param name="function">The function to use to aggregate up the data per cell within this measure (required).</param>
        /// <param name="variableName">If the measure is based on a variable then the name of the variable to use.</param>
        /// <param name="query">query.</param>
        /// <param name="filterQuery">filterQuery.</param>
        /// <param name="expression">expression.</param>
        /// <param name="calculation">calculation.</param>
        /// <param name="sort">How the cells are sorted in this measure.</param>
        /// <param name="decimalPlaces">The number of decimal places to calculate this measure to.</param>
        public Measure(string id = default(string), string displayName = default(string), string resolveTableName = default(string), FunctionEnum function = default(FunctionEnum), string variableName = default(string), Query query = default(Query), Query filterQuery = default(Query), Expression expression = default(Expression), CalculatedMeasureSpecification calculation = default(CalculatedMeasureSpecification), SortEnum? sort = default(SortEnum?), int? decimalPlaces = default(int?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Measure and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "resolveTableName" is required (not null)
            if (resolveTableName == null)
            {
                throw new InvalidDataException("resolveTableName is a required property for Measure and cannot be null");
            }
            else
            {
                this.ResolveTableName = resolveTableName;
            }
            // to ensure "function" is required (not null)
            if (function == null)
            {
                throw new InvalidDataException("function is a required property for Measure and cannot be null");
            }
            else
            {
                this.Function = function;
            }
            this.DisplayName = displayName;
            this.VariableName = variableName;
            this.Query = query;
            this.FilterQuery = filterQuery;
            this.Expression = expression;
            this.Calculation = calculation;
            this.Sort = sort;
            this.DecimalPlaces = decimalPlaces;
        }
        
        /// <summary>
        /// The id of the measure
        /// </summary>
        /// <value>The id of the measure</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The display name of the measure
        /// </summary>
        /// <value>The display name of the measure</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The name of the table to resolve this measure to.  I.e. all the counts in this measure will be counts of entities from this table
        /// </summary>
        /// <value>The name of the table to resolve this measure to.  I.e. all the counts in this measure will be counts of entities from this table</value>
        [DataMember(Name="resolveTableName", EmitDefaultValue=false)]
        public string ResolveTableName { get; set; }


        /// <summary>
        /// If the measure is based on a variable then the name of the variable to use
        /// </summary>
        /// <value>If the measure is based on a variable then the name of the variable to use</value>
        [DataMember(Name="variableName", EmitDefaultValue=false)]
        public string VariableName { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public Query Query { get; set; }

        /// <summary>
        /// Gets or Sets FilterQuery
        /// </summary>
        [DataMember(Name="filterQuery", EmitDefaultValue=false)]
        public Query FilterQuery { get; set; }

        /// <summary>
        /// Gets or Sets Expression
        /// </summary>
        [DataMember(Name="expression", EmitDefaultValue=false)]
        public Expression Expression { get; set; }

        /// <summary>
        /// Gets or Sets Calculation
        /// </summary>
        [DataMember(Name="calculation", EmitDefaultValue=false)]
        public CalculatedMeasureSpecification Calculation { get; set; }


        /// <summary>
        /// The number of decimal places to calculate this measure to
        /// </summary>
        /// <value>The number of decimal places to calculate this measure to</value>
        [DataMember(Name="decimalPlaces", EmitDefaultValue=false)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Measure {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ResolveTableName: ").Append(ResolveTableName).Append("\n");
            sb.Append("  Function: ").Append(Function).Append("\n");
            sb.Append("  VariableName: ").Append(VariableName).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  FilterQuery: ").Append(FilterQuery).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  Calculation: ").Append(Calculation).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  DecimalPlaces: ").Append(DecimalPlaces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Measure);
        }

        /// <summary>
        /// Returns true if Measure instances are equal
        /// </summary>
        /// <param name="input">Instance of Measure to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Measure input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.ResolveTableName == input.ResolveTableName ||
                    (this.ResolveTableName != null &&
                    this.ResolveTableName.Equals(input.ResolveTableName))
                ) && 
                (
                    this.Function == input.Function ||
                    (this.Function != null &&
                    this.Function.Equals(input.Function))
                ) && 
                (
                    this.VariableName == input.VariableName ||
                    (this.VariableName != null &&
                    this.VariableName.Equals(input.VariableName))
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.FilterQuery == input.FilterQuery ||
                    (this.FilterQuery != null &&
                    this.FilterQuery.Equals(input.FilterQuery))
                ) && 
                (
                    this.Expression == input.Expression ||
                    (this.Expression != null &&
                    this.Expression.Equals(input.Expression))
                ) && 
                (
                    this.Calculation == input.Calculation ||
                    (this.Calculation != null &&
                    this.Calculation.Equals(input.Calculation))
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.DecimalPlaces == input.DecimalPlaces ||
                    (this.DecimalPlaces != null &&
                    this.DecimalPlaces.Equals(input.DecimalPlaces))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.ResolveTableName != null)
                    hashCode = hashCode * 59 + this.ResolveTableName.GetHashCode();
                if (this.Function != null)
                    hashCode = hashCode * 59 + this.Function.GetHashCode();
                if (this.VariableName != null)
                    hashCode = hashCode * 59 + this.VariableName.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this.FilterQuery != null)
                    hashCode = hashCode * 59 + this.FilterQuery.GetHashCode();
                if (this.Expression != null)
                    hashCode = hashCode * 59 + this.Expression.GetHashCode();
                if (this.Calculation != null)
                    hashCode = hashCode * 59 + this.Calculation.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.DecimalPlaces != null)
                    hashCode = hashCode * 59 + this.DecimalPlaces.GetHashCode();
                return hashCode;
            }
        }
    }
}
