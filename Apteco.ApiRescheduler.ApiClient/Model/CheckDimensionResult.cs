/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Detail information for an audience check
    /// </summary>
    [DataContract]
        public partial class CheckDimensionResult :  IEquatable<CheckDimensionResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckDimensionResult" /> class.
        /// </summary>
        /// <param name="id">The id of the dimension (required).</param>
        /// <param name="codes">A set of tab-delimited codes, one for each category in the dimension (required).</param>
        /// <param name="descriptions">A set of tab-delimited descriptions, one for each category in the dimension (required).</param>
        /// <param name="baseCounts">A set of tab-delimited counts for the universe, one for each category in the dimension (required).</param>
        /// <param name="audienceCounts">A set of tab-delimited counts for the audience, one for each category in the dimension (required).</param>
        public CheckDimensionResult(string id = default(string), string codes = default(string), string descriptions = default(string), string baseCounts = default(string), string audienceCounts = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for CheckDimensionResult and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "codes" is required (not null)
            if (codes == null)
            {
                throw new InvalidDataException("codes is a required property for CheckDimensionResult and cannot be null");
            }
            else
            {
                this.Codes = codes;
            }
            // to ensure "descriptions" is required (not null)
            if (descriptions == null)
            {
                throw new InvalidDataException("descriptions is a required property for CheckDimensionResult and cannot be null");
            }
            else
            {
                this.Descriptions = descriptions;
            }
            // to ensure "baseCounts" is required (not null)
            if (baseCounts == null)
            {
                throw new InvalidDataException("baseCounts is a required property for CheckDimensionResult and cannot be null");
            }
            else
            {
                this.BaseCounts = baseCounts;
            }
            // to ensure "audienceCounts" is required (not null)
            if (audienceCounts == null)
            {
                throw new InvalidDataException("audienceCounts is a required property for CheckDimensionResult and cannot be null");
            }
            else
            {
                this.AudienceCounts = audienceCounts;
            }
        }
        
        /// <summary>
        /// The id of the dimension
        /// </summary>
        /// <value>The id of the dimension</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// A set of tab-delimited codes, one for each category in the dimension
        /// </summary>
        /// <value>A set of tab-delimited codes, one for each category in the dimension</value>
        [DataMember(Name="codes", EmitDefaultValue=false)]
        public string Codes { get; set; }

        /// <summary>
        /// A set of tab-delimited descriptions, one for each category in the dimension
        /// </summary>
        /// <value>A set of tab-delimited descriptions, one for each category in the dimension</value>
        [DataMember(Name="descriptions", EmitDefaultValue=false)]
        public string Descriptions { get; set; }

        /// <summary>
        /// A set of tab-delimited counts for the universe, one for each category in the dimension
        /// </summary>
        /// <value>A set of tab-delimited counts for the universe, one for each category in the dimension</value>
        [DataMember(Name="baseCounts", EmitDefaultValue=false)]
        public string BaseCounts { get; set; }

        /// <summary>
        /// A set of tab-delimited counts for the audience, one for each category in the dimension
        /// </summary>
        /// <value>A set of tab-delimited counts for the audience, one for each category in the dimension</value>
        [DataMember(Name="audienceCounts", EmitDefaultValue=false)]
        public string AudienceCounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckDimensionResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Codes: ").Append(Codes).Append("\n");
            sb.Append("  Descriptions: ").Append(Descriptions).Append("\n");
            sb.Append("  BaseCounts: ").Append(BaseCounts).Append("\n");
            sb.Append("  AudienceCounts: ").Append(AudienceCounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckDimensionResult);
        }

        /// <summary>
        /// Returns true if CheckDimensionResult instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckDimensionResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckDimensionResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Codes == input.Codes ||
                    (this.Codes != null &&
                    this.Codes.Equals(input.Codes))
                ) && 
                (
                    this.Descriptions == input.Descriptions ||
                    (this.Descriptions != null &&
                    this.Descriptions.Equals(input.Descriptions))
                ) && 
                (
                    this.BaseCounts == input.BaseCounts ||
                    (this.BaseCounts != null &&
                    this.BaseCounts.Equals(input.BaseCounts))
                ) && 
                (
                    this.AudienceCounts == input.AudienceCounts ||
                    (this.AudienceCounts != null &&
                    this.AudienceCounts.Equals(input.AudienceCounts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Codes != null)
                    hashCode = hashCode * 59 + this.Codes.GetHashCode();
                if (this.Descriptions != null)
                    hashCode = hashCode * 59 + this.Descriptions.GetHashCode();
                if (this.BaseCounts != null)
                    hashCode = hashCode * 59 + this.BaseCounts.GetHashCode();
                if (this.AudienceCounts != null)
                    hashCode = hashCode * 59 + this.AudienceCounts.GetHashCode();
                return hashCode;
            }
        }
    }
}
