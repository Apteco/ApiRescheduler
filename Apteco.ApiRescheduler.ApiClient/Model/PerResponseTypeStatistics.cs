/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Per-response type response data
    /// </summary>
    [DataContract]
        public partial class PerResponseTypeStatistics :  IEquatable<PerResponseTypeStatistics>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerResponseTypeStatistics" /> class.
        /// </summary>
        /// <param name="perChannelStatisticsMap">A map between a channel&#x27;s id and its response statistics data (required).</param>
        /// <param name="totalResponsesCount">The total number of responses for the given response type (required).</param>
        public PerResponseTypeStatistics(Dictionary<string, PerResponseTypePerChannelStatistics> perChannelStatisticsMap = default(Dictionary<string, PerResponseTypePerChannelStatistics>), long? totalResponsesCount = default(long?))
        {
            // to ensure "perChannelStatisticsMap" is required (not null)
            if (perChannelStatisticsMap == null)
            {
                throw new InvalidDataException("perChannelStatisticsMap is a required property for PerResponseTypeStatistics and cannot be null");
            }
            else
            {
                this.PerChannelStatisticsMap = perChannelStatisticsMap;
            }
            // to ensure "totalResponsesCount" is required (not null)
            if (totalResponsesCount == null)
            {
                throw new InvalidDataException("totalResponsesCount is a required property for PerResponseTypeStatistics and cannot be null");
            }
            else
            {
                this.TotalResponsesCount = totalResponsesCount;
            }
        }
        
        /// <summary>
        /// A map between a channel&#x27;s id and its response statistics data
        /// </summary>
        /// <value>A map between a channel&#x27;s id and its response statistics data</value>
        [DataMember(Name="perChannelStatisticsMap", EmitDefaultValue=false)]
        public Dictionary<string, PerResponseTypePerChannelStatistics> PerChannelStatisticsMap { get; set; }

        /// <summary>
        /// The total number of responses for the given response type
        /// </summary>
        /// <value>The total number of responses for the given response type</value>
        [DataMember(Name="totalResponsesCount", EmitDefaultValue=false)]
        public long? TotalResponsesCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerResponseTypeStatistics {\n");
            sb.Append("  PerChannelStatisticsMap: ").Append(PerChannelStatisticsMap).Append("\n");
            sb.Append("  TotalResponsesCount: ").Append(TotalResponsesCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PerResponseTypeStatistics);
        }

        /// <summary>
        /// Returns true if PerResponseTypeStatistics instances are equal
        /// </summary>
        /// <param name="input">Instance of PerResponseTypeStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerResponseTypeStatistics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PerChannelStatisticsMap == input.PerChannelStatisticsMap ||
                    this.PerChannelStatisticsMap != null &&
                    input.PerChannelStatisticsMap != null &&
                    this.PerChannelStatisticsMap.SequenceEqual(input.PerChannelStatisticsMap)
                ) && 
                (
                    this.TotalResponsesCount == input.TotalResponsesCount ||
                    (this.TotalResponsesCount != null &&
                    this.TotalResponsesCount.Equals(input.TotalResponsesCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PerChannelStatisticsMap != null)
                    hashCode = hashCode * 59 + this.PerChannelStatisticsMap.GetHashCode();
                if (this.TotalResponsesCount != null)
                    hashCode = hashCode * 59 + this.TotalResponsesCount.GetHashCode();
                return hashCode;
            }
        }
    }
}
