/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Summary information for a PeopleStage Element
    /// </summary>
    [DataContract]
        public partial class FileSettings :  IEquatable<FileSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileSettings" /> class.
        /// </summary>
        /// <param name="zip">Should the file be zipped (required).</param>
        /// <param name="alphaEncloser">The encloser for Alpha-numeric entries (required).</param>
        /// <param name="delimiter">The delimiter for values (required).</param>
        /// <param name="encoding">The file encoding (required).</param>
        /// <param name="extras">Extras - The extras processing will take place on the raw tab delimited file before it gets converted..</param>
        /// <param name="format">The file format (CSV, TSV, XLS, XLSX, etc.) (required).</param>
        /// <param name="header">The choice of header (required).</param>
        /// <param name="numericEncloser">The encloser for numeric values (required).</param>
        public FileSettings(bool? zip = default(bool?), string alphaEncloser = default(string), string delimiter = default(string), string encoding = default(string), string extras = default(string), string format = default(string), string header = default(string), string numericEncloser = default(string))
        {
            // to ensure "zip" is required (not null)
            if (zip == null)
            {
                throw new InvalidDataException("zip is a required property for FileSettings and cannot be null");
            }
            else
            {
                this.Zip = zip;
            }
            // to ensure "alphaEncloser" is required (not null)
            if (alphaEncloser == null)
            {
                throw new InvalidDataException("alphaEncloser is a required property for FileSettings and cannot be null");
            }
            else
            {
                this.AlphaEncloser = alphaEncloser;
            }
            // to ensure "delimiter" is required (not null)
            if (delimiter == null)
            {
                throw new InvalidDataException("delimiter is a required property for FileSettings and cannot be null");
            }
            else
            {
                this.Delimiter = delimiter;
            }
            // to ensure "encoding" is required (not null)
            if (encoding == null)
            {
                throw new InvalidDataException("encoding is a required property for FileSettings and cannot be null");
            }
            else
            {
                this.Encoding = encoding;
            }
            // to ensure "format" is required (not null)
            if (format == null)
            {
                throw new InvalidDataException("format is a required property for FileSettings and cannot be null");
            }
            else
            {
                this.Format = format;
            }
            // to ensure "header" is required (not null)
            if (header == null)
            {
                throw new InvalidDataException("header is a required property for FileSettings and cannot be null");
            }
            else
            {
                this.Header = header;
            }
            // to ensure "numericEncloser" is required (not null)
            if (numericEncloser == null)
            {
                throw new InvalidDataException("numericEncloser is a required property for FileSettings and cannot be null");
            }
            else
            {
                this.NumericEncloser = numericEncloser;
            }
            this.Extras = extras;
        }
        
        /// <summary>
        /// Should the file be zipped
        /// </summary>
        /// <value>Should the file be zipped</value>
        [DataMember(Name="zip", EmitDefaultValue=false)]
        public bool? Zip { get; set; }

        /// <summary>
        /// The encloser for Alpha-numeric entries
        /// </summary>
        /// <value>The encloser for Alpha-numeric entries</value>
        [DataMember(Name="alphaEncloser", EmitDefaultValue=false)]
        public string AlphaEncloser { get; set; }

        /// <summary>
        /// The delimiter for values
        /// </summary>
        /// <value>The delimiter for values</value>
        [DataMember(Name="delimiter", EmitDefaultValue=false)]
        public string Delimiter { get; set; }

        /// <summary>
        /// The file encoding
        /// </summary>
        /// <value>The file encoding</value>
        [DataMember(Name="encoding", EmitDefaultValue=false)]
        public string Encoding { get; set; }

        /// <summary>
        /// Extras - The extras processing will take place on the raw tab delimited file before it gets converted.
        /// </summary>
        /// <value>Extras - The extras processing will take place on the raw tab delimited file before it gets converted.</value>
        [DataMember(Name="extras", EmitDefaultValue=false)]
        public string Extras { get; set; }

        /// <summary>
        /// The file format (CSV, TSV, XLS, XLSX, etc.)
        /// </summary>
        /// <value>The file format (CSV, TSV, XLS, XLSX, etc.)</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// The choice of header
        /// </summary>
        /// <value>The choice of header</value>
        [DataMember(Name="header", EmitDefaultValue=false)]
        public string Header { get; set; }

        /// <summary>
        /// The encloser for numeric values
        /// </summary>
        /// <value>The encloser for numeric values</value>
        [DataMember(Name="numericEncloser", EmitDefaultValue=false)]
        public string NumericEncloser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileSettings {\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  AlphaEncloser: ").Append(AlphaEncloser).Append("\n");
            sb.Append("  Delimiter: ").Append(Delimiter).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  Extras: ").Append(Extras).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  NumericEncloser: ").Append(NumericEncloser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileSettings);
        }

        /// <summary>
        /// Returns true if FileSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of FileSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                ) && 
                (
                    this.AlphaEncloser == input.AlphaEncloser ||
                    (this.AlphaEncloser != null &&
                    this.AlphaEncloser.Equals(input.AlphaEncloser))
                ) && 
                (
                    this.Delimiter == input.Delimiter ||
                    (this.Delimiter != null &&
                    this.Delimiter.Equals(input.Delimiter))
                ) && 
                (
                    this.Encoding == input.Encoding ||
                    (this.Encoding != null &&
                    this.Encoding.Equals(input.Encoding))
                ) && 
                (
                    this.Extras == input.Extras ||
                    (this.Extras != null &&
                    this.Extras.Equals(input.Extras))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Header == input.Header ||
                    (this.Header != null &&
                    this.Header.Equals(input.Header))
                ) && 
                (
                    this.NumericEncloser == input.NumericEncloser ||
                    (this.NumericEncloser != null &&
                    this.NumericEncloser.Equals(input.NumericEncloser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Zip != null)
                    hashCode = hashCode * 59 + this.Zip.GetHashCode();
                if (this.AlphaEncloser != null)
                    hashCode = hashCode * 59 + this.AlphaEncloser.GetHashCode();
                if (this.Delimiter != null)
                    hashCode = hashCode * 59 + this.Delimiter.GetHashCode();
                if (this.Encoding != null)
                    hashCode = hashCode * 59 + this.Encoding.GetHashCode();
                if (this.Extras != null)
                    hashCode = hashCode * 59 + this.Extras.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Header != null)
                    hashCode = hashCode * 59 + this.Header.GetHashCode();
                if (this.NumericEncloser != null)
                    hashCode = hashCode * 59 + this.NumericEncloser.GetHashCode();
                return hashCode;
            }
        }
    }
}
