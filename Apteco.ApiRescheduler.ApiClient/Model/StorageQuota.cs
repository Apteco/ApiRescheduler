/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// StorageQuota
    /// </summary>
    [DataContract]
        public partial class StorageQuota :  IEquatable<StorageQuota>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageQuota" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="allowedDiskQuotaMb">allowedDiskQuotaMb.</param>
        /// <param name="graceDiskQuotaMb">graceDiskQuotaMb.</param>
        /// <param name="tags">tags.</param>
        public StorageQuota(int? id = default(int?), string name = default(string), int? allowedDiskQuotaMb = default(int?), int? graceDiskQuotaMb = default(int?), List<string> tags = default(List<string>))
        {
            this.Id = id;
            this.Name = name;
            this.AllowedDiskQuotaMb = allowedDiskQuotaMb;
            this.GraceDiskQuotaMb = graceDiskQuotaMb;
            this.Tags = tags;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets AllowedDiskQuotaMb
        /// </summary>
        [DataMember(Name="allowedDiskQuotaMb", EmitDefaultValue=false)]
        public int? AllowedDiskQuotaMb { get; set; }

        /// <summary>
        /// Gets or Sets GraceDiskQuotaMb
        /// </summary>
        [DataMember(Name="graceDiskQuotaMb", EmitDefaultValue=false)]
        public int? GraceDiskQuotaMb { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageQuota {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AllowedDiskQuotaMb: ").Append(AllowedDiskQuotaMb).Append("\n");
            sb.Append("  GraceDiskQuotaMb: ").Append(GraceDiskQuotaMb).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageQuota);
        }

        /// <summary>
        /// Returns true if StorageQuota instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageQuota to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageQuota input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.AllowedDiskQuotaMb == input.AllowedDiskQuotaMb ||
                    (this.AllowedDiskQuotaMb != null &&
                    this.AllowedDiskQuotaMb.Equals(input.AllowedDiskQuotaMb))
                ) && 
                (
                    this.GraceDiskQuotaMb == input.GraceDiskQuotaMb ||
                    (this.GraceDiskQuotaMb != null &&
                    this.GraceDiskQuotaMb.Equals(input.GraceDiskQuotaMb))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.AllowedDiskQuotaMb != null)
                    hashCode = hashCode * 59 + this.AllowedDiskQuotaMb.GetHashCode();
                if (this.GraceDiskQuotaMb != null)
                    hashCode = hashCode * 59 + this.GraceDiskQuotaMb.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                return hashCode;
            }
        }
    }
}
