/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Memory details for the API
    /// </summary>
    [DataContract]
        public partial class ProcessDetails :  IEquatable<ProcessDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDetails" /> class.
        /// </summary>
        /// <param name="processId">The process id of the API&#x27;s process (required).</param>
        /// <param name="privateMemoryInBytes">The amount of \&quot;private memory\&quot; used by the API&#x27;s process, in bytes (required).</param>
        /// <param name="workingSetInBytes">The amount of physical memory used by the API&#x27;s process, in bytes (required).</param>
        /// <param name="heapSizeInBytes">The amount of memory in the .Net heap used by the API&#x27;s process, in bytes (required).</param>
        /// <param name="isServerGarbageCollectionEnabled">Whether the \&quot;Server\&quot; garbage collection strategy is enabled or not (required).</param>
        public ProcessDetails(int? processId = default(int?), long? privateMemoryInBytes = default(long?), long? workingSetInBytes = default(long?), long? heapSizeInBytes = default(long?), bool? isServerGarbageCollectionEnabled = default(bool?))
        {
            // to ensure "processId" is required (not null)
            if (processId == null)
            {
                throw new InvalidDataException("processId is a required property for ProcessDetails and cannot be null");
            }
            else
            {
                this.ProcessId = processId;
            }
            // to ensure "privateMemoryInBytes" is required (not null)
            if (privateMemoryInBytes == null)
            {
                throw new InvalidDataException("privateMemoryInBytes is a required property for ProcessDetails and cannot be null");
            }
            else
            {
                this.PrivateMemoryInBytes = privateMemoryInBytes;
            }
            // to ensure "workingSetInBytes" is required (not null)
            if (workingSetInBytes == null)
            {
                throw new InvalidDataException("workingSetInBytes is a required property for ProcessDetails and cannot be null");
            }
            else
            {
                this.WorkingSetInBytes = workingSetInBytes;
            }
            // to ensure "heapSizeInBytes" is required (not null)
            if (heapSizeInBytes == null)
            {
                throw new InvalidDataException("heapSizeInBytes is a required property for ProcessDetails and cannot be null");
            }
            else
            {
                this.HeapSizeInBytes = heapSizeInBytes;
            }
            // to ensure "isServerGarbageCollectionEnabled" is required (not null)
            if (isServerGarbageCollectionEnabled == null)
            {
                throw new InvalidDataException("isServerGarbageCollectionEnabled is a required property for ProcessDetails and cannot be null");
            }
            else
            {
                this.IsServerGarbageCollectionEnabled = isServerGarbageCollectionEnabled;
            }
        }
        
        /// <summary>
        /// The process id of the API&#x27;s process
        /// </summary>
        /// <value>The process id of the API&#x27;s process</value>
        [DataMember(Name="processId", EmitDefaultValue=false)]
        public int? ProcessId { get; set; }

        /// <summary>
        /// The amount of \&quot;private memory\&quot; used by the API&#x27;s process, in bytes
        /// </summary>
        /// <value>The amount of \&quot;private memory\&quot; used by the API&#x27;s process, in bytes</value>
        [DataMember(Name="privateMemoryInBytes", EmitDefaultValue=false)]
        public long? PrivateMemoryInBytes { get; set; }

        /// <summary>
        /// The amount of physical memory used by the API&#x27;s process, in bytes
        /// </summary>
        /// <value>The amount of physical memory used by the API&#x27;s process, in bytes</value>
        [DataMember(Name="workingSetInBytes", EmitDefaultValue=false)]
        public long? WorkingSetInBytes { get; set; }

        /// <summary>
        /// The amount of memory in the .Net heap used by the API&#x27;s process, in bytes
        /// </summary>
        /// <value>The amount of memory in the .Net heap used by the API&#x27;s process, in bytes</value>
        [DataMember(Name="heapSizeInBytes", EmitDefaultValue=false)]
        public long? HeapSizeInBytes { get; set; }

        /// <summary>
        /// Whether the \&quot;Server\&quot; garbage collection strategy is enabled or not
        /// </summary>
        /// <value>Whether the \&quot;Server\&quot; garbage collection strategy is enabled or not</value>
        [DataMember(Name="isServerGarbageCollectionEnabled", EmitDefaultValue=false)]
        public bool? IsServerGarbageCollectionEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessDetails {\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  PrivateMemoryInBytes: ").Append(PrivateMemoryInBytes).Append("\n");
            sb.Append("  WorkingSetInBytes: ").Append(WorkingSetInBytes).Append("\n");
            sb.Append("  HeapSizeInBytes: ").Append(HeapSizeInBytes).Append("\n");
            sb.Append("  IsServerGarbageCollectionEnabled: ").Append(IsServerGarbageCollectionEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessDetails);
        }

        /// <summary>
        /// Returns true if ProcessDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProcessId == input.ProcessId ||
                    (this.ProcessId != null &&
                    this.ProcessId.Equals(input.ProcessId))
                ) && 
                (
                    this.PrivateMemoryInBytes == input.PrivateMemoryInBytes ||
                    (this.PrivateMemoryInBytes != null &&
                    this.PrivateMemoryInBytes.Equals(input.PrivateMemoryInBytes))
                ) && 
                (
                    this.WorkingSetInBytes == input.WorkingSetInBytes ||
                    (this.WorkingSetInBytes != null &&
                    this.WorkingSetInBytes.Equals(input.WorkingSetInBytes))
                ) && 
                (
                    this.HeapSizeInBytes == input.HeapSizeInBytes ||
                    (this.HeapSizeInBytes != null &&
                    this.HeapSizeInBytes.Equals(input.HeapSizeInBytes))
                ) && 
                (
                    this.IsServerGarbageCollectionEnabled == input.IsServerGarbageCollectionEnabled ||
                    (this.IsServerGarbageCollectionEnabled != null &&
                    this.IsServerGarbageCollectionEnabled.Equals(input.IsServerGarbageCollectionEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProcessId != null)
                    hashCode = hashCode * 59 + this.ProcessId.GetHashCode();
                if (this.PrivateMemoryInBytes != null)
                    hashCode = hashCode * 59 + this.PrivateMemoryInBytes.GetHashCode();
                if (this.WorkingSetInBytes != null)
                    hashCode = hashCode * 59 + this.WorkingSetInBytes.GetHashCode();
                if (this.HeapSizeInBytes != null)
                    hashCode = hashCode * 59 + this.HeapSizeInBytes.GetHashCode();
                if (this.IsServerGarbageCollectionEnabled != null)
                    hashCode = hashCode * 59 + this.IsServerGarbageCollectionEnabled.GetHashCode();
                return hashCode;
            }
        }
    }
}
