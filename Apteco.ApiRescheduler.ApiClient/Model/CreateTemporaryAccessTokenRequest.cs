/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// The details for a newly created temporary access token
    /// </summary>
    [DataContract]
        public partial class CreateTemporaryAccessTokenRequest :  IEquatable<CreateTemporaryAccessTokenRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTemporaryAccessTokenRequest" /> class.
        /// </summary>
        /// <param name="resourcePath">The resource path that can be accessed by token (required).</param>
        public CreateTemporaryAccessTokenRequest(string resourcePath = default(string))
        {
            // to ensure "resourcePath" is required (not null)
            if (resourcePath == null)
            {
                throw new InvalidDataException("resourcePath is a required property for CreateTemporaryAccessTokenRequest and cannot be null");
            }
            else
            {
                this.ResourcePath = resourcePath;
            }
        }
        
        /// <summary>
        /// The resource path that can be accessed by token
        /// </summary>
        /// <value>The resource path that can be accessed by token</value>
        [DataMember(Name="resourcePath", EmitDefaultValue=false)]
        public string ResourcePath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateTemporaryAccessTokenRequest {\n");
            sb.Append("  ResourcePath: ").Append(ResourcePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTemporaryAccessTokenRequest);
        }

        /// <summary>
        /// Returns true if CreateTemporaryAccessTokenRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTemporaryAccessTokenRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTemporaryAccessTokenRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResourcePath == input.ResourcePath ||
                    (this.ResourcePath != null &&
                    this.ResourcePath.Equals(input.ResourcePath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResourcePath != null)
                    hashCode = hashCode * 59 + this.ResourcePath.GetHashCode();
                return hashCode;
            }
        }
    }
}
