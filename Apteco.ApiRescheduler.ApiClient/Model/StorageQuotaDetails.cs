/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// StorageQuotaDetails
    /// </summary>
    [DataContract]
        public partial class StorageQuotaDetails :  IEquatable<StorageQuotaDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageQuotaDetails" /> class.
        /// </summary>
        /// <param name="storageQuotas">storageQuotas.</param>
        /// <param name="tagsLookup">tagsLookup.</param>
        public StorageQuotaDetails(List<StorageQuota> storageQuotas = default(List<StorageQuota>), TagsLookup tagsLookup = default(TagsLookup))
        {
            this.StorageQuotas = storageQuotas;
            this.TagsLookup = tagsLookup;
        }
        
        /// <summary>
        /// Gets or Sets StorageQuotas
        /// </summary>
        [DataMember(Name="storageQuotas", EmitDefaultValue=false)]
        public List<StorageQuota> StorageQuotas { get; set; }

        /// <summary>
        /// Gets or Sets TagsLookup
        /// </summary>
        [DataMember(Name="tagsLookup", EmitDefaultValue=false)]
        public TagsLookup TagsLookup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageQuotaDetails {\n");
            sb.Append("  StorageQuotas: ").Append(StorageQuotas).Append("\n");
            sb.Append("  TagsLookup: ").Append(TagsLookup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageQuotaDetails);
        }

        /// <summary>
        /// Returns true if StorageQuotaDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageQuotaDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageQuotaDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StorageQuotas == input.StorageQuotas ||
                    this.StorageQuotas != null &&
                    input.StorageQuotas != null &&
                    this.StorageQuotas.SequenceEqual(input.StorageQuotas)
                ) && 
                (
                    this.TagsLookup == input.TagsLookup ||
                    (this.TagsLookup != null &&
                    this.TagsLookup.Equals(input.TagsLookup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StorageQuotas != null)
                    hashCode = hashCode * 59 + this.StorageQuotas.GetHashCode();
                if (this.TagsLookup != null)
                    hashCode = hashCode * 59 + this.TagsLookup.GetHashCode();
                return hashCode;
            }
        }
    }
}
