/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details of a temporary file part
    /// </summary>
    [DataContract]
        public partial class TemporaryFilePart :  IEquatable<TemporaryFilePart>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemporaryFilePart" /> class.
        /// </summary>
        /// <param name="id">The id of the temporary file that this part is for (required).</param>
        /// <param name="partNumber">The number of this part of the temporary file (required).</param>
        /// <param name="temporaryFileCreated">Whether the specified temporary file has been created from all the given parts or not.  If this is the case then the parts will no longer exist separately and will have been  combined into the temporary file. (required).</param>
        public TemporaryFilePart(string id = default(string), int? partNumber = default(int?), bool? temporaryFileCreated = default(bool?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for TemporaryFilePart and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "partNumber" is required (not null)
            if (partNumber == null)
            {
                throw new InvalidDataException("partNumber is a required property for TemporaryFilePart and cannot be null");
            }
            else
            {
                this.PartNumber = partNumber;
            }
            // to ensure "temporaryFileCreated" is required (not null)
            if (temporaryFileCreated == null)
            {
                throw new InvalidDataException("temporaryFileCreated is a required property for TemporaryFilePart and cannot be null");
            }
            else
            {
                this.TemporaryFileCreated = temporaryFileCreated;
            }
        }
        
        /// <summary>
        /// The id of the temporary file that this part is for
        /// </summary>
        /// <value>The id of the temporary file that this part is for</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The number of this part of the temporary file
        /// </summary>
        /// <value>The number of this part of the temporary file</value>
        [DataMember(Name="partNumber", EmitDefaultValue=false)]
        public int? PartNumber { get; set; }

        /// <summary>
        /// Whether the specified temporary file has been created from all the given parts or not.  If this is the case then the parts will no longer exist separately and will have been  combined into the temporary file.
        /// </summary>
        /// <value>Whether the specified temporary file has been created from all the given parts or not.  If this is the case then the parts will no longer exist separately and will have been  combined into the temporary file.</value>
        [DataMember(Name="temporaryFileCreated", EmitDefaultValue=false)]
        public bool? TemporaryFileCreated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemporaryFilePart {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  TemporaryFileCreated: ").Append(TemporaryFileCreated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemporaryFilePart);
        }

        /// <summary>
        /// Returns true if TemporaryFilePart instances are equal
        /// </summary>
        /// <param name="input">Instance of TemporaryFilePart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemporaryFilePart input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) && 
                (
                    this.TemporaryFileCreated == input.TemporaryFileCreated ||
                    (this.TemporaryFileCreated != null &&
                    this.TemporaryFileCreated.Equals(input.TemporaryFileCreated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PartNumber != null)
                    hashCode = hashCode * 59 + this.PartNumber.GetHashCode();
                if (this.TemporaryFileCreated != null)
                    hashCode = hashCode * 59 + this.TemporaryFileCreated.GetHashCode();
                return hashCode;
            }
        }
    }
}
