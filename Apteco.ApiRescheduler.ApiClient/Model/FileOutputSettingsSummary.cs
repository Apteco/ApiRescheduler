/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Summary information for a File Channel&#x27;s FileOutputSettings
    /// </summary>
    [DataContract]
        public partial class FileOutputSettingsSummary :  IEquatable<FileOutputSettingsSummary>
    {
        /// <summary>
        /// Whether a channel is allowed to be used with \&quot;Transactional\&quot; campaigns - i.e. campaigns on tables lower than the Person table.
        /// </summary>
        /// <value>Whether a channel is allowed to be used with \&quot;Transactional\&quot; campaigns - i.e. campaigns on tables lower than the Person table.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AllowTransactionalOutputEnum
        {
            /// <summary>
            /// Enum No for value: No
            /// </summary>
            [EnumMember(Value = "No")]
            No = 1,
            /// <summary>
            /// Enum Yes for value: Yes
            /// </summary>
            [EnumMember(Value = "Yes")]
            Yes = 2        }
        /// <summary>
        /// Whether a channel is allowed to be used with \&quot;Transactional\&quot; campaigns - i.e. campaigns on tables lower than the Person table.
        /// </summary>
        /// <value>Whether a channel is allowed to be used with \&quot;Transactional\&quot; campaigns - i.e. campaigns on tables lower than the Person table.</value>
        [DataMember(Name="allowTransactionalOutput", EmitDefaultValue=false)]
        public AllowTransactionalOutputEnum AllowTransactionalOutput { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileOutputSettingsSummary" /> class.
        /// </summary>
        /// <param name="defaultFolderPath">Default folder path.</param>
        /// <param name="addCommunicationKey">Add Communication Key to the file.</param>
        /// <param name="overwrite">Whether to overwrite the file or not.</param>
        /// <param name="allowTransactionalOutput">Whether a channel is allowed to be used with \&quot;Transactional\&quot; campaigns - i.e. campaigns on tables lower than the Person table. (required).</param>
        /// <param name="additionalVariables">Details of variables always included with this channel.</param>
        /// <param name="fileSettings">fileSettings.</param>
        public FileOutputSettingsSummary(string defaultFolderPath = default(string), bool? addCommunicationKey = default(bool?), bool? overwrite = default(bool?), AllowTransactionalOutputEnum allowTransactionalOutput = default(AllowTransactionalOutputEnum), List<VariableDetails> additionalVariables = default(List<VariableDetails>), FileSettings fileSettings = default(FileSettings))
        {
            // to ensure "allowTransactionalOutput" is required (not null)
            if (allowTransactionalOutput == null)
            {
                throw new InvalidDataException("allowTransactionalOutput is a required property for FileOutputSettingsSummary and cannot be null");
            }
            else
            {
                this.AllowTransactionalOutput = allowTransactionalOutput;
            }
            this.DefaultFolderPath = defaultFolderPath;
            this.AddCommunicationKey = addCommunicationKey;
            this.Overwrite = overwrite;
            this.AdditionalVariables = additionalVariables;
            this.FileSettings = fileSettings;
        }
        
        /// <summary>
        /// Default folder path
        /// </summary>
        /// <value>Default folder path</value>
        [DataMember(Name="defaultFolderPath", EmitDefaultValue=false)]
        public string DefaultFolderPath { get; set; }

        /// <summary>
        /// Add Communication Key to the file
        /// </summary>
        /// <value>Add Communication Key to the file</value>
        [DataMember(Name="addCommunicationKey", EmitDefaultValue=false)]
        public bool? AddCommunicationKey { get; set; }

        /// <summary>
        /// Whether to overwrite the file or not
        /// </summary>
        /// <value>Whether to overwrite the file or not</value>
        [DataMember(Name="overwrite", EmitDefaultValue=false)]
        public bool? Overwrite { get; set; }


        /// <summary>
        /// Details of variables always included with this channel
        /// </summary>
        /// <value>Details of variables always included with this channel</value>
        [DataMember(Name="additionalVariables", EmitDefaultValue=false)]
        public List<VariableDetails> AdditionalVariables { get; set; }

        /// <summary>
        /// Gets or Sets FileSettings
        /// </summary>
        [DataMember(Name="fileSettings", EmitDefaultValue=false)]
        public FileSettings FileSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileOutputSettingsSummary {\n");
            sb.Append("  DefaultFolderPath: ").Append(DefaultFolderPath).Append("\n");
            sb.Append("  AddCommunicationKey: ").Append(AddCommunicationKey).Append("\n");
            sb.Append("  Overwrite: ").Append(Overwrite).Append("\n");
            sb.Append("  AllowTransactionalOutput: ").Append(AllowTransactionalOutput).Append("\n");
            sb.Append("  AdditionalVariables: ").Append(AdditionalVariables).Append("\n");
            sb.Append("  FileSettings: ").Append(FileSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileOutputSettingsSummary);
        }

        /// <summary>
        /// Returns true if FileOutputSettingsSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of FileOutputSettingsSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileOutputSettingsSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultFolderPath == input.DefaultFolderPath ||
                    (this.DefaultFolderPath != null &&
                    this.DefaultFolderPath.Equals(input.DefaultFolderPath))
                ) && 
                (
                    this.AddCommunicationKey == input.AddCommunicationKey ||
                    (this.AddCommunicationKey != null &&
                    this.AddCommunicationKey.Equals(input.AddCommunicationKey))
                ) && 
                (
                    this.Overwrite == input.Overwrite ||
                    (this.Overwrite != null &&
                    this.Overwrite.Equals(input.Overwrite))
                ) && 
                (
                    this.AllowTransactionalOutput == input.AllowTransactionalOutput ||
                    (this.AllowTransactionalOutput != null &&
                    this.AllowTransactionalOutput.Equals(input.AllowTransactionalOutput))
                ) && 
                (
                    this.AdditionalVariables == input.AdditionalVariables ||
                    this.AdditionalVariables != null &&
                    input.AdditionalVariables != null &&
                    this.AdditionalVariables.SequenceEqual(input.AdditionalVariables)
                ) && 
                (
                    this.FileSettings == input.FileSettings ||
                    (this.FileSettings != null &&
                    this.FileSettings.Equals(input.FileSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultFolderPath != null)
                    hashCode = hashCode * 59 + this.DefaultFolderPath.GetHashCode();
                if (this.AddCommunicationKey != null)
                    hashCode = hashCode * 59 + this.AddCommunicationKey.GetHashCode();
                if (this.Overwrite != null)
                    hashCode = hashCode * 59 + this.Overwrite.GetHashCode();
                if (this.AllowTransactionalOutput != null)
                    hashCode = hashCode * 59 + this.AllowTransactionalOutput.GetHashCode();
                if (this.AdditionalVariables != null)
                    hashCode = hashCode * 59 + this.AdditionalVariables.GetHashCode();
                if (this.FileSettings != null)
                    hashCode = hashCode * 59 + this.FileSettings.GetHashCode();
                return hashCode;
            }
        }
    }
}
