/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details for a particular update that happened to a share
    /// </summary>
    [DataContract]
        public partial class ShareUpdate :  IEquatable<ShareUpdate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareUpdate" /> class.
        /// </summary>
        /// <param name="id">The id of the update (required).</param>
        /// <param name="timestamp">The timestamp of when the update happened (required).</param>
        /// <param name="user">user (required).</param>
        /// <param name="notes">The notes associated with this share update (required).</param>
        /// <param name="numberOfAddedUsers">The number of users that were added to this share as part of this update (required).</param>
        /// <param name="firstAddedUser">firstAddedUser (required).</param>
        /// <param name="sharedToAll">Whether this share was shared to all as part of this update (required).</param>
        /// <param name="numberOfRemovedUsers">The number of users that were removed from this share as part of this update (required).</param>
        /// <param name="firstRemovedUser">firstRemovedUser (required).</param>
        /// <param name="numberOfAddedGroups">The number of groups that were added to this share as part of this update (required).</param>
        /// <param name="firstAddedGroup">firstAddedGroup (required).</param>
        /// <param name="numberOfRemovedGroups">The number of groups that were removed from this share as part of this update (required).</param>
        /// <param name="firstRemovedGroup">firstRemovedGroup (required).</param>
        public ShareUpdate(int? id = default(int?), DateTime? timestamp = default(DateTime?), UserDisplayDetails user = default(UserDisplayDetails), string notes = default(string), int? numberOfAddedUsers = default(int?), UserDisplayDetails firstAddedUser = default(UserDisplayDetails), bool? sharedToAll = default(bool?), int? numberOfRemovedUsers = default(int?), UserDisplayDetails firstRemovedUser = default(UserDisplayDetails), int? numberOfAddedGroups = default(int?), GroupSummary firstAddedGroup = default(GroupSummary), int? numberOfRemovedGroups = default(int?), GroupSummary firstRemovedGroup = default(GroupSummary))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ShareUpdate and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for ShareUpdate and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new InvalidDataException("user is a required property for ShareUpdate and cannot be null");
            }
            else
            {
                this.User = user;
            }
            // to ensure "notes" is required (not null)
            if (notes == null)
            {
                throw new InvalidDataException("notes is a required property for ShareUpdate and cannot be null");
            }
            else
            {
                this.Notes = notes;
            }
            // to ensure "numberOfAddedUsers" is required (not null)
            if (numberOfAddedUsers == null)
            {
                throw new InvalidDataException("numberOfAddedUsers is a required property for ShareUpdate and cannot be null");
            }
            else
            {
                this.NumberOfAddedUsers = numberOfAddedUsers;
            }
            // to ensure "firstAddedUser" is required (not null)
            if (firstAddedUser == null)
            {
                throw new InvalidDataException("firstAddedUser is a required property for ShareUpdate and cannot be null");
            }
            else
            {
                this.FirstAddedUser = firstAddedUser;
            }
            // to ensure "sharedToAll" is required (not null)
            if (sharedToAll == null)
            {
                throw new InvalidDataException("sharedToAll is a required property for ShareUpdate and cannot be null");
            }
            else
            {
                this.SharedToAll = sharedToAll;
            }
            // to ensure "numberOfRemovedUsers" is required (not null)
            if (numberOfRemovedUsers == null)
            {
                throw new InvalidDataException("numberOfRemovedUsers is a required property for ShareUpdate and cannot be null");
            }
            else
            {
                this.NumberOfRemovedUsers = numberOfRemovedUsers;
            }
            // to ensure "firstRemovedUser" is required (not null)
            if (firstRemovedUser == null)
            {
                throw new InvalidDataException("firstRemovedUser is a required property for ShareUpdate and cannot be null");
            }
            else
            {
                this.FirstRemovedUser = firstRemovedUser;
            }
            // to ensure "numberOfAddedGroups" is required (not null)
            if (numberOfAddedGroups == null)
            {
                throw new InvalidDataException("numberOfAddedGroups is a required property for ShareUpdate and cannot be null");
            }
            else
            {
                this.NumberOfAddedGroups = numberOfAddedGroups;
            }
            // to ensure "firstAddedGroup" is required (not null)
            if (firstAddedGroup == null)
            {
                throw new InvalidDataException("firstAddedGroup is a required property for ShareUpdate and cannot be null");
            }
            else
            {
                this.FirstAddedGroup = firstAddedGroup;
            }
            // to ensure "numberOfRemovedGroups" is required (not null)
            if (numberOfRemovedGroups == null)
            {
                throw new InvalidDataException("numberOfRemovedGroups is a required property for ShareUpdate and cannot be null");
            }
            else
            {
                this.NumberOfRemovedGroups = numberOfRemovedGroups;
            }
            // to ensure "firstRemovedGroup" is required (not null)
            if (firstRemovedGroup == null)
            {
                throw new InvalidDataException("firstRemovedGroup is a required property for ShareUpdate and cannot be null");
            }
            else
            {
                this.FirstRemovedGroup = firstRemovedGroup;
            }
        }
        
        /// <summary>
        /// The id of the update
        /// </summary>
        /// <value>The id of the update</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The timestamp of when the update happened
        /// </summary>
        /// <value>The timestamp of when the update happened</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserDisplayDetails User { get; set; }

        /// <summary>
        /// The notes associated with this share update
        /// </summary>
        /// <value>The notes associated with this share update</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// The number of users that were added to this share as part of this update
        /// </summary>
        /// <value>The number of users that were added to this share as part of this update</value>
        [DataMember(Name="numberOfAddedUsers", EmitDefaultValue=false)]
        public int? NumberOfAddedUsers { get; set; }

        /// <summary>
        /// Gets or Sets FirstAddedUser
        /// </summary>
        [DataMember(Name="firstAddedUser", EmitDefaultValue=false)]
        public UserDisplayDetails FirstAddedUser { get; set; }

        /// <summary>
        /// Whether this share was shared to all as part of this update
        /// </summary>
        /// <value>Whether this share was shared to all as part of this update</value>
        [DataMember(Name="sharedToAll", EmitDefaultValue=false)]
        public bool? SharedToAll { get; set; }

        /// <summary>
        /// The number of users that were removed from this share as part of this update
        /// </summary>
        /// <value>The number of users that were removed from this share as part of this update</value>
        [DataMember(Name="numberOfRemovedUsers", EmitDefaultValue=false)]
        public int? NumberOfRemovedUsers { get; set; }

        /// <summary>
        /// Gets or Sets FirstRemovedUser
        /// </summary>
        [DataMember(Name="firstRemovedUser", EmitDefaultValue=false)]
        public UserDisplayDetails FirstRemovedUser { get; set; }

        /// <summary>
        /// The number of groups that were added to this share as part of this update
        /// </summary>
        /// <value>The number of groups that were added to this share as part of this update</value>
        [DataMember(Name="numberOfAddedGroups", EmitDefaultValue=false)]
        public int? NumberOfAddedGroups { get; set; }

        /// <summary>
        /// Gets or Sets FirstAddedGroup
        /// </summary>
        [DataMember(Name="firstAddedGroup", EmitDefaultValue=false)]
        public GroupSummary FirstAddedGroup { get; set; }

        /// <summary>
        /// The number of groups that were removed from this share as part of this update
        /// </summary>
        /// <value>The number of groups that were removed from this share as part of this update</value>
        [DataMember(Name="numberOfRemovedGroups", EmitDefaultValue=false)]
        public int? NumberOfRemovedGroups { get; set; }

        /// <summary>
        /// Gets or Sets FirstRemovedGroup
        /// </summary>
        [DataMember(Name="firstRemovedGroup", EmitDefaultValue=false)]
        public GroupSummary FirstRemovedGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShareUpdate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  NumberOfAddedUsers: ").Append(NumberOfAddedUsers).Append("\n");
            sb.Append("  FirstAddedUser: ").Append(FirstAddedUser).Append("\n");
            sb.Append("  SharedToAll: ").Append(SharedToAll).Append("\n");
            sb.Append("  NumberOfRemovedUsers: ").Append(NumberOfRemovedUsers).Append("\n");
            sb.Append("  FirstRemovedUser: ").Append(FirstRemovedUser).Append("\n");
            sb.Append("  NumberOfAddedGroups: ").Append(NumberOfAddedGroups).Append("\n");
            sb.Append("  FirstAddedGroup: ").Append(FirstAddedGroup).Append("\n");
            sb.Append("  NumberOfRemovedGroups: ").Append(NumberOfRemovedGroups).Append("\n");
            sb.Append("  FirstRemovedGroup: ").Append(FirstRemovedGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShareUpdate);
        }

        /// <summary>
        /// Returns true if ShareUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of ShareUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShareUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.NumberOfAddedUsers == input.NumberOfAddedUsers ||
                    (this.NumberOfAddedUsers != null &&
                    this.NumberOfAddedUsers.Equals(input.NumberOfAddedUsers))
                ) && 
                (
                    this.FirstAddedUser == input.FirstAddedUser ||
                    (this.FirstAddedUser != null &&
                    this.FirstAddedUser.Equals(input.FirstAddedUser))
                ) && 
                (
                    this.SharedToAll == input.SharedToAll ||
                    (this.SharedToAll != null &&
                    this.SharedToAll.Equals(input.SharedToAll))
                ) && 
                (
                    this.NumberOfRemovedUsers == input.NumberOfRemovedUsers ||
                    (this.NumberOfRemovedUsers != null &&
                    this.NumberOfRemovedUsers.Equals(input.NumberOfRemovedUsers))
                ) && 
                (
                    this.FirstRemovedUser == input.FirstRemovedUser ||
                    (this.FirstRemovedUser != null &&
                    this.FirstRemovedUser.Equals(input.FirstRemovedUser))
                ) && 
                (
                    this.NumberOfAddedGroups == input.NumberOfAddedGroups ||
                    (this.NumberOfAddedGroups != null &&
                    this.NumberOfAddedGroups.Equals(input.NumberOfAddedGroups))
                ) && 
                (
                    this.FirstAddedGroup == input.FirstAddedGroup ||
                    (this.FirstAddedGroup != null &&
                    this.FirstAddedGroup.Equals(input.FirstAddedGroup))
                ) && 
                (
                    this.NumberOfRemovedGroups == input.NumberOfRemovedGroups ||
                    (this.NumberOfRemovedGroups != null &&
                    this.NumberOfRemovedGroups.Equals(input.NumberOfRemovedGroups))
                ) && 
                (
                    this.FirstRemovedGroup == input.FirstRemovedGroup ||
                    (this.FirstRemovedGroup != null &&
                    this.FirstRemovedGroup.Equals(input.FirstRemovedGroup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.NumberOfAddedUsers != null)
                    hashCode = hashCode * 59 + this.NumberOfAddedUsers.GetHashCode();
                if (this.FirstAddedUser != null)
                    hashCode = hashCode * 59 + this.FirstAddedUser.GetHashCode();
                if (this.SharedToAll != null)
                    hashCode = hashCode * 59 + this.SharedToAll.GetHashCode();
                if (this.NumberOfRemovedUsers != null)
                    hashCode = hashCode * 59 + this.NumberOfRemovedUsers.GetHashCode();
                if (this.FirstRemovedUser != null)
                    hashCode = hashCode * 59 + this.FirstRemovedUser.GetHashCode();
                if (this.NumberOfAddedGroups != null)
                    hashCode = hashCode * 59 + this.NumberOfAddedGroups.GetHashCode();
                if (this.FirstAddedGroup != null)
                    hashCode = hashCode * 59 + this.FirstAddedGroup.GetHashCode();
                if (this.NumberOfRemovedGroups != null)
                    hashCode = hashCode * 59 + this.NumberOfRemovedGroups.GetHashCode();
                if (this.FirstRemovedGroup != null)
                    hashCode = hashCode * 59 + this.FirstRemovedGroup.GetHashCode();
                return hashCode;
            }
        }
    }
}
