/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details for a specified variable
    /// </summary>
    [DataContract]
        public partial class VariableDetails :  IEquatable<VariableDetails>
    {
        /// <summary>
        /// For a selector variable, whether to display the codes or descs
        /// </summary>
        /// <value>For a selector variable, whether to display the codes or descs</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DetailEnum
        {
            /// <summary>
            /// Enum Code for value: Code
            /// </summary>
            [EnumMember(Value = "Code")]
            Code = 1,
            /// <summary>
            /// Enum Description for value: Description
            /// </summary>
            [EnumMember(Value = "Description")]
            Description = 2        }
        /// <summary>
        /// For a selector variable, whether to display the codes or descs
        /// </summary>
        /// <value>For a selector variable, whether to display the codes or descs</value>
        [DataMember(Name="detail", EmitDefaultValue=false)]
        public DetailEnum? Detail { get; set; }
        /// <summary>
        /// For a selector variable, how to format unclassified values
        /// </summary>
        /// <value>For a selector variable, how to format unclassified values</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UnclassifiedFormatEnum
        {
            /// <summary>
            /// Enum FromDesign for value: FromDesign
            /// </summary>
            [EnumMember(Value = "FromDesign")]
            FromDesign = 1,
            /// <summary>
            /// Enum Empty for value: Empty
            /// </summary>
            [EnumMember(Value = "Empty")]
            Empty = 2        }
        /// <summary>
        /// For a selector variable, how to format unclassified values
        /// </summary>
        /// <value>For a selector variable, how to format unclassified values</value>
        [DataMember(Name="unclassifiedFormat", EmitDefaultValue=false)]
        public UnclassifiedFormatEnum? UnclassifiedFormat { get; set; }
        /// <summary>
        /// For a selector or text variable, how to format the text
        /// </summary>
        /// <value>For a selector or text variable, how to format the text</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum VariableFormatEnum
        {
            /// <summary>
            /// Enum Unformatted for value: Unformatted
            /// </summary>
            [EnumMember(Value = "Unformatted")]
            Unformatted = 1,
            /// <summary>
            /// Enum UpperCase for value: UpperCase
            /// </summary>
            [EnumMember(Value = "UpperCase")]
            UpperCase = 2,
            /// <summary>
            /// Enum LowerCase for value: LowerCase
            /// </summary>
            [EnumMember(Value = "LowerCase")]
            LowerCase = 3,
            /// <summary>
            /// Enum TitleCase for value: TitleCase
            /// </summary>
            [EnumMember(Value = "TitleCase")]
            TitleCase = 4        }
        /// <summary>
        /// For a selector or text variable, how to format the text
        /// </summary>
        /// <value>For a selector or text variable, how to format the text</value>
        [DataMember(Name="variableFormat", EmitDefaultValue=false)]
        public VariableFormatEnum? VariableFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VariableDetails" /> class.
        /// </summary>
        /// <param name="variableName">The reference name of the variable (required).</param>
        /// <param name="description">If specified, a new description to use for the variable.</param>
        /// <param name="variableDescriptionOverride">If specified, a new description to use for the variable.</param>
        /// <param name="detail">For a selector variable, whether to display the codes or descs.</param>
        /// <param name="unclassifiedFormat">For a selector variable, how to format unclassified values.</param>
        /// <param name="variableFormat">For a selector or text variable, how to format the text.</param>
        public VariableDetails(string variableName = default(string), string description = default(string), string variableDescriptionOverride = default(string), DetailEnum? detail = default(DetailEnum?), UnclassifiedFormatEnum? unclassifiedFormat = default(UnclassifiedFormatEnum?), VariableFormatEnum? variableFormat = default(VariableFormatEnum?))
        {
            // to ensure "variableName" is required (not null)
            if (variableName == null)
            {
                throw new InvalidDataException("variableName is a required property for VariableDetails and cannot be null");
            }
            else
            {
                this.VariableName = variableName;
            }
            this.Description = description;
            this.VariableDescriptionOverride = variableDescriptionOverride;
            this.Detail = detail;
            this.UnclassifiedFormat = unclassifiedFormat;
            this.VariableFormat = variableFormat;
        }
        
        /// <summary>
        /// The reference name of the variable
        /// </summary>
        /// <value>The reference name of the variable</value>
        [DataMember(Name="variableName", EmitDefaultValue=false)]
        public string VariableName { get; set; }

        /// <summary>
        /// If specified, a new description to use for the variable
        /// </summary>
        /// <value>If specified, a new description to use for the variable</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// If specified, a new description to use for the variable
        /// </summary>
        /// <value>If specified, a new description to use for the variable</value>
        [DataMember(Name="variableDescriptionOverride", EmitDefaultValue=false)]
        public string VariableDescriptionOverride { get; set; }




        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VariableDetails {\n");
            sb.Append("  VariableName: ").Append(VariableName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  VariableDescriptionOverride: ").Append(VariableDescriptionOverride).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  UnclassifiedFormat: ").Append(UnclassifiedFormat).Append("\n");
            sb.Append("  VariableFormat: ").Append(VariableFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VariableDetails);
        }

        /// <summary>
        /// Returns true if VariableDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of VariableDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VariableDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VariableName == input.VariableName ||
                    (this.VariableName != null &&
                    this.VariableName.Equals(input.VariableName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.VariableDescriptionOverride == input.VariableDescriptionOverride ||
                    (this.VariableDescriptionOverride != null &&
                    this.VariableDescriptionOverride.Equals(input.VariableDescriptionOverride))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.UnclassifiedFormat == input.UnclassifiedFormat ||
                    (this.UnclassifiedFormat != null &&
                    this.UnclassifiedFormat.Equals(input.UnclassifiedFormat))
                ) && 
                (
                    this.VariableFormat == input.VariableFormat ||
                    (this.VariableFormat != null &&
                    this.VariableFormat.Equals(input.VariableFormat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VariableName != null)
                    hashCode = hashCode * 59 + this.VariableName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.VariableDescriptionOverride != null)
                    hashCode = hashCode * 59 + this.VariableDescriptionOverride.GetHashCode();
                if (this.Detail != null)
                    hashCode = hashCode * 59 + this.Detail.GetHashCode();
                if (this.UnclassifiedFormat != null)
                    hashCode = hashCode * 59 + this.UnclassifiedFormat.GetHashCode();
                if (this.VariableFormat != null)
                    hashCode = hashCode * 59 + this.VariableFormat.GetHashCode();
                return hashCode;
            }
        }
    }
}
