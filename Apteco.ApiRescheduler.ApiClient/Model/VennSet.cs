/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// A set to define the categories to break the data in the cube down by
    /// </summary>
    [DataContract]
        public partial class VennSet :  IEquatable<VennSet>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VennSet" /> class.
        /// </summary>
        /// <param name="id">The id of the set (required).</param>
        /// <param name="name">The name of the set (required).</param>
        /// <param name="colour">The colour of the set (required).</param>
        /// <param name="filterDefinition">filterDefinition.</param>
        public VennSet(string id = default(string), string name = default(string), string colour = default(string), FilterDefinition filterDefinition = default(FilterDefinition))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for VennSet and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for VennSet and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "colour" is required (not null)
            if (colour == null)
            {
                throw new InvalidDataException("colour is a required property for VennSet and cannot be null");
            }
            else
            {
                this.Colour = colour;
            }
            this.FilterDefinition = filterDefinition;
        }
        
        /// <summary>
        /// The id of the set
        /// </summary>
        /// <value>The id of the set</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the set
        /// </summary>
        /// <value>The name of the set</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The colour of the set
        /// </summary>
        /// <value>The colour of the set</value>
        [DataMember(Name="colour", EmitDefaultValue=false)]
        public string Colour { get; set; }

        /// <summary>
        /// Gets or Sets FilterDefinition
        /// </summary>
        [DataMember(Name="filterDefinition", EmitDefaultValue=false)]
        public FilterDefinition FilterDefinition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VennSet {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Colour: ").Append(Colour).Append("\n");
            sb.Append("  FilterDefinition: ").Append(FilterDefinition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VennSet);
        }

        /// <summary>
        /// Returns true if VennSet instances are equal
        /// </summary>
        /// <param name="input">Instance of VennSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VennSet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Colour == input.Colour ||
                    (this.Colour != null &&
                    this.Colour.Equals(input.Colour))
                ) && 
                (
                    this.FilterDefinition == input.FilterDefinition ||
                    (this.FilterDefinition != null &&
                    this.FilterDefinition.Equals(input.FilterDefinition))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Colour != null)
                    hashCode = hashCode * 59 + this.Colour.GetHashCode();
                if (this.FilterDefinition != null)
                    hashCode = hashCode * 59 + this.FilterDefinition.GetHashCode();
                return hashCode;
            }
        }
    }
}
