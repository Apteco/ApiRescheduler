/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details for an \&quot;When ready\&quot; event schedule in a PeopleStage campaign
    /// </summary>
    [DataContract]
        public partial class ScheduleInEventWhenReady :  IEquatable<ScheduleInEventWhenReady>
    {
        /// <summary>
        /// Defines DelayUnits
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DelayUnitsEnum
        {
            /// <summary>
            /// Enum Minutes for value: Minutes
            /// </summary>
            [EnumMember(Value = "Minutes")]
            Minutes = 1,
            /// <summary>
            /// Enum Hours for value: Hours
            /// </summary>
            [EnumMember(Value = "Hours")]
            Hours = 2,
            /// <summary>
            /// Enum Days for value: Days
            /// </summary>
            [EnumMember(Value = "Days")]
            Days = 3,
            /// <summary>
            /// Enum Weeks for value: Weeks
            /// </summary>
            [EnumMember(Value = "Weeks")]
            Weeks = 4,
            /// <summary>
            /// Enum Months for value: Months
            /// </summary>
            [EnumMember(Value = "Months")]
            Months = 5,
            /// <summary>
            /// Enum Years for value: Years
            /// </summary>
            [EnumMember(Value = "Years")]
            Years = 6        }
        /// <summary>
        /// Gets or Sets DelayUnits
        /// </summary>
        [DataMember(Name="delayUnits", EmitDefaultValue=false)]
        public DelayUnitsEnum? DelayUnits { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleInEventWhenReady" /> class.
        /// </summary>
        /// <param name="delay">delay.</param>
        /// <param name="delayUnits">delayUnits.</param>
        /// <param name="start">start.</param>
        /// <param name="end">end.</param>
        /// <param name="exclusionTimeWindows">exclusionTimeWindows.</param>
        /// <param name="id">id.</param>
        public ScheduleInEventWhenReady(int? delay = default(int?), DelayUnitsEnum? delayUnits = default(DelayUnitsEnum?), DateTimeAndZone start = default(DateTimeAndZone), DateTimeAndZone end = default(DateTimeAndZone), List<string> exclusionTimeWindows = default(List<string>), int? id = default(int?))
        {
            this.Delay = delay;
            this.DelayUnits = delayUnits;
            this.Start = start;
            this.End = end;
            this.ExclusionTimeWindows = exclusionTimeWindows;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets Delay
        /// </summary>
        [DataMember(Name="delay", EmitDefaultValue=false)]
        public int? Delay { get; set; }


        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public DateTimeAndZone Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public DateTimeAndZone End { get; set; }

        /// <summary>
        /// Gets or Sets ExclusionTimeWindows
        /// </summary>
        [DataMember(Name="exclusionTimeWindows", EmitDefaultValue=false)]
        public List<string> ExclusionTimeWindows { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScheduleInEventWhenReady {\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("  DelayUnits: ").Append(DelayUnits).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  ExclusionTimeWindows: ").Append(ExclusionTimeWindows).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleInEventWhenReady);
        }

        /// <summary>
        /// Returns true if ScheduleInEventWhenReady instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleInEventWhenReady to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleInEventWhenReady input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Delay == input.Delay ||
                    (this.Delay != null &&
                    this.Delay.Equals(input.Delay))
                ) && 
                (
                    this.DelayUnits == input.DelayUnits ||
                    (this.DelayUnits != null &&
                    this.DelayUnits.Equals(input.DelayUnits))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.ExclusionTimeWindows == input.ExclusionTimeWindows ||
                    this.ExclusionTimeWindows != null &&
                    input.ExclusionTimeWindows != null &&
                    this.ExclusionTimeWindows.SequenceEqual(input.ExclusionTimeWindows)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Delay != null)
                    hashCode = hashCode * 59 + this.Delay.GetHashCode();
                if (this.DelayUnits != null)
                    hashCode = hashCode * 59 + this.DelayUnits.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.ExclusionTimeWindows != null)
                    hashCode = hashCode * 59 + this.ExclusionTimeWindows.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }
    }
}
