/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details used to create an audience update
    /// </summary>
    [DataContract]
        public partial class CreateAudienceUpdate :  IEquatable<CreateAudienceUpdate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAudienceUpdate" /> class.
        /// </summary>
        /// <param name="title">The title of the audience.</param>
        /// <param name="description">The description of the audience.</param>
        /// <param name="isDeleted">Whether this audience should be deleted or not.</param>
        /// <param name="excludeQuery">excludeQuery.</param>
        /// <param name="includeQuery">includeQuery.</param>
        /// <param name="bodyQuery">bodyQuery.</param>
        /// <param name="selectionModifiers">selectionModifiers.</param>
        /// <param name="briefText">Notes associated with the audience.</param>
        /// <param name="campaignId">Campaign Id associated with the audience.</param>
        /// <param name="workbookItems">The workbook items that are contained within the audience.</param>
        public CreateAudienceUpdate(string title = default(string), string description = default(string), bool? isDeleted = default(bool?), Query excludeQuery = default(Query), Query includeQuery = default(Query), Query bodyQuery = default(Query), SelectionModifiers selectionModifiers = default(SelectionModifiers), string briefText = default(string), string campaignId = default(string), List<AudienceWorkbookItem> workbookItems = default(List<AudienceWorkbookItem>))
        {
            this.Title = title;
            this.Description = description;
            this.IsDeleted = isDeleted;
            this.ExcludeQuery = excludeQuery;
            this.IncludeQuery = includeQuery;
            this.BodyQuery = bodyQuery;
            this.SelectionModifiers = selectionModifiers;
            this.BriefText = briefText;
            this.CampaignId = campaignId;
            this.WorkbookItems = workbookItems;
        }
        
        /// <summary>
        /// The title of the audience
        /// </summary>
        /// <value>The title of the audience</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The description of the audience
        /// </summary>
        /// <value>The description of the audience</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Whether this audience should be deleted or not
        /// </summary>
        /// <value>Whether this audience should be deleted or not</value>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeQuery
        /// </summary>
        [DataMember(Name="excludeQuery", EmitDefaultValue=false)]
        public Query ExcludeQuery { get; set; }

        /// <summary>
        /// Gets or Sets IncludeQuery
        /// </summary>
        [DataMember(Name="includeQuery", EmitDefaultValue=false)]
        public Query IncludeQuery { get; set; }

        /// <summary>
        /// Gets or Sets BodyQuery
        /// </summary>
        [DataMember(Name="bodyQuery", EmitDefaultValue=false)]
        public Query BodyQuery { get; set; }

        /// <summary>
        /// Gets or Sets SelectionModifiers
        /// </summary>
        [DataMember(Name="selectionModifiers", EmitDefaultValue=false)]
        public SelectionModifiers SelectionModifiers { get; set; }

        /// <summary>
        /// Notes associated with the audience
        /// </summary>
        /// <value>Notes associated with the audience</value>
        [DataMember(Name="briefText", EmitDefaultValue=false)]
        public string BriefText { get; set; }

        /// <summary>
        /// Campaign Id associated with the audience
        /// </summary>
        /// <value>Campaign Id associated with the audience</value>
        [DataMember(Name="campaignId", EmitDefaultValue=false)]
        public string CampaignId { get; set; }

        /// <summary>
        /// The workbook items that are contained within the audience
        /// </summary>
        /// <value>The workbook items that are contained within the audience</value>
        [DataMember(Name="workbookItems", EmitDefaultValue=false)]
        public List<AudienceWorkbookItem> WorkbookItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAudienceUpdate {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  ExcludeQuery: ").Append(ExcludeQuery).Append("\n");
            sb.Append("  IncludeQuery: ").Append(IncludeQuery).Append("\n");
            sb.Append("  BodyQuery: ").Append(BodyQuery).Append("\n");
            sb.Append("  SelectionModifiers: ").Append(SelectionModifiers).Append("\n");
            sb.Append("  BriefText: ").Append(BriefText).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  WorkbookItems: ").Append(WorkbookItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAudienceUpdate);
        }

        /// <summary>
        /// Returns true if CreateAudienceUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAudienceUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAudienceUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.ExcludeQuery == input.ExcludeQuery ||
                    (this.ExcludeQuery != null &&
                    this.ExcludeQuery.Equals(input.ExcludeQuery))
                ) && 
                (
                    this.IncludeQuery == input.IncludeQuery ||
                    (this.IncludeQuery != null &&
                    this.IncludeQuery.Equals(input.IncludeQuery))
                ) && 
                (
                    this.BodyQuery == input.BodyQuery ||
                    (this.BodyQuery != null &&
                    this.BodyQuery.Equals(input.BodyQuery))
                ) && 
                (
                    this.SelectionModifiers == input.SelectionModifiers ||
                    (this.SelectionModifiers != null &&
                    this.SelectionModifiers.Equals(input.SelectionModifiers))
                ) && 
                (
                    this.BriefText == input.BriefText ||
                    (this.BriefText != null &&
                    this.BriefText.Equals(input.BriefText))
                ) && 
                (
                    this.CampaignId == input.CampaignId ||
                    (this.CampaignId != null &&
                    this.CampaignId.Equals(input.CampaignId))
                ) && 
                (
                    this.WorkbookItems == input.WorkbookItems ||
                    this.WorkbookItems != null &&
                    input.WorkbookItems != null &&
                    this.WorkbookItems.SequenceEqual(input.WorkbookItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.ExcludeQuery != null)
                    hashCode = hashCode * 59 + this.ExcludeQuery.GetHashCode();
                if (this.IncludeQuery != null)
                    hashCode = hashCode * 59 + this.IncludeQuery.GetHashCode();
                if (this.BodyQuery != null)
                    hashCode = hashCode * 59 + this.BodyQuery.GetHashCode();
                if (this.SelectionModifiers != null)
                    hashCode = hashCode * 59 + this.SelectionModifiers.GetHashCode();
                if (this.BriefText != null)
                    hashCode = hashCode * 59 + this.BriefText.GetHashCode();
                if (this.CampaignId != null)
                    hashCode = hashCode * 59 + this.CampaignId.GetHashCode();
                if (this.WorkbookItems != null)
                    hashCode = hashCode * 59 + this.WorkbookItems.GetHashCode();
                return hashCode;
            }
        }
    }
}
