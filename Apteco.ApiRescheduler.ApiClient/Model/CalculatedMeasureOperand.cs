/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// An operand used in a calculated measure
    /// </summary>
    [DataContract]
        public partial class CalculatedMeasureOperand :  IEquatable<CalculatedMeasureOperand>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculatedMeasureOperand" /> class.
        /// </summary>
        /// <param name="measure">measure.</param>
        /// <param name="measureById">If the operand is a measure that already exists then the ID of the measure.</param>
        /// <param name="value">If the operand is a fixed numeric value then the value.</param>
        public CalculatedMeasureOperand(Measure measure = default(Measure), string measureById = default(string), double? value = default(double?))
        {
            this.Measure = measure;
            this.MeasureById = measureById;
            this.Value = value;
        }
        
        /// <summary>
        /// Gets or Sets Measure
        /// </summary>
        [DataMember(Name="measure", EmitDefaultValue=false)]
        public Measure Measure { get; set; }

        /// <summary>
        /// If the operand is a measure that already exists then the ID of the measure
        /// </summary>
        /// <value>If the operand is a measure that already exists then the ID of the measure</value>
        [DataMember(Name="measureById", EmitDefaultValue=false)]
        public string MeasureById { get; set; }

        /// <summary>
        /// If the operand is a fixed numeric value then the value
        /// </summary>
        /// <value>If the operand is a fixed numeric value then the value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public double? Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CalculatedMeasureOperand {\n");
            sb.Append("  Measure: ").Append(Measure).Append("\n");
            sb.Append("  MeasureById: ").Append(MeasureById).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CalculatedMeasureOperand);
        }

        /// <summary>
        /// Returns true if CalculatedMeasureOperand instances are equal
        /// </summary>
        /// <param name="input">Instance of CalculatedMeasureOperand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CalculatedMeasureOperand input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Measure == input.Measure ||
                    (this.Measure != null &&
                    this.Measure.Equals(input.Measure))
                ) && 
                (
                    this.MeasureById == input.MeasureById ||
                    (this.MeasureById != null &&
                    this.MeasureById.Equals(input.MeasureById))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Measure != null)
                    hashCode = hashCode * 59 + this.Measure.GetHashCode();
                if (this.MeasureById != null)
                    hashCode = hashCode * 59 + this.MeasureById.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }
    }
}
