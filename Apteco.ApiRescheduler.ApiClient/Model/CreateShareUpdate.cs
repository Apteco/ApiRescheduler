/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// The details required to create a new share update
    /// </summary>
    [DataContract]
        public partial class CreateShareUpdate :  IEquatable<CreateShareUpdate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateShareUpdate" /> class.
        /// </summary>
        /// <param name="notes">The notes associated with this share update.</param>
        /// <param name="emailAddressesToAdd">Email addresses of new users to share this shareable item with.</param>
        /// <param name="userIdsToAdd">Ids of new users to share this shareable item with.</param>
        /// <param name="groupIdsToAdd">Ids of new groups to share this shareable item with.</param>
        /// <param name="userPermissionsToAdd">Ids and permissions of new users to share this shareable item with.</param>
        /// <param name="groupPermissionsToAdd">Ids and permissions of new groups to share this shareable item with.</param>
        /// <param name="userPermissionsToEdit">Ids and modified permissions for users that already have this shareable item shared with them.</param>
        /// <param name="groupPermissionsToEdit">Ids and modified permissions for groups that already have this shareable item shared with them.</param>
        /// <param name="shareToAll">Whether to share this shareable item with all users.</param>
        /// <param name="shareToAllPermissions">Permissions to share the shareable item to all with.</param>
        /// <param name="emailAddressesToRemove">Email addresses of users that this shareable item has already been shared with that should be removed from the share.</param>
        /// <param name="userIdsToRemove">Ids of users that this shareable item has already been shared with that should be removed from the share.</param>
        /// <param name="groupIdsToRemove">Ids of groups that this shareable item has already been shared with that should be removed from the share.</param>
        /// <param name="notifyAddedRecipients">Whether to notify new recipients that the shareable item has now been shared with them (required).</param>
        /// <param name="addedRecipientNotificationMessage">If added recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message..</param>
        /// <param name="notifyEditedRecipients">Whether to notify existing recipients that their permissions on the shareable item have been changed (required).</param>
        /// <param name="editedRecipientNotificationMessage">If edited recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message..</param>
        /// <param name="notifyRemovedRecipients">Whether to notify existing recipients that the shareable item has now been unshared with them (required).</param>
        /// <param name="removedRecipientNotificationMessage">If removed recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message..</param>
        /// <param name="notifyUnchangedRecipients">Whether to notify recipients that the shareable item is shared with, but that haven&#x27;t   been added / removed / had their permissions change, that the share has been updated (required).</param>
        /// <param name="unchangedRecipientNotificationMessage">If unchanged recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message..</param>
        public CreateShareUpdate(string notes = default(string), List<string> emailAddressesToAdd = default(List<string>), List<int?> userIdsToAdd = default(List<int?>), List<int?> groupIdsToAdd = default(List<int?>), List<TupleInt32AccessRightsEnum> userPermissionsToAdd = default(List<TupleInt32AccessRightsEnum>), List<TupleInt32AccessRightsEnum> groupPermissionsToAdd = default(List<TupleInt32AccessRightsEnum>), List<TupleInt32AccessRightsEnum> userPermissionsToEdit = default(List<TupleInt32AccessRightsEnum>), List<TupleInt32AccessRightsEnum> groupPermissionsToEdit = default(List<TupleInt32AccessRightsEnum>), bool? shareToAll = default(bool?), int? shareToAllPermissions = default(int?), List<string> emailAddressesToRemove = default(List<string>), List<int?> userIdsToRemove = default(List<int?>), List<int?> groupIdsToRemove = default(List<int?>), bool? notifyAddedRecipients = default(bool?), string addedRecipientNotificationMessage = default(string), bool? notifyEditedRecipients = default(bool?), string editedRecipientNotificationMessage = default(string), bool? notifyRemovedRecipients = default(bool?), string removedRecipientNotificationMessage = default(string), bool? notifyUnchangedRecipients = default(bool?), string unchangedRecipientNotificationMessage = default(string))
        {
            // to ensure "notifyAddedRecipients" is required (not null)
            if (notifyAddedRecipients == null)
            {
                throw new InvalidDataException("notifyAddedRecipients is a required property for CreateShareUpdate and cannot be null");
            }
            else
            {
                this.NotifyAddedRecipients = notifyAddedRecipients;
            }
            // to ensure "notifyEditedRecipients" is required (not null)
            if (notifyEditedRecipients == null)
            {
                throw new InvalidDataException("notifyEditedRecipients is a required property for CreateShareUpdate and cannot be null");
            }
            else
            {
                this.NotifyEditedRecipients = notifyEditedRecipients;
            }
            // to ensure "notifyRemovedRecipients" is required (not null)
            if (notifyRemovedRecipients == null)
            {
                throw new InvalidDataException("notifyRemovedRecipients is a required property for CreateShareUpdate and cannot be null");
            }
            else
            {
                this.NotifyRemovedRecipients = notifyRemovedRecipients;
            }
            // to ensure "notifyUnchangedRecipients" is required (not null)
            if (notifyUnchangedRecipients == null)
            {
                throw new InvalidDataException("notifyUnchangedRecipients is a required property for CreateShareUpdate and cannot be null");
            }
            else
            {
                this.NotifyUnchangedRecipients = notifyUnchangedRecipients;
            }
            this.Notes = notes;
            this.EmailAddressesToAdd = emailAddressesToAdd;
            this.UserIdsToAdd = userIdsToAdd;
            this.GroupIdsToAdd = groupIdsToAdd;
            this.UserPermissionsToAdd = userPermissionsToAdd;
            this.GroupPermissionsToAdd = groupPermissionsToAdd;
            this.UserPermissionsToEdit = userPermissionsToEdit;
            this.GroupPermissionsToEdit = groupPermissionsToEdit;
            this.ShareToAll = shareToAll;
            this.ShareToAllPermissions = shareToAllPermissions;
            this.EmailAddressesToRemove = emailAddressesToRemove;
            this.UserIdsToRemove = userIdsToRemove;
            this.GroupIdsToRemove = groupIdsToRemove;
            this.AddedRecipientNotificationMessage = addedRecipientNotificationMessage;
            this.EditedRecipientNotificationMessage = editedRecipientNotificationMessage;
            this.RemovedRecipientNotificationMessage = removedRecipientNotificationMessage;
            this.UnchangedRecipientNotificationMessage = unchangedRecipientNotificationMessage;
        }
        
        /// <summary>
        /// The notes associated with this share update
        /// </summary>
        /// <value>The notes associated with this share update</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Email addresses of new users to share this shareable item with
        /// </summary>
        /// <value>Email addresses of new users to share this shareable item with</value>
        [DataMember(Name="emailAddressesToAdd", EmitDefaultValue=false)]
        public List<string> EmailAddressesToAdd { get; set; }

        /// <summary>
        /// Ids of new users to share this shareable item with
        /// </summary>
        /// <value>Ids of new users to share this shareable item with</value>
        [DataMember(Name="userIdsToAdd", EmitDefaultValue=false)]
        public List<int?> UserIdsToAdd { get; set; }

        /// <summary>
        /// Ids of new groups to share this shareable item with
        /// </summary>
        /// <value>Ids of new groups to share this shareable item with</value>
        [DataMember(Name="groupIdsToAdd", EmitDefaultValue=false)]
        public List<int?> GroupIdsToAdd { get; set; }

        /// <summary>
        /// Ids and permissions of new users to share this shareable item with
        /// </summary>
        /// <value>Ids and permissions of new users to share this shareable item with</value>
        [DataMember(Name="userPermissionsToAdd", EmitDefaultValue=false)]
        public List<TupleInt32AccessRightsEnum> UserPermissionsToAdd { get; set; }

        /// <summary>
        /// Ids and permissions of new groups to share this shareable item with
        /// </summary>
        /// <value>Ids and permissions of new groups to share this shareable item with</value>
        [DataMember(Name="groupPermissionsToAdd", EmitDefaultValue=false)]
        public List<TupleInt32AccessRightsEnum> GroupPermissionsToAdd { get; set; }

        /// <summary>
        /// Ids and modified permissions for users that already have this shareable item shared with them
        /// </summary>
        /// <value>Ids and modified permissions for users that already have this shareable item shared with them</value>
        [DataMember(Name="userPermissionsToEdit", EmitDefaultValue=false)]
        public List<TupleInt32AccessRightsEnum> UserPermissionsToEdit { get; set; }

        /// <summary>
        /// Ids and modified permissions for groups that already have this shareable item shared with them
        /// </summary>
        /// <value>Ids and modified permissions for groups that already have this shareable item shared with them</value>
        [DataMember(Name="groupPermissionsToEdit", EmitDefaultValue=false)]
        public List<TupleInt32AccessRightsEnum> GroupPermissionsToEdit { get; set; }

        /// <summary>
        /// Whether to share this shareable item with all users
        /// </summary>
        /// <value>Whether to share this shareable item with all users</value>
        [DataMember(Name="shareToAll", EmitDefaultValue=false)]
        public bool? ShareToAll { get; set; }

        /// <summary>
        /// Permissions to share the shareable item to all with
        /// </summary>
        /// <value>Permissions to share the shareable item to all with</value>
        [DataMember(Name="shareToAllPermissions", EmitDefaultValue=false)]
        public int? ShareToAllPermissions { get; set; }

        /// <summary>
        /// Email addresses of users that this shareable item has already been shared with that should be removed from the share
        /// </summary>
        /// <value>Email addresses of users that this shareable item has already been shared with that should be removed from the share</value>
        [DataMember(Name="emailAddressesToRemove", EmitDefaultValue=false)]
        public List<string> EmailAddressesToRemove { get; set; }

        /// <summary>
        /// Ids of users that this shareable item has already been shared with that should be removed from the share
        /// </summary>
        /// <value>Ids of users that this shareable item has already been shared with that should be removed from the share</value>
        [DataMember(Name="userIdsToRemove", EmitDefaultValue=false)]
        public List<int?> UserIdsToRemove { get; set; }

        /// <summary>
        /// Ids of groups that this shareable item has already been shared with that should be removed from the share
        /// </summary>
        /// <value>Ids of groups that this shareable item has already been shared with that should be removed from the share</value>
        [DataMember(Name="groupIdsToRemove", EmitDefaultValue=false)]
        public List<int?> GroupIdsToRemove { get; set; }

        /// <summary>
        /// Whether to notify new recipients that the shareable item has now been shared with them
        /// </summary>
        /// <value>Whether to notify new recipients that the shareable item has now been shared with them</value>
        [DataMember(Name="notifyAddedRecipients", EmitDefaultValue=false)]
        public bool? NotifyAddedRecipients { get; set; }

        /// <summary>
        /// If added recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message.
        /// </summary>
        /// <value>If added recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message.</value>
        [DataMember(Name="addedRecipientNotificationMessage", EmitDefaultValue=false)]
        public string AddedRecipientNotificationMessage { get; set; }

        /// <summary>
        /// Whether to notify existing recipients that their permissions on the shareable item have been changed
        /// </summary>
        /// <value>Whether to notify existing recipients that their permissions on the shareable item have been changed</value>
        [DataMember(Name="notifyEditedRecipients", EmitDefaultValue=false)]
        public bool? NotifyEditedRecipients { get; set; }

        /// <summary>
        /// If edited recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message.
        /// </summary>
        /// <value>If edited recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message.</value>
        [DataMember(Name="editedRecipientNotificationMessage", EmitDefaultValue=false)]
        public string EditedRecipientNotificationMessage { get; set; }

        /// <summary>
        /// Whether to notify existing recipients that the shareable item has now been unshared with them
        /// </summary>
        /// <value>Whether to notify existing recipients that the shareable item has now been unshared with them</value>
        [DataMember(Name="notifyRemovedRecipients", EmitDefaultValue=false)]
        public bool? NotifyRemovedRecipients { get; set; }

        /// <summary>
        /// If removed recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message.
        /// </summary>
        /// <value>If removed recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message.</value>
        [DataMember(Name="removedRecipientNotificationMessage", EmitDefaultValue=false)]
        public string RemovedRecipientNotificationMessage { get; set; }

        /// <summary>
        /// Whether to notify recipients that the shareable item is shared with, but that haven&#x27;t   been added / removed / had their permissions change, that the share has been updated
        /// </summary>
        /// <value>Whether to notify recipients that the shareable item is shared with, but that haven&#x27;t   been added / removed / had their permissions change, that the share has been updated</value>
        [DataMember(Name="notifyUnchangedRecipients", EmitDefaultValue=false)]
        public bool? NotifyUnchangedRecipients { get; set; }

        /// <summary>
        /// If unchanged recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message.
        /// </summary>
        /// <value>If unchanged recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message.</value>
        [DataMember(Name="unchangedRecipientNotificationMessage", EmitDefaultValue=false)]
        public string UnchangedRecipientNotificationMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateShareUpdate {\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  EmailAddressesToAdd: ").Append(EmailAddressesToAdd).Append("\n");
            sb.Append("  UserIdsToAdd: ").Append(UserIdsToAdd).Append("\n");
            sb.Append("  GroupIdsToAdd: ").Append(GroupIdsToAdd).Append("\n");
            sb.Append("  UserPermissionsToAdd: ").Append(UserPermissionsToAdd).Append("\n");
            sb.Append("  GroupPermissionsToAdd: ").Append(GroupPermissionsToAdd).Append("\n");
            sb.Append("  UserPermissionsToEdit: ").Append(UserPermissionsToEdit).Append("\n");
            sb.Append("  GroupPermissionsToEdit: ").Append(GroupPermissionsToEdit).Append("\n");
            sb.Append("  ShareToAll: ").Append(ShareToAll).Append("\n");
            sb.Append("  ShareToAllPermissions: ").Append(ShareToAllPermissions).Append("\n");
            sb.Append("  EmailAddressesToRemove: ").Append(EmailAddressesToRemove).Append("\n");
            sb.Append("  UserIdsToRemove: ").Append(UserIdsToRemove).Append("\n");
            sb.Append("  GroupIdsToRemove: ").Append(GroupIdsToRemove).Append("\n");
            sb.Append("  NotifyAddedRecipients: ").Append(NotifyAddedRecipients).Append("\n");
            sb.Append("  AddedRecipientNotificationMessage: ").Append(AddedRecipientNotificationMessage).Append("\n");
            sb.Append("  NotifyEditedRecipients: ").Append(NotifyEditedRecipients).Append("\n");
            sb.Append("  EditedRecipientNotificationMessage: ").Append(EditedRecipientNotificationMessage).Append("\n");
            sb.Append("  NotifyRemovedRecipients: ").Append(NotifyRemovedRecipients).Append("\n");
            sb.Append("  RemovedRecipientNotificationMessage: ").Append(RemovedRecipientNotificationMessage).Append("\n");
            sb.Append("  NotifyUnchangedRecipients: ").Append(NotifyUnchangedRecipients).Append("\n");
            sb.Append("  UnchangedRecipientNotificationMessage: ").Append(UnchangedRecipientNotificationMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateShareUpdate);
        }

        /// <summary>
        /// Returns true if CreateShareUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateShareUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateShareUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.EmailAddressesToAdd == input.EmailAddressesToAdd ||
                    this.EmailAddressesToAdd != null &&
                    input.EmailAddressesToAdd != null &&
                    this.EmailAddressesToAdd.SequenceEqual(input.EmailAddressesToAdd)
                ) && 
                (
                    this.UserIdsToAdd == input.UserIdsToAdd ||
                    this.UserIdsToAdd != null &&
                    input.UserIdsToAdd != null &&
                    this.UserIdsToAdd.SequenceEqual(input.UserIdsToAdd)
                ) && 
                (
                    this.GroupIdsToAdd == input.GroupIdsToAdd ||
                    this.GroupIdsToAdd != null &&
                    input.GroupIdsToAdd != null &&
                    this.GroupIdsToAdd.SequenceEqual(input.GroupIdsToAdd)
                ) && 
                (
                    this.UserPermissionsToAdd == input.UserPermissionsToAdd ||
                    this.UserPermissionsToAdd != null &&
                    input.UserPermissionsToAdd != null &&
                    this.UserPermissionsToAdd.SequenceEqual(input.UserPermissionsToAdd)
                ) && 
                (
                    this.GroupPermissionsToAdd == input.GroupPermissionsToAdd ||
                    this.GroupPermissionsToAdd != null &&
                    input.GroupPermissionsToAdd != null &&
                    this.GroupPermissionsToAdd.SequenceEqual(input.GroupPermissionsToAdd)
                ) && 
                (
                    this.UserPermissionsToEdit == input.UserPermissionsToEdit ||
                    this.UserPermissionsToEdit != null &&
                    input.UserPermissionsToEdit != null &&
                    this.UserPermissionsToEdit.SequenceEqual(input.UserPermissionsToEdit)
                ) && 
                (
                    this.GroupPermissionsToEdit == input.GroupPermissionsToEdit ||
                    this.GroupPermissionsToEdit != null &&
                    input.GroupPermissionsToEdit != null &&
                    this.GroupPermissionsToEdit.SequenceEqual(input.GroupPermissionsToEdit)
                ) && 
                (
                    this.ShareToAll == input.ShareToAll ||
                    (this.ShareToAll != null &&
                    this.ShareToAll.Equals(input.ShareToAll))
                ) && 
                (
                    this.ShareToAllPermissions == input.ShareToAllPermissions ||
                    (this.ShareToAllPermissions != null &&
                    this.ShareToAllPermissions.Equals(input.ShareToAllPermissions))
                ) && 
                (
                    this.EmailAddressesToRemove == input.EmailAddressesToRemove ||
                    this.EmailAddressesToRemove != null &&
                    input.EmailAddressesToRemove != null &&
                    this.EmailAddressesToRemove.SequenceEqual(input.EmailAddressesToRemove)
                ) && 
                (
                    this.UserIdsToRemove == input.UserIdsToRemove ||
                    this.UserIdsToRemove != null &&
                    input.UserIdsToRemove != null &&
                    this.UserIdsToRemove.SequenceEqual(input.UserIdsToRemove)
                ) && 
                (
                    this.GroupIdsToRemove == input.GroupIdsToRemove ||
                    this.GroupIdsToRemove != null &&
                    input.GroupIdsToRemove != null &&
                    this.GroupIdsToRemove.SequenceEqual(input.GroupIdsToRemove)
                ) && 
                (
                    this.NotifyAddedRecipients == input.NotifyAddedRecipients ||
                    (this.NotifyAddedRecipients != null &&
                    this.NotifyAddedRecipients.Equals(input.NotifyAddedRecipients))
                ) && 
                (
                    this.AddedRecipientNotificationMessage == input.AddedRecipientNotificationMessage ||
                    (this.AddedRecipientNotificationMessage != null &&
                    this.AddedRecipientNotificationMessage.Equals(input.AddedRecipientNotificationMessage))
                ) && 
                (
                    this.NotifyEditedRecipients == input.NotifyEditedRecipients ||
                    (this.NotifyEditedRecipients != null &&
                    this.NotifyEditedRecipients.Equals(input.NotifyEditedRecipients))
                ) && 
                (
                    this.EditedRecipientNotificationMessage == input.EditedRecipientNotificationMessage ||
                    (this.EditedRecipientNotificationMessage != null &&
                    this.EditedRecipientNotificationMessage.Equals(input.EditedRecipientNotificationMessage))
                ) && 
                (
                    this.NotifyRemovedRecipients == input.NotifyRemovedRecipients ||
                    (this.NotifyRemovedRecipients != null &&
                    this.NotifyRemovedRecipients.Equals(input.NotifyRemovedRecipients))
                ) && 
                (
                    this.RemovedRecipientNotificationMessage == input.RemovedRecipientNotificationMessage ||
                    (this.RemovedRecipientNotificationMessage != null &&
                    this.RemovedRecipientNotificationMessage.Equals(input.RemovedRecipientNotificationMessage))
                ) && 
                (
                    this.NotifyUnchangedRecipients == input.NotifyUnchangedRecipients ||
                    (this.NotifyUnchangedRecipients != null &&
                    this.NotifyUnchangedRecipients.Equals(input.NotifyUnchangedRecipients))
                ) && 
                (
                    this.UnchangedRecipientNotificationMessage == input.UnchangedRecipientNotificationMessage ||
                    (this.UnchangedRecipientNotificationMessage != null &&
                    this.UnchangedRecipientNotificationMessage.Equals(input.UnchangedRecipientNotificationMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.EmailAddressesToAdd != null)
                    hashCode = hashCode * 59 + this.EmailAddressesToAdd.GetHashCode();
                if (this.UserIdsToAdd != null)
                    hashCode = hashCode * 59 + this.UserIdsToAdd.GetHashCode();
                if (this.GroupIdsToAdd != null)
                    hashCode = hashCode * 59 + this.GroupIdsToAdd.GetHashCode();
                if (this.UserPermissionsToAdd != null)
                    hashCode = hashCode * 59 + this.UserPermissionsToAdd.GetHashCode();
                if (this.GroupPermissionsToAdd != null)
                    hashCode = hashCode * 59 + this.GroupPermissionsToAdd.GetHashCode();
                if (this.UserPermissionsToEdit != null)
                    hashCode = hashCode * 59 + this.UserPermissionsToEdit.GetHashCode();
                if (this.GroupPermissionsToEdit != null)
                    hashCode = hashCode * 59 + this.GroupPermissionsToEdit.GetHashCode();
                if (this.ShareToAll != null)
                    hashCode = hashCode * 59 + this.ShareToAll.GetHashCode();
                if (this.ShareToAllPermissions != null)
                    hashCode = hashCode * 59 + this.ShareToAllPermissions.GetHashCode();
                if (this.EmailAddressesToRemove != null)
                    hashCode = hashCode * 59 + this.EmailAddressesToRemove.GetHashCode();
                if (this.UserIdsToRemove != null)
                    hashCode = hashCode * 59 + this.UserIdsToRemove.GetHashCode();
                if (this.GroupIdsToRemove != null)
                    hashCode = hashCode * 59 + this.GroupIdsToRemove.GetHashCode();
                if (this.NotifyAddedRecipients != null)
                    hashCode = hashCode * 59 + this.NotifyAddedRecipients.GetHashCode();
                if (this.AddedRecipientNotificationMessage != null)
                    hashCode = hashCode * 59 + this.AddedRecipientNotificationMessage.GetHashCode();
                if (this.NotifyEditedRecipients != null)
                    hashCode = hashCode * 59 + this.NotifyEditedRecipients.GetHashCode();
                if (this.EditedRecipientNotificationMessage != null)
                    hashCode = hashCode * 59 + this.EditedRecipientNotificationMessage.GetHashCode();
                if (this.NotifyRemovedRecipients != null)
                    hashCode = hashCode * 59 + this.NotifyRemovedRecipients.GetHashCode();
                if (this.RemovedRecipientNotificationMessage != null)
                    hashCode = hashCode * 59 + this.RemovedRecipientNotificationMessage.GetHashCode();
                if (this.NotifyUnchangedRecipients != null)
                    hashCode = hashCode * 59 + this.NotifyUnchangedRecipients.GetHashCode();
                if (this.UnchangedRecipientNotificationMessage != null)
                    hashCode = hashCode * 59 + this.UnchangedRecipientNotificationMessage.GetHashCode();
                return hashCode;
            }
        }
    }
}
