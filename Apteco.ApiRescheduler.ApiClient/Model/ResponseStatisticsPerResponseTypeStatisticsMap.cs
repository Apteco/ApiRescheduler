/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// A map between a response type and its response statistics data
    /// </summary>
    [DataContract]
        public partial class ResponseStatisticsPerResponseTypeStatisticsMap :  IEquatable<ResponseStatisticsPerResponseTypeStatisticsMap>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseStatisticsPerResponseTypeStatisticsMap" /> class.
        /// </summary>
        /// <param name="unknown">unknown.</param>
        /// <param name="broadcastBounce">broadcastBounce.</param>
        /// <param name="broadcastOpen">broadcastOpen.</param>
        /// <param name="broadcastClick">broadcastClick.</param>
        /// <param name="broadcastReply">broadcastReply.</param>
        /// <param name="broadcastOptIn">broadcastOptIn.</param>
        /// <param name="broadcastOptOut">broadcastOptOut.</param>
        /// <param name="broadcastDelivered">broadcastDelivered.</param>
        /// <param name="broadcastFailed">broadcastFailed.</param>
        /// <param name="emailBounce">emailBounce.</param>
        /// <param name="emailOpen">emailOpen.</param>
        /// <param name="emailClick">emailClick.</param>
        /// <param name="emailReply">emailReply.</param>
        /// <param name="emailOptIn">emailOptIn.</param>
        /// <param name="emailOptOut">emailOptOut.</param>
        /// <param name="emailDelivered">emailDelivered.</param>
        /// <param name="emailFailed">emailFailed.</param>
        /// <param name="smsBounce">smsBounce.</param>
        /// <param name="smsOpen">smsOpen.</param>
        /// <param name="smsClick">smsClick.</param>
        /// <param name="smsReply">smsReply.</param>
        /// <param name="smsOptIn">smsOptIn.</param>
        /// <param name="smsOptOut">smsOptOut.</param>
        /// <param name="smsDelivered">smsDelivered.</param>
        /// <param name="smsFailed">smsFailed.</param>
        /// <param name="wabaBounce">wabaBounce.</param>
        /// <param name="wabaOpen">wabaOpen.</param>
        /// <param name="wabaClick">wabaClick.</param>
        /// <param name="wabaReply">wabaReply.</param>
        /// <param name="wabaOptIn">wabaOptIn.</param>
        /// <param name="wabaOptOut">wabaOptOut.</param>
        /// <param name="wabaDelivered">wabaDelivered.</param>
        /// <param name="wabaFailed">wabaFailed.</param>
        /// <param name="mockBounce">mockBounce.</param>
        /// <param name="mockOpen">mockOpen.</param>
        /// <param name="mockClick">mockClick.</param>
        /// <param name="mockReply">mockReply.</param>
        /// <param name="mockOptIn">mockOptIn.</param>
        /// <param name="mockOptOut">mockOptOut.</param>
        /// <param name="mockDelivered">mockDelivered.</param>
        /// <param name="mockFailed">mockFailed.</param>
        /// <param name="facebookLike">facebookLike.</param>
        /// <param name="facebookComment">facebookComment.</param>
        /// <param name="facebookShare">facebookShare.</param>
        /// <param name="facebookLinkClick">facebookLinkClick.</param>
        /// <param name="twitterLike">twitterLike.</param>
        /// <param name="twitterRetweet">twitterRetweet.</param>
        public ResponseStatisticsPerResponseTypeStatisticsMap(PerResponseTypeStatistics unknown = default(PerResponseTypeStatistics), PerResponseTypeStatistics broadcastBounce = default(PerResponseTypeStatistics), PerResponseTypeStatistics broadcastOpen = default(PerResponseTypeStatistics), PerResponseTypeStatistics broadcastClick = default(PerResponseTypeStatistics), PerResponseTypeStatistics broadcastReply = default(PerResponseTypeStatistics), PerResponseTypeStatistics broadcastOptIn = default(PerResponseTypeStatistics), PerResponseTypeStatistics broadcastOptOut = default(PerResponseTypeStatistics), PerResponseTypeStatistics broadcastDelivered = default(PerResponseTypeStatistics), PerResponseTypeStatistics broadcastFailed = default(PerResponseTypeStatistics), PerResponseTypeStatistics emailBounce = default(PerResponseTypeStatistics), PerResponseTypeStatistics emailOpen = default(PerResponseTypeStatistics), PerResponseTypeStatistics emailClick = default(PerResponseTypeStatistics), PerResponseTypeStatistics emailReply = default(PerResponseTypeStatistics), PerResponseTypeStatistics emailOptIn = default(PerResponseTypeStatistics), PerResponseTypeStatistics emailOptOut = default(PerResponseTypeStatistics), PerResponseTypeStatistics emailDelivered = default(PerResponseTypeStatistics), PerResponseTypeStatistics emailFailed = default(PerResponseTypeStatistics), PerResponseTypeStatistics smsBounce = default(PerResponseTypeStatistics), PerResponseTypeStatistics smsOpen = default(PerResponseTypeStatistics), PerResponseTypeStatistics smsClick = default(PerResponseTypeStatistics), PerResponseTypeStatistics smsReply = default(PerResponseTypeStatistics), PerResponseTypeStatistics smsOptIn = default(PerResponseTypeStatistics), PerResponseTypeStatistics smsOptOut = default(PerResponseTypeStatistics), PerResponseTypeStatistics smsDelivered = default(PerResponseTypeStatistics), PerResponseTypeStatistics smsFailed = default(PerResponseTypeStatistics), PerResponseTypeStatistics wabaBounce = default(PerResponseTypeStatistics), PerResponseTypeStatistics wabaOpen = default(PerResponseTypeStatistics), PerResponseTypeStatistics wabaClick = default(PerResponseTypeStatistics), PerResponseTypeStatistics wabaReply = default(PerResponseTypeStatistics), PerResponseTypeStatistics wabaOptIn = default(PerResponseTypeStatistics), PerResponseTypeStatistics wabaOptOut = default(PerResponseTypeStatistics), PerResponseTypeStatistics wabaDelivered = default(PerResponseTypeStatistics), PerResponseTypeStatistics wabaFailed = default(PerResponseTypeStatistics), PerResponseTypeStatistics mockBounce = default(PerResponseTypeStatistics), PerResponseTypeStatistics mockOpen = default(PerResponseTypeStatistics), PerResponseTypeStatistics mockClick = default(PerResponseTypeStatistics), PerResponseTypeStatistics mockReply = default(PerResponseTypeStatistics), PerResponseTypeStatistics mockOptIn = default(PerResponseTypeStatistics), PerResponseTypeStatistics mockOptOut = default(PerResponseTypeStatistics), PerResponseTypeStatistics mockDelivered = default(PerResponseTypeStatistics), PerResponseTypeStatistics mockFailed = default(PerResponseTypeStatistics), PerResponseTypeStatistics facebookLike = default(PerResponseTypeStatistics), PerResponseTypeStatistics facebookComment = default(PerResponseTypeStatistics), PerResponseTypeStatistics facebookShare = default(PerResponseTypeStatistics), PerResponseTypeStatistics facebookLinkClick = default(PerResponseTypeStatistics), PerResponseTypeStatistics twitterLike = default(PerResponseTypeStatistics), PerResponseTypeStatistics twitterRetweet = default(PerResponseTypeStatistics))
        {
            this.Unknown = unknown;
            this.BroadcastBounce = broadcastBounce;
            this.BroadcastOpen = broadcastOpen;
            this.BroadcastClick = broadcastClick;
            this.BroadcastReply = broadcastReply;
            this.BroadcastOptIn = broadcastOptIn;
            this.BroadcastOptOut = broadcastOptOut;
            this.BroadcastDelivered = broadcastDelivered;
            this.BroadcastFailed = broadcastFailed;
            this.EmailBounce = emailBounce;
            this.EmailOpen = emailOpen;
            this.EmailClick = emailClick;
            this.EmailReply = emailReply;
            this.EmailOptIn = emailOptIn;
            this.EmailOptOut = emailOptOut;
            this.EmailDelivered = emailDelivered;
            this.EmailFailed = emailFailed;
            this.SmsBounce = smsBounce;
            this.SmsOpen = smsOpen;
            this.SmsClick = smsClick;
            this.SmsReply = smsReply;
            this.SmsOptIn = smsOptIn;
            this.SmsOptOut = smsOptOut;
            this.SmsDelivered = smsDelivered;
            this.SmsFailed = smsFailed;
            this.WabaBounce = wabaBounce;
            this.WabaOpen = wabaOpen;
            this.WabaClick = wabaClick;
            this.WabaReply = wabaReply;
            this.WabaOptIn = wabaOptIn;
            this.WabaOptOut = wabaOptOut;
            this.WabaDelivered = wabaDelivered;
            this.WabaFailed = wabaFailed;
            this.MockBounce = mockBounce;
            this.MockOpen = mockOpen;
            this.MockClick = mockClick;
            this.MockReply = mockReply;
            this.MockOptIn = mockOptIn;
            this.MockOptOut = mockOptOut;
            this.MockDelivered = mockDelivered;
            this.MockFailed = mockFailed;
            this.FacebookLike = facebookLike;
            this.FacebookComment = facebookComment;
            this.FacebookShare = facebookShare;
            this.FacebookLinkClick = facebookLinkClick;
            this.TwitterLike = twitterLike;
            this.TwitterRetweet = twitterRetweet;
        }
        
        /// <summary>
        /// Gets or Sets Unknown
        /// </summary>
        [DataMember(Name="Unknown", EmitDefaultValue=false)]
        public PerResponseTypeStatistics Unknown { get; set; }

        /// <summary>
        /// Gets or Sets BroadcastBounce
        /// </summary>
        [DataMember(Name="BroadcastBounce", EmitDefaultValue=false)]
        public PerResponseTypeStatistics BroadcastBounce { get; set; }

        /// <summary>
        /// Gets or Sets BroadcastOpen
        /// </summary>
        [DataMember(Name="BroadcastOpen", EmitDefaultValue=false)]
        public PerResponseTypeStatistics BroadcastOpen { get; set; }

        /// <summary>
        /// Gets or Sets BroadcastClick
        /// </summary>
        [DataMember(Name="BroadcastClick", EmitDefaultValue=false)]
        public PerResponseTypeStatistics BroadcastClick { get; set; }

        /// <summary>
        /// Gets or Sets BroadcastReply
        /// </summary>
        [DataMember(Name="BroadcastReply", EmitDefaultValue=false)]
        public PerResponseTypeStatistics BroadcastReply { get; set; }

        /// <summary>
        /// Gets or Sets BroadcastOptIn
        /// </summary>
        [DataMember(Name="BroadcastOptIn", EmitDefaultValue=false)]
        public PerResponseTypeStatistics BroadcastOptIn { get; set; }

        /// <summary>
        /// Gets or Sets BroadcastOptOut
        /// </summary>
        [DataMember(Name="BroadcastOptOut", EmitDefaultValue=false)]
        public PerResponseTypeStatistics BroadcastOptOut { get; set; }

        /// <summary>
        /// Gets or Sets BroadcastDelivered
        /// </summary>
        [DataMember(Name="BroadcastDelivered", EmitDefaultValue=false)]
        public PerResponseTypeStatistics BroadcastDelivered { get; set; }

        /// <summary>
        /// Gets or Sets BroadcastFailed
        /// </summary>
        [DataMember(Name="BroadcastFailed", EmitDefaultValue=false)]
        public PerResponseTypeStatistics BroadcastFailed { get; set; }

        /// <summary>
        /// Gets or Sets EmailBounce
        /// </summary>
        [DataMember(Name="EmailBounce", EmitDefaultValue=false)]
        public PerResponseTypeStatistics EmailBounce { get; set; }

        /// <summary>
        /// Gets or Sets EmailOpen
        /// </summary>
        [DataMember(Name="EmailOpen", EmitDefaultValue=false)]
        public PerResponseTypeStatistics EmailOpen { get; set; }

        /// <summary>
        /// Gets or Sets EmailClick
        /// </summary>
        [DataMember(Name="EmailClick", EmitDefaultValue=false)]
        public PerResponseTypeStatistics EmailClick { get; set; }

        /// <summary>
        /// Gets or Sets EmailReply
        /// </summary>
        [DataMember(Name="EmailReply", EmitDefaultValue=false)]
        public PerResponseTypeStatistics EmailReply { get; set; }

        /// <summary>
        /// Gets or Sets EmailOptIn
        /// </summary>
        [DataMember(Name="EmailOptIn", EmitDefaultValue=false)]
        public PerResponseTypeStatistics EmailOptIn { get; set; }

        /// <summary>
        /// Gets or Sets EmailOptOut
        /// </summary>
        [DataMember(Name="EmailOptOut", EmitDefaultValue=false)]
        public PerResponseTypeStatistics EmailOptOut { get; set; }

        /// <summary>
        /// Gets or Sets EmailDelivered
        /// </summary>
        [DataMember(Name="EmailDelivered", EmitDefaultValue=false)]
        public PerResponseTypeStatistics EmailDelivered { get; set; }

        /// <summary>
        /// Gets or Sets EmailFailed
        /// </summary>
        [DataMember(Name="EmailFailed", EmitDefaultValue=false)]
        public PerResponseTypeStatistics EmailFailed { get; set; }

        /// <summary>
        /// Gets or Sets SmsBounce
        /// </summary>
        [DataMember(Name="SmsBounce", EmitDefaultValue=false)]
        public PerResponseTypeStatistics SmsBounce { get; set; }

        /// <summary>
        /// Gets or Sets SmsOpen
        /// </summary>
        [DataMember(Name="SmsOpen", EmitDefaultValue=false)]
        public PerResponseTypeStatistics SmsOpen { get; set; }

        /// <summary>
        /// Gets or Sets SmsClick
        /// </summary>
        [DataMember(Name="SmsClick", EmitDefaultValue=false)]
        public PerResponseTypeStatistics SmsClick { get; set; }

        /// <summary>
        /// Gets or Sets SmsReply
        /// </summary>
        [DataMember(Name="SmsReply", EmitDefaultValue=false)]
        public PerResponseTypeStatistics SmsReply { get; set; }

        /// <summary>
        /// Gets or Sets SmsOptIn
        /// </summary>
        [DataMember(Name="SmsOptIn", EmitDefaultValue=false)]
        public PerResponseTypeStatistics SmsOptIn { get; set; }

        /// <summary>
        /// Gets or Sets SmsOptOut
        /// </summary>
        [DataMember(Name="SmsOptOut", EmitDefaultValue=false)]
        public PerResponseTypeStatistics SmsOptOut { get; set; }

        /// <summary>
        /// Gets or Sets SmsDelivered
        /// </summary>
        [DataMember(Name="SmsDelivered", EmitDefaultValue=false)]
        public PerResponseTypeStatistics SmsDelivered { get; set; }

        /// <summary>
        /// Gets or Sets SmsFailed
        /// </summary>
        [DataMember(Name="SmsFailed", EmitDefaultValue=false)]
        public PerResponseTypeStatistics SmsFailed { get; set; }

        /// <summary>
        /// Gets or Sets WabaBounce
        /// </summary>
        [DataMember(Name="WabaBounce", EmitDefaultValue=false)]
        public PerResponseTypeStatistics WabaBounce { get; set; }

        /// <summary>
        /// Gets or Sets WabaOpen
        /// </summary>
        [DataMember(Name="WabaOpen", EmitDefaultValue=false)]
        public PerResponseTypeStatistics WabaOpen { get; set; }

        /// <summary>
        /// Gets or Sets WabaClick
        /// </summary>
        [DataMember(Name="WabaClick", EmitDefaultValue=false)]
        public PerResponseTypeStatistics WabaClick { get; set; }

        /// <summary>
        /// Gets or Sets WabaReply
        /// </summary>
        [DataMember(Name="WabaReply", EmitDefaultValue=false)]
        public PerResponseTypeStatistics WabaReply { get; set; }

        /// <summary>
        /// Gets or Sets WabaOptIn
        /// </summary>
        [DataMember(Name="WabaOptIn", EmitDefaultValue=false)]
        public PerResponseTypeStatistics WabaOptIn { get; set; }

        /// <summary>
        /// Gets or Sets WabaOptOut
        /// </summary>
        [DataMember(Name="WabaOptOut", EmitDefaultValue=false)]
        public PerResponseTypeStatistics WabaOptOut { get; set; }

        /// <summary>
        /// Gets or Sets WabaDelivered
        /// </summary>
        [DataMember(Name="WabaDelivered", EmitDefaultValue=false)]
        public PerResponseTypeStatistics WabaDelivered { get; set; }

        /// <summary>
        /// Gets or Sets WabaFailed
        /// </summary>
        [DataMember(Name="WabaFailed", EmitDefaultValue=false)]
        public PerResponseTypeStatistics WabaFailed { get; set; }

        /// <summary>
        /// Gets or Sets MockBounce
        /// </summary>
        [DataMember(Name="MockBounce", EmitDefaultValue=false)]
        public PerResponseTypeStatistics MockBounce { get; set; }

        /// <summary>
        /// Gets or Sets MockOpen
        /// </summary>
        [DataMember(Name="MockOpen", EmitDefaultValue=false)]
        public PerResponseTypeStatistics MockOpen { get; set; }

        /// <summary>
        /// Gets or Sets MockClick
        /// </summary>
        [DataMember(Name="MockClick", EmitDefaultValue=false)]
        public PerResponseTypeStatistics MockClick { get; set; }

        /// <summary>
        /// Gets or Sets MockReply
        /// </summary>
        [DataMember(Name="MockReply", EmitDefaultValue=false)]
        public PerResponseTypeStatistics MockReply { get; set; }

        /// <summary>
        /// Gets or Sets MockOptIn
        /// </summary>
        [DataMember(Name="MockOptIn", EmitDefaultValue=false)]
        public PerResponseTypeStatistics MockOptIn { get; set; }

        /// <summary>
        /// Gets or Sets MockOptOut
        /// </summary>
        [DataMember(Name="MockOptOut", EmitDefaultValue=false)]
        public PerResponseTypeStatistics MockOptOut { get; set; }

        /// <summary>
        /// Gets or Sets MockDelivered
        /// </summary>
        [DataMember(Name="MockDelivered", EmitDefaultValue=false)]
        public PerResponseTypeStatistics MockDelivered { get; set; }

        /// <summary>
        /// Gets or Sets MockFailed
        /// </summary>
        [DataMember(Name="MockFailed", EmitDefaultValue=false)]
        public PerResponseTypeStatistics MockFailed { get; set; }

        /// <summary>
        /// Gets or Sets FacebookLike
        /// </summary>
        [DataMember(Name="FacebookLike", EmitDefaultValue=false)]
        public PerResponseTypeStatistics FacebookLike { get; set; }

        /// <summary>
        /// Gets or Sets FacebookComment
        /// </summary>
        [DataMember(Name="FacebookComment", EmitDefaultValue=false)]
        public PerResponseTypeStatistics FacebookComment { get; set; }

        /// <summary>
        /// Gets or Sets FacebookShare
        /// </summary>
        [DataMember(Name="FacebookShare", EmitDefaultValue=false)]
        public PerResponseTypeStatistics FacebookShare { get; set; }

        /// <summary>
        /// Gets or Sets FacebookLinkClick
        /// </summary>
        [DataMember(Name="FacebookLinkClick", EmitDefaultValue=false)]
        public PerResponseTypeStatistics FacebookLinkClick { get; set; }

        /// <summary>
        /// Gets or Sets TwitterLike
        /// </summary>
        [DataMember(Name="TwitterLike", EmitDefaultValue=false)]
        public PerResponseTypeStatistics TwitterLike { get; set; }

        /// <summary>
        /// Gets or Sets TwitterRetweet
        /// </summary>
        [DataMember(Name="TwitterRetweet", EmitDefaultValue=false)]
        public PerResponseTypeStatistics TwitterRetweet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseStatisticsPerResponseTypeStatisticsMap {\n");
            sb.Append("  Unknown: ").Append(Unknown).Append("\n");
            sb.Append("  BroadcastBounce: ").Append(BroadcastBounce).Append("\n");
            sb.Append("  BroadcastOpen: ").Append(BroadcastOpen).Append("\n");
            sb.Append("  BroadcastClick: ").Append(BroadcastClick).Append("\n");
            sb.Append("  BroadcastReply: ").Append(BroadcastReply).Append("\n");
            sb.Append("  BroadcastOptIn: ").Append(BroadcastOptIn).Append("\n");
            sb.Append("  BroadcastOptOut: ").Append(BroadcastOptOut).Append("\n");
            sb.Append("  BroadcastDelivered: ").Append(BroadcastDelivered).Append("\n");
            sb.Append("  BroadcastFailed: ").Append(BroadcastFailed).Append("\n");
            sb.Append("  EmailBounce: ").Append(EmailBounce).Append("\n");
            sb.Append("  EmailOpen: ").Append(EmailOpen).Append("\n");
            sb.Append("  EmailClick: ").Append(EmailClick).Append("\n");
            sb.Append("  EmailReply: ").Append(EmailReply).Append("\n");
            sb.Append("  EmailOptIn: ").Append(EmailOptIn).Append("\n");
            sb.Append("  EmailOptOut: ").Append(EmailOptOut).Append("\n");
            sb.Append("  EmailDelivered: ").Append(EmailDelivered).Append("\n");
            sb.Append("  EmailFailed: ").Append(EmailFailed).Append("\n");
            sb.Append("  SmsBounce: ").Append(SmsBounce).Append("\n");
            sb.Append("  SmsOpen: ").Append(SmsOpen).Append("\n");
            sb.Append("  SmsClick: ").Append(SmsClick).Append("\n");
            sb.Append("  SmsReply: ").Append(SmsReply).Append("\n");
            sb.Append("  SmsOptIn: ").Append(SmsOptIn).Append("\n");
            sb.Append("  SmsOptOut: ").Append(SmsOptOut).Append("\n");
            sb.Append("  SmsDelivered: ").Append(SmsDelivered).Append("\n");
            sb.Append("  SmsFailed: ").Append(SmsFailed).Append("\n");
            sb.Append("  WabaBounce: ").Append(WabaBounce).Append("\n");
            sb.Append("  WabaOpen: ").Append(WabaOpen).Append("\n");
            sb.Append("  WabaClick: ").Append(WabaClick).Append("\n");
            sb.Append("  WabaReply: ").Append(WabaReply).Append("\n");
            sb.Append("  WabaOptIn: ").Append(WabaOptIn).Append("\n");
            sb.Append("  WabaOptOut: ").Append(WabaOptOut).Append("\n");
            sb.Append("  WabaDelivered: ").Append(WabaDelivered).Append("\n");
            sb.Append("  WabaFailed: ").Append(WabaFailed).Append("\n");
            sb.Append("  MockBounce: ").Append(MockBounce).Append("\n");
            sb.Append("  MockOpen: ").Append(MockOpen).Append("\n");
            sb.Append("  MockClick: ").Append(MockClick).Append("\n");
            sb.Append("  MockReply: ").Append(MockReply).Append("\n");
            sb.Append("  MockOptIn: ").Append(MockOptIn).Append("\n");
            sb.Append("  MockOptOut: ").Append(MockOptOut).Append("\n");
            sb.Append("  MockDelivered: ").Append(MockDelivered).Append("\n");
            sb.Append("  MockFailed: ").Append(MockFailed).Append("\n");
            sb.Append("  FacebookLike: ").Append(FacebookLike).Append("\n");
            sb.Append("  FacebookComment: ").Append(FacebookComment).Append("\n");
            sb.Append("  FacebookShare: ").Append(FacebookShare).Append("\n");
            sb.Append("  FacebookLinkClick: ").Append(FacebookLinkClick).Append("\n");
            sb.Append("  TwitterLike: ").Append(TwitterLike).Append("\n");
            sb.Append("  TwitterRetweet: ").Append(TwitterRetweet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseStatisticsPerResponseTypeStatisticsMap);
        }

        /// <summary>
        /// Returns true if ResponseStatisticsPerResponseTypeStatisticsMap instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseStatisticsPerResponseTypeStatisticsMap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseStatisticsPerResponseTypeStatisticsMap input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Unknown == input.Unknown ||
                    (this.Unknown != null &&
                    this.Unknown.Equals(input.Unknown))
                ) && 
                (
                    this.BroadcastBounce == input.BroadcastBounce ||
                    (this.BroadcastBounce != null &&
                    this.BroadcastBounce.Equals(input.BroadcastBounce))
                ) && 
                (
                    this.BroadcastOpen == input.BroadcastOpen ||
                    (this.BroadcastOpen != null &&
                    this.BroadcastOpen.Equals(input.BroadcastOpen))
                ) && 
                (
                    this.BroadcastClick == input.BroadcastClick ||
                    (this.BroadcastClick != null &&
                    this.BroadcastClick.Equals(input.BroadcastClick))
                ) && 
                (
                    this.BroadcastReply == input.BroadcastReply ||
                    (this.BroadcastReply != null &&
                    this.BroadcastReply.Equals(input.BroadcastReply))
                ) && 
                (
                    this.BroadcastOptIn == input.BroadcastOptIn ||
                    (this.BroadcastOptIn != null &&
                    this.BroadcastOptIn.Equals(input.BroadcastOptIn))
                ) && 
                (
                    this.BroadcastOptOut == input.BroadcastOptOut ||
                    (this.BroadcastOptOut != null &&
                    this.BroadcastOptOut.Equals(input.BroadcastOptOut))
                ) && 
                (
                    this.BroadcastDelivered == input.BroadcastDelivered ||
                    (this.BroadcastDelivered != null &&
                    this.BroadcastDelivered.Equals(input.BroadcastDelivered))
                ) && 
                (
                    this.BroadcastFailed == input.BroadcastFailed ||
                    (this.BroadcastFailed != null &&
                    this.BroadcastFailed.Equals(input.BroadcastFailed))
                ) && 
                (
                    this.EmailBounce == input.EmailBounce ||
                    (this.EmailBounce != null &&
                    this.EmailBounce.Equals(input.EmailBounce))
                ) && 
                (
                    this.EmailOpen == input.EmailOpen ||
                    (this.EmailOpen != null &&
                    this.EmailOpen.Equals(input.EmailOpen))
                ) && 
                (
                    this.EmailClick == input.EmailClick ||
                    (this.EmailClick != null &&
                    this.EmailClick.Equals(input.EmailClick))
                ) && 
                (
                    this.EmailReply == input.EmailReply ||
                    (this.EmailReply != null &&
                    this.EmailReply.Equals(input.EmailReply))
                ) && 
                (
                    this.EmailOptIn == input.EmailOptIn ||
                    (this.EmailOptIn != null &&
                    this.EmailOptIn.Equals(input.EmailOptIn))
                ) && 
                (
                    this.EmailOptOut == input.EmailOptOut ||
                    (this.EmailOptOut != null &&
                    this.EmailOptOut.Equals(input.EmailOptOut))
                ) && 
                (
                    this.EmailDelivered == input.EmailDelivered ||
                    (this.EmailDelivered != null &&
                    this.EmailDelivered.Equals(input.EmailDelivered))
                ) && 
                (
                    this.EmailFailed == input.EmailFailed ||
                    (this.EmailFailed != null &&
                    this.EmailFailed.Equals(input.EmailFailed))
                ) && 
                (
                    this.SmsBounce == input.SmsBounce ||
                    (this.SmsBounce != null &&
                    this.SmsBounce.Equals(input.SmsBounce))
                ) && 
                (
                    this.SmsOpen == input.SmsOpen ||
                    (this.SmsOpen != null &&
                    this.SmsOpen.Equals(input.SmsOpen))
                ) && 
                (
                    this.SmsClick == input.SmsClick ||
                    (this.SmsClick != null &&
                    this.SmsClick.Equals(input.SmsClick))
                ) && 
                (
                    this.SmsReply == input.SmsReply ||
                    (this.SmsReply != null &&
                    this.SmsReply.Equals(input.SmsReply))
                ) && 
                (
                    this.SmsOptIn == input.SmsOptIn ||
                    (this.SmsOptIn != null &&
                    this.SmsOptIn.Equals(input.SmsOptIn))
                ) && 
                (
                    this.SmsOptOut == input.SmsOptOut ||
                    (this.SmsOptOut != null &&
                    this.SmsOptOut.Equals(input.SmsOptOut))
                ) && 
                (
                    this.SmsDelivered == input.SmsDelivered ||
                    (this.SmsDelivered != null &&
                    this.SmsDelivered.Equals(input.SmsDelivered))
                ) && 
                (
                    this.SmsFailed == input.SmsFailed ||
                    (this.SmsFailed != null &&
                    this.SmsFailed.Equals(input.SmsFailed))
                ) && 
                (
                    this.WabaBounce == input.WabaBounce ||
                    (this.WabaBounce != null &&
                    this.WabaBounce.Equals(input.WabaBounce))
                ) && 
                (
                    this.WabaOpen == input.WabaOpen ||
                    (this.WabaOpen != null &&
                    this.WabaOpen.Equals(input.WabaOpen))
                ) && 
                (
                    this.WabaClick == input.WabaClick ||
                    (this.WabaClick != null &&
                    this.WabaClick.Equals(input.WabaClick))
                ) && 
                (
                    this.WabaReply == input.WabaReply ||
                    (this.WabaReply != null &&
                    this.WabaReply.Equals(input.WabaReply))
                ) && 
                (
                    this.WabaOptIn == input.WabaOptIn ||
                    (this.WabaOptIn != null &&
                    this.WabaOptIn.Equals(input.WabaOptIn))
                ) && 
                (
                    this.WabaOptOut == input.WabaOptOut ||
                    (this.WabaOptOut != null &&
                    this.WabaOptOut.Equals(input.WabaOptOut))
                ) && 
                (
                    this.WabaDelivered == input.WabaDelivered ||
                    (this.WabaDelivered != null &&
                    this.WabaDelivered.Equals(input.WabaDelivered))
                ) && 
                (
                    this.WabaFailed == input.WabaFailed ||
                    (this.WabaFailed != null &&
                    this.WabaFailed.Equals(input.WabaFailed))
                ) && 
                (
                    this.MockBounce == input.MockBounce ||
                    (this.MockBounce != null &&
                    this.MockBounce.Equals(input.MockBounce))
                ) && 
                (
                    this.MockOpen == input.MockOpen ||
                    (this.MockOpen != null &&
                    this.MockOpen.Equals(input.MockOpen))
                ) && 
                (
                    this.MockClick == input.MockClick ||
                    (this.MockClick != null &&
                    this.MockClick.Equals(input.MockClick))
                ) && 
                (
                    this.MockReply == input.MockReply ||
                    (this.MockReply != null &&
                    this.MockReply.Equals(input.MockReply))
                ) && 
                (
                    this.MockOptIn == input.MockOptIn ||
                    (this.MockOptIn != null &&
                    this.MockOptIn.Equals(input.MockOptIn))
                ) && 
                (
                    this.MockOptOut == input.MockOptOut ||
                    (this.MockOptOut != null &&
                    this.MockOptOut.Equals(input.MockOptOut))
                ) && 
                (
                    this.MockDelivered == input.MockDelivered ||
                    (this.MockDelivered != null &&
                    this.MockDelivered.Equals(input.MockDelivered))
                ) && 
                (
                    this.MockFailed == input.MockFailed ||
                    (this.MockFailed != null &&
                    this.MockFailed.Equals(input.MockFailed))
                ) && 
                (
                    this.FacebookLike == input.FacebookLike ||
                    (this.FacebookLike != null &&
                    this.FacebookLike.Equals(input.FacebookLike))
                ) && 
                (
                    this.FacebookComment == input.FacebookComment ||
                    (this.FacebookComment != null &&
                    this.FacebookComment.Equals(input.FacebookComment))
                ) && 
                (
                    this.FacebookShare == input.FacebookShare ||
                    (this.FacebookShare != null &&
                    this.FacebookShare.Equals(input.FacebookShare))
                ) && 
                (
                    this.FacebookLinkClick == input.FacebookLinkClick ||
                    (this.FacebookLinkClick != null &&
                    this.FacebookLinkClick.Equals(input.FacebookLinkClick))
                ) && 
                (
                    this.TwitterLike == input.TwitterLike ||
                    (this.TwitterLike != null &&
                    this.TwitterLike.Equals(input.TwitterLike))
                ) && 
                (
                    this.TwitterRetweet == input.TwitterRetweet ||
                    (this.TwitterRetweet != null &&
                    this.TwitterRetweet.Equals(input.TwitterRetweet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Unknown != null)
                    hashCode = hashCode * 59 + this.Unknown.GetHashCode();
                if (this.BroadcastBounce != null)
                    hashCode = hashCode * 59 + this.BroadcastBounce.GetHashCode();
                if (this.BroadcastOpen != null)
                    hashCode = hashCode * 59 + this.BroadcastOpen.GetHashCode();
                if (this.BroadcastClick != null)
                    hashCode = hashCode * 59 + this.BroadcastClick.GetHashCode();
                if (this.BroadcastReply != null)
                    hashCode = hashCode * 59 + this.BroadcastReply.GetHashCode();
                if (this.BroadcastOptIn != null)
                    hashCode = hashCode * 59 + this.BroadcastOptIn.GetHashCode();
                if (this.BroadcastOptOut != null)
                    hashCode = hashCode * 59 + this.BroadcastOptOut.GetHashCode();
                if (this.BroadcastDelivered != null)
                    hashCode = hashCode * 59 + this.BroadcastDelivered.GetHashCode();
                if (this.BroadcastFailed != null)
                    hashCode = hashCode * 59 + this.BroadcastFailed.GetHashCode();
                if (this.EmailBounce != null)
                    hashCode = hashCode * 59 + this.EmailBounce.GetHashCode();
                if (this.EmailOpen != null)
                    hashCode = hashCode * 59 + this.EmailOpen.GetHashCode();
                if (this.EmailClick != null)
                    hashCode = hashCode * 59 + this.EmailClick.GetHashCode();
                if (this.EmailReply != null)
                    hashCode = hashCode * 59 + this.EmailReply.GetHashCode();
                if (this.EmailOptIn != null)
                    hashCode = hashCode * 59 + this.EmailOptIn.GetHashCode();
                if (this.EmailOptOut != null)
                    hashCode = hashCode * 59 + this.EmailOptOut.GetHashCode();
                if (this.EmailDelivered != null)
                    hashCode = hashCode * 59 + this.EmailDelivered.GetHashCode();
                if (this.EmailFailed != null)
                    hashCode = hashCode * 59 + this.EmailFailed.GetHashCode();
                if (this.SmsBounce != null)
                    hashCode = hashCode * 59 + this.SmsBounce.GetHashCode();
                if (this.SmsOpen != null)
                    hashCode = hashCode * 59 + this.SmsOpen.GetHashCode();
                if (this.SmsClick != null)
                    hashCode = hashCode * 59 + this.SmsClick.GetHashCode();
                if (this.SmsReply != null)
                    hashCode = hashCode * 59 + this.SmsReply.GetHashCode();
                if (this.SmsOptIn != null)
                    hashCode = hashCode * 59 + this.SmsOptIn.GetHashCode();
                if (this.SmsOptOut != null)
                    hashCode = hashCode * 59 + this.SmsOptOut.GetHashCode();
                if (this.SmsDelivered != null)
                    hashCode = hashCode * 59 + this.SmsDelivered.GetHashCode();
                if (this.SmsFailed != null)
                    hashCode = hashCode * 59 + this.SmsFailed.GetHashCode();
                if (this.WabaBounce != null)
                    hashCode = hashCode * 59 + this.WabaBounce.GetHashCode();
                if (this.WabaOpen != null)
                    hashCode = hashCode * 59 + this.WabaOpen.GetHashCode();
                if (this.WabaClick != null)
                    hashCode = hashCode * 59 + this.WabaClick.GetHashCode();
                if (this.WabaReply != null)
                    hashCode = hashCode * 59 + this.WabaReply.GetHashCode();
                if (this.WabaOptIn != null)
                    hashCode = hashCode * 59 + this.WabaOptIn.GetHashCode();
                if (this.WabaOptOut != null)
                    hashCode = hashCode * 59 + this.WabaOptOut.GetHashCode();
                if (this.WabaDelivered != null)
                    hashCode = hashCode * 59 + this.WabaDelivered.GetHashCode();
                if (this.WabaFailed != null)
                    hashCode = hashCode * 59 + this.WabaFailed.GetHashCode();
                if (this.MockBounce != null)
                    hashCode = hashCode * 59 + this.MockBounce.GetHashCode();
                if (this.MockOpen != null)
                    hashCode = hashCode * 59 + this.MockOpen.GetHashCode();
                if (this.MockClick != null)
                    hashCode = hashCode * 59 + this.MockClick.GetHashCode();
                if (this.MockReply != null)
                    hashCode = hashCode * 59 + this.MockReply.GetHashCode();
                if (this.MockOptIn != null)
                    hashCode = hashCode * 59 + this.MockOptIn.GetHashCode();
                if (this.MockOptOut != null)
                    hashCode = hashCode * 59 + this.MockOptOut.GetHashCode();
                if (this.MockDelivered != null)
                    hashCode = hashCode * 59 + this.MockDelivered.GetHashCode();
                if (this.MockFailed != null)
                    hashCode = hashCode * 59 + this.MockFailed.GetHashCode();
                if (this.FacebookLike != null)
                    hashCode = hashCode * 59 + this.FacebookLike.GetHashCode();
                if (this.FacebookComment != null)
                    hashCode = hashCode * 59 + this.FacebookComment.GetHashCode();
                if (this.FacebookShare != null)
                    hashCode = hashCode * 59 + this.FacebookShare.GetHashCode();
                if (this.FacebookLinkClick != null)
                    hashCode = hashCode * 59 + this.FacebookLinkClick.GetHashCode();
                if (this.TwitterLike != null)
                    hashCode = hashCode * 59 + this.TwitterLike.GetHashCode();
                if (this.TwitterRetweet != null)
                    hashCode = hashCode * 59 + this.TwitterRetweet.GetHashCode();
                return hashCode;
            }
        }
    }
}
