/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details of a user invitation
    /// </summary>
    [DataContract]
        public partial class UserInvitationDetail :  IEquatable<UserInvitationDetail>
    {
        /// <summary>
        /// The reason for this invitation
        /// </summary>
        /// <value>The reason for this invitation</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum InvitationReasonEnum
        {
            /// <summary>
            /// Enum EnterFacebookCredentials for value: EnterFacebookCredentials
            /// </summary>
            [EnumMember(Value = "EnterFacebookCredentials")]
            EnterFacebookCredentials = 1        }
        /// <summary>
        /// The reason for this invitation
        /// </summary>
        /// <value>The reason for this invitation</value>
        [DataMember(Name="invitationReason", EmitDefaultValue=false)]
        public InvitationReasonEnum InvitationReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInvitationDetail" /> class.
        /// </summary>
        /// <param name="acceptInvitationUrl">The URL sent in the notification to the user to allow them to accept their invitation.</param>
        /// <param name="hasNotificationBeenSent">Whether the notification has been sent to the user or not. (required).</param>
        /// <param name="token">The token for this invitation (required).</param>
        /// <param name="emailAddress">The email address of the invitee (required).</param>
        /// <param name="username">The username of the invitee (or null if the user doesn&#x27;t exist yet) (required).</param>
        /// <param name="invitationReason">The reason for this invitation (required).</param>
        /// <param name="inviterUsername">The username of the inviting user (required).</param>
        /// <param name="inviterFullName">The fulle name of the inviting user (required).</param>
        /// <param name="creationDate">The date and time this invitation was created (required).</param>
        /// <param name="acceptedDate">The date and time this invitation was accepted.</param>
        /// <param name="completedDate">The date and time this invitation was completed.</param>
        /// <param name="expiredDate">The date and time this invitation expired.</param>
        public UserInvitationDetail(string acceptInvitationUrl = default(string), bool? hasNotificationBeenSent = default(bool?), Guid? token = default(Guid?), string emailAddress = default(string), string username = default(string), InvitationReasonEnum invitationReason = default(InvitationReasonEnum), string inviterUsername = default(string), string inviterFullName = default(string), DateTime? creationDate = default(DateTime?), DateTime? acceptedDate = default(DateTime?), DateTime? completedDate = default(DateTime?), DateTime? expiredDate = default(DateTime?))
        {
            // to ensure "hasNotificationBeenSent" is required (not null)
            if (hasNotificationBeenSent == null)
            {
                throw new InvalidDataException("hasNotificationBeenSent is a required property for UserInvitationDetail and cannot be null");
            }
            else
            {
                this.HasNotificationBeenSent = hasNotificationBeenSent;
            }
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new InvalidDataException("token is a required property for UserInvitationDetail and cannot be null");
            }
            else
            {
                this.Token = token;
            }
            // to ensure "emailAddress" is required (not null)
            if (emailAddress == null)
            {
                throw new InvalidDataException("emailAddress is a required property for UserInvitationDetail and cannot be null");
            }
            else
            {
                this.EmailAddress = emailAddress;
            }
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for UserInvitationDetail and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            // to ensure "invitationReason" is required (not null)
            if (invitationReason == null)
            {
                throw new InvalidDataException("invitationReason is a required property for UserInvitationDetail and cannot be null");
            }
            else
            {
                this.InvitationReason = invitationReason;
            }
            // to ensure "inviterUsername" is required (not null)
            if (inviterUsername == null)
            {
                throw new InvalidDataException("inviterUsername is a required property for UserInvitationDetail and cannot be null");
            }
            else
            {
                this.InviterUsername = inviterUsername;
            }
            // to ensure "inviterFullName" is required (not null)
            if (inviterFullName == null)
            {
                throw new InvalidDataException("inviterFullName is a required property for UserInvitationDetail and cannot be null");
            }
            else
            {
                this.InviterFullName = inviterFullName;
            }
            // to ensure "creationDate" is required (not null)
            if (creationDate == null)
            {
                throw new InvalidDataException("creationDate is a required property for UserInvitationDetail and cannot be null");
            }
            else
            {
                this.CreationDate = creationDate;
            }
            this.AcceptInvitationUrl = acceptInvitationUrl;
            this.AcceptedDate = acceptedDate;
            this.CompletedDate = completedDate;
            this.ExpiredDate = expiredDate;
        }
        
        /// <summary>
        /// The URL sent in the notification to the user to allow them to accept their invitation
        /// </summary>
        /// <value>The URL sent in the notification to the user to allow them to accept their invitation</value>
        [DataMember(Name="acceptInvitationUrl", EmitDefaultValue=false)]
        public string AcceptInvitationUrl { get; set; }

        /// <summary>
        /// Whether the notification has been sent to the user or not.
        /// </summary>
        /// <value>Whether the notification has been sent to the user or not.</value>
        [DataMember(Name="hasNotificationBeenSent", EmitDefaultValue=false)]
        public bool? HasNotificationBeenSent { get; set; }

        /// <summary>
        /// The token for this invitation
        /// </summary>
        /// <value>The token for this invitation</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public Guid? Token { get; set; }

        /// <summary>
        /// The email address of the invitee
        /// </summary>
        /// <value>The email address of the invitee</value>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// The username of the invitee (or null if the user doesn&#x27;t exist yet)
        /// </summary>
        /// <value>The username of the invitee (or null if the user doesn&#x27;t exist yet)</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }


        /// <summary>
        /// The username of the inviting user
        /// </summary>
        /// <value>The username of the inviting user</value>
        [DataMember(Name="inviterUsername", EmitDefaultValue=false)]
        public string InviterUsername { get; set; }

        /// <summary>
        /// The fulle name of the inviting user
        /// </summary>
        /// <value>The fulle name of the inviting user</value>
        [DataMember(Name="inviterFullName", EmitDefaultValue=false)]
        public string InviterFullName { get; set; }

        /// <summary>
        /// The date and time this invitation was created
        /// </summary>
        /// <value>The date and time this invitation was created</value>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// The date and time this invitation was accepted
        /// </summary>
        /// <value>The date and time this invitation was accepted</value>
        [DataMember(Name="acceptedDate", EmitDefaultValue=false)]
        public DateTime? AcceptedDate { get; set; }

        /// <summary>
        /// The date and time this invitation was completed
        /// </summary>
        /// <value>The date and time this invitation was completed</value>
        [DataMember(Name="completedDate", EmitDefaultValue=false)]
        public DateTime? CompletedDate { get; set; }

        /// <summary>
        /// The date and time this invitation expired
        /// </summary>
        /// <value>The date and time this invitation expired</value>
        [DataMember(Name="expiredDate", EmitDefaultValue=false)]
        public DateTime? ExpiredDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserInvitationDetail {\n");
            sb.Append("  AcceptInvitationUrl: ").Append(AcceptInvitationUrl).Append("\n");
            sb.Append("  HasNotificationBeenSent: ").Append(HasNotificationBeenSent).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  InvitationReason: ").Append(InvitationReason).Append("\n");
            sb.Append("  InviterUsername: ").Append(InviterUsername).Append("\n");
            sb.Append("  InviterFullName: ").Append(InviterFullName).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  AcceptedDate: ").Append(AcceptedDate).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  ExpiredDate: ").Append(ExpiredDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserInvitationDetail);
        }

        /// <summary>
        /// Returns true if UserInvitationDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of UserInvitationDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserInvitationDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptInvitationUrl == input.AcceptInvitationUrl ||
                    (this.AcceptInvitationUrl != null &&
                    this.AcceptInvitationUrl.Equals(input.AcceptInvitationUrl))
                ) && 
                (
                    this.HasNotificationBeenSent == input.HasNotificationBeenSent ||
                    (this.HasNotificationBeenSent != null &&
                    this.HasNotificationBeenSent.Equals(input.HasNotificationBeenSent))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.InvitationReason == input.InvitationReason ||
                    (this.InvitationReason != null &&
                    this.InvitationReason.Equals(input.InvitationReason))
                ) && 
                (
                    this.InviterUsername == input.InviterUsername ||
                    (this.InviterUsername != null &&
                    this.InviterUsername.Equals(input.InviterUsername))
                ) && 
                (
                    this.InviterFullName == input.InviterFullName ||
                    (this.InviterFullName != null &&
                    this.InviterFullName.Equals(input.InviterFullName))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.AcceptedDate == input.AcceptedDate ||
                    (this.AcceptedDate != null &&
                    this.AcceptedDate.Equals(input.AcceptedDate))
                ) && 
                (
                    this.CompletedDate == input.CompletedDate ||
                    (this.CompletedDate != null &&
                    this.CompletedDate.Equals(input.CompletedDate))
                ) && 
                (
                    this.ExpiredDate == input.ExpiredDate ||
                    (this.ExpiredDate != null &&
                    this.ExpiredDate.Equals(input.ExpiredDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptInvitationUrl != null)
                    hashCode = hashCode * 59 + this.AcceptInvitationUrl.GetHashCode();
                if (this.HasNotificationBeenSent != null)
                    hashCode = hashCode * 59 + this.HasNotificationBeenSent.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.InvitationReason != null)
                    hashCode = hashCode * 59 + this.InvitationReason.GetHashCode();
                if (this.InviterUsername != null)
                    hashCode = hashCode * 59 + this.InviterUsername.GetHashCode();
                if (this.InviterFullName != null)
                    hashCode = hashCode * 59 + this.InviterFullName.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.AcceptedDate != null)
                    hashCode = hashCode * 59 + this.AcceptedDate.GetHashCode();
                if (this.CompletedDate != null)
                    hashCode = hashCode * 59 + this.CompletedDate.GetHashCode();
                if (this.ExpiredDate != null)
                    hashCode = hashCode * 59 + this.ExpiredDate.GetHashCode();
                return hashCode;
            }
        }
    }
}
