/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// FilterDefinition
    /// </summary>
    [DataContract]
        public partial class FilterDefinition :  IEquatable<FilterDefinition>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterDefinition" /> class.
        /// </summary>
        /// <param name="filters">filters.</param>
        /// <param name="structure">structure.</param>
        public FilterDefinition(List<Filter> filters = default(List<Filter>), FilterGroup structure = default(FilterGroup))
        {
            this.Filters = filters;
            this.Structure = structure;
        }
        
        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public List<Filter> Filters { get; set; }

        /// <summary>
        /// Gets or Sets Structure
        /// </summary>
        [DataMember(Name="structure", EmitDefaultValue=false)]
        public FilterGroup Structure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilterDefinition {\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Structure: ").Append(Structure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilterDefinition);
        }

        /// <summary>
        /// Returns true if FilterDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of FilterDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Filters == input.Filters ||
                    this.Filters != null &&
                    input.Filters != null &&
                    this.Filters.SequenceEqual(input.Filters)
                ) && 
                (
                    this.Structure == input.Structure ||
                    (this.Structure != null &&
                    this.Structure.Equals(input.Structure))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Filters != null)
                    hashCode = hashCode * 59 + this.Filters.GetHashCode();
                if (this.Structure != null)
                    hashCode = hashCode * 59 + this.Structure.GetHashCode();
                return hashCode;
            }
        }
    }
}
