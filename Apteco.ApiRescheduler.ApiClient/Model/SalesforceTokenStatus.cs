/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// The results of a FastStats system build
    /// </summary>
    [DataContract]
        public partial class SalesforceTokenStatus :  IEquatable<SalesforceTokenStatus>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesforceTokenStatus" /> class.
        /// </summary>
        /// <param name="valid">Whether the token is valid or not.</param>
        /// <param name="useSandbox">Whether the token uses the Salesforce sandbox.</param>
        /// <param name="instanceURL">Instance Url.</param>
        /// <param name="name">The name on the account attached to the token.</param>
        /// <param name="email">The email on the account attached to the token.</param>
        public SalesforceTokenStatus(bool? valid = default(bool?), bool? useSandbox = default(bool?), string instanceURL = default(string), string name = default(string), string email = default(string))
        {
            this.Valid = valid;
            this.UseSandbox = useSandbox;
            this.InstanceURL = instanceURL;
            this.Name = name;
            this.Email = email;
        }
        
        /// <summary>
        /// Whether the token is valid or not
        /// </summary>
        /// <value>Whether the token is valid or not</value>
        [DataMember(Name="valid", EmitDefaultValue=false)]
        public bool? Valid { get; set; }

        /// <summary>
        /// Whether the token uses the Salesforce sandbox
        /// </summary>
        /// <value>Whether the token uses the Salesforce sandbox</value>
        [DataMember(Name="useSandbox", EmitDefaultValue=false)]
        public bool? UseSandbox { get; set; }

        /// <summary>
        /// Instance Url
        /// </summary>
        /// <value>Instance Url</value>
        [DataMember(Name="instanceURL", EmitDefaultValue=false)]
        public string InstanceURL { get; set; }

        /// <summary>
        /// The name on the account attached to the token
        /// </summary>
        /// <value>The name on the account attached to the token</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The email on the account attached to the token
        /// </summary>
        /// <value>The email on the account attached to the token</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesforceTokenStatus {\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  UseSandbox: ").Append(UseSandbox).Append("\n");
            sb.Append("  InstanceURL: ").Append(InstanceURL).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesforceTokenStatus);
        }

        /// <summary>
        /// Returns true if SalesforceTokenStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesforceTokenStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesforceTokenStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Valid == input.Valid ||
                    (this.Valid != null &&
                    this.Valid.Equals(input.Valid))
                ) && 
                (
                    this.UseSandbox == input.UseSandbox ||
                    (this.UseSandbox != null &&
                    this.UseSandbox.Equals(input.UseSandbox))
                ) && 
                (
                    this.InstanceURL == input.InstanceURL ||
                    (this.InstanceURL != null &&
                    this.InstanceURL.Equals(input.InstanceURL))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Valid != null)
                    hashCode = hashCode * 59 + this.Valid.GetHashCode();
                if (this.UseSandbox != null)
                    hashCode = hashCode * 59 + this.UseSandbox.GetHashCode();
                if (this.InstanceURL != null)
                    hashCode = hashCode * 59 + this.InstanceURL.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                return hashCode;
            }
        }
    }
}
