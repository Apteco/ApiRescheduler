/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Detail information for an audience check
    /// </summary>
    [DataContract]
        public partial class AudienceCheckDetail :  IEquatable<AudienceCheckDetail>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceCheckDetail" /> class.
        /// </summary>
        /// <param name="audienceUpdateId">The id of the update (audience version) that the export was created from (required).</param>
        /// <param name="timestamp">The date and time that the export was produced (required).</param>
        /// <param name="fastStatsBuildDate">The date and time that the FastStats system used to create this export was built (required).</param>
        /// <param name="user">user (required).</param>
        /// <param name="nettCounts">The set of overall counts for the audience behind this export (required).</param>
        /// <param name="dimensionResults">The list of dimension results containing audience and base counts (required).</param>
        public AudienceCheckDetail(int? audienceUpdateId = default(int?), DateTime? timestamp = default(DateTime?), DateTime? fastStatsBuildDate = default(DateTime?), UserDisplayDetails user = default(UserDisplayDetails), List<Count> nettCounts = default(List<Count>), List<CheckDimensionResult> dimensionResults = default(List<CheckDimensionResult>))
        {
            // to ensure "audienceUpdateId" is required (not null)
            if (audienceUpdateId == null)
            {
                throw new InvalidDataException("audienceUpdateId is a required property for AudienceCheckDetail and cannot be null");
            }
            else
            {
                this.AudienceUpdateId = audienceUpdateId;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for AudienceCheckDetail and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "fastStatsBuildDate" is required (not null)
            if (fastStatsBuildDate == null)
            {
                throw new InvalidDataException("fastStatsBuildDate is a required property for AudienceCheckDetail and cannot be null");
            }
            else
            {
                this.FastStatsBuildDate = fastStatsBuildDate;
            }
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new InvalidDataException("user is a required property for AudienceCheckDetail and cannot be null");
            }
            else
            {
                this.User = user;
            }
            // to ensure "nettCounts" is required (not null)
            if (nettCounts == null)
            {
                throw new InvalidDataException("nettCounts is a required property for AudienceCheckDetail and cannot be null");
            }
            else
            {
                this.NettCounts = nettCounts;
            }
            // to ensure "dimensionResults" is required (not null)
            if (dimensionResults == null)
            {
                throw new InvalidDataException("dimensionResults is a required property for AudienceCheckDetail and cannot be null");
            }
            else
            {
                this.DimensionResults = dimensionResults;
            }
        }
        
        /// <summary>
        /// The id of the update (audience version) that the export was created from
        /// </summary>
        /// <value>The id of the update (audience version) that the export was created from</value>
        [DataMember(Name="audienceUpdateId", EmitDefaultValue=false)]
        public int? AudienceUpdateId { get; set; }

        /// <summary>
        /// The date and time that the export was produced
        /// </summary>
        /// <value>The date and time that the export was produced</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// The date and time that the FastStats system used to create this export was built
        /// </summary>
        /// <value>The date and time that the FastStats system used to create this export was built</value>
        [DataMember(Name="fastStatsBuildDate", EmitDefaultValue=false)]
        public DateTime? FastStatsBuildDate { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserDisplayDetails User { get; set; }

        /// <summary>
        /// The set of overall counts for the audience behind this export
        /// </summary>
        /// <value>The set of overall counts for the audience behind this export</value>
        [DataMember(Name="nettCounts", EmitDefaultValue=false)]
        public List<Count> NettCounts { get; set; }

        /// <summary>
        /// The list of dimension results containing audience and base counts
        /// </summary>
        /// <value>The list of dimension results containing audience and base counts</value>
        [DataMember(Name="dimensionResults", EmitDefaultValue=false)]
        public List<CheckDimensionResult> DimensionResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AudienceCheckDetail {\n");
            sb.Append("  AudienceUpdateId: ").Append(AudienceUpdateId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  FastStatsBuildDate: ").Append(FastStatsBuildDate).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  NettCounts: ").Append(NettCounts).Append("\n");
            sb.Append("  DimensionResults: ").Append(DimensionResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudienceCheckDetail);
        }

        /// <summary>
        /// Returns true if AudienceCheckDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of AudienceCheckDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudienceCheckDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AudienceUpdateId == input.AudienceUpdateId ||
                    (this.AudienceUpdateId != null &&
                    this.AudienceUpdateId.Equals(input.AudienceUpdateId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.FastStatsBuildDate == input.FastStatsBuildDate ||
                    (this.FastStatsBuildDate != null &&
                    this.FastStatsBuildDate.Equals(input.FastStatsBuildDate))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.NettCounts == input.NettCounts ||
                    this.NettCounts != null &&
                    input.NettCounts != null &&
                    this.NettCounts.SequenceEqual(input.NettCounts)
                ) && 
                (
                    this.DimensionResults == input.DimensionResults ||
                    this.DimensionResults != null &&
                    input.DimensionResults != null &&
                    this.DimensionResults.SequenceEqual(input.DimensionResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AudienceUpdateId != null)
                    hashCode = hashCode * 59 + this.AudienceUpdateId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.FastStatsBuildDate != null)
                    hashCode = hashCode * 59 + this.FastStatsBuildDate.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.NettCounts != null)
                    hashCode = hashCode * 59 + this.NettCounts.GetHashCode();
                if (this.DimensionResults != null)
                    hashCode = hashCode * 59 + this.DimensionResults.GetHashCode();
                return hashCode;
            }
        }
    }
}
