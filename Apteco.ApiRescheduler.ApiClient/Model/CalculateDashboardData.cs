/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// CalculateDashboardData
    /// </summary>
    [DataContract]
        public partial class CalculateDashboardData :  IEquatable<CalculateDashboardData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculateDashboardData" /> class.
        /// </summary>
        /// <param name="globalFilterApplied">globalFilterApplied.</param>
        /// <param name="dashboardItemsToCalculate">dashboardItemsToCalculate.</param>
        public CalculateDashboardData(Query globalFilterApplied = default(Query), List<CalculateDashboardItem> dashboardItemsToCalculate = default(List<CalculateDashboardItem>))
        {
            this.GlobalFilterApplied = globalFilterApplied;
            this.DashboardItemsToCalculate = dashboardItemsToCalculate;
        }
        
        /// <summary>
        /// Gets or Sets GlobalFilterApplied
        /// </summary>
        [DataMember(Name="globalFilterApplied", EmitDefaultValue=false)]
        public Query GlobalFilterApplied { get; set; }

        /// <summary>
        /// Gets or Sets DashboardItemsToCalculate
        /// </summary>
        [DataMember(Name="dashboardItemsToCalculate", EmitDefaultValue=false)]
        public List<CalculateDashboardItem> DashboardItemsToCalculate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CalculateDashboardData {\n");
            sb.Append("  GlobalFilterApplied: ").Append(GlobalFilterApplied).Append("\n");
            sb.Append("  DashboardItemsToCalculate: ").Append(DashboardItemsToCalculate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CalculateDashboardData);
        }

        /// <summary>
        /// Returns true if CalculateDashboardData instances are equal
        /// </summary>
        /// <param name="input">Instance of CalculateDashboardData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CalculateDashboardData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GlobalFilterApplied == input.GlobalFilterApplied ||
                    (this.GlobalFilterApplied != null &&
                    this.GlobalFilterApplied.Equals(input.GlobalFilterApplied))
                ) && 
                (
                    this.DashboardItemsToCalculate == input.DashboardItemsToCalculate ||
                    this.DashboardItemsToCalculate != null &&
                    input.DashboardItemsToCalculate != null &&
                    this.DashboardItemsToCalculate.SequenceEqual(input.DashboardItemsToCalculate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GlobalFilterApplied != null)
                    hashCode = hashCode * 59 + this.GlobalFilterApplied.GetHashCode();
                if (this.DashboardItemsToCalculate != null)
                    hashCode = hashCode * 59 + this.DashboardItemsToCalculate.GetHashCode();
                return hashCode;
            }
        }
    }
}
