/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// The details needed for specifying a pareto dashboard item
    /// </summary>
    [DataContract]
        public partial class ParetoSpecification :  IEquatable<ParetoSpecification>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParetoSpecification" /> class.
        /// </summary>
        /// <param name="valueVariableName">The name of the variable to calculate the value for the pareto chart (required).</param>
        /// <param name="categoryVariableName">If specified, the name of the categories to show on the pareto chart.  If no categories are specified then records from the resolve table will be grouped together.</param>
        /// <param name="numberOfBands">If specified, and no category variable is specified, then the number of bands to group the records on the resolve table into..</param>
        /// <param name="resolveTableName">The name of the table to group together (required).</param>
        public ParetoSpecification(string valueVariableName = default(string), string categoryVariableName = default(string), int? numberOfBands = default(int?), string resolveTableName = default(string))
        {
            // to ensure "valueVariableName" is required (not null)
            if (valueVariableName == null)
            {
                throw new InvalidDataException("valueVariableName is a required property for ParetoSpecification and cannot be null");
            }
            else
            {
                this.ValueVariableName = valueVariableName;
            }
            // to ensure "resolveTableName" is required (not null)
            if (resolveTableName == null)
            {
                throw new InvalidDataException("resolveTableName is a required property for ParetoSpecification and cannot be null");
            }
            else
            {
                this.ResolveTableName = resolveTableName;
            }
            this.CategoryVariableName = categoryVariableName;
            this.NumberOfBands = numberOfBands;
        }
        
        /// <summary>
        /// The name of the variable to calculate the value for the pareto chart
        /// </summary>
        /// <value>The name of the variable to calculate the value for the pareto chart</value>
        [DataMember(Name="valueVariableName", EmitDefaultValue=false)]
        public string ValueVariableName { get; set; }

        /// <summary>
        /// If specified, the name of the categories to show on the pareto chart.  If no categories are specified then records from the resolve table will be grouped together
        /// </summary>
        /// <value>If specified, the name of the categories to show on the pareto chart.  If no categories are specified then records from the resolve table will be grouped together</value>
        [DataMember(Name="categoryVariableName", EmitDefaultValue=false)]
        public string CategoryVariableName { get; set; }

        /// <summary>
        /// If specified, and no category variable is specified, then the number of bands to group the records on the resolve table into.
        /// </summary>
        /// <value>If specified, and no category variable is specified, then the number of bands to group the records on the resolve table into.</value>
        [DataMember(Name="numberOfBands", EmitDefaultValue=false)]
        public int? NumberOfBands { get; set; }

        /// <summary>
        /// The name of the table to group together
        /// </summary>
        /// <value>The name of the table to group together</value>
        [DataMember(Name="resolveTableName", EmitDefaultValue=false)]
        public string ResolveTableName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParetoSpecification {\n");
            sb.Append("  ValueVariableName: ").Append(ValueVariableName).Append("\n");
            sb.Append("  CategoryVariableName: ").Append(CategoryVariableName).Append("\n");
            sb.Append("  NumberOfBands: ").Append(NumberOfBands).Append("\n");
            sb.Append("  ResolveTableName: ").Append(ResolveTableName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParetoSpecification);
        }

        /// <summary>
        /// Returns true if ParetoSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of ParetoSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParetoSpecification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ValueVariableName == input.ValueVariableName ||
                    (this.ValueVariableName != null &&
                    this.ValueVariableName.Equals(input.ValueVariableName))
                ) && 
                (
                    this.CategoryVariableName == input.CategoryVariableName ||
                    (this.CategoryVariableName != null &&
                    this.CategoryVariableName.Equals(input.CategoryVariableName))
                ) && 
                (
                    this.NumberOfBands == input.NumberOfBands ||
                    (this.NumberOfBands != null &&
                    this.NumberOfBands.Equals(input.NumberOfBands))
                ) && 
                (
                    this.ResolveTableName == input.ResolveTableName ||
                    (this.ResolveTableName != null &&
                    this.ResolveTableName.Equals(input.ResolveTableName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ValueVariableName != null)
                    hashCode = hashCode * 59 + this.ValueVariableName.GetHashCode();
                if (this.CategoryVariableName != null)
                    hashCode = hashCode * 59 + this.CategoryVariableName.GetHashCode();
                if (this.NumberOfBands != null)
                    hashCode = hashCode * 59 + this.NumberOfBands.GetHashCode();
                if (this.ResolveTableName != null)
                    hashCode = hashCode * 59 + this.ResolveTableName.GetHashCode();
                return hashCode;
            }
        }
    }
}
