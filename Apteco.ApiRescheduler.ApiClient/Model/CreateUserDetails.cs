/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details to create a user with
    /// </summary>
    [DataContract]
        public partial class CreateUserDetails :  IEquatable<CreateUserDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserDetails" /> class.
        /// </summary>
        /// <param name="username">The username for the new user (required).</param>
        /// <param name="password">The password for the new user (required).</param>
        /// <param name="firstname">When specified, the first name for the new user.</param>
        /// <param name="surname">When specified, the surname for the new user.</param>
        /// <param name="emailAddress">When specified, the email address for the new user.</param>
        /// <param name="userDisabledDate">When specified, the new disabled date for the user.</param>
        /// <param name="passwordManuallyExpired">When specified, the new manual expired value the user.</param>
        /// <param name="passwordNeverExpires">When specified, the new never expires value for the user.</param>
        /// <param name="groupId">When specified, the group id for the new user.</param>
        /// <param name="groupIds">When specified, the group ids for the new user.</param>
        public CreateUserDetails(string username = default(string), string password = default(string), string firstname = default(string), string surname = default(string), string emailAddress = default(string), DateTime? userDisabledDate = default(DateTime?), bool? passwordManuallyExpired = default(bool?), bool? passwordNeverExpires = default(bool?), int? groupId = default(int?), List<int?> groupIds = default(List<int?>))
        {
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for CreateUserDetails and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new InvalidDataException("password is a required property for CreateUserDetails and cannot be null");
            }
            else
            {
                this.Password = password;
            }
            this.Firstname = firstname;
            this.Surname = surname;
            this.EmailAddress = emailAddress;
            this.UserDisabledDate = userDisabledDate;
            this.PasswordManuallyExpired = passwordManuallyExpired;
            this.PasswordNeverExpires = passwordNeverExpires;
            this.GroupId = groupId;
            this.GroupIds = groupIds;
        }
        
        /// <summary>
        /// The username for the new user
        /// </summary>
        /// <value>The username for the new user</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// The password for the new user
        /// </summary>
        /// <value>The password for the new user</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// When specified, the first name for the new user
        /// </summary>
        /// <value>When specified, the first name for the new user</value>
        [DataMember(Name="firstname", EmitDefaultValue=false)]
        public string Firstname { get; set; }

        /// <summary>
        /// When specified, the surname for the new user
        /// </summary>
        /// <value>When specified, the surname for the new user</value>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// When specified, the email address for the new user
        /// </summary>
        /// <value>When specified, the email address for the new user</value>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// When specified, the new disabled date for the user
        /// </summary>
        /// <value>When specified, the new disabled date for the user</value>
        [DataMember(Name="userDisabledDate", EmitDefaultValue=false)]
        public DateTime? UserDisabledDate { get; set; }

        /// <summary>
        /// When specified, the new manual expired value the user
        /// </summary>
        /// <value>When specified, the new manual expired value the user</value>
        [DataMember(Name="passwordManuallyExpired", EmitDefaultValue=false)]
        public bool? PasswordManuallyExpired { get; set; }

        /// <summary>
        /// When specified, the new never expires value for the user
        /// </summary>
        /// <value>When specified, the new never expires value for the user</value>
        [DataMember(Name="passwordNeverExpires", EmitDefaultValue=false)]
        public bool? PasswordNeverExpires { get; set; }

        /// <summary>
        /// When specified, the group id for the new user
        /// </summary>
        /// <value>When specified, the group id for the new user</value>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public int? GroupId { get; set; }

        /// <summary>
        /// When specified, the group ids for the new user
        /// </summary>
        /// <value>When specified, the group ids for the new user</value>
        [DataMember(Name="groupIds", EmitDefaultValue=false)]
        public List<int?> GroupIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateUserDetails {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  UserDisabledDate: ").Append(UserDisabledDate).Append("\n");
            sb.Append("  PasswordManuallyExpired: ").Append(PasswordManuallyExpired).Append("\n");
            sb.Append("  PasswordNeverExpires: ").Append(PasswordNeverExpires).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  GroupIds: ").Append(GroupIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateUserDetails);
        }

        /// <summary>
        /// Returns true if CreateUserDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateUserDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateUserDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Firstname == input.Firstname ||
                    (this.Firstname != null &&
                    this.Firstname.Equals(input.Firstname))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.UserDisabledDate == input.UserDisabledDate ||
                    (this.UserDisabledDate != null &&
                    this.UserDisabledDate.Equals(input.UserDisabledDate))
                ) && 
                (
                    this.PasswordManuallyExpired == input.PasswordManuallyExpired ||
                    (this.PasswordManuallyExpired != null &&
                    this.PasswordManuallyExpired.Equals(input.PasswordManuallyExpired))
                ) && 
                (
                    this.PasswordNeverExpires == input.PasswordNeverExpires ||
                    (this.PasswordNeverExpires != null &&
                    this.PasswordNeverExpires.Equals(input.PasswordNeverExpires))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.GroupIds == input.GroupIds ||
                    this.GroupIds != null &&
                    input.GroupIds != null &&
                    this.GroupIds.SequenceEqual(input.GroupIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Firstname != null)
                    hashCode = hashCode * 59 + this.Firstname.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.UserDisabledDate != null)
                    hashCode = hashCode * 59 + this.UserDisabledDate.GetHashCode();
                if (this.PasswordManuallyExpired != null)
                    hashCode = hashCode * 59 + this.PasswordManuallyExpired.GetHashCode();
                if (this.PasswordNeverExpires != null)
                    hashCode = hashCode * 59 + this.PasswordNeverExpires.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.GroupIds != null)
                    hashCode = hashCode * 59 + this.GroupIds.GetHashCode();
                return hashCode;
            }
        }
    }
}
