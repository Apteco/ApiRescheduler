/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Information about the how an export is output to a file
    /// </summary>
    [DataContract]
        public partial class Output :  IEquatable<Output>
    {
        /// <summary>
        /// The format of the file to generate
        /// </summary>
        /// <value>The format of the file to generate</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FormatEnum
        {
            /// <summary>
            /// Enum CSV for value: CSV
            /// </summary>
            [EnumMember(Value = "CSV")]
            CSV = 1,
            /// <summary>
            /// Enum SDF for value: SDF
            /// </summary>
            [EnumMember(Value = "SDF")]
            SDF = 2,
            /// <summary>
            /// Enum XLS for value: XLS
            /// </summary>
            [EnumMember(Value = "XLS")]
            XLS = 3,
            /// <summary>
            /// Enum XLSX for value: XLSX
            /// </summary>
            [EnumMember(Value = "XLSX")]
            XLSX = 4,
            /// <summary>
            /// Enum MDB for value: MDB
            /// </summary>
            [EnumMember(Value = "MDB")]
            MDB = 5,
            /// <summary>
            /// Enum DBF for value: DBF
            /// </summary>
            [EnumMember(Value = "DBF")]
            DBF = 6,
            /// <summary>
            /// Enum URN for value: URN
            /// </summary>
            [EnumMember(Value = "URN")]
            URN = 7,
            /// <summary>
            /// Enum NATIVEDUMP for value: NATIVEDUMP
            /// </summary>
            [EnumMember(Value = "NATIVEDUMP")]
            NATIVEDUMP = 8        }
        /// <summary>
        /// The format of the file to generate
        /// </summary>
        /// <value>The format of the file to generate</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Output" /> class.
        /// </summary>
        /// <param name="format">The format of the file to generate.</param>
        /// <param name="delimiter">The delimiter character to use when outputting a delimited file.  Specify one character only.</param>
        /// <param name="alphaEncloser">The alpha encloser character to use when outputting a delimited file.  Specify one character only.</param>
        /// <param name="numericEncloser">The delimiter character to use when outputting a delimited file.  Specify one character only.</param>
        /// <param name="authorisationCode">The velocity authorisation code string.</param>
        /// <param name="exportExtraName">The name of an \&quot;Export Extras\&quot; processing task, which can perform post-processing steps on a FastStats export.</param>
        public Output(FormatEnum? format = default(FormatEnum?), string delimiter = default(string), string alphaEncloser = default(string), string numericEncloser = default(string), string authorisationCode = default(string), string exportExtraName = default(string))
        {
            this.Format = format;
            this.Delimiter = delimiter;
            this.AlphaEncloser = alphaEncloser;
            this.NumericEncloser = numericEncloser;
            this.AuthorisationCode = authorisationCode;
            this.ExportExtraName = exportExtraName;
        }
        

        /// <summary>
        /// The delimiter character to use when outputting a delimited file.  Specify one character only
        /// </summary>
        /// <value>The delimiter character to use when outputting a delimited file.  Specify one character only</value>
        [DataMember(Name="delimiter", EmitDefaultValue=false)]
        public string Delimiter { get; set; }

        /// <summary>
        /// The alpha encloser character to use when outputting a delimited file.  Specify one character only
        /// </summary>
        /// <value>The alpha encloser character to use when outputting a delimited file.  Specify one character only</value>
        [DataMember(Name="alphaEncloser", EmitDefaultValue=false)]
        public string AlphaEncloser { get; set; }

        /// <summary>
        /// The delimiter character to use when outputting a delimited file.  Specify one character only
        /// </summary>
        /// <value>The delimiter character to use when outputting a delimited file.  Specify one character only</value>
        [DataMember(Name="numericEncloser", EmitDefaultValue=false)]
        public string NumericEncloser { get; set; }

        /// <summary>
        /// The velocity authorisation code string
        /// </summary>
        /// <value>The velocity authorisation code string</value>
        [DataMember(Name="authorisationCode", EmitDefaultValue=false)]
        public string AuthorisationCode { get; set; }

        /// <summary>
        /// The name of an \&quot;Export Extras\&quot; processing task, which can perform post-processing steps on a FastStats export
        /// </summary>
        /// <value>The name of an \&quot;Export Extras\&quot; processing task, which can perform post-processing steps on a FastStats export</value>
        [DataMember(Name="exportExtraName", EmitDefaultValue=false)]
        public string ExportExtraName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Output {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Delimiter: ").Append(Delimiter).Append("\n");
            sb.Append("  AlphaEncloser: ").Append(AlphaEncloser).Append("\n");
            sb.Append("  NumericEncloser: ").Append(NumericEncloser).Append("\n");
            sb.Append("  AuthorisationCode: ").Append(AuthorisationCode).Append("\n");
            sb.Append("  ExportExtraName: ").Append(ExportExtraName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Output);
        }

        /// <summary>
        /// Returns true if Output instances are equal
        /// </summary>
        /// <param name="input">Instance of Output to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Output input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Delimiter == input.Delimiter ||
                    (this.Delimiter != null &&
                    this.Delimiter.Equals(input.Delimiter))
                ) && 
                (
                    this.AlphaEncloser == input.AlphaEncloser ||
                    (this.AlphaEncloser != null &&
                    this.AlphaEncloser.Equals(input.AlphaEncloser))
                ) && 
                (
                    this.NumericEncloser == input.NumericEncloser ||
                    (this.NumericEncloser != null &&
                    this.NumericEncloser.Equals(input.NumericEncloser))
                ) && 
                (
                    this.AuthorisationCode == input.AuthorisationCode ||
                    (this.AuthorisationCode != null &&
                    this.AuthorisationCode.Equals(input.AuthorisationCode))
                ) && 
                (
                    this.ExportExtraName == input.ExportExtraName ||
                    (this.ExportExtraName != null &&
                    this.ExportExtraName.Equals(input.ExportExtraName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Delimiter != null)
                    hashCode = hashCode * 59 + this.Delimiter.GetHashCode();
                if (this.AlphaEncloser != null)
                    hashCode = hashCode * 59 + this.AlphaEncloser.GetHashCode();
                if (this.NumericEncloser != null)
                    hashCode = hashCode * 59 + this.NumericEncloser.GetHashCode();
                if (this.AuthorisationCode != null)
                    hashCode = hashCode * 59 + this.AuthorisationCode.GetHashCode();
                if (this.ExportExtraName != null)
                    hashCode = hashCode * 59 + this.ExportExtraName.GetHashCode();
                return hashCode;
            }
        }
    }
}
