/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// The details required to create a session to log in with using the TokenLogin method
    /// </summary>
    [DataContract]
        public partial class TokenLoginDetails :  IEquatable<TokenLoginDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenLoginDetails" /> class.
        /// </summary>
        /// <param name="token">The login JWT token used to create the session (required).</param>
        /// <param name="clientType">If specified, the type of client creating the session.  Otherwise a default value will be used..</param>
        public TokenLoginDetails(string token = default(string), string clientType = default(string))
        {
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new InvalidDataException("token is a required property for TokenLoginDetails and cannot be null");
            }
            else
            {
                this.Token = token;
            }
            this.ClientType = clientType;
        }
        
        /// <summary>
        /// The login JWT token used to create the session
        /// </summary>
        /// <value>The login JWT token used to create the session</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// If specified, the type of client creating the session.  Otherwise a default value will be used.
        /// </summary>
        /// <value>If specified, the type of client creating the session.  Otherwise a default value will be used.</value>
        [DataMember(Name="clientType", EmitDefaultValue=false)]
        public string ClientType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenLoginDetails {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  ClientType: ").Append(ClientType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenLoginDetails);
        }

        /// <summary>
        /// Returns true if TokenLoginDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenLoginDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenLoginDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.ClientType == input.ClientType ||
                    (this.ClientType != null &&
                    this.ClientType.Equals(input.ClientType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.ClientType != null)
                    hashCode = hashCode * 59 + this.ClientType.GetHashCode();
                return hashCode;
            }
        }
    }
}
