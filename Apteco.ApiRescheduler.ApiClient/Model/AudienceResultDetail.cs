/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details for an audience result
    /// </summary>
    [DataContract]
        public partial class AudienceResultDetail :  IEquatable<AudienceResultDetail>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceResultDetail" /> class.
        /// </summary>
        /// <param name="excludeResults">excludeResults.</param>
        /// <param name="includeResults">includeResults.</param>
        /// <param name="bodyResults">bodyResults (required).</param>
        /// <param name="id">The id for this audience result (required).</param>
        /// <param name="audienceUpdateId">The id of the update (audience version) that this audience result was calculated with (required).</param>
        /// <param name="timestamp">The date and time that this audience result was calculated (required).</param>
        /// <param name="fastStatsBuildDate">The date and time that the FastStats system used to calculate this audience result was built (required).</param>
        /// <param name="user">user (required).</param>
        /// <param name="nettResults">nettResults (required).</param>
        /// <param name="urnFilePath">If a URN file was generated as part of this audience result then this will be its path within the FastStats system (required).</param>
        public AudienceResultDetail(AudienceQueryResult excludeResults = default(AudienceQueryResult), AudienceQueryResult includeResults = default(AudienceQueryResult), AudienceQueryResult bodyResults = default(AudienceQueryResult), int? id = default(int?), int? audienceUpdateId = default(int?), DateTime? timestamp = default(DateTime?), DateTime? fastStatsBuildDate = default(DateTime?), UserDisplayDetails user = default(UserDisplayDetails), AudienceQueryResult nettResults = default(AudienceQueryResult), string urnFilePath = default(string))
        {
            // to ensure "bodyResults" is required (not null)
            if (bodyResults == null)
            {
                throw new InvalidDataException("bodyResults is a required property for AudienceResultDetail and cannot be null");
            }
            else
            {
                this.BodyResults = bodyResults;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for AudienceResultDetail and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "audienceUpdateId" is required (not null)
            if (audienceUpdateId == null)
            {
                throw new InvalidDataException("audienceUpdateId is a required property for AudienceResultDetail and cannot be null");
            }
            else
            {
                this.AudienceUpdateId = audienceUpdateId;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for AudienceResultDetail and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "fastStatsBuildDate" is required (not null)
            if (fastStatsBuildDate == null)
            {
                throw new InvalidDataException("fastStatsBuildDate is a required property for AudienceResultDetail and cannot be null");
            }
            else
            {
                this.FastStatsBuildDate = fastStatsBuildDate;
            }
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new InvalidDataException("user is a required property for AudienceResultDetail and cannot be null");
            }
            else
            {
                this.User = user;
            }
            // to ensure "nettResults" is required (not null)
            if (nettResults == null)
            {
                throw new InvalidDataException("nettResults is a required property for AudienceResultDetail and cannot be null");
            }
            else
            {
                this.NettResults = nettResults;
            }
            // to ensure "urnFilePath" is required (not null)
            if (urnFilePath == null)
            {
                throw new InvalidDataException("urnFilePath is a required property for AudienceResultDetail and cannot be null");
            }
            else
            {
                this.UrnFilePath = urnFilePath;
            }
            this.ExcludeResults = excludeResults;
            this.IncludeResults = includeResults;
        }
        
        /// <summary>
        /// Gets or Sets ExcludeResults
        /// </summary>
        [DataMember(Name="excludeResults", EmitDefaultValue=false)]
        public AudienceQueryResult ExcludeResults { get; set; }

        /// <summary>
        /// Gets or Sets IncludeResults
        /// </summary>
        [DataMember(Name="includeResults", EmitDefaultValue=false)]
        public AudienceQueryResult IncludeResults { get; set; }

        /// <summary>
        /// Gets or Sets BodyResults
        /// </summary>
        [DataMember(Name="bodyResults", EmitDefaultValue=false)]
        public AudienceQueryResult BodyResults { get; set; }

        /// <summary>
        /// The id for this audience result
        /// </summary>
        /// <value>The id for this audience result</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The id of the update (audience version) that this audience result was calculated with
        /// </summary>
        /// <value>The id of the update (audience version) that this audience result was calculated with</value>
        [DataMember(Name="audienceUpdateId", EmitDefaultValue=false)]
        public int? AudienceUpdateId { get; set; }

        /// <summary>
        /// The date and time that this audience result was calculated
        /// </summary>
        /// <value>The date and time that this audience result was calculated</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// The date and time that the FastStats system used to calculate this audience result was built
        /// </summary>
        /// <value>The date and time that the FastStats system used to calculate this audience result was built</value>
        [DataMember(Name="fastStatsBuildDate", EmitDefaultValue=false)]
        public DateTime? FastStatsBuildDate { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserDisplayDetails User { get; set; }

        /// <summary>
        /// Gets or Sets NettResults
        /// </summary>
        [DataMember(Name="nettResults", EmitDefaultValue=false)]
        public AudienceQueryResult NettResults { get; set; }

        /// <summary>
        /// If a URN file was generated as part of this audience result then this will be its path within the FastStats system
        /// </summary>
        /// <value>If a URN file was generated as part of this audience result then this will be its path within the FastStats system</value>
        [DataMember(Name="urnFilePath", EmitDefaultValue=false)]
        public string UrnFilePath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AudienceResultDetail {\n");
            sb.Append("  ExcludeResults: ").Append(ExcludeResults).Append("\n");
            sb.Append("  IncludeResults: ").Append(IncludeResults).Append("\n");
            sb.Append("  BodyResults: ").Append(BodyResults).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AudienceUpdateId: ").Append(AudienceUpdateId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  FastStatsBuildDate: ").Append(FastStatsBuildDate).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  NettResults: ").Append(NettResults).Append("\n");
            sb.Append("  UrnFilePath: ").Append(UrnFilePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudienceResultDetail);
        }

        /// <summary>
        /// Returns true if AudienceResultDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of AudienceResultDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudienceResultDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExcludeResults == input.ExcludeResults ||
                    (this.ExcludeResults != null &&
                    this.ExcludeResults.Equals(input.ExcludeResults))
                ) && 
                (
                    this.IncludeResults == input.IncludeResults ||
                    (this.IncludeResults != null &&
                    this.IncludeResults.Equals(input.IncludeResults))
                ) && 
                (
                    this.BodyResults == input.BodyResults ||
                    (this.BodyResults != null &&
                    this.BodyResults.Equals(input.BodyResults))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AudienceUpdateId == input.AudienceUpdateId ||
                    (this.AudienceUpdateId != null &&
                    this.AudienceUpdateId.Equals(input.AudienceUpdateId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.FastStatsBuildDate == input.FastStatsBuildDate ||
                    (this.FastStatsBuildDate != null &&
                    this.FastStatsBuildDate.Equals(input.FastStatsBuildDate))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.NettResults == input.NettResults ||
                    (this.NettResults != null &&
                    this.NettResults.Equals(input.NettResults))
                ) && 
                (
                    this.UrnFilePath == input.UrnFilePath ||
                    (this.UrnFilePath != null &&
                    this.UrnFilePath.Equals(input.UrnFilePath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExcludeResults != null)
                    hashCode = hashCode * 59 + this.ExcludeResults.GetHashCode();
                if (this.IncludeResults != null)
                    hashCode = hashCode * 59 + this.IncludeResults.GetHashCode();
                if (this.BodyResults != null)
                    hashCode = hashCode * 59 + this.BodyResults.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AudienceUpdateId != null)
                    hashCode = hashCode * 59 + this.AudienceUpdateId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.FastStatsBuildDate != null)
                    hashCode = hashCode * 59 + this.FastStatsBuildDate.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.NettResults != null)
                    hashCode = hashCode * 59 + this.NettResults.GetHashCode();
                if (this.UrnFilePath != null)
                    hashCode = hashCode * 59 + this.UrnFilePath.GetHashCode();
                return hashCode;
            }
        }
    }
}
