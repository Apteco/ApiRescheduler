/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Date settings for a FastStats system
    /// </summary>
    [DataContract]
        public partial class DateSettings :  IEquatable<DateSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateSettings" /> class.
        /// </summary>
        /// <param name="useIso8601WeekOfYear">Whether the FastStats system uses ISO 8601 date and time format (required).</param>
        /// <param name="businessYearStartDD">If defined, the day of the month that the \&quot;Business year\&quot; starts on.  For example, the UK tax year  starts on the 6th April, so this property would have a value of 6..</param>
        /// <param name="businessYearStartMM">If defined, the month of the ywear that the \&quot;Business year\&quot; starts on.  For example, the UK tax year  starts on the 6th April, so this property would have a value of 4. (required).</param>
        public DateSettings(bool? useIso8601WeekOfYear = default(bool?), int? businessYearStartDD = default(int?), int? businessYearStartMM = default(int?))
        {
            // to ensure "useIso8601WeekOfYear" is required (not null)
            if (useIso8601WeekOfYear == null)
            {
                throw new InvalidDataException("useIso8601WeekOfYear is a required property for DateSettings and cannot be null");
            }
            else
            {
                this.UseIso8601WeekOfYear = useIso8601WeekOfYear;
            }
            // to ensure "businessYearStartMM" is required (not null)
            if (businessYearStartMM == null)
            {
                throw new InvalidDataException("businessYearStartMM is a required property for DateSettings and cannot be null");
            }
            else
            {
                this.BusinessYearStartMM = businessYearStartMM;
            }
            this.BusinessYearStartDD = businessYearStartDD;
        }
        
        /// <summary>
        /// Whether the FastStats system uses ISO 8601 date and time format
        /// </summary>
        /// <value>Whether the FastStats system uses ISO 8601 date and time format</value>
        [DataMember(Name="useIso8601WeekOfYear", EmitDefaultValue=false)]
        public bool? UseIso8601WeekOfYear { get; set; }

        /// <summary>
        /// If defined, the day of the month that the \&quot;Business year\&quot; starts on.  For example, the UK tax year  starts on the 6th April, so this property would have a value of 6.
        /// </summary>
        /// <value>If defined, the day of the month that the \&quot;Business year\&quot; starts on.  For example, the UK tax year  starts on the 6th April, so this property would have a value of 6.</value>
        [DataMember(Name="businessYearStartDD", EmitDefaultValue=false)]
        public int? BusinessYearStartDD { get; set; }

        /// <summary>
        /// If defined, the month of the ywear that the \&quot;Business year\&quot; starts on.  For example, the UK tax year  starts on the 6th April, so this property would have a value of 4.
        /// </summary>
        /// <value>If defined, the month of the ywear that the \&quot;Business year\&quot; starts on.  For example, the UK tax year  starts on the 6th April, so this property would have a value of 4.</value>
        [DataMember(Name="businessYearStartMM", EmitDefaultValue=false)]
        public int? BusinessYearStartMM { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DateSettings {\n");
            sb.Append("  UseIso8601WeekOfYear: ").Append(UseIso8601WeekOfYear).Append("\n");
            sb.Append("  BusinessYearStartDD: ").Append(BusinessYearStartDD).Append("\n");
            sb.Append("  BusinessYearStartMM: ").Append(BusinessYearStartMM).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateSettings);
        }

        /// <summary>
        /// Returns true if DateSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of DateSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UseIso8601WeekOfYear == input.UseIso8601WeekOfYear ||
                    (this.UseIso8601WeekOfYear != null &&
                    this.UseIso8601WeekOfYear.Equals(input.UseIso8601WeekOfYear))
                ) && 
                (
                    this.BusinessYearStartDD == input.BusinessYearStartDD ||
                    (this.BusinessYearStartDD != null &&
                    this.BusinessYearStartDD.Equals(input.BusinessYearStartDD))
                ) && 
                (
                    this.BusinessYearStartMM == input.BusinessYearStartMM ||
                    (this.BusinessYearStartMM != null &&
                    this.BusinessYearStartMM.Equals(input.BusinessYearStartMM))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UseIso8601WeekOfYear != null)
                    hashCode = hashCode * 59 + this.UseIso8601WeekOfYear.GetHashCode();
                if (this.BusinessYearStartDD != null)
                    hashCode = hashCode * 59 + this.BusinessYearStartDD.GetHashCode();
                if (this.BusinessYearStartMM != null)
                    hashCode = hashCode * 59 + this.BusinessYearStartMM.GetHashCode();
                return hashCode;
            }
        }
    }
}
