/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// AbstractRenderSpec
    /// </summary>
    [DataContract]
        public partial class AbstractRenderSpec :  IEquatable<AbstractRenderSpec>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AbstractRenderSpec" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="title">title.</param>
        /// <param name="pageWidth">pageWidth.</param>
        /// <param name="pageHeight">pageHeight.</param>
        /// <param name="visualisationWidth">visualisationWidth.</param>
        /// <param name="visualisationHeight">visualisationHeight.</param>
        /// <param name="ranSuccessfully">ranSuccessfully.</param>
        /// <param name="notesTitle">notesTitle.</param>
        /// <param name="notes">notes.</param>
        /// <param name="showNotes">showNotes.</param>
        /// <param name="selectionTitle">selectionTitle.</param>
        /// <param name="showSelection">showSelection.</param>
        /// <param name="lastRunDetails">lastRunDetails.</param>
        /// <param name="queryDetails">queryDetails.</param>
        public AbstractRenderSpec(string type = default(string), string title = default(string), int? pageWidth = default(int?), int? pageHeight = default(int?), int? visualisationWidth = default(int?), int? visualisationHeight = default(int?), bool? ranSuccessfully = default(bool?), string notesTitle = default(string), string notes = default(string), bool? showNotes = default(bool?), string selectionTitle = default(string), bool? showSelection = default(bool?), LastRunDetails lastRunDetails = default(LastRunDetails), QueryDetails queryDetails = default(QueryDetails))
        {
            this.Type = type;
            this.Title = title;
            this.PageWidth = pageWidth;
            this.PageHeight = pageHeight;
            this.VisualisationWidth = visualisationWidth;
            this.VisualisationHeight = visualisationHeight;
            this.RanSuccessfully = ranSuccessfully;
            this.NotesTitle = notesTitle;
            this.Notes = notes;
            this.ShowNotes = showNotes;
            this.SelectionTitle = selectionTitle;
            this.ShowSelection = showSelection;
            this.LastRunDetails = lastRunDetails;
            this.QueryDetails = queryDetails;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets PageWidth
        /// </summary>
        [DataMember(Name="pageWidth", EmitDefaultValue=false)]
        public int? PageWidth { get; set; }

        /// <summary>
        /// Gets or Sets PageHeight
        /// </summary>
        [DataMember(Name="pageHeight", EmitDefaultValue=false)]
        public int? PageHeight { get; set; }

        /// <summary>
        /// Gets or Sets VisualisationWidth
        /// </summary>
        [DataMember(Name="visualisationWidth", EmitDefaultValue=false)]
        public int? VisualisationWidth { get; set; }

        /// <summary>
        /// Gets or Sets VisualisationHeight
        /// </summary>
        [DataMember(Name="visualisationHeight", EmitDefaultValue=false)]
        public int? VisualisationHeight { get; set; }

        /// <summary>
        /// Gets or Sets RanSuccessfully
        /// </summary>
        [DataMember(Name="ranSuccessfully", EmitDefaultValue=false)]
        public bool? RanSuccessfully { get; set; }

        /// <summary>
        /// Gets or Sets NotesTitle
        /// </summary>
        [DataMember(Name="notesTitle", EmitDefaultValue=false)]
        public string NotesTitle { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets ShowNotes
        /// </summary>
        [DataMember(Name="showNotes", EmitDefaultValue=false)]
        public bool? ShowNotes { get; set; }

        /// <summary>
        /// Gets or Sets SelectionTitle
        /// </summary>
        [DataMember(Name="selectionTitle", EmitDefaultValue=false)]
        public string SelectionTitle { get; set; }

        /// <summary>
        /// Gets or Sets ShowSelection
        /// </summary>
        [DataMember(Name="showSelection", EmitDefaultValue=false)]
        public bool? ShowSelection { get; set; }

        /// <summary>
        /// Gets or Sets LastRunDetails
        /// </summary>
        [DataMember(Name="lastRunDetails", EmitDefaultValue=false)]
        public LastRunDetails LastRunDetails { get; set; }

        /// <summary>
        /// Gets or Sets QueryDetails
        /// </summary>
        [DataMember(Name="queryDetails", EmitDefaultValue=false)]
        public QueryDetails QueryDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AbstractRenderSpec {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  PageWidth: ").Append(PageWidth).Append("\n");
            sb.Append("  PageHeight: ").Append(PageHeight).Append("\n");
            sb.Append("  VisualisationWidth: ").Append(VisualisationWidth).Append("\n");
            sb.Append("  VisualisationHeight: ").Append(VisualisationHeight).Append("\n");
            sb.Append("  RanSuccessfully: ").Append(RanSuccessfully).Append("\n");
            sb.Append("  NotesTitle: ").Append(NotesTitle).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ShowNotes: ").Append(ShowNotes).Append("\n");
            sb.Append("  SelectionTitle: ").Append(SelectionTitle).Append("\n");
            sb.Append("  ShowSelection: ").Append(ShowSelection).Append("\n");
            sb.Append("  LastRunDetails: ").Append(LastRunDetails).Append("\n");
            sb.Append("  QueryDetails: ").Append(QueryDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AbstractRenderSpec);
        }

        /// <summary>
        /// Returns true if AbstractRenderSpec instances are equal
        /// </summary>
        /// <param name="input">Instance of AbstractRenderSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AbstractRenderSpec input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.PageWidth == input.PageWidth ||
                    (this.PageWidth != null &&
                    this.PageWidth.Equals(input.PageWidth))
                ) && 
                (
                    this.PageHeight == input.PageHeight ||
                    (this.PageHeight != null &&
                    this.PageHeight.Equals(input.PageHeight))
                ) && 
                (
                    this.VisualisationWidth == input.VisualisationWidth ||
                    (this.VisualisationWidth != null &&
                    this.VisualisationWidth.Equals(input.VisualisationWidth))
                ) && 
                (
                    this.VisualisationHeight == input.VisualisationHeight ||
                    (this.VisualisationHeight != null &&
                    this.VisualisationHeight.Equals(input.VisualisationHeight))
                ) && 
                (
                    this.RanSuccessfully == input.RanSuccessfully ||
                    (this.RanSuccessfully != null &&
                    this.RanSuccessfully.Equals(input.RanSuccessfully))
                ) && 
                (
                    this.NotesTitle == input.NotesTitle ||
                    (this.NotesTitle != null &&
                    this.NotesTitle.Equals(input.NotesTitle))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.ShowNotes == input.ShowNotes ||
                    (this.ShowNotes != null &&
                    this.ShowNotes.Equals(input.ShowNotes))
                ) && 
                (
                    this.SelectionTitle == input.SelectionTitle ||
                    (this.SelectionTitle != null &&
                    this.SelectionTitle.Equals(input.SelectionTitle))
                ) && 
                (
                    this.ShowSelection == input.ShowSelection ||
                    (this.ShowSelection != null &&
                    this.ShowSelection.Equals(input.ShowSelection))
                ) && 
                (
                    this.LastRunDetails == input.LastRunDetails ||
                    (this.LastRunDetails != null &&
                    this.LastRunDetails.Equals(input.LastRunDetails))
                ) && 
                (
                    this.QueryDetails == input.QueryDetails ||
                    (this.QueryDetails != null &&
                    this.QueryDetails.Equals(input.QueryDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.PageWidth != null)
                    hashCode = hashCode * 59 + this.PageWidth.GetHashCode();
                if (this.PageHeight != null)
                    hashCode = hashCode * 59 + this.PageHeight.GetHashCode();
                if (this.VisualisationWidth != null)
                    hashCode = hashCode * 59 + this.VisualisationWidth.GetHashCode();
                if (this.VisualisationHeight != null)
                    hashCode = hashCode * 59 + this.VisualisationHeight.GetHashCode();
                if (this.RanSuccessfully != null)
                    hashCode = hashCode * 59 + this.RanSuccessfully.GetHashCode();
                if (this.NotesTitle != null)
                    hashCode = hashCode * 59 + this.NotesTitle.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.ShowNotes != null)
                    hashCode = hashCode * 59 + this.ShowNotes.GetHashCode();
                if (this.SelectionTitle != null)
                    hashCode = hashCode * 59 + this.SelectionTitle.GetHashCode();
                if (this.ShowSelection != null)
                    hashCode = hashCode * 59 + this.ShowSelection.GetHashCode();
                if (this.LastRunDetails != null)
                    hashCode = hashCode * 59 + this.LastRunDetails.GetHashCode();
                if (this.QueryDetails != null)
                    hashCode = hashCode * 59 + this.QueryDetails.GetHashCode();
                return hashCode;
            }
        }
    }
}
