/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details specific for reference (URN) variables in the FastStats system
    /// </summary>
    [DataContract]
        public partial class ReferenceVariableInfo :  IEquatable<ReferenceVariableInfo>
    {
        /// <summary>
        /// Type of reference variable, either Text or Numeric.
        /// </summary>
        /// <value>Type of reference variable, either Text or Numeric.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ReferenceTypeEnum
        {
            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 1,
            /// <summary>
            /// Enum Numeric for value: Numeric
            /// </summary>
            [EnumMember(Value = "Numeric")]
            Numeric = 2        }
        /// <summary>
        /// Type of reference variable, either Text or Numeric.
        /// </summary>
        /// <value>Type of reference variable, either Text or Numeric.</value>
        [DataMember(Name="referenceType", EmitDefaultValue=false)]
        public ReferenceTypeEnum? ReferenceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceVariableInfo" /> class.
        /// </summary>
        /// <param name="referenceType">Type of reference variable, either Text or Numeric..</param>
        /// <param name="length">Length of the text..</param>
        /// <param name="decimalPlaces">Number of decimal places..</param>
        public ReferenceVariableInfo(ReferenceTypeEnum? referenceType = default(ReferenceTypeEnum?), int? length = default(int?), int? decimalPlaces = default(int?))
        {
            this.ReferenceType = referenceType;
            this.Length = length;
            this.DecimalPlaces = decimalPlaces;
        }
        

        /// <summary>
        /// Length of the text.
        /// </summary>
        /// <value>Length of the text.</value>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public int? Length { get; set; }

        /// <summary>
        /// Number of decimal places.
        /// </summary>
        /// <value>Number of decimal places.</value>
        [DataMember(Name="decimalPlaces", EmitDefaultValue=false)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReferenceVariableInfo {\n");
            sb.Append("  ReferenceType: ").Append(ReferenceType).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  DecimalPlaces: ").Append(DecimalPlaces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReferenceVariableInfo);
        }

        /// <summary>
        /// Returns true if ReferenceVariableInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ReferenceVariableInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReferenceVariableInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReferenceType == input.ReferenceType ||
                    (this.ReferenceType != null &&
                    this.ReferenceType.Equals(input.ReferenceType))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.DecimalPlaces == input.DecimalPlaces ||
                    (this.DecimalPlaces != null &&
                    this.DecimalPlaces.Equals(input.DecimalPlaces))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReferenceType != null)
                    hashCode = hashCode * 59 + this.ReferenceType.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.DecimalPlaces != null)
                    hashCode = hashCode * 59 + this.DecimalPlaces.GetHashCode();
                return hashCode;
            }
        }
    }
}
