/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Information used for registering a licence to a system
    /// </summary>
    [DataContract]
        public partial class RegisterSystemLicenceDetails :  IEquatable<RegisterSystemLicenceDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterSystemLicenceDetails" /> class.
        /// </summary>
        /// <param name="key">The key of the licence.</param>
        /// <param name="xml">The XML definition of the licence.</param>
        public RegisterSystemLicenceDetails(Guid? key = default(Guid?), string xml = default(string))
        {
            this.Key = key;
            this.Xml = xml;
        }
        
        /// <summary>
        /// The key of the licence
        /// </summary>
        /// <value>The key of the licence</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public Guid? Key { get; set; }

        /// <summary>
        /// The XML definition of the licence
        /// </summary>
        /// <value>The XML definition of the licence</value>
        [DataMember(Name="xml", EmitDefaultValue=false)]
        public string Xml { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegisterSystemLicenceDetails {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Xml: ").Append(Xml).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterSystemLicenceDetails);
        }

        /// <summary>
        /// Returns true if RegisterSystemLicenceDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterSystemLicenceDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterSystemLicenceDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Xml == input.Xml ||
                    (this.Xml != null &&
                    this.Xml.Equals(input.Xml))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Xml != null)
                    hashCode = hashCode * 59 + this.Xml.GetHashCode();
                return hashCode;
            }
        }
    }
}
