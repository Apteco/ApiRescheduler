/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// The language details for the API
    /// </summary>
    [DataContract]
        public partial class LanguageDetails :  IEquatable<LanguageDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LanguageDetails" /> class.
        /// </summary>
        /// <param name="language">The language that the API is processing this request in.  This is in the format languagecode2-country/regioncode2  languagecode2 is a lowercase two-letter code derived from ISO 639-1  country/regioncode2 is derived from ISO 3166 and usually consists of two uppercase letters, or a BCP-47 language tag.  For example, en-GB. (required).</param>
        public LanguageDetails(string language = default(string))
        {
            // to ensure "language" is required (not null)
            if (language == null)
            {
                throw new InvalidDataException("language is a required property for LanguageDetails and cannot be null");
            }
            else
            {
                this.Language = language;
            }
        }
        
        /// <summary>
        /// The language that the API is processing this request in.  This is in the format languagecode2-country/regioncode2  languagecode2 is a lowercase two-letter code derived from ISO 639-1  country/regioncode2 is derived from ISO 3166 and usually consists of two uppercase letters, or a BCP-47 language tag.  For example, en-GB.
        /// </summary>
        /// <value>The language that the API is processing this request in.  This is in the format languagecode2-country/regioncode2  languagecode2 is a lowercase two-letter code derived from ISO 639-1  country/regioncode2 is derived from ISO 3166 and usually consists of two uppercase letters, or a BCP-47 language tag.  For example, en-GB.</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LanguageDetails {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LanguageDetails);
        }

        /// <summary>
        /// Returns true if LanguageDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of LanguageDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LanguageDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                return hashCode;
            }
        }
    }
}
