/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// The details needed for specifying a venn dashboard item
    /// </summary>
    [DataContract]
        public partial class VennSpecification :  IEquatable<VennSpecification>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VennSpecification" /> class.
        /// </summary>
        /// <param name="measures">The measures of the dashboard item chart.</param>
        /// <param name="sets">The sets of the dashboard item chart.</param>
        public VennSpecification(List<Measure> measures = default(List<Measure>), List<VennSet> sets = default(List<VennSet>))
        {
            this.Measures = measures;
            this.Sets = sets;
        }
        
        /// <summary>
        /// The measures of the dashboard item chart
        /// </summary>
        /// <value>The measures of the dashboard item chart</value>
        [DataMember(Name="measures", EmitDefaultValue=false)]
        public List<Measure> Measures { get; set; }

        /// <summary>
        /// The sets of the dashboard item chart
        /// </summary>
        /// <value>The sets of the dashboard item chart</value>
        [DataMember(Name="sets", EmitDefaultValue=false)]
        public List<VennSet> Sets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VennSpecification {\n");
            sb.Append("  Measures: ").Append(Measures).Append("\n");
            sb.Append("  Sets: ").Append(Sets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VennSpecification);
        }

        /// <summary>
        /// Returns true if VennSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of VennSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VennSpecification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Measures == input.Measures ||
                    this.Measures != null &&
                    input.Measures != null &&
                    this.Measures.SequenceEqual(input.Measures)
                ) && 
                (
                    this.Sets == input.Sets ||
                    this.Sets != null &&
                    input.Sets != null &&
                    this.Sets.SequenceEqual(input.Sets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Measures != null)
                    hashCode = hashCode * 59 + this.Measures.GetHashCode();
                if (this.Sets != null)
                    hashCode = hashCode * 59 + this.Sets.GetHashCode();
                return hashCode;
            }
        }
    }
}
