/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// AuthorisedPermissionWithLookups
    /// </summary>
    [DataContract]
        public partial class AuthorisedPermissionWithLookups :  IEquatable<AuthorisedPermissionWithLookups>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorisedPermissionWithLookups" /> class.
        /// </summary>
        /// <param name="authorisedPermission">authorisedPermission (required).</param>
        /// <param name="lookups">lookups.</param>
        public AuthorisedPermissionWithLookups(AuthorisedPermission authorisedPermission = default(AuthorisedPermission), Lookups lookups = default(Lookups))
        {
            // to ensure "authorisedPermission" is required (not null)
            if (authorisedPermission == null)
            {
                throw new InvalidDataException("authorisedPermission is a required property for AuthorisedPermissionWithLookups and cannot be null");
            }
            else
            {
                this.AuthorisedPermission = authorisedPermission;
            }
            this.Lookups = lookups;
        }
        
        /// <summary>
        /// Gets or Sets AuthorisedPermission
        /// </summary>
        [DataMember(Name="authorisedPermission", EmitDefaultValue=false)]
        public AuthorisedPermission AuthorisedPermission { get; set; }

        /// <summary>
        /// Gets or Sets Lookups
        /// </summary>
        [DataMember(Name="lookups", EmitDefaultValue=false)]
        public Lookups Lookups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthorisedPermissionWithLookups {\n");
            sb.Append("  AuthorisedPermission: ").Append(AuthorisedPermission).Append("\n");
            sb.Append("  Lookups: ").Append(Lookups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthorisedPermissionWithLookups);
        }

        /// <summary>
        /// Returns true if AuthorisedPermissionWithLookups instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthorisedPermissionWithLookups to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthorisedPermissionWithLookups input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthorisedPermission == input.AuthorisedPermission ||
                    (this.AuthorisedPermission != null &&
                    this.AuthorisedPermission.Equals(input.AuthorisedPermission))
                ) && 
                (
                    this.Lookups == input.Lookups ||
                    (this.Lookups != null &&
                    this.Lookups.Equals(input.Lookups))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthorisedPermission != null)
                    hashCode = hashCode * 59 + this.AuthorisedPermission.GetHashCode();
                if (this.Lookups != null)
                    hashCode = hashCode * 59 + this.Lookups.GetHashCode();
                return hashCode;
            }
        }
    }
}
