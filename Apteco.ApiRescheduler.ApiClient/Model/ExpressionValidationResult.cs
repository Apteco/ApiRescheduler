/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Result of validating a particular expression
    /// </summary>
    [DataContract]
        public partial class ExpressionValidationResult :  IEquatable<ExpressionValidationResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpressionValidationResult" /> class.
        /// </summary>
        /// <param name="valid">Whether the expression is valid or not (required).</param>
        /// <param name="invalidReason">If the expression is invalid, the reason given for this.</param>
        /// <param name="systemName">The name of the FastStats system against which this expression has been validated.</param>
        /// <param name="messages">A list of messages associated with this result.</param>
        /// <param name="expression">expression.</param>
        public ExpressionValidationResult(bool? valid = default(bool?), string invalidReason = default(string), string systemName = default(string), List<ServerMessage> messages = default(List<ServerMessage>), Expression expression = default(Expression))
        {
            // to ensure "valid" is required (not null)
            if (valid == null)
            {
                throw new InvalidDataException("valid is a required property for ExpressionValidationResult and cannot be null");
            }
            else
            {
                this.Valid = valid;
            }
            this.InvalidReason = invalidReason;
            this.SystemName = systemName;
            this.Messages = messages;
            this.Expression = expression;
        }
        
        /// <summary>
        /// Whether the expression is valid or not
        /// </summary>
        /// <value>Whether the expression is valid or not</value>
        [DataMember(Name="valid", EmitDefaultValue=false)]
        public bool? Valid { get; set; }

        /// <summary>
        /// If the expression is invalid, the reason given for this
        /// </summary>
        /// <value>If the expression is invalid, the reason given for this</value>
        [DataMember(Name="invalidReason", EmitDefaultValue=false)]
        public string InvalidReason { get; set; }

        /// <summary>
        /// The name of the FastStats system against which this expression has been validated
        /// </summary>
        /// <value>The name of the FastStats system against which this expression has been validated</value>
        [DataMember(Name="systemName", EmitDefaultValue=false)]
        public string SystemName { get; set; }

        /// <summary>
        /// A list of messages associated with this result
        /// </summary>
        /// <value>A list of messages associated with this result</value>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<ServerMessage> Messages { get; set; }

        /// <summary>
        /// Gets or Sets Expression
        /// </summary>
        [DataMember(Name="expression", EmitDefaultValue=false)]
        public Expression Expression { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpressionValidationResult {\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  InvalidReason: ").Append(InvalidReason).Append("\n");
            sb.Append("  SystemName: ").Append(SystemName).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpressionValidationResult);
        }

        /// <summary>
        /// Returns true if ExpressionValidationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpressionValidationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpressionValidationResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Valid == input.Valid ||
                    (this.Valid != null &&
                    this.Valid.Equals(input.Valid))
                ) && 
                (
                    this.InvalidReason == input.InvalidReason ||
                    (this.InvalidReason != null &&
                    this.InvalidReason.Equals(input.InvalidReason))
                ) && 
                (
                    this.SystemName == input.SystemName ||
                    (this.SystemName != null &&
                    this.SystemName.Equals(input.SystemName))
                ) && 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    input.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                ) && 
                (
                    this.Expression == input.Expression ||
                    (this.Expression != null &&
                    this.Expression.Equals(input.Expression))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Valid != null)
                    hashCode = hashCode * 59 + this.Valid.GetHashCode();
                if (this.InvalidReason != null)
                    hashCode = hashCode * 59 + this.InvalidReason.GetHashCode();
                if (this.SystemName != null)
                    hashCode = hashCode * 59 + this.SystemName.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                if (this.Expression != null)
                    hashCode = hashCode * 59 + this.Expression.GetHashCode();
                return hashCode;
            }
        }
    }
}
