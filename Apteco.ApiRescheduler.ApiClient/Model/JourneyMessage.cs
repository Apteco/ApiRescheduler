/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// JourneyMessage
    /// </summary>
    [DataContract]
        public partial class JourneyMessage :  IEquatable<JourneyMessage>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JourneyMessage" /> class.
        /// </summary>
        /// <param name="messageId">messageId.</param>
        /// <param name="messageDescription">messageDescription.</param>
        /// <param name="channelId">channelId.</param>
        /// <param name="outputInstanceSettings">outputInstanceSettings.</param>
        public JourneyMessage(string messageId = default(string), string messageDescription = default(string), string channelId = default(string), OutputInstanceSettings outputInstanceSettings = default(OutputInstanceSettings))
        {
            this.MessageId = messageId;
            this.MessageDescription = messageDescription;
            this.ChannelId = channelId;
            this.OutputInstanceSettings = outputInstanceSettings;
        }
        
        /// <summary>
        /// Gets or Sets MessageId
        /// </summary>
        [DataMember(Name="messageId", EmitDefaultValue=false)]
        public string MessageId { get; set; }

        /// <summary>
        /// Gets or Sets MessageDescription
        /// </summary>
        [DataMember(Name="messageDescription", EmitDefaultValue=false)]
        public string MessageDescription { get; set; }

        /// <summary>
        /// Gets or Sets ChannelId
        /// </summary>
        [DataMember(Name="channelId", EmitDefaultValue=false)]
        public string ChannelId { get; set; }

        /// <summary>
        /// Gets or Sets OutputInstanceSettings
        /// </summary>
        [DataMember(Name="outputInstanceSettings", EmitDefaultValue=false)]
        public OutputInstanceSettings OutputInstanceSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JourneyMessage {\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  MessageDescription: ").Append(MessageDescription).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  OutputInstanceSettings: ").Append(OutputInstanceSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JourneyMessage);
        }

        /// <summary>
        /// Returns true if JourneyMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of JourneyMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JourneyMessage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MessageId == input.MessageId ||
                    (this.MessageId != null &&
                    this.MessageId.Equals(input.MessageId))
                ) && 
                (
                    this.MessageDescription == input.MessageDescription ||
                    (this.MessageDescription != null &&
                    this.MessageDescription.Equals(input.MessageDescription))
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.OutputInstanceSettings == input.OutputInstanceSettings ||
                    (this.OutputInstanceSettings != null &&
                    this.OutputInstanceSettings.Equals(input.OutputInstanceSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MessageId != null)
                    hashCode = hashCode * 59 + this.MessageId.GetHashCode();
                if (this.MessageDescription != null)
                    hashCode = hashCode * 59 + this.MessageDescription.GetHashCode();
                if (this.ChannelId != null)
                    hashCode = hashCode * 59 + this.ChannelId.GetHashCode();
                if (this.OutputInstanceSettings != null)
                    hashCode = hashCode * 59 + this.OutputInstanceSettings.GetHashCode();
                return hashCode;
            }
        }
    }
}
