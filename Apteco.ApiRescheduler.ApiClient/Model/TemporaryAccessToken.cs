/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// The details for a newly created temporary access token
    /// </summary>
    [DataContract]
        public partial class TemporaryAccessToken :  IEquatable<TemporaryAccessToken>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemporaryAccessToken" /> class.
        /// </summary>
        /// <param name="accessToken">The access token that needs to be included when making requests that use temporary authentication (required).</param>
        /// <param name="userId">The user id that the token is assigned to (required).</param>
        /// <param name="resourcePath">The resource path that can be access by token (required).</param>
        /// <param name="expiry">The expiry for this token (required).</param>
        public TemporaryAccessToken(string accessToken = default(string), int? userId = default(int?), string resourcePath = default(string), DateTime? expiry = default(DateTime?))
        {
            // to ensure "accessToken" is required (not null)
            if (accessToken == null)
            {
                throw new InvalidDataException("accessToken is a required property for TemporaryAccessToken and cannot be null");
            }
            else
            {
                this.AccessToken = accessToken;
            }
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for TemporaryAccessToken and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }
            // to ensure "resourcePath" is required (not null)
            if (resourcePath == null)
            {
                throw new InvalidDataException("resourcePath is a required property for TemporaryAccessToken and cannot be null");
            }
            else
            {
                this.ResourcePath = resourcePath;
            }
            // to ensure "expiry" is required (not null)
            if (expiry == null)
            {
                throw new InvalidDataException("expiry is a required property for TemporaryAccessToken and cannot be null");
            }
            else
            {
                this.Expiry = expiry;
            }
        }
        
        /// <summary>
        /// The access token that needs to be included when making requests that use temporary authentication
        /// </summary>
        /// <value>The access token that needs to be included when making requests that use temporary authentication</value>
        [DataMember(Name="accessToken", EmitDefaultValue=false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// The user id that the token is assigned to
        /// </summary>
        /// <value>The user id that the token is assigned to</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// The resource path that can be access by token
        /// </summary>
        /// <value>The resource path that can be access by token</value>
        [DataMember(Name="resourcePath", EmitDefaultValue=false)]
        public string ResourcePath { get; set; }

        /// <summary>
        /// The expiry for this token
        /// </summary>
        /// <value>The expiry for this token</value>
        [DataMember(Name="expiry", EmitDefaultValue=false)]
        public DateTime? Expiry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemporaryAccessToken {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ResourcePath: ").Append(ResourcePath).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemporaryAccessToken);
        }

        /// <summary>
        /// Returns true if TemporaryAccessToken instances are equal
        /// </summary>
        /// <param name="input">Instance of TemporaryAccessToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemporaryAccessToken input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.ResourcePath == input.ResourcePath ||
                    (this.ResourcePath != null &&
                    this.ResourcePath.Equals(input.ResourcePath))
                ) && 
                (
                    this.Expiry == input.Expiry ||
                    (this.Expiry != null &&
                    this.Expiry.Equals(input.Expiry))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessToken != null)
                    hashCode = hashCode * 59 + this.AccessToken.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.ResourcePath != null)
                    hashCode = hashCode * 59 + this.ResourcePath.GetHashCode();
                if (this.Expiry != null)
                    hashCode = hashCode * 59 + this.Expiry.GetHashCode();
                return hashCode;
            }
        }
    }
}
