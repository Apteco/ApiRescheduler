/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// CalculateDashboardItemJobCreatedResult
    /// </summary>
    [DataContract]
        public partial class CalculateDashboardItemJobCreatedResult :  IEquatable<CalculateDashboardItemJobCreatedResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculateDashboardItemJobCreatedResult" /> class.
        /// </summary>
        /// <param name="dashboardItemId">dashboardItemId.</param>
        /// <param name="drillDownLevel">drillDownLevel.</param>
        /// <param name="jobId">jobId.</param>
        public CalculateDashboardItemJobCreatedResult(string dashboardItemId = default(string), int? drillDownLevel = default(int?), int? jobId = default(int?))
        {
            this.DashboardItemId = dashboardItemId;
            this.DrillDownLevel = drillDownLevel;
            this.JobId = jobId;
        }
        
        /// <summary>
        /// Gets or Sets DashboardItemId
        /// </summary>
        [DataMember(Name="dashboardItemId", EmitDefaultValue=false)]
        public string DashboardItemId { get; set; }

        /// <summary>
        /// Gets or Sets DrillDownLevel
        /// </summary>
        [DataMember(Name="drillDownLevel", EmitDefaultValue=false)]
        public int? DrillDownLevel { get; set; }

        /// <summary>
        /// Gets or Sets JobId
        /// </summary>
        [DataMember(Name="jobId", EmitDefaultValue=false)]
        public int? JobId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CalculateDashboardItemJobCreatedResult {\n");
            sb.Append("  DashboardItemId: ").Append(DashboardItemId).Append("\n");
            sb.Append("  DrillDownLevel: ").Append(DrillDownLevel).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CalculateDashboardItemJobCreatedResult);
        }

        /// <summary>
        /// Returns true if CalculateDashboardItemJobCreatedResult instances are equal
        /// </summary>
        /// <param name="input">Instance of CalculateDashboardItemJobCreatedResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CalculateDashboardItemJobCreatedResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DashboardItemId == input.DashboardItemId ||
                    (this.DashboardItemId != null &&
                    this.DashboardItemId.Equals(input.DashboardItemId))
                ) && 
                (
                    this.DrillDownLevel == input.DrillDownLevel ||
                    (this.DrillDownLevel != null &&
                    this.DrillDownLevel.Equals(input.DrillDownLevel))
                ) && 
                (
                    this.JobId == input.JobId ||
                    (this.JobId != null &&
                    this.JobId.Equals(input.JobId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DashboardItemId != null)
                    hashCode = hashCode * 59 + this.DashboardItemId.GetHashCode();
                if (this.DrillDownLevel != null)
                    hashCode = hashCode * 59 + this.DrillDownLevel.GetHashCode();
                if (this.JobId != null)
                    hashCode = hashCode * 59 + this.JobId.GetHashCode();
                return hashCode;
            }
        }
    }
}
