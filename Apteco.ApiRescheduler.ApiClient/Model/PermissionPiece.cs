/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// PermissionPiece
    /// </summary>
    [DataContract]
        public partial class PermissionPiece :  IEquatable<PermissionPiece>
    {
        /// <summary>
        /// Defines PieceValue
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PieceValueEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,
            /// <summary>
            /// Enum Grant for value: Grant
            /// </summary>
            [EnumMember(Value = "Grant")]
            Grant = 2,
            /// <summary>
            /// Enum Deny for value: Deny
            /// </summary>
            [EnumMember(Value = "Deny")]
            Deny = 3        }
        /// <summary>
        /// Gets or Sets PieceValue
        /// </summary>
        [DataMember(Name="pieceValue", EmitDefaultValue=false)]
        public PieceValueEnum PieceValue { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionPiece" /> class.
        /// </summary>
        /// <param name="permissionPieceString">permissionPieceString (required).</param>
        /// <param name="pieceValue">pieceValue (required).</param>
        public PermissionPiece(string permissionPieceString = default(string), PieceValueEnum pieceValue = default(PieceValueEnum))
        {
            // to ensure "permissionPieceString" is required (not null)
            if (permissionPieceString == null)
            {
                throw new InvalidDataException("permissionPieceString is a required property for PermissionPiece and cannot be null");
            }
            else
            {
                this.PermissionPieceString = permissionPieceString;
            }
            // to ensure "pieceValue" is required (not null)
            if (pieceValue == null)
            {
                throw new InvalidDataException("pieceValue is a required property for PermissionPiece and cannot be null");
            }
            else
            {
                this.PieceValue = pieceValue;
            }
        }
        
        /// <summary>
        /// Gets or Sets PermissionPieceString
        /// </summary>
        [DataMember(Name="permissionPieceString", EmitDefaultValue=false)]
        public string PermissionPieceString { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PermissionPiece {\n");
            sb.Append("  PermissionPieceString: ").Append(PermissionPieceString).Append("\n");
            sb.Append("  PieceValue: ").Append(PieceValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PermissionPiece);
        }

        /// <summary>
        /// Returns true if PermissionPiece instances are equal
        /// </summary>
        /// <param name="input">Instance of PermissionPiece to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PermissionPiece input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PermissionPieceString == input.PermissionPieceString ||
                    (this.PermissionPieceString != null &&
                    this.PermissionPieceString.Equals(input.PermissionPieceString))
                ) && 
                (
                    this.PieceValue == input.PieceValue ||
                    (this.PieceValue != null &&
                    this.PieceValue.Equals(input.PieceValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PermissionPieceString != null)
                    hashCode = hashCode * 59 + this.PermissionPieceString.GetHashCode();
                if (this.PieceValue != null)
                    hashCode = hashCode * 59 + this.PieceValue.GetHashCode();
                return hashCode;
            }
        }
    }
}
