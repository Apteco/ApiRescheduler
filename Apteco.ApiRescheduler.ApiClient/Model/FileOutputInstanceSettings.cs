/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details for a BroadcastOutputSettings
    /// </summary>
    [DataContract]
        public partial class FileOutputInstanceSettings :  IEquatable<FileOutputInstanceSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileOutputInstanceSettings" /> class.
        /// </summary>
        /// <param name="folderPath">folderPath.</param>
        /// <param name="filename">filename.</param>
        /// <param name="addCommunicationKey">addCommunicationKey.</param>
        /// <param name="overwrite">overwrite.</param>
        public FileOutputInstanceSettings(AttributeValue folderPath = default(AttributeValue), AttributeValue filename = default(AttributeValue), bool? addCommunicationKey = default(bool?), bool? overwrite = default(bool?))
        {
            this.FolderPath = folderPath;
            this.Filename = filename;
            this.AddCommunicationKey = addCommunicationKey;
            this.Overwrite = overwrite;
        }
        
        /// <summary>
        /// Gets or Sets FolderPath
        /// </summary>
        [DataMember(Name="folderPath", EmitDefaultValue=false)]
        public AttributeValue FolderPath { get; set; }

        /// <summary>
        /// Gets or Sets Filename
        /// </summary>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public AttributeValue Filename { get; set; }

        /// <summary>
        /// Gets or Sets AddCommunicationKey
        /// </summary>
        [DataMember(Name="addCommunicationKey", EmitDefaultValue=false)]
        public bool? AddCommunicationKey { get; set; }

        /// <summary>
        /// Gets or Sets Overwrite
        /// </summary>
        [DataMember(Name="overwrite", EmitDefaultValue=false)]
        public bool? Overwrite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileOutputInstanceSettings {\n");
            sb.Append("  FolderPath: ").Append(FolderPath).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  AddCommunicationKey: ").Append(AddCommunicationKey).Append("\n");
            sb.Append("  Overwrite: ").Append(Overwrite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileOutputInstanceSettings);
        }

        /// <summary>
        /// Returns true if FileOutputInstanceSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of FileOutputInstanceSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileOutputInstanceSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FolderPath == input.FolderPath ||
                    (this.FolderPath != null &&
                    this.FolderPath.Equals(input.FolderPath))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.AddCommunicationKey == input.AddCommunicationKey ||
                    (this.AddCommunicationKey != null &&
                    this.AddCommunicationKey.Equals(input.AddCommunicationKey))
                ) && 
                (
                    this.Overwrite == input.Overwrite ||
                    (this.Overwrite != null &&
                    this.Overwrite.Equals(input.Overwrite))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FolderPath != null)
                    hashCode = hashCode * 59 + this.FolderPath.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.AddCommunicationKey != null)
                    hashCode = hashCode * 59 + this.AddCommunicationKey.GetHashCode();
                if (this.Overwrite != null)
                    hashCode = hashCode * 59 + this.Overwrite.GetHashCode();
                return hashCode;
            }
        }
    }
}
