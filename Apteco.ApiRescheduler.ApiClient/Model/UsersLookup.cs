/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Lookup information for users and groups returned in a result
    /// </summary>
    [DataContract]
        public partial class UsersLookup :  IEquatable<UsersLookup>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsersLookup" /> class.
        /// </summary>
        /// <param name="userLookup">A list of users.</param>
        /// <param name="groupLookup">A list of groups.</param>
        public UsersLookup(List<UserSummary> userLookup = default(List<UserSummary>), List<GroupSummary> groupLookup = default(List<GroupSummary>))
        {
            this.UserLookup = userLookup;
            this.GroupLookup = groupLookup;
        }
        
        /// <summary>
        /// A list of users
        /// </summary>
        /// <value>A list of users</value>
        [DataMember(Name="userLookup", EmitDefaultValue=false)]
        public List<UserSummary> UserLookup { get; set; }

        /// <summary>
        /// A list of groups
        /// </summary>
        /// <value>A list of groups</value>
        [DataMember(Name="groupLookup", EmitDefaultValue=false)]
        public List<GroupSummary> GroupLookup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsersLookup {\n");
            sb.Append("  UserLookup: ").Append(UserLookup).Append("\n");
            sb.Append("  GroupLookup: ").Append(GroupLookup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsersLookup);
        }

        /// <summary>
        /// Returns true if UsersLookup instances are equal
        /// </summary>
        /// <param name="input">Instance of UsersLookup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsersLookup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserLookup == input.UserLookup ||
                    this.UserLookup != null &&
                    input.UserLookup != null &&
                    this.UserLookup.SequenceEqual(input.UserLookup)
                ) && 
                (
                    this.GroupLookup == input.GroupLookup ||
                    this.GroupLookup != null &&
                    input.GroupLookup != null &&
                    this.GroupLookup.SequenceEqual(input.GroupLookup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserLookup != null)
                    hashCode = hashCode * 59 + this.UserLookup.GetHashCode();
                if (this.GroupLookup != null)
                    hashCode = hashCode * 59 + this.GroupLookup.GetHashCode();
                return hashCode;
            }
        }
    }
}
