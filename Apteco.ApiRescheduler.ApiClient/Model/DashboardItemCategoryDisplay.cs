/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// The details of a dashboard item category display
    /// </summary>
    [DataContract]
        public partial class DashboardItemCategoryDisplay :  IEquatable<DashboardItemCategoryDisplay>
    {
        /// <summary>
        /// The filter type to filter the dashboard item categories
        /// </summary>
        /// <value>The filter type to filter the dashboard item categories</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DisplayTypeEnum
        {
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 1,
            /// <summary>
            /// Enum Top for value: Top
            /// </summary>
            [EnumMember(Value = "Top")]
            Top = 2,
            /// <summary>
            /// Enum Bottom for value: Bottom
            /// </summary>
            [EnumMember(Value = "Bottom")]
            Bottom = 3,
            /// <summary>
            /// Enum PercentageTotal for value: PercentageTotal
            /// </summary>
            [EnumMember(Value = "PercentageTotal")]
            PercentageTotal = 4,
            /// <summary>
            /// Enum CategoryPercentageTotal for value: CategoryPercentageTotal
            /// </summary>
            [EnumMember(Value = "CategoryPercentageTotal")]
            CategoryPercentageTotal = 5        }
        /// <summary>
        /// The filter type to filter the dashboard item categories
        /// </summary>
        /// <value>The filter type to filter the dashboard item categories</value>
        [DataMember(Name="displayType", EmitDefaultValue=false)]
        public DisplayTypeEnum DisplayType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardItemCategoryDisplay" /> class.
        /// </summary>
        /// <param name="displayType">The filter type to filter the dashboard item categories (required).</param>
        /// <param name="limit">The limit to use when displaying the dashboard item categories (required).</param>
        /// <param name="autoAdjust">Whether to auto adjust the limit to the optimum value given the available tile space.</param>
        /// <param name="userAdjust">Whether to allow the user to adjust the category display.</param>
        public DashboardItemCategoryDisplay(DisplayTypeEnum displayType = default(DisplayTypeEnum), int? limit = default(int?), bool? autoAdjust = default(bool?), bool? userAdjust = default(bool?))
        {
            // to ensure "displayType" is required (not null)
            if (displayType == null)
            {
                throw new InvalidDataException("displayType is a required property for DashboardItemCategoryDisplay and cannot be null");
            }
            else
            {
                this.DisplayType = displayType;
            }
            // to ensure "limit" is required (not null)
            if (limit == null)
            {
                throw new InvalidDataException("limit is a required property for DashboardItemCategoryDisplay and cannot be null");
            }
            else
            {
                this.Limit = limit;
            }
            this.AutoAdjust = autoAdjust;
            this.UserAdjust = userAdjust;
        }
        

        /// <summary>
        /// The limit to use when displaying the dashboard item categories
        /// </summary>
        /// <value>The limit to use when displaying the dashboard item categories</value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public int? Limit { get; set; }

        /// <summary>
        /// Whether to auto adjust the limit to the optimum value given the available tile space
        /// </summary>
        /// <value>Whether to auto adjust the limit to the optimum value given the available tile space</value>
        [DataMember(Name="autoAdjust", EmitDefaultValue=false)]
        public bool? AutoAdjust { get; set; }

        /// <summary>
        /// Whether to allow the user to adjust the category display
        /// </summary>
        /// <value>Whether to allow the user to adjust the category display</value>
        [DataMember(Name="userAdjust", EmitDefaultValue=false)]
        public bool? UserAdjust { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DashboardItemCategoryDisplay {\n");
            sb.Append("  DisplayType: ").Append(DisplayType).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  AutoAdjust: ").Append(AutoAdjust).Append("\n");
            sb.Append("  UserAdjust: ").Append(UserAdjust).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DashboardItemCategoryDisplay);
        }

        /// <summary>
        /// Returns true if DashboardItemCategoryDisplay instances are equal
        /// </summary>
        /// <param name="input">Instance of DashboardItemCategoryDisplay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DashboardItemCategoryDisplay input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayType == input.DisplayType ||
                    (this.DisplayType != null &&
                    this.DisplayType.Equals(input.DisplayType))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && 
                (
                    this.AutoAdjust == input.AutoAdjust ||
                    (this.AutoAdjust != null &&
                    this.AutoAdjust.Equals(input.AutoAdjust))
                ) && 
                (
                    this.UserAdjust == input.UserAdjust ||
                    (this.UserAdjust != null &&
                    this.UserAdjust.Equals(input.UserAdjust))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayType != null)
                    hashCode = hashCode * 59 + this.DisplayType.GetHashCode();
                if (this.Limit != null)
                    hashCode = hashCode * 59 + this.Limit.GetHashCode();
                if (this.AutoAdjust != null)
                    hashCode = hashCode * 59 + this.AutoAdjust.GetHashCode();
                if (this.UserAdjust != null)
                    hashCode = hashCode * 59 + this.UserAdjust.GetHashCode();
                return hashCode;
            }
        }
    }
}
