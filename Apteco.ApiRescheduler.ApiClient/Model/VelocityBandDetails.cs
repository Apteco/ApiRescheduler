/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Velocity details for a system
    /// </summary>
    [DataContract]
        public partial class VelocityBandDetails :  IEquatable<VelocityBandDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VelocityBandDetails" /> class.
        /// </summary>
        /// <param name="velocityBands">The velocity bands (required).</param>
        public VelocityBandDetails(List<VelocityBand> velocityBands = default(List<VelocityBand>))
        {
            // to ensure "velocityBands" is required (not null)
            if (velocityBands == null)
            {
                throw new InvalidDataException("velocityBands is a required property for VelocityBandDetails and cannot be null");
            }
            else
            {
                this.VelocityBands = velocityBands;
            }
        }
        
        /// <summary>
        /// The velocity bands
        /// </summary>
        /// <value>The velocity bands</value>
        [DataMember(Name="velocityBands", EmitDefaultValue=false)]
        public List<VelocityBand> VelocityBands { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VelocityBandDetails {\n");
            sb.Append("  VelocityBands: ").Append(VelocityBands).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VelocityBandDetails);
        }

        /// <summary>
        /// Returns true if VelocityBandDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of VelocityBandDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VelocityBandDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VelocityBands == input.VelocityBands ||
                    this.VelocityBands != null &&
                    input.VelocityBands != null &&
                    this.VelocityBands.SequenceEqual(input.VelocityBands)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VelocityBands != null)
                    hashCode = hashCode * 59 + this.VelocityBands.GetHashCode();
                return hashCode;
            }
        }
    }
}
