/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// AudienceWorkbookItemDetail
    /// </summary>
    [DataContract]
        public partial class AudienceWorkbookItemDetail :  IEquatable<AudienceWorkbookItemDetail>
    {
        /// <summary>
        /// The audience workbook item detail type
        /// </summary>
        /// <value>The audience workbook item detail type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum WorkbookItemTypeEnum
        {
            /// <summary>
            /// Enum Check for value: Check
            /// </summary>
            [EnumMember(Value = "Check")]
            Check = 1,
            /// <summary>
            /// Enum Export for value: Export
            /// </summary>
            [EnumMember(Value = "Export")]
            Export = 2,
            /// <summary>
            /// Enum Cube for value: Cube
            /// </summary>
            [EnumMember(Value = "Cube")]
            Cube = 3,
            /// <summary>
            /// Enum Chart for value: Chart
            /// </summary>
            [EnumMember(Value = "Chart")]
            Chart = 4        }
        /// <summary>
        /// The audience workbook item detail type
        /// </summary>
        /// <value>The audience workbook item detail type</value>
        [DataMember(Name="workbookItemType", EmitDefaultValue=false)]
        public WorkbookItemTypeEnum WorkbookItemType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceWorkbookItemDetail" /> class.
        /// </summary>
        /// <param name="id">The audience workbook item detail id (required).</param>
        /// <param name="workbookItemType">The audience workbook item detail type (required).</param>
        /// <param name="definition">definition (required).</param>
        public AudienceWorkbookItemDetail(int? id = default(int?), WorkbookItemTypeEnum workbookItemType = default(WorkbookItemTypeEnum), AbstractAnalysisItemDefinition definition = default(AbstractAnalysisItemDefinition))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for AudienceWorkbookItemDetail and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "workbookItemType" is required (not null)
            if (workbookItemType == null)
            {
                throw new InvalidDataException("workbookItemType is a required property for AudienceWorkbookItemDetail and cannot be null");
            }
            else
            {
                this.WorkbookItemType = workbookItemType;
            }
            // to ensure "definition" is required (not null)
            if (definition == null)
            {
                throw new InvalidDataException("definition is a required property for AudienceWorkbookItemDetail and cannot be null");
            }
            else
            {
                this.Definition = definition;
            }
        }
        
        /// <summary>
        /// The audience workbook item detail id
        /// </summary>
        /// <value>The audience workbook item detail id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }


        /// <summary>
        /// Gets or Sets Definition
        /// </summary>
        [DataMember(Name="definition", EmitDefaultValue=false)]
        public AbstractAnalysisItemDefinition Definition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AudienceWorkbookItemDetail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  WorkbookItemType: ").Append(WorkbookItemType).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudienceWorkbookItemDetail);
        }

        /// <summary>
        /// Returns true if AudienceWorkbookItemDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of AudienceWorkbookItemDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudienceWorkbookItemDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.WorkbookItemType == input.WorkbookItemType ||
                    (this.WorkbookItemType != null &&
                    this.WorkbookItemType.Equals(input.WorkbookItemType))
                ) && 
                (
                    this.Definition == input.Definition ||
                    (this.Definition != null &&
                    this.Definition.Equals(input.Definition))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.WorkbookItemType != null)
                    hashCode = hashCode * 59 + this.WorkbookItemType.GetHashCode();
                if (this.Definition != null)
                    hashCode = hashCode * 59 + this.Definition.GetHashCode();
                return hashCode;
            }
        }
    }
}
