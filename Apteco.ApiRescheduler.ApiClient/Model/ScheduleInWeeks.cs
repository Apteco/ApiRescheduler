/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details for a schedule based on weeks
    /// </summary>
    [DataContract]
        public partial class ScheduleInWeeks :  IEquatable<ScheduleInWeeks>
    {
        /// <summary>
        /// Defines ScheduleDateType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ScheduleDateTypeEnum
        {
            /// <summary>
            /// Enum FixedDateSchedule for value: FixedDateSchedule
            /// </summary>
            [EnumMember(Value = "FixedDateSchedule")]
            FixedDateSchedule = 1,
            /// <summary>
            /// Enum DateRuleSchedule for value: DateRuleSchedule
            /// </summary>
            [EnumMember(Value = "DateRuleSchedule")]
            DateRuleSchedule = 2        }
        /// <summary>
        /// Gets or Sets ScheduleDateType
        /// </summary>
        [DataMember(Name="scheduleDateType", EmitDefaultValue=false)]
        public ScheduleDateTypeEnum? ScheduleDateType { get; set; }
        /// <summary>
        /// Defines PredefinedDateRule
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PredefinedDateRuleEnum
        {
            /// <summary>
            /// Enum DateRange for value: DateRange
            /// </summary>
            [EnumMember(Value = "DateRange")]
            DateRange = 1,
            /// <summary>
            /// Enum AdhocDates for value: AdhocDates
            /// </summary>
            [EnumMember(Value = "AdhocDates")]
            AdhocDates = 2,
            /// <summary>
            /// Enum AdhocValues for value: AdhocValues
            /// </summary>
            [EnumMember(Value = "AdhocValues")]
            AdhocValues = 3,
            /// <summary>
            /// Enum BeforeToday for value: BeforeToday
            /// </summary>
            [EnumMember(Value = "BeforeToday")]
            BeforeToday = 4,
            /// <summary>
            /// Enum Today for value: Today
            /// </summary>
            [EnumMember(Value = "Today")]
            Today = 5,
            /// <summary>
            /// Enum AfterToday for value: AfterToday
            /// </summary>
            [EnumMember(Value = "AfterToday")]
            AfterToday = 6,
            /// <summary>
            /// Enum Yesterday for value: Yesterday
            /// </summary>
            [EnumMember(Value = "Yesterday")]
            Yesterday = 7,
            /// <summary>
            /// Enum Tomorrow for value: Tomorrow
            /// </summary>
            [EnumMember(Value = "Tomorrow")]
            Tomorrow = 8,
            /// <summary>
            /// Enum ThisWeek for value: ThisWeek
            /// </summary>
            [EnumMember(Value = "ThisWeek")]
            ThisWeek = 9,
            /// <summary>
            /// Enum ThisMonth for value: ThisMonth
            /// </summary>
            [EnumMember(Value = "ThisMonth")]
            ThisMonth = 10,
            /// <summary>
            /// Enum ThisQuarter for value: ThisQuarter
            /// </summary>
            [EnumMember(Value = "ThisQuarter")]
            ThisQuarter = 11,
            /// <summary>
            /// Enum ThisYear for value: ThisYear
            /// </summary>
            [EnumMember(Value = "ThisYear")]
            ThisYear = 12,
            /// <summary>
            /// Enum LastWeek for value: LastWeek
            /// </summary>
            [EnumMember(Value = "LastWeek")]
            LastWeek = 13,
            /// <summary>
            /// Enum Last4Weeks for value: Last4Weeks
            /// </summary>
            [EnumMember(Value = "Last4Weeks")]
            Last4Weeks = 14,
            /// <summary>
            /// Enum LastMonth for value: LastMonth
            /// </summary>
            [EnumMember(Value = "LastMonth")]
            LastMonth = 15,
            /// <summary>
            /// Enum LastQuarter for value: LastQuarter
            /// </summary>
            [EnumMember(Value = "LastQuarter")]
            LastQuarter = 16,
            /// <summary>
            /// Enum LastYear for value: LastYear
            /// </summary>
            [EnumMember(Value = "LastYear")]
            LastYear = 17,
            /// <summary>
            /// Enum NextWeek for value: NextWeek
            /// </summary>
            [EnumMember(Value = "NextWeek")]
            NextWeek = 18,
            /// <summary>
            /// Enum Next4Weeks for value: Next4Weeks
            /// </summary>
            [EnumMember(Value = "Next4Weeks")]
            Next4Weeks = 19,
            /// <summary>
            /// Enum NextMonth for value: NextMonth
            /// </summary>
            [EnumMember(Value = "NextMonth")]
            NextMonth = 20,
            /// <summary>
            /// Enum NextQuarter for value: NextQuarter
            /// </summary>
            [EnumMember(Value = "NextQuarter")]
            NextQuarter = 21,
            /// <summary>
            /// Enum NextYear for value: NextYear
            /// </summary>
            [EnumMember(Value = "NextYear")]
            NextYear = 22,
            /// <summary>
            /// Enum ThisWeekToDate for value: ThisWeekToDate
            /// </summary>
            [EnumMember(Value = "ThisWeekToDate")]
            ThisWeekToDate = 23,
            /// <summary>
            /// Enum ThisMonthToDate for value: ThisMonthToDate
            /// </summary>
            [EnumMember(Value = "ThisMonthToDate")]
            ThisMonthToDate = 24,
            /// <summary>
            /// Enum ThisQuarterToDate for value: ThisQuarterToDate
            /// </summary>
            [EnumMember(Value = "ThisQuarterToDate")]
            ThisQuarterToDate = 25,
            /// <summary>
            /// Enum ThisYearToDate for value: ThisYearToDate
            /// </summary>
            [EnumMember(Value = "ThisYearToDate")]
            ThisYearToDate = 26,
            /// <summary>
            /// Enum LastWeekToDate for value: LastWeekToDate
            /// </summary>
            [EnumMember(Value = "LastWeekToDate")]
            LastWeekToDate = 27,
            /// <summary>
            /// Enum LastMonthToDate for value: LastMonthToDate
            /// </summary>
            [EnumMember(Value = "LastMonthToDate")]
            LastMonthToDate = 28,
            /// <summary>
            /// Enum LastQuarterToDate for value: LastQuarterToDate
            /// </summary>
            [EnumMember(Value = "LastQuarterToDate")]
            LastQuarterToDate = 29,
            /// <summary>
            /// Enum LastYearToDate for value: LastYearToDate
            /// </summary>
            [EnumMember(Value = "LastYearToDate")]
            LastYearToDate = 30,
            /// <summary>
            /// Enum TheLastWeek for value: TheLastWeek
            /// </summary>
            [EnumMember(Value = "TheLastWeek")]
            TheLastWeek = 31,
            /// <summary>
            /// Enum TheLast4Weeks for value: TheLast4Weeks
            /// </summary>
            [EnumMember(Value = "TheLast4Weeks")]
            TheLast4Weeks = 32,
            /// <summary>
            /// Enum TheLastMonth for value: TheLastMonth
            /// </summary>
            [EnumMember(Value = "TheLastMonth")]
            TheLastMonth = 33,
            /// <summary>
            /// Enum TheLastQuarter for value: TheLastQuarter
            /// </summary>
            [EnumMember(Value = "TheLastQuarter")]
            TheLastQuarter = 34,
            /// <summary>
            /// Enum TheLastYear for value: TheLastYear
            /// </summary>
            [EnumMember(Value = "TheLastYear")]
            TheLastYear = 35,
            /// <summary>
            /// Enum TheNextWeek for value: TheNextWeek
            /// </summary>
            [EnumMember(Value = "TheNextWeek")]
            TheNextWeek = 36,
            /// <summary>
            /// Enum TheNext4Weeks for value: TheNext4Weeks
            /// </summary>
            [EnumMember(Value = "TheNext4Weeks")]
            TheNext4Weeks = 37,
            /// <summary>
            /// Enum TheNextMonth for value: TheNextMonth
            /// </summary>
            [EnumMember(Value = "TheNextMonth")]
            TheNextMonth = 38,
            /// <summary>
            /// Enum TheNextQuarter for value: TheNextQuarter
            /// </summary>
            [EnumMember(Value = "TheNextQuarter")]
            TheNextQuarter = 39,
            /// <summary>
            /// Enum TheNextYear for value: TheNextYear
            /// </summary>
            [EnumMember(Value = "TheNextYear")]
            TheNextYear = 40,
            /// <summary>
            /// Enum ThisBusinessMonth for value: ThisBusinessMonth
            /// </summary>
            [EnumMember(Value = "ThisBusinessMonth")]
            ThisBusinessMonth = 41,
            /// <summary>
            /// Enum ThisBusinessQuarter for value: ThisBusinessQuarter
            /// </summary>
            [EnumMember(Value = "ThisBusinessQuarter")]
            ThisBusinessQuarter = 42,
            /// <summary>
            /// Enum ThisBusinessYear for value: ThisBusinessYear
            /// </summary>
            [EnumMember(Value = "ThisBusinessYear")]
            ThisBusinessYear = 43,
            /// <summary>
            /// Enum LastBusinessMonth for value: LastBusinessMonth
            /// </summary>
            [EnumMember(Value = "LastBusinessMonth")]
            LastBusinessMonth = 44,
            /// <summary>
            /// Enum LastBusinessQuarter for value: LastBusinessQuarter
            /// </summary>
            [EnumMember(Value = "LastBusinessQuarter")]
            LastBusinessQuarter = 45,
            /// <summary>
            /// Enum LastBusinessYear for value: LastBusinessYear
            /// </summary>
            [EnumMember(Value = "LastBusinessYear")]
            LastBusinessYear = 46,
            /// <summary>
            /// Enum NextBusinessMonth for value: NextBusinessMonth
            /// </summary>
            [EnumMember(Value = "NextBusinessMonth")]
            NextBusinessMonth = 47,
            /// <summary>
            /// Enum NextBusinessQuarter for value: NextBusinessQuarter
            /// </summary>
            [EnumMember(Value = "NextBusinessQuarter")]
            NextBusinessQuarter = 48,
            /// <summary>
            /// Enum NextBusinessYear for value: NextBusinessYear
            /// </summary>
            [EnumMember(Value = "NextBusinessYear")]
            NextBusinessYear = 49,
            /// <summary>
            /// Enum ThisBusinessMonthToDate for value: ThisBusinessMonthToDate
            /// </summary>
            [EnumMember(Value = "ThisBusinessMonthToDate")]
            ThisBusinessMonthToDate = 50,
            /// <summary>
            /// Enum ThisBusinessQuarterToDate for value: ThisBusinessQuarterToDate
            /// </summary>
            [EnumMember(Value = "ThisBusinessQuarterToDate")]
            ThisBusinessQuarterToDate = 51,
            /// <summary>
            /// Enum ThisBusinessYearToDate for value: ThisBusinessYearToDate
            /// </summary>
            [EnumMember(Value = "ThisBusinessYearToDate")]
            ThisBusinessYearToDate = 52,
            /// <summary>
            /// Enum LastBusinessMonthToDate for value: LastBusinessMonthToDate
            /// </summary>
            [EnumMember(Value = "LastBusinessMonthToDate")]
            LastBusinessMonthToDate = 53,
            /// <summary>
            /// Enum LastBusinessQuarterToDate for value: LastBusinessQuarterToDate
            /// </summary>
            [EnumMember(Value = "LastBusinessQuarterToDate")]
            LastBusinessQuarterToDate = 54,
            /// <summary>
            /// Enum LastBusinessYearToDate for value: LastBusinessYearToDate
            /// </summary>
            [EnumMember(Value = "LastBusinessYearToDate")]
            LastBusinessYearToDate = 55,
            /// <summary>
            /// Enum CustomRule for value: CustomRule
            /// </summary>
            [EnumMember(Value = "CustomRule")]
            CustomRule = 56,
            /// <summary>
            /// Enum CustomAgeRule for value: CustomAgeRule
            /// </summary>
            [EnumMember(Value = "CustomAgeRule")]
            CustomAgeRule = 57,
            /// <summary>
            /// Enum CustomTimeRule for value: CustomTimeRule
            /// </summary>
            [EnumMember(Value = "CustomTimeRule")]
            CustomTimeRule = 58        }
        /// <summary>
        /// Gets or Sets PredefinedDateRule
        /// </summary>
        [DataMember(Name="predefinedDateRule", EmitDefaultValue=false)]
        public PredefinedDateRuleEnum? PredefinedDateRule { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleInWeeks" /> class.
        /// </summary>
        /// <param name="periodInWeeks">periodInWeeks.</param>
        /// <param name="includeMonday">includeMonday.</param>
        /// <param name="includeTuesday">includeTuesday.</param>
        /// <param name="includeWednesday">includeWednesday.</param>
        /// <param name="includeThursday">includeThursday.</param>
        /// <param name="includeFriday">includeFriday.</param>
        /// <param name="includeSaturday">includeSaturday.</param>
        /// <param name="includeSunday">includeSunday.</param>
        /// <param name="scheduleDateType">scheduleDateType.</param>
        /// <param name="timeOfDay">timeOfDay.</param>
        /// <param name="start">start.</param>
        /// <param name="end">end.</param>
        /// <param name="scheduleDateRule">scheduleDateRule.</param>
        /// <param name="predefinedDateRule">predefinedDateRule.</param>
        /// <param name="id">id.</param>
        public ScheduleInWeeks(int? periodInWeeks = default(int?), bool? includeMonday = default(bool?), bool? includeTuesday = default(bool?), bool? includeWednesday = default(bool?), bool? includeThursday = default(bool?), bool? includeFriday = default(bool?), bool? includeSaturday = default(bool?), bool? includeSunday = default(bool?), ScheduleDateTypeEnum? scheduleDateType = default(ScheduleDateTypeEnum?), string timeOfDay = default(string), DateTimeAndZone start = default(DateTimeAndZone), DateTimeAndZone end = default(DateTimeAndZone), ScheduleDateRule scheduleDateRule = default(ScheduleDateRule), PredefinedDateRuleEnum? predefinedDateRule = default(PredefinedDateRuleEnum?), int? id = default(int?))
        {
            this.PeriodInWeeks = periodInWeeks;
            this.IncludeMonday = includeMonday;
            this.IncludeTuesday = includeTuesday;
            this.IncludeWednesday = includeWednesday;
            this.IncludeThursday = includeThursday;
            this.IncludeFriday = includeFriday;
            this.IncludeSaturday = includeSaturday;
            this.IncludeSunday = includeSunday;
            this.ScheduleDateType = scheduleDateType;
            this.TimeOfDay = timeOfDay;
            this.Start = start;
            this.End = end;
            this.ScheduleDateRule = scheduleDateRule;
            this.PredefinedDateRule = predefinedDateRule;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets PeriodInWeeks
        /// </summary>
        [DataMember(Name="periodInWeeks", EmitDefaultValue=false)]
        public int? PeriodInWeeks { get; set; }

        /// <summary>
        /// Gets or Sets IncludeMonday
        /// </summary>
        [DataMember(Name="includeMonday", EmitDefaultValue=false)]
        public bool? IncludeMonday { get; set; }

        /// <summary>
        /// Gets or Sets IncludeTuesday
        /// </summary>
        [DataMember(Name="includeTuesday", EmitDefaultValue=false)]
        public bool? IncludeTuesday { get; set; }

        /// <summary>
        /// Gets or Sets IncludeWednesday
        /// </summary>
        [DataMember(Name="includeWednesday", EmitDefaultValue=false)]
        public bool? IncludeWednesday { get; set; }

        /// <summary>
        /// Gets or Sets IncludeThursday
        /// </summary>
        [DataMember(Name="includeThursday", EmitDefaultValue=false)]
        public bool? IncludeThursday { get; set; }

        /// <summary>
        /// Gets or Sets IncludeFriday
        /// </summary>
        [DataMember(Name="includeFriday", EmitDefaultValue=false)]
        public bool? IncludeFriday { get; set; }

        /// <summary>
        /// Gets or Sets IncludeSaturday
        /// </summary>
        [DataMember(Name="includeSaturday", EmitDefaultValue=false)]
        public bool? IncludeSaturday { get; set; }

        /// <summary>
        /// Gets or Sets IncludeSunday
        /// </summary>
        [DataMember(Name="includeSunday", EmitDefaultValue=false)]
        public bool? IncludeSunday { get; set; }


        /// <summary>
        /// Gets or Sets TimeOfDay
        /// </summary>
        [DataMember(Name="timeOfDay", EmitDefaultValue=false)]
        public string TimeOfDay { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public DateTimeAndZone Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public DateTimeAndZone End { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleDateRule
        /// </summary>
        [DataMember(Name="scheduleDateRule", EmitDefaultValue=false)]
        public ScheduleDateRule ScheduleDateRule { get; set; }


        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScheduleInWeeks {\n");
            sb.Append("  PeriodInWeeks: ").Append(PeriodInWeeks).Append("\n");
            sb.Append("  IncludeMonday: ").Append(IncludeMonday).Append("\n");
            sb.Append("  IncludeTuesday: ").Append(IncludeTuesday).Append("\n");
            sb.Append("  IncludeWednesday: ").Append(IncludeWednesday).Append("\n");
            sb.Append("  IncludeThursday: ").Append(IncludeThursday).Append("\n");
            sb.Append("  IncludeFriday: ").Append(IncludeFriday).Append("\n");
            sb.Append("  IncludeSaturday: ").Append(IncludeSaturday).Append("\n");
            sb.Append("  IncludeSunday: ").Append(IncludeSunday).Append("\n");
            sb.Append("  ScheduleDateType: ").Append(ScheduleDateType).Append("\n");
            sb.Append("  TimeOfDay: ").Append(TimeOfDay).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  ScheduleDateRule: ").Append(ScheduleDateRule).Append("\n");
            sb.Append("  PredefinedDateRule: ").Append(PredefinedDateRule).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleInWeeks);
        }

        /// <summary>
        /// Returns true if ScheduleInWeeks instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleInWeeks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleInWeeks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PeriodInWeeks == input.PeriodInWeeks ||
                    (this.PeriodInWeeks != null &&
                    this.PeriodInWeeks.Equals(input.PeriodInWeeks))
                ) && 
                (
                    this.IncludeMonday == input.IncludeMonday ||
                    (this.IncludeMonday != null &&
                    this.IncludeMonday.Equals(input.IncludeMonday))
                ) && 
                (
                    this.IncludeTuesday == input.IncludeTuesday ||
                    (this.IncludeTuesday != null &&
                    this.IncludeTuesday.Equals(input.IncludeTuesday))
                ) && 
                (
                    this.IncludeWednesday == input.IncludeWednesday ||
                    (this.IncludeWednesday != null &&
                    this.IncludeWednesday.Equals(input.IncludeWednesday))
                ) && 
                (
                    this.IncludeThursday == input.IncludeThursday ||
                    (this.IncludeThursday != null &&
                    this.IncludeThursday.Equals(input.IncludeThursday))
                ) && 
                (
                    this.IncludeFriday == input.IncludeFriday ||
                    (this.IncludeFriday != null &&
                    this.IncludeFriday.Equals(input.IncludeFriday))
                ) && 
                (
                    this.IncludeSaturday == input.IncludeSaturday ||
                    (this.IncludeSaturday != null &&
                    this.IncludeSaturday.Equals(input.IncludeSaturday))
                ) && 
                (
                    this.IncludeSunday == input.IncludeSunday ||
                    (this.IncludeSunday != null &&
                    this.IncludeSunday.Equals(input.IncludeSunday))
                ) && 
                (
                    this.ScheduleDateType == input.ScheduleDateType ||
                    (this.ScheduleDateType != null &&
                    this.ScheduleDateType.Equals(input.ScheduleDateType))
                ) && 
                (
                    this.TimeOfDay == input.TimeOfDay ||
                    (this.TimeOfDay != null &&
                    this.TimeOfDay.Equals(input.TimeOfDay))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.ScheduleDateRule == input.ScheduleDateRule ||
                    (this.ScheduleDateRule != null &&
                    this.ScheduleDateRule.Equals(input.ScheduleDateRule))
                ) && 
                (
                    this.PredefinedDateRule == input.PredefinedDateRule ||
                    (this.PredefinedDateRule != null &&
                    this.PredefinedDateRule.Equals(input.PredefinedDateRule))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PeriodInWeeks != null)
                    hashCode = hashCode * 59 + this.PeriodInWeeks.GetHashCode();
                if (this.IncludeMonday != null)
                    hashCode = hashCode * 59 + this.IncludeMonday.GetHashCode();
                if (this.IncludeTuesday != null)
                    hashCode = hashCode * 59 + this.IncludeTuesday.GetHashCode();
                if (this.IncludeWednesday != null)
                    hashCode = hashCode * 59 + this.IncludeWednesday.GetHashCode();
                if (this.IncludeThursday != null)
                    hashCode = hashCode * 59 + this.IncludeThursday.GetHashCode();
                if (this.IncludeFriday != null)
                    hashCode = hashCode * 59 + this.IncludeFriday.GetHashCode();
                if (this.IncludeSaturday != null)
                    hashCode = hashCode * 59 + this.IncludeSaturday.GetHashCode();
                if (this.IncludeSunday != null)
                    hashCode = hashCode * 59 + this.IncludeSunday.GetHashCode();
                if (this.ScheduleDateType != null)
                    hashCode = hashCode * 59 + this.ScheduleDateType.GetHashCode();
                if (this.TimeOfDay != null)
                    hashCode = hashCode * 59 + this.TimeOfDay.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.ScheduleDateRule != null)
                    hashCode = hashCode * 59 + this.ScheduleDateRule.GetHashCode();
                if (this.PredefinedDateRule != null)
                    hashCode = hashCode * 59 + this.PredefinedDateRule.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }
    }
}
