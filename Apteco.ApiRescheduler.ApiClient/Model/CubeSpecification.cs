/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// The details needed for specifying a cube-based dashboard item
    /// </summary>
    [DataContract]
        public partial class CubeSpecification :  IEquatable<CubeSpecification>
    {
        /// <summary>
        /// Return all or none subtotals
        /// </summary>
        /// <value>Return all or none subtotals</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SubTotalsEnum
        {
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 1,
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 2        }
        /// <summary>
        /// Return all or none subtotals
        /// </summary>
        /// <value>Return all or none subtotals</value>
        [DataMember(Name="subTotals", EmitDefaultValue=false)]
        public SubTotalsEnum? SubTotals { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CubeSpecification" /> class.
        /// </summary>
        /// <param name="leftJoin">If this is set to true and there are dimensions on a table descended from the dashboard item&#x27;s resolve table then a  \&quot;No [Tablename]\&quot; cell will be included in the dashboard item results.  This shows how many records are included in the  base query but don&#x27;t match to the dimension&#x27;s table.  Similar to a relational database outer join..</param>
        /// <param name="dimensions">The dimensions of the dashboard item chart.</param>
        /// <param name="measures">The measures of the dashboard item chart.</param>
        /// <param name="subTotals">Return all or none subtotals.</param>
        public CubeSpecification(bool? leftJoin = default(bool?), List<Dimension> dimensions = default(List<Dimension>), List<Measure> measures = default(List<Measure>), SubTotalsEnum? subTotals = default(SubTotalsEnum?))
        {
            this.LeftJoin = leftJoin;
            this.Dimensions = dimensions;
            this.Measures = measures;
            this.SubTotals = subTotals;
        }
        
        /// <summary>
        /// If this is set to true and there are dimensions on a table descended from the dashboard item&#x27;s resolve table then a  \&quot;No [Tablename]\&quot; cell will be included in the dashboard item results.  This shows how many records are included in the  base query but don&#x27;t match to the dimension&#x27;s table.  Similar to a relational database outer join.
        /// </summary>
        /// <value>If this is set to true and there are dimensions on a table descended from the dashboard item&#x27;s resolve table then a  \&quot;No [Tablename]\&quot; cell will be included in the dashboard item results.  This shows how many records are included in the  base query but don&#x27;t match to the dimension&#x27;s table.  Similar to a relational database outer join.</value>
        [DataMember(Name="leftJoin", EmitDefaultValue=false)]
        public bool? LeftJoin { get; set; }

        /// <summary>
        /// The dimensions of the dashboard item chart
        /// </summary>
        /// <value>The dimensions of the dashboard item chart</value>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public List<Dimension> Dimensions { get; set; }

        /// <summary>
        /// The measures of the dashboard item chart
        /// </summary>
        /// <value>The measures of the dashboard item chart</value>
        [DataMember(Name="measures", EmitDefaultValue=false)]
        public List<Measure> Measures { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CubeSpecification {\n");
            sb.Append("  LeftJoin: ").Append(LeftJoin).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Measures: ").Append(Measures).Append("\n");
            sb.Append("  SubTotals: ").Append(SubTotals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CubeSpecification);
        }

        /// <summary>
        /// Returns true if CubeSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of CubeSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CubeSpecification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LeftJoin == input.LeftJoin ||
                    (this.LeftJoin != null &&
                    this.LeftJoin.Equals(input.LeftJoin))
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    this.Dimensions != null &&
                    input.Dimensions != null &&
                    this.Dimensions.SequenceEqual(input.Dimensions)
                ) && 
                (
                    this.Measures == input.Measures ||
                    this.Measures != null &&
                    input.Measures != null &&
                    this.Measures.SequenceEqual(input.Measures)
                ) && 
                (
                    this.SubTotals == input.SubTotals ||
                    (this.SubTotals != null &&
                    this.SubTotals.Equals(input.SubTotals))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LeftJoin != null)
                    hashCode = hashCode * 59 + this.LeftJoin.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.Measures != null)
                    hashCode = hashCode * 59 + this.Measures.GetHashCode();
                if (this.SubTotals != null)
                    hashCode = hashCode * 59 + this.SubTotals.GetHashCode();
                return hashCode;
            }
        }
    }
}
