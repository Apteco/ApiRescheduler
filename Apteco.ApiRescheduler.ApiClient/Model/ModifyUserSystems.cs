/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details to update a users system with
    /// </summary>
    [DataContract]
        public partial class ModifyUserSystems :  IEquatable<ModifyUserSystems>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyUserSystems" /> class.
        /// </summary>
        /// <param name="systemsToAdd">When specified, the systems to add to the user.</param>
        /// <param name="systemsToRemove">When specified, the systems to remove from the user.</param>
        public ModifyUserSystems(List<string> systemsToAdd = default(List<string>), List<string> systemsToRemove = default(List<string>))
        {
            this.SystemsToAdd = systemsToAdd;
            this.SystemsToRemove = systemsToRemove;
        }
        
        /// <summary>
        /// When specified, the systems to add to the user
        /// </summary>
        /// <value>When specified, the systems to add to the user</value>
        [DataMember(Name="systemsToAdd", EmitDefaultValue=false)]
        public List<string> SystemsToAdd { get; set; }

        /// <summary>
        /// When specified, the systems to remove from the user
        /// </summary>
        /// <value>When specified, the systems to remove from the user</value>
        [DataMember(Name="systemsToRemove", EmitDefaultValue=false)]
        public List<string> SystemsToRemove { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModifyUserSystems {\n");
            sb.Append("  SystemsToAdd: ").Append(SystemsToAdd).Append("\n");
            sb.Append("  SystemsToRemove: ").Append(SystemsToRemove).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModifyUserSystems);
        }

        /// <summary>
        /// Returns true if ModifyUserSystems instances are equal
        /// </summary>
        /// <param name="input">Instance of ModifyUserSystems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModifyUserSystems input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SystemsToAdd == input.SystemsToAdd ||
                    this.SystemsToAdd != null &&
                    input.SystemsToAdd != null &&
                    this.SystemsToAdd.SequenceEqual(input.SystemsToAdd)
                ) && 
                (
                    this.SystemsToRemove == input.SystemsToRemove ||
                    this.SystemsToRemove != null &&
                    input.SystemsToRemove != null &&
                    this.SystemsToRemove.SequenceEqual(input.SystemsToRemove)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SystemsToAdd != null)
                    hashCode = hashCode * 59 + this.SystemsToAdd.GetHashCode();
                if (this.SystemsToRemove != null)
                    hashCode = hashCode * 59 + this.SystemsToRemove.GetHashCode();
                return hashCode;
            }
        }
    }
}
