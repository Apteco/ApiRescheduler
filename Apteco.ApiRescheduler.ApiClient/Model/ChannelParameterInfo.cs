/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Information about a parameter for a channel
    /// </summary>
    [DataContract]
        public partial class ChannelParameterInfo :  IEquatable<ChannelParameterInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelParameterInfo" /> class.
        /// </summary>
        /// <param name="name">The parameter name.</param>
        /// <param name="_parameter">The parameter.</param>
        /// <param name="isRequired">If parameter is required.</param>
        /// <param name="description">The description of the parameter.</param>
        /// <param name="typeName">The type of the parameter value.</param>
        /// <param name="values">The type of the parameter value.</param>
        /// <param name="defaultValue">The default value for the parameter.</param>
        /// <param name="maxLength">The maximum length (if applicable).</param>
        /// <param name="section">The section.</param>
        /// <param name="isSensitive">Whether the data is sensitive.</param>
        public ChannelParameterInfo(string name = default(string), string _parameter = default(string), bool? isRequired = default(bool?), string description = default(string), string typeName = default(string), List<string> values = default(List<string>), string defaultValue = default(string), int? maxLength = default(int?), string section = default(string), bool? isSensitive = default(bool?))
        {
            this.Name = name;
            this._Parameter = _parameter;
            this.IsRequired = isRequired;
            this.Description = description;
            this.TypeName = typeName;
            this.Values = values;
            this.DefaultValue = defaultValue;
            this.MaxLength = maxLength;
            this.Section = section;
            this.IsSensitive = isSensitive;
        }
        
        /// <summary>
        /// The parameter name
        /// </summary>
        /// <value>The parameter name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The parameter
        /// </summary>
        /// <value>The parameter</value>
        [DataMember(Name="parameter", EmitDefaultValue=false)]
        public string _Parameter { get; set; }

        /// <summary>
        /// If parameter is required
        /// </summary>
        /// <value>If parameter is required</value>
        [DataMember(Name="isRequired", EmitDefaultValue=false)]
        public bool? IsRequired { get; set; }

        /// <summary>
        /// The description of the parameter
        /// </summary>
        /// <value>The description of the parameter</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The type of the parameter value
        /// </summary>
        /// <value>The type of the parameter value</value>
        [DataMember(Name="typeName", EmitDefaultValue=false)]
        public string TypeName { get; set; }

        /// <summary>
        /// The type of the parameter value
        /// </summary>
        /// <value>The type of the parameter value</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<string> Values { get; set; }

        /// <summary>
        /// The default value for the parameter
        /// </summary>
        /// <value>The default value for the parameter</value>
        [DataMember(Name="defaultValue", EmitDefaultValue=false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// The maximum length (if applicable)
        /// </summary>
        /// <value>The maximum length (if applicable)</value>
        [DataMember(Name="maxLength", EmitDefaultValue=false)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// The section
        /// </summary>
        /// <value>The section</value>
        [DataMember(Name="section", EmitDefaultValue=false)]
        public string Section { get; set; }

        /// <summary>
        /// Whether the data is sensitive
        /// </summary>
        /// <value>Whether the data is sensitive</value>
        [DataMember(Name="isSensitive", EmitDefaultValue=false)]
        public bool? IsSensitive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelParameterInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  _Parameter: ").Append(_Parameter).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  IsSensitive: ").Append(IsSensitive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelParameterInfo);
        }

        /// <summary>
        /// Returns true if ChannelParameterInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelParameterInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelParameterInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this._Parameter == input._Parameter ||
                    (this._Parameter != null &&
                    this._Parameter.Equals(input._Parameter))
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    (this.IsRequired != null &&
                    this.IsRequired.Equals(input.IsRequired))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TypeName == input.TypeName ||
                    (this.TypeName != null &&
                    this.TypeName.Equals(input.TypeName))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    (this.MaxLength != null &&
                    this.MaxLength.Equals(input.MaxLength))
                ) && 
                (
                    this.Section == input.Section ||
                    (this.Section != null &&
                    this.Section.Equals(input.Section))
                ) && 
                (
                    this.IsSensitive == input.IsSensitive ||
                    (this.IsSensitive != null &&
                    this.IsSensitive.Equals(input.IsSensitive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this._Parameter != null)
                    hashCode = hashCode * 59 + this._Parameter.GetHashCode();
                if (this.IsRequired != null)
                    hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TypeName != null)
                    hashCode = hashCode * 59 + this.TypeName.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.MaxLength != null)
                    hashCode = hashCode * 59 + this.MaxLength.GetHashCode();
                if (this.Section != null)
                    hashCode = hashCode * 59 + this.Section.GetHashCode();
                if (this.IsSensitive != null)
                    hashCode = hashCode * 59 + this.IsSensitive.GetHashCode();
                return hashCode;
            }
        }
    }
}
