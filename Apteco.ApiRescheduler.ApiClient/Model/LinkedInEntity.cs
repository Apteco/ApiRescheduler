/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// LinkedInEntity
    /// </summary>
    [DataContract]
        public partial class LinkedInEntity :  IEquatable<LinkedInEntity>
    {
        /// <summary>
        /// Defines LinkedInEntityType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum LinkedInEntityTypeEnum
        {
            /// <summary>
            /// Enum App for value: App
            /// </summary>
            [EnumMember(Value = "App")]
            App = 1,
            /// <summary>
            /// Enum Page for value: Page
            /// </summary>
            [EnumMember(Value = "Page")]
            Page = 2        }
        /// <summary>
        /// Gets or Sets LinkedInEntityType
        /// </summary>
        [DataMember(Name="linkedInEntityType", EmitDefaultValue=false)]
        public LinkedInEntityTypeEnum LinkedInEntityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkedInEntity" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="linkedInEntityType">linkedInEntityType (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="permissions">permissions (required).</param>
        /// <param name="valid">valid (required).</param>
        /// <param name="appId">appId (required).</param>
        /// <param name="email">email.</param>
        public LinkedInEntity(int? id = default(int?), LinkedInEntityTypeEnum linkedInEntityType = default(LinkedInEntityTypeEnum), string name = default(string), List<string> permissions = default(List<string>), bool? valid = default(bool?), int? appId = default(int?), string email = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for LinkedInEntity and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "linkedInEntityType" is required (not null)
            if (linkedInEntityType == null)
            {
                throw new InvalidDataException("linkedInEntityType is a required property for LinkedInEntity and cannot be null");
            }
            else
            {
                this.LinkedInEntityType = linkedInEntityType;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for LinkedInEntity and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "permissions" is required (not null)
            if (permissions == null)
            {
                throw new InvalidDataException("permissions is a required property for LinkedInEntity and cannot be null");
            }
            else
            {
                this.Permissions = permissions;
            }
            // to ensure "valid" is required (not null)
            if (valid == null)
            {
                throw new InvalidDataException("valid is a required property for LinkedInEntity and cannot be null");
            }
            else
            {
                this.Valid = valid;
            }
            // to ensure "appId" is required (not null)
            if (appId == null)
            {
                throw new InvalidDataException("appId is a required property for LinkedInEntity and cannot be null");
            }
            else
            {
                this.AppId = appId;
            }
            this.Email = email;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }


        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<string> Permissions { get; set; }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name="valid", EmitDefaultValue=false)]
        public bool? Valid { get; set; }

        /// <summary>
        /// Gets or Sets AppId
        /// </summary>
        [DataMember(Name="appId", EmitDefaultValue=false)]
        public int? AppId { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinkedInEntity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LinkedInEntityType: ").Append(LinkedInEntityType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkedInEntity);
        }

        /// <summary>
        /// Returns true if LinkedInEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkedInEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkedInEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LinkedInEntityType == input.LinkedInEntityType ||
                    (this.LinkedInEntityType != null &&
                    this.LinkedInEntityType.Equals(input.LinkedInEntityType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    input.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                ) && 
                (
                    this.Valid == input.Valid ||
                    (this.Valid != null &&
                    this.Valid.Equals(input.Valid))
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LinkedInEntityType != null)
                    hashCode = hashCode * 59 + this.LinkedInEntityType.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.Valid != null)
                    hashCode = hashCode * 59 + this.Valid.GetHashCode();
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                return hashCode;
            }
        }
    }
}
