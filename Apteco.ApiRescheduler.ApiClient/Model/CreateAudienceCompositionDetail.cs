/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details for creating a composition
    /// </summary>
    [DataContract]
        public partial class CreateAudienceCompositionDetail :  IEquatable<CreateAudienceCompositionDetail>
    {
        /// <summary>
        /// The type of this composition
        /// </summary>
        /// <value>The type of this composition</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Check for value: Check
            /// </summary>
            [EnumMember(Value = "Check")]
            Check = 1        }
        /// <summary>
        /// The type of this composition
        /// </summary>
        /// <value>The type of this composition</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAudienceCompositionDetail" /> class.
        /// </summary>
        /// <param name="description">The description to use for the new composition (required).</param>
        /// <param name="type">The type of this composition (required).</param>
        /// <param name="checkCompositionDefinition">checkCompositionDefinition.</param>
        public CreateAudienceCompositionDetail(string description = default(string), TypeEnum type = default(TypeEnum), CheckCompositionDefinition checkCompositionDefinition = default(CheckCompositionDefinition))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for CreateAudienceCompositionDetail and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CreateAudienceCompositionDetail and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.CheckCompositionDefinition = checkCompositionDefinition;
        }
        
        /// <summary>
        /// The description to use for the new composition
        /// </summary>
        /// <value>The description to use for the new composition</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// Gets or Sets CheckCompositionDefinition
        /// </summary>
        [DataMember(Name="checkCompositionDefinition", EmitDefaultValue=false)]
        public CheckCompositionDefinition CheckCompositionDefinition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAudienceCompositionDetail {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CheckCompositionDefinition: ").Append(CheckCompositionDefinition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAudienceCompositionDetail);
        }

        /// <summary>
        /// Returns true if CreateAudienceCompositionDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAudienceCompositionDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAudienceCompositionDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CheckCompositionDefinition == input.CheckCompositionDefinition ||
                    (this.CheckCompositionDefinition != null &&
                    this.CheckCompositionDefinition.Equals(input.CheckCompositionDefinition))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CheckCompositionDefinition != null)
                    hashCode = hashCode * 59 + this.CheckCompositionDefinition.GetHashCode();
                return hashCode;
            }
        }
    }
}
