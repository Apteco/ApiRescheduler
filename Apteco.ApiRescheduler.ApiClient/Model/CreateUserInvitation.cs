/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// The parameters needed to create a new user registration request
    /// </summary>
    [DataContract]
        public partial class CreateUserInvitation :  IEquatable<CreateUserInvitation>
    {
        /// <summary>
        /// The reason for this invitation
        /// </summary>
        /// <value>The reason for this invitation</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum InvitationReasonEnum
        {
            /// <summary>
            /// Enum EnterFacebookCredentials for value: EnterFacebookCredentials
            /// </summary>
            [EnumMember(Value = "EnterFacebookCredentials")]
            EnterFacebookCredentials = 1        }
        /// <summary>
        /// The reason for this invitation
        /// </summary>
        /// <value>The reason for this invitation</value>
        [DataMember(Name="invitationReason", EmitDefaultValue=false)]
        public InvitationReasonEnum InvitationReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserInvitation" /> class.
        /// </summary>
        /// <param name="emailAddress">The email address for the new user (required).</param>
        /// <param name="invitationReason">The reason for this invitation (required).</param>
        /// <param name="acceptInvitationUrl">acceptInvitationUrl.</param>
        public CreateUserInvitation(string emailAddress = default(string), InvitationReasonEnum invitationReason = default(InvitationReasonEnum), string acceptInvitationUrl = default(string))
        {
            // to ensure "emailAddress" is required (not null)
            if (emailAddress == null)
            {
                throw new InvalidDataException("emailAddress is a required property for CreateUserInvitation and cannot be null");
            }
            else
            {
                this.EmailAddress = emailAddress;
            }
            // to ensure "invitationReason" is required (not null)
            if (invitationReason == null)
            {
                throw new InvalidDataException("invitationReason is a required property for CreateUserInvitation and cannot be null");
            }
            else
            {
                this.InvitationReason = invitationReason;
            }
            this.AcceptInvitationUrl = acceptInvitationUrl;
        }
        
        /// <summary>
        /// The email address for the new user
        /// </summary>
        /// <value>The email address for the new user</value>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }


        /// <summary>
        /// Gets or Sets AcceptInvitationUrl
        /// </summary>
        [DataMember(Name="acceptInvitationUrl", EmitDefaultValue=false)]
        public string AcceptInvitationUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateUserInvitation {\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  InvitationReason: ").Append(InvitationReason).Append("\n");
            sb.Append("  AcceptInvitationUrl: ").Append(AcceptInvitationUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateUserInvitation);
        }

        /// <summary>
        /// Returns true if CreateUserInvitation instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateUserInvitation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateUserInvitation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.InvitationReason == input.InvitationReason ||
                    (this.InvitationReason != null &&
                    this.InvitationReason.Equals(input.InvitationReason))
                ) && 
                (
                    this.AcceptInvitationUrl == input.AcceptInvitationUrl ||
                    (this.AcceptInvitationUrl != null &&
                    this.AcceptInvitationUrl.Equals(input.AcceptInvitationUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.InvitationReason != null)
                    hashCode = hashCode * 59 + this.InvitationReason.GetHashCode();
                if (this.AcceptInvitationUrl != null)
                    hashCode = hashCode * 59 + this.AcceptInvitationUrl.GetHashCode();
                return hashCode;
            }
        }
    }
}
