/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// DashboardItemData
    /// </summary>
    [DataContract]
        public partial class DashboardItemData :  IEquatable<DashboardItemData>
    {
        /// <summary>
        /// The different types of sort that can be applied to a dashboard composition item
        /// </summary>
        /// <value>The different types of sort that can be applied to a dashboard composition item</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SortOrderEnum
        {
            /// <summary>
            /// Enum Natural for value: Natural
            /// </summary>
            [EnumMember(Value = "Natural")]
            Natural = 1,
            /// <summary>
            /// Enum AscendingByValue for value: AscendingByValue
            /// </summary>
            [EnumMember(Value = "AscendingByValue")]
            AscendingByValue = 2,
            /// <summary>
            /// Enum DescendingByValue for value: DescendingByValue
            /// </summary>
            [EnumMember(Value = "DescendingByValue")]
            DescendingByValue = 3        }
        /// <summary>
        /// The different types of sort that can be applied to a dashboard composition item
        /// </summary>
        /// <value>The different types of sort that can be applied to a dashboard composition item</value>
        [DataMember(Name="sortOrder", EmitDefaultValue=false)]
        public SortOrderEnum? SortOrder { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardItemData" /> class.
        /// </summary>
        /// <param name="globalFilterApplied">globalFilterApplied.</param>
        /// <param name="drillDownLevel">drillDownLevel.</param>
        /// <param name="dimensionFilter">dimensionFilter.</param>
        /// <param name="sortOrder">The different types of sort that can be applied to a dashboard composition item.</param>
        public DashboardItemData(Query globalFilterApplied = default(Query), int? drillDownLevel = default(int?), Query dimensionFilter = default(Query), SortOrderEnum? sortOrder = default(SortOrderEnum?))
        {
            this.GlobalFilterApplied = globalFilterApplied;
            this.DrillDownLevel = drillDownLevel;
            this.DimensionFilter = dimensionFilter;
            this.SortOrder = sortOrder;
        }
        
        /// <summary>
        /// Gets or Sets GlobalFilterApplied
        /// </summary>
        [DataMember(Name="globalFilterApplied", EmitDefaultValue=false)]
        public Query GlobalFilterApplied { get; set; }

        /// <summary>
        /// Gets or Sets DrillDownLevel
        /// </summary>
        [DataMember(Name="drillDownLevel", EmitDefaultValue=false)]
        public int? DrillDownLevel { get; set; }

        /// <summary>
        /// Gets or Sets DimensionFilter
        /// </summary>
        [DataMember(Name="dimensionFilter", EmitDefaultValue=false)]
        public Query DimensionFilter { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DashboardItemData {\n");
            sb.Append("  GlobalFilterApplied: ").Append(GlobalFilterApplied).Append("\n");
            sb.Append("  DrillDownLevel: ").Append(DrillDownLevel).Append("\n");
            sb.Append("  DimensionFilter: ").Append(DimensionFilter).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DashboardItemData);
        }

        /// <summary>
        /// Returns true if DashboardItemData instances are equal
        /// </summary>
        /// <param name="input">Instance of DashboardItemData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DashboardItemData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GlobalFilterApplied == input.GlobalFilterApplied ||
                    (this.GlobalFilterApplied != null &&
                    this.GlobalFilterApplied.Equals(input.GlobalFilterApplied))
                ) && 
                (
                    this.DrillDownLevel == input.DrillDownLevel ||
                    (this.DrillDownLevel != null &&
                    this.DrillDownLevel.Equals(input.DrillDownLevel))
                ) && 
                (
                    this.DimensionFilter == input.DimensionFilter ||
                    (this.DimensionFilter != null &&
                    this.DimensionFilter.Equals(input.DimensionFilter))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    (this.SortOrder != null &&
                    this.SortOrder.Equals(input.SortOrder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GlobalFilterApplied != null)
                    hashCode = hashCode * 59 + this.GlobalFilterApplied.GetHashCode();
                if (this.DrillDownLevel != null)
                    hashCode = hashCode * 59 + this.DrillDownLevel.GetHashCode();
                if (this.DimensionFilter != null)
                    hashCode = hashCode * 59 + this.DimensionFilter.GetHashCode();
                if (this.SortOrder != null)
                    hashCode = hashCode * 59 + this.SortOrder.GetHashCode();
                return hashCode;
            }
        }
    }
}
