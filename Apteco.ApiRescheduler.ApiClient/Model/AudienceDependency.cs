/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details for an audience
    /// </summary>
    [DataContract]
        public partial class AudienceDependency :  IEquatable<AudienceDependency>
    {
        /// <summary>
        /// The dependent&#x27;s type
        /// </summary>
        /// <value>The dependent&#x27;s type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DependentTypeEnum
        {
            /// <summary>
            /// Enum Audience for value: Audience
            /// </summary>
            [EnumMember(Value = "Audience")]
            Audience = 1,
            /// <summary>
            /// Enum Dashboard for value: Dashboard
            /// </summary>
            [EnumMember(Value = "Dashboard")]
            Dashboard = 2        }
        /// <summary>
        /// The dependent&#x27;s type
        /// </summary>
        /// <value>The dependent&#x27;s type</value>
        [DataMember(Name="dependentType", EmitDefaultValue=false)]
        public DependentTypeEnum DependentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceDependency" /> class.
        /// </summary>
        /// <param name="dependentId">The dependent&#x27;s id (required).</param>
        /// <param name="dependentType">The dependent&#x27;s type (required).</param>
        public AudienceDependency(int? dependentId = default(int?), DependentTypeEnum dependentType = default(DependentTypeEnum))
        {
            // to ensure "dependentId" is required (not null)
            if (dependentId == null)
            {
                throw new InvalidDataException("dependentId is a required property for AudienceDependency and cannot be null");
            }
            else
            {
                this.DependentId = dependentId;
            }
            // to ensure "dependentType" is required (not null)
            if (dependentType == null)
            {
                throw new InvalidDataException("dependentType is a required property for AudienceDependency and cannot be null");
            }
            else
            {
                this.DependentType = dependentType;
            }
        }
        
        /// <summary>
        /// The dependent&#x27;s id
        /// </summary>
        /// <value>The dependent&#x27;s id</value>
        [DataMember(Name="dependentId", EmitDefaultValue=false)]
        public int? DependentId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AudienceDependency {\n");
            sb.Append("  DependentId: ").Append(DependentId).Append("\n");
            sb.Append("  DependentType: ").Append(DependentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudienceDependency);
        }

        /// <summary>
        /// Returns true if AudienceDependency instances are equal
        /// </summary>
        /// <param name="input">Instance of AudienceDependency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudienceDependency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DependentId == input.DependentId ||
                    (this.DependentId != null &&
                    this.DependentId.Equals(input.DependentId))
                ) && 
                (
                    this.DependentType == input.DependentType ||
                    (this.DependentType != null &&
                    this.DependentType.Equals(input.DependentType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DependentId != null)
                    hashCode = hashCode * 59 + this.DependentId.GetHashCode();
                if (this.DependentType != null)
                    hashCode = hashCode * 59 + this.DependentType.GetHashCode();
                return hashCode;
            }
        }
    }
}
