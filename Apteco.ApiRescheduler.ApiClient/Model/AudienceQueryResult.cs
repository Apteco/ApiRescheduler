/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details of a query results, returning counts and any associated server messages
    /// </summary>
    [DataContract]
        public partial class AudienceQueryResult :  IEquatable<AudienceQueryResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceQueryResult" /> class.
        /// </summary>
        /// <param name="counts">The set of counts for the result.</param>
        /// <param name="messages">Any messages returned by the server for the result.</param>
        public AudienceQueryResult(List<Count> counts = default(List<Count>), List<ServerMessage> messages = default(List<ServerMessage>))
        {
            this.Counts = counts;
            this.Messages = messages;
        }
        
        /// <summary>
        /// The set of counts for the result
        /// </summary>
        /// <value>The set of counts for the result</value>
        [DataMember(Name="counts", EmitDefaultValue=false)]
        public List<Count> Counts { get; set; }

        /// <summary>
        /// Any messages returned by the server for the result
        /// </summary>
        /// <value>Any messages returned by the server for the result</value>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<ServerMessage> Messages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AudienceQueryResult {\n");
            sb.Append("  Counts: ").Append(Counts).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudienceQueryResult);
        }

        /// <summary>
        /// Returns true if AudienceQueryResult instances are equal
        /// </summary>
        /// <param name="input">Instance of AudienceQueryResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudienceQueryResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Counts == input.Counts ||
                    this.Counts != null &&
                    input.Counts != null &&
                    this.Counts.SequenceEqual(input.Counts)
                ) && 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    input.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Counts != null)
                    hashCode = hashCode * 59 + this.Counts.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                return hashCode;
            }
        }
    }
}
