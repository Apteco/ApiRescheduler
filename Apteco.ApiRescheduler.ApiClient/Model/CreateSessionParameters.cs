/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// The parameters needed to create a valid password hash value when creating a session
    /// </summary>
    [DataContract]
        public partial class CreateSessionParameters :  IEquatable<CreateSessionParameters>
    {
        /// <summary>
        /// The hash algorithm to use when generating the password hash
        /// </summary>
        /// <value>The hash algorithm to use when generating the password hash</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum HashAlgorithmEnum
        {
            /// <summary>
            /// Enum BasicCipher for value: BasicCipher
            /// </summary>
            [EnumMember(Value = "BasicCipher")]
            BasicCipher = 1,
            /// <summary>
            /// Enum MD5 for value: MD5
            /// </summary>
            [EnumMember(Value = "MD5")]
            MD5 = 2,
            /// <summary>
            /// Enum SHA1 for value: SHA1
            /// </summary>
            [EnumMember(Value = "SHA1")]
            SHA1 = 3,
            /// <summary>
            /// Enum SHA256 for value: SHA256
            /// </summary>
            [EnumMember(Value = "SHA256")]
            SHA256 = 4,
            /// <summary>
            /// Enum SHA384 for value: SHA384
            /// </summary>
            [EnumMember(Value = "SHA384")]
            SHA384 = 5,
            /// <summary>
            /// Enum SHA512 for value: SHA512
            /// </summary>
            [EnumMember(Value = "SHA512")]
            SHA512 = 6        }
        /// <summary>
        /// The hash algorithm to use when generating the password hash
        /// </summary>
        /// <value>The hash algorithm to use when generating the password hash</value>
        [DataMember(Name="hashAlgorithm", EmitDefaultValue=false)]
        public HashAlgorithmEnum HashAlgorithm { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSessionParameters" /> class.
        /// </summary>
        /// <param name="loginSalt">The salt to use when creating a session (required).</param>
        /// <param name="saltPassword">Whether you have to use the UserSalt to create the password hash when logging in via the SaltedLogin method (required).</param>
        /// <param name="userSalt">The password salt for the particular user (required).</param>
        /// <param name="usePasswordHashes">Whether you have to hash the password with the given algorithm before it is combined with the login salt or not (required).</param>
        /// <param name="hashAlgorithm">The hash algorithm to use when generating the password hash (required).</param>
        public CreateSessionParameters(string loginSalt = default(string), bool? saltPassword = default(bool?), string userSalt = default(string), bool? usePasswordHashes = default(bool?), HashAlgorithmEnum hashAlgorithm = default(HashAlgorithmEnum))
        {
            // to ensure "loginSalt" is required (not null)
            if (loginSalt == null)
            {
                throw new InvalidDataException("loginSalt is a required property for CreateSessionParameters and cannot be null");
            }
            else
            {
                this.LoginSalt = loginSalt;
            }
            // to ensure "saltPassword" is required (not null)
            if (saltPassword == null)
            {
                throw new InvalidDataException("saltPassword is a required property for CreateSessionParameters and cannot be null");
            }
            else
            {
                this.SaltPassword = saltPassword;
            }
            // to ensure "userSalt" is required (not null)
            if (userSalt == null)
            {
                throw new InvalidDataException("userSalt is a required property for CreateSessionParameters and cannot be null");
            }
            else
            {
                this.UserSalt = userSalt;
            }
            // to ensure "usePasswordHashes" is required (not null)
            if (usePasswordHashes == null)
            {
                throw new InvalidDataException("usePasswordHashes is a required property for CreateSessionParameters and cannot be null");
            }
            else
            {
                this.UsePasswordHashes = usePasswordHashes;
            }
            // to ensure "hashAlgorithm" is required (not null)
            if (hashAlgorithm == null)
            {
                throw new InvalidDataException("hashAlgorithm is a required property for CreateSessionParameters and cannot be null");
            }
            else
            {
                this.HashAlgorithm = hashAlgorithm;
            }
        }
        
        /// <summary>
        /// The salt to use when creating a session
        /// </summary>
        /// <value>The salt to use when creating a session</value>
        [DataMember(Name="loginSalt", EmitDefaultValue=false)]
        public string LoginSalt { get; set; }

        /// <summary>
        /// Whether you have to use the UserSalt to create the password hash when logging in via the SaltedLogin method
        /// </summary>
        /// <value>Whether you have to use the UserSalt to create the password hash when logging in via the SaltedLogin method</value>
        [DataMember(Name="saltPassword", EmitDefaultValue=false)]
        public bool? SaltPassword { get; set; }

        /// <summary>
        /// The password salt for the particular user
        /// </summary>
        /// <value>The password salt for the particular user</value>
        [DataMember(Name="userSalt", EmitDefaultValue=false)]
        public string UserSalt { get; set; }

        /// <summary>
        /// Whether you have to hash the password with the given algorithm before it is combined with the login salt or not
        /// </summary>
        /// <value>Whether you have to hash the password with the given algorithm before it is combined with the login salt or not</value>
        [DataMember(Name="usePasswordHashes", EmitDefaultValue=false)]
        public bool? UsePasswordHashes { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSessionParameters {\n");
            sb.Append("  LoginSalt: ").Append(LoginSalt).Append("\n");
            sb.Append("  SaltPassword: ").Append(SaltPassword).Append("\n");
            sb.Append("  UserSalt: ").Append(UserSalt).Append("\n");
            sb.Append("  UsePasswordHashes: ").Append(UsePasswordHashes).Append("\n");
            sb.Append("  HashAlgorithm: ").Append(HashAlgorithm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSessionParameters);
        }

        /// <summary>
        /// Returns true if CreateSessionParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSessionParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSessionParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoginSalt == input.LoginSalt ||
                    (this.LoginSalt != null &&
                    this.LoginSalt.Equals(input.LoginSalt))
                ) && 
                (
                    this.SaltPassword == input.SaltPassword ||
                    (this.SaltPassword != null &&
                    this.SaltPassword.Equals(input.SaltPassword))
                ) && 
                (
                    this.UserSalt == input.UserSalt ||
                    (this.UserSalt != null &&
                    this.UserSalt.Equals(input.UserSalt))
                ) && 
                (
                    this.UsePasswordHashes == input.UsePasswordHashes ||
                    (this.UsePasswordHashes != null &&
                    this.UsePasswordHashes.Equals(input.UsePasswordHashes))
                ) && 
                (
                    this.HashAlgorithm == input.HashAlgorithm ||
                    (this.HashAlgorithm != null &&
                    this.HashAlgorithm.Equals(input.HashAlgorithm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoginSalt != null)
                    hashCode = hashCode * 59 + this.LoginSalt.GetHashCode();
                if (this.SaltPassword != null)
                    hashCode = hashCode * 59 + this.SaltPassword.GetHashCode();
                if (this.UserSalt != null)
                    hashCode = hashCode * 59 + this.UserSalt.GetHashCode();
                if (this.UsePasswordHashes != null)
                    hashCode = hashCode * 59 + this.UsePasswordHashes.GetHashCode();
                if (this.HashAlgorithm != null)
                    hashCode = hashCode * 59 + this.HashAlgorithm.GetHashCode();
                return hashCode;
            }
        }
    }
}
