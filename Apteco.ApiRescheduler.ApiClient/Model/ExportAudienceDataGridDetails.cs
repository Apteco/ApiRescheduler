/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// The details required to generate a data export for an audience
    /// </summary>
    [DataContract]
        public partial class ExportAudienceDataGridDetails :  IEquatable<ExportAudienceDataGridDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportAudienceDataGridDetails" /> class.
        /// </summary>
        /// <param name="limitsInformation">limitsInformation (required).</param>
        /// <param name="returnBrowseRows">Whether to return data rows in the response or just export data to a file (required).</param>
        /// <param name="path">If specified, the path to the file to create.  If not specified, the default path will be used, as configured in the API.</param>
        /// <param name="filename">If specified, the filename of a file to create, containing the full export data.  The file will be created in the directory for the associated audience, as configured in the API.</param>
        /// <param name="output">output.</param>
        /// <param name="columns">The list of columns to include in this export (required).</param>
        /// <param name="generateUrnFile">Whether to generate a URN file with this export or not (required).</param>
        public ExportAudienceDataGridDetails(LimitsInformation limitsInformation = default(LimitsInformation), bool? returnBrowseRows = default(bool?), string path = default(string), string filename = default(string), Output output = default(Output), List<AnalysisColumn> columns = default(List<AnalysisColumn>), bool? generateUrnFile = default(bool?))
        {
            // to ensure "limitsInformation" is required (not null)
            if (limitsInformation == null)
            {
                throw new InvalidDataException("limitsInformation is a required property for ExportAudienceDataGridDetails and cannot be null");
            }
            else
            {
                this.LimitsInformation = limitsInformation;
            }
            // to ensure "returnBrowseRows" is required (not null)
            if (returnBrowseRows == null)
            {
                throw new InvalidDataException("returnBrowseRows is a required property for ExportAudienceDataGridDetails and cannot be null");
            }
            else
            {
                this.ReturnBrowseRows = returnBrowseRows;
            }
            // to ensure "columns" is required (not null)
            if (columns == null)
            {
                throw new InvalidDataException("columns is a required property for ExportAudienceDataGridDetails and cannot be null");
            }
            else
            {
                this.Columns = columns;
            }
            // to ensure "generateUrnFile" is required (not null)
            if (generateUrnFile == null)
            {
                throw new InvalidDataException("generateUrnFile is a required property for ExportAudienceDataGridDetails and cannot be null");
            }
            else
            {
                this.GenerateUrnFile = generateUrnFile;
            }
            this.Path = path;
            this.Filename = filename;
            this.Output = output;
        }
        
        /// <summary>
        /// Gets or Sets LimitsInformation
        /// </summary>
        [DataMember(Name="limitsInformation", EmitDefaultValue=false)]
        public LimitsInformation LimitsInformation { get; set; }

        /// <summary>
        /// Whether to return data rows in the response or just export data to a file
        /// </summary>
        /// <value>Whether to return data rows in the response or just export data to a file</value>
        [DataMember(Name="returnBrowseRows", EmitDefaultValue=false)]
        public bool? ReturnBrowseRows { get; set; }

        /// <summary>
        /// If specified, the path to the file to create.  If not specified, the default path will be used, as configured in the API
        /// </summary>
        /// <value>If specified, the path to the file to create.  If not specified, the default path will be used, as configured in the API</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// If specified, the filename of a file to create, containing the full export data.  The file will be created in the directory for the associated audience, as configured in the API
        /// </summary>
        /// <value>If specified, the filename of a file to create, containing the full export data.  The file will be created in the directory for the associated audience, as configured in the API</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// Gets or Sets Output
        /// </summary>
        [DataMember(Name="output", EmitDefaultValue=false)]
        public Output Output { get; set; }

        /// <summary>
        /// The list of columns to include in this export
        /// </summary>
        /// <value>The list of columns to include in this export</value>
        [DataMember(Name="columns", EmitDefaultValue=false)]
        public List<AnalysisColumn> Columns { get; set; }

        /// <summary>
        /// Whether to generate a URN file with this export or not
        /// </summary>
        /// <value>Whether to generate a URN file with this export or not</value>
        [DataMember(Name="generateUrnFile", EmitDefaultValue=false)]
        public bool? GenerateUrnFile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExportAudienceDataGridDetails {\n");
            sb.Append("  LimitsInformation: ").Append(LimitsInformation).Append("\n");
            sb.Append("  ReturnBrowseRows: ").Append(ReturnBrowseRows).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  GenerateUrnFile: ").Append(GenerateUrnFile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportAudienceDataGridDetails);
        }

        /// <summary>
        /// Returns true if ExportAudienceDataGridDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportAudienceDataGridDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportAudienceDataGridDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LimitsInformation == input.LimitsInformation ||
                    (this.LimitsInformation != null &&
                    this.LimitsInformation.Equals(input.LimitsInformation))
                ) && 
                (
                    this.ReturnBrowseRows == input.ReturnBrowseRows ||
                    (this.ReturnBrowseRows != null &&
                    this.ReturnBrowseRows.Equals(input.ReturnBrowseRows))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.Output == input.Output ||
                    (this.Output != null &&
                    this.Output.Equals(input.Output))
                ) && 
                (
                    this.Columns == input.Columns ||
                    this.Columns != null &&
                    input.Columns != null &&
                    this.Columns.SequenceEqual(input.Columns)
                ) && 
                (
                    this.GenerateUrnFile == input.GenerateUrnFile ||
                    (this.GenerateUrnFile != null &&
                    this.GenerateUrnFile.Equals(input.GenerateUrnFile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LimitsInformation != null)
                    hashCode = hashCode * 59 + this.LimitsInformation.GetHashCode();
                if (this.ReturnBrowseRows != null)
                    hashCode = hashCode * 59 + this.ReturnBrowseRows.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.Output != null)
                    hashCode = hashCode * 59 + this.Output.GetHashCode();
                if (this.Columns != null)
                    hashCode = hashCode * 59 + this.Columns.GetHashCode();
                if (this.GenerateUrnFile != null)
                    hashCode = hashCode * 59 + this.GenerateUrnFile.GetHashCode();
                return hashCode;
            }
        }
    }
}
