/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// The details for licensing a given query
    /// </summary>
    [DataContract]
        public partial class PurchaseInfo :  IEquatable<PurchaseInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseInfo" /> class.
        /// </summary>
        /// <param name="numberOfRecordsLicensed">The number of records from the given query that have not yet been licensed (required).</param>
        /// <param name="creditRemaining">The remaining money available to license records (required).</param>
        /// <param name="grandTotalCost">The total cost of records licensed (required).</param>
        /// <param name="queryId">The unique id of an audience data licensing query (required).</param>
        /// <param name="urnFilePath">The location of the Urn file for the purchased records (required).</param>
        public PurchaseInfo(int? numberOfRecordsLicensed = default(int?), double? creditRemaining = default(double?), double? grandTotalCost = default(double?), string queryId = default(string), string urnFilePath = default(string))
        {
            // to ensure "numberOfRecordsLicensed" is required (not null)
            if (numberOfRecordsLicensed == null)
            {
                throw new InvalidDataException("numberOfRecordsLicensed is a required property for PurchaseInfo and cannot be null");
            }
            else
            {
                this.NumberOfRecordsLicensed = numberOfRecordsLicensed;
            }
            // to ensure "creditRemaining" is required (not null)
            if (creditRemaining == null)
            {
                throw new InvalidDataException("creditRemaining is a required property for PurchaseInfo and cannot be null");
            }
            else
            {
                this.CreditRemaining = creditRemaining;
            }
            // to ensure "grandTotalCost" is required (not null)
            if (grandTotalCost == null)
            {
                throw new InvalidDataException("grandTotalCost is a required property for PurchaseInfo and cannot be null");
            }
            else
            {
                this.GrandTotalCost = grandTotalCost;
            }
            // to ensure "queryId" is required (not null)
            if (queryId == null)
            {
                throw new InvalidDataException("queryId is a required property for PurchaseInfo and cannot be null");
            }
            else
            {
                this.QueryId = queryId;
            }
            // to ensure "urnFilePath" is required (not null)
            if (urnFilePath == null)
            {
                throw new InvalidDataException("urnFilePath is a required property for PurchaseInfo and cannot be null");
            }
            else
            {
                this.UrnFilePath = urnFilePath;
            }
        }
        
        /// <summary>
        /// The number of records from the given query that have not yet been licensed
        /// </summary>
        /// <value>The number of records from the given query that have not yet been licensed</value>
        [DataMember(Name="numberOfRecordsLicensed", EmitDefaultValue=false)]
        public int? NumberOfRecordsLicensed { get; set; }

        /// <summary>
        /// The remaining money available to license records
        /// </summary>
        /// <value>The remaining money available to license records</value>
        [DataMember(Name="creditRemaining", EmitDefaultValue=false)]
        public double? CreditRemaining { get; set; }

        /// <summary>
        /// The total cost of records licensed
        /// </summary>
        /// <value>The total cost of records licensed</value>
        [DataMember(Name="grandTotalCost", EmitDefaultValue=false)]
        public double? GrandTotalCost { get; set; }

        /// <summary>
        /// The unique id of an audience data licensing query
        /// </summary>
        /// <value>The unique id of an audience data licensing query</value>
        [DataMember(Name="queryId", EmitDefaultValue=false)]
        public string QueryId { get; set; }

        /// <summary>
        /// The location of the Urn file for the purchased records
        /// </summary>
        /// <value>The location of the Urn file for the purchased records</value>
        [DataMember(Name="urnFilePath", EmitDefaultValue=false)]
        public string UrnFilePath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseInfo {\n");
            sb.Append("  NumberOfRecordsLicensed: ").Append(NumberOfRecordsLicensed).Append("\n");
            sb.Append("  CreditRemaining: ").Append(CreditRemaining).Append("\n");
            sb.Append("  GrandTotalCost: ").Append(GrandTotalCost).Append("\n");
            sb.Append("  QueryId: ").Append(QueryId).Append("\n");
            sb.Append("  UrnFilePath: ").Append(UrnFilePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PurchaseInfo);
        }

        /// <summary>
        /// Returns true if PurchaseInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PurchaseInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NumberOfRecordsLicensed == input.NumberOfRecordsLicensed ||
                    (this.NumberOfRecordsLicensed != null &&
                    this.NumberOfRecordsLicensed.Equals(input.NumberOfRecordsLicensed))
                ) && 
                (
                    this.CreditRemaining == input.CreditRemaining ||
                    (this.CreditRemaining != null &&
                    this.CreditRemaining.Equals(input.CreditRemaining))
                ) && 
                (
                    this.GrandTotalCost == input.GrandTotalCost ||
                    (this.GrandTotalCost != null &&
                    this.GrandTotalCost.Equals(input.GrandTotalCost))
                ) && 
                (
                    this.QueryId == input.QueryId ||
                    (this.QueryId != null &&
                    this.QueryId.Equals(input.QueryId))
                ) && 
                (
                    this.UrnFilePath == input.UrnFilePath ||
                    (this.UrnFilePath != null &&
                    this.UrnFilePath.Equals(input.UrnFilePath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumberOfRecordsLicensed != null)
                    hashCode = hashCode * 59 + this.NumberOfRecordsLicensed.GetHashCode();
                if (this.CreditRemaining != null)
                    hashCode = hashCode * 59 + this.CreditRemaining.GetHashCode();
                if (this.GrandTotalCost != null)
                    hashCode = hashCode * 59 + this.GrandTotalCost.GetHashCode();
                if (this.QueryId != null)
                    hashCode = hashCode * 59 + this.QueryId.GetHashCode();
                if (this.UrnFilePath != null)
                    hashCode = hashCode * 59 + this.UrnFilePath.GetHashCode();
                return hashCode;
            }
        }
    }
}
