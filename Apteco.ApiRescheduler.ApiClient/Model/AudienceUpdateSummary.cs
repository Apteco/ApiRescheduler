/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Summary for an audience update
    /// </summary>
    [DataContract]
        public partial class AudienceUpdateSummary :  IEquatable<AudienceUpdateSummary>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceUpdateSummary" /> class.
        /// </summary>
        /// <param name="id">The audience update&#x27;s id (required).</param>
        /// <param name="timestamp">The timestamp of when the update happened (required).</param>
        /// <param name="user">user (required).</param>
        /// <param name="title">The title of the audience at the time of this update (required).</param>
        /// <param name="description">The description of the audience at the time of this update (required).</param>
        /// <param name="owner">owner (required).</param>
        /// <param name="isDeleted">Whether this update set the audience to be deleted or not (required).</param>
        /// <param name="resolveTableName">The FastStats table that the audience is defined against at the time of this update (required).</param>
        /// <param name="campaignId">The PeopleStage campaign id that the audience is linked to.</param>
        public AudienceUpdateSummary(int? id = default(int?), DateTime? timestamp = default(DateTime?), UserDisplayDetails user = default(UserDisplayDetails), string title = default(string), string description = default(string), UserDisplayDetails owner = default(UserDisplayDetails), bool? isDeleted = default(bool?), string resolveTableName = default(string), string campaignId = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for AudienceUpdateSummary and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for AudienceUpdateSummary and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new InvalidDataException("user is a required property for AudienceUpdateSummary and cannot be null");
            }
            else
            {
                this.User = user;
            }
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for AudienceUpdateSummary and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for AudienceUpdateSummary and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "owner" is required (not null)
            if (owner == null)
            {
                throw new InvalidDataException("owner is a required property for AudienceUpdateSummary and cannot be null");
            }
            else
            {
                this.Owner = owner;
            }
            // to ensure "isDeleted" is required (not null)
            if (isDeleted == null)
            {
                throw new InvalidDataException("isDeleted is a required property for AudienceUpdateSummary and cannot be null");
            }
            else
            {
                this.IsDeleted = isDeleted;
            }
            // to ensure "resolveTableName" is required (not null)
            if (resolveTableName == null)
            {
                throw new InvalidDataException("resolveTableName is a required property for AudienceUpdateSummary and cannot be null");
            }
            else
            {
                this.ResolveTableName = resolveTableName;
            }
            this.CampaignId = campaignId;
        }
        
        /// <summary>
        /// The audience update&#x27;s id
        /// </summary>
        /// <value>The audience update&#x27;s id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The timestamp of when the update happened
        /// </summary>
        /// <value>The timestamp of when the update happened</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserDisplayDetails User { get; set; }

        /// <summary>
        /// The title of the audience at the time of this update
        /// </summary>
        /// <value>The title of the audience at the time of this update</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The description of the audience at the time of this update
        /// </summary>
        /// <value>The description of the audience at the time of this update</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public UserDisplayDetails Owner { get; set; }

        /// <summary>
        /// Whether this update set the audience to be deleted or not
        /// </summary>
        /// <value>Whether this update set the audience to be deleted or not</value>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// The FastStats table that the audience is defined against at the time of this update
        /// </summary>
        /// <value>The FastStats table that the audience is defined against at the time of this update</value>
        [DataMember(Name="resolveTableName", EmitDefaultValue=false)]
        public string ResolveTableName { get; set; }

        /// <summary>
        /// The PeopleStage campaign id that the audience is linked to
        /// </summary>
        /// <value>The PeopleStage campaign id that the audience is linked to</value>
        [DataMember(Name="campaignId", EmitDefaultValue=false)]
        public string CampaignId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AudienceUpdateSummary {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  ResolveTableName: ").Append(ResolveTableName).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudienceUpdateSummary);
        }

        /// <summary>
        /// Returns true if AudienceUpdateSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of AudienceUpdateSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudienceUpdateSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.ResolveTableName == input.ResolveTableName ||
                    (this.ResolveTableName != null &&
                    this.ResolveTableName.Equals(input.ResolveTableName))
                ) && 
                (
                    this.CampaignId == input.CampaignId ||
                    (this.CampaignId != null &&
                    this.CampaignId.Equals(input.CampaignId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.ResolveTableName != null)
                    hashCode = hashCode * 59 + this.ResolveTableName.GetHashCode();
                if (this.CampaignId != null)
                    hashCode = hashCode * 59 + this.CampaignId.GetHashCode();
                return hashCode;
            }
        }
    }
}
