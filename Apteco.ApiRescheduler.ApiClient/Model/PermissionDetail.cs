/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// PermissionDetail
    /// </summary>
    [DataContract]
        public partial class PermissionDetail :  IEquatable<PermissionDetail>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionDetail" /> class.
        /// </summary>
        /// <param name="resource">resource (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="permissionPieces">permissionPieces (required).</param>
        public PermissionDetail(string resource = default(string), Id id = default(Id), List<PermissionPiece> permissionPieces = default(List<PermissionPiece>))
        {
            // to ensure "resource" is required (not null)
            if (resource == null)
            {
                throw new InvalidDataException("resource is a required property for PermissionDetail and cannot be null");
            }
            else
            {
                this.Resource = resource;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for PermissionDetail and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "permissionPieces" is required (not null)
            if (permissionPieces == null)
            {
                throw new InvalidDataException("permissionPieces is a required property for PermissionDetail and cannot be null");
            }
            else
            {
                this.PermissionPieces = permissionPieces;
            }
        }
        
        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [DataMember(Name="resource", EmitDefaultValue=false)]
        public string Resource { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Id Id { get; set; }

        /// <summary>
        /// Gets or Sets PermissionPieces
        /// </summary>
        [DataMember(Name="permissionPieces", EmitDefaultValue=false)]
        public List<PermissionPiece> PermissionPieces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PermissionDetail {\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PermissionPieces: ").Append(PermissionPieces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PermissionDetail);
        }

        /// <summary>
        /// Returns true if PermissionDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of PermissionDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PermissionDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Resource == input.Resource ||
                    (this.Resource != null &&
                    this.Resource.Equals(input.Resource))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PermissionPieces == input.PermissionPieces ||
                    this.PermissionPieces != null &&
                    input.PermissionPieces != null &&
                    this.PermissionPieces.SequenceEqual(input.PermissionPieces)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Resource != null)
                    hashCode = hashCode * 59 + this.Resource.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PermissionPieces != null)
                    hashCode = hashCode * 59 + this.PermissionPieces.GetHashCode();
                return hashCode;
            }
        }
    }
}
