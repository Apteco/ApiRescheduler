/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// ModifyChannelDetail
    /// </summary>
    [DataContract]
        public partial class ModifyChannelDetail :  IEquatable<ModifyChannelDetail>
    {
        /// <summary>
        /// The channel&#x27;s type
        /// </summary>
        /// <value>The channel&#x27;s type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum Control for value: Control
            /// </summary>
            [EnumMember(Value = "Control")]
            Control = 2,
            /// <summary>
            /// Enum Broadcast for value: Broadcast
            /// </summary>
            [EnumMember(Value = "Broadcast")]
            Broadcast = 3,
            /// <summary>
            /// Enum File for value: File
            /// </summary>
            [EnumMember(Value = "File")]
            File = 4,
            /// <summary>
            /// Enum Ftp for value: Ftp
            /// </summary>
            [EnumMember(Value = "Ftp")]
            Ftp = 5,
            /// <summary>
            /// Enum Facebook for value: Facebook
            /// </summary>
            [EnumMember(Value = "Facebook")]
            Facebook = 6,
            /// <summary>
            /// Enum MicrosoftDynamics for value: MicrosoftDynamics
            /// </summary>
            [EnumMember(Value = "MicrosoftDynamics")]
            MicrosoftDynamics = 7,
            /// <summary>
            /// Enum SalesForce for value: SalesForce
            /// </summary>
            [EnumMember(Value = "SalesForce")]
            SalesForce = 8,
            /// <summary>
            /// Enum PushNotification for value: PushNotification
            /// </summary>
            [EnumMember(Value = "PushNotification")]
            PushNotification = 9,
            /// <summary>
            /// Enum Twitter for value: Twitter
            /// </summary>
            [EnumMember(Value = "Twitter")]
            Twitter = 10,
            /// <summary>
            /// Enum Google for value: Google
            /// </summary>
            [EnumMember(Value = "Google")]
            Google = 11,
            /// <summary>
            /// Enum LinkedIn for value: LinkedIn
            /// </summary>
            [EnumMember(Value = "LinkedIn")]
            LinkedIn = 12,
            /// <summary>
            /// Enum PullMarketing for value: PullMarketing
            /// </summary>
            [EnumMember(Value = "PullMarketing")]
            PullMarketing = 13,
            /// <summary>
            /// Enum Composite for value: Composite
            /// </summary>
            [EnumMember(Value = "Composite")]
            Composite = 14,
            /// <summary>
            /// Enum Email for value: Email
            /// </summary>
            [EnumMember(Value = "Email")]
            Email = 15,
            /// <summary>
            /// Enum Sms for value: Sms
            /// </summary>
            [EnumMember(Value = "Sms")]
            Sms = 16,
            /// <summary>
            /// Enum Waba for value: Waba
            /// </summary>
            [EnumMember(Value = "Waba")]
            Waba = 17,
            /// <summary>
            /// Enum Mock for value: Mock
            /// </summary>
            [EnumMember(Value = "Mock")]
            Mock = 18        }
        /// <summary>
        /// The channel&#x27;s type
        /// </summary>
        /// <value>The channel&#x27;s type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyChannelDetail" /> class.
        /// </summary>
        /// <param name="accessRights">The access rights of the channel before its next update (required).</param>
        /// <param name="description">The channel&#x27;s description (required).</param>
        /// <param name="type">The channel&#x27;s type (required).</param>
        /// <param name="parentId">The id of the channel&#x27;s parent.</param>
        /// <param name="broadcastOutputSettings">broadcastOutputSettings.</param>
        /// <param name="fileOutputSettings">fileOutputSettings.</param>
        /// <param name="ftpOutputSettings">ftpOutputSettings.</param>
        /// <param name="children">The channel&#x27;s children (only if channel is a Composite channel).</param>
        /// <param name="systemLookup">systemLookup.</param>
        public ModifyChannelDetail(int? accessRights = default(int?), string description = default(string), TypeEnum type = default(TypeEnum), string parentId = default(string), ModifyBroadcastOutputSettings broadcastOutputSettings = default(ModifyBroadcastOutputSettings), ModifyFileOutputSettings fileOutputSettings = default(ModifyFileOutputSettings), ModifyFtpOutputSettings ftpOutputSettings = default(ModifyFtpOutputSettings), List<ModifyChannel> children = default(List<ModifyChannel>), SystemLookup systemLookup = default(SystemLookup))
        {
            // to ensure "accessRights" is required (not null)
            if (accessRights == null)
            {
                throw new InvalidDataException("accessRights is a required property for ModifyChannelDetail and cannot be null");
            }
            else
            {
                this.AccessRights = accessRights;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for ModifyChannelDetail and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ModifyChannelDetail and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.ParentId = parentId;
            this.BroadcastOutputSettings = broadcastOutputSettings;
            this.FileOutputSettings = fileOutputSettings;
            this.FtpOutputSettings = ftpOutputSettings;
            this.Children = children;
            this.SystemLookup = systemLookup;
        }
        
        /// <summary>
        /// The access rights of the channel before its next update
        /// </summary>
        /// <value>The access rights of the channel before its next update</value>
        [DataMember(Name="accessRights", EmitDefaultValue=false)]
        public int? AccessRights { get; set; }

        /// <summary>
        /// The channel&#x27;s description
        /// </summary>
        /// <value>The channel&#x27;s description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// The id of the channel&#x27;s parent
        /// </summary>
        /// <value>The id of the channel&#x27;s parent</value>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Gets or Sets BroadcastOutputSettings
        /// </summary>
        [DataMember(Name="broadcastOutputSettings", EmitDefaultValue=false)]
        public ModifyBroadcastOutputSettings BroadcastOutputSettings { get; set; }

        /// <summary>
        /// Gets or Sets FileOutputSettings
        /// </summary>
        [DataMember(Name="fileOutputSettings", EmitDefaultValue=false)]
        public ModifyFileOutputSettings FileOutputSettings { get; set; }

        /// <summary>
        /// Gets or Sets FtpOutputSettings
        /// </summary>
        [DataMember(Name="ftpOutputSettings", EmitDefaultValue=false)]
        public ModifyFtpOutputSettings FtpOutputSettings { get; set; }

        /// <summary>
        /// The channel&#x27;s children (only if channel is a Composite channel)
        /// </summary>
        /// <value>The channel&#x27;s children (only if channel is a Composite channel)</value>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public List<ModifyChannel> Children { get; set; }

        /// <summary>
        /// Gets or Sets SystemLookup
        /// </summary>
        [DataMember(Name="systemLookup", EmitDefaultValue=false)]
        public SystemLookup SystemLookup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModifyChannelDetail {\n");
            sb.Append("  AccessRights: ").Append(AccessRights).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  BroadcastOutputSettings: ").Append(BroadcastOutputSettings).Append("\n");
            sb.Append("  FileOutputSettings: ").Append(FileOutputSettings).Append("\n");
            sb.Append("  FtpOutputSettings: ").Append(FtpOutputSettings).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  SystemLookup: ").Append(SystemLookup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModifyChannelDetail);
        }

        /// <summary>
        /// Returns true if ModifyChannelDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ModifyChannelDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModifyChannelDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessRights == input.AccessRights ||
                    (this.AccessRights != null &&
                    this.AccessRights.Equals(input.AccessRights))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.BroadcastOutputSettings == input.BroadcastOutputSettings ||
                    (this.BroadcastOutputSettings != null &&
                    this.BroadcastOutputSettings.Equals(input.BroadcastOutputSettings))
                ) && 
                (
                    this.FileOutputSettings == input.FileOutputSettings ||
                    (this.FileOutputSettings != null &&
                    this.FileOutputSettings.Equals(input.FileOutputSettings))
                ) && 
                (
                    this.FtpOutputSettings == input.FtpOutputSettings ||
                    (this.FtpOutputSettings != null &&
                    this.FtpOutputSettings.Equals(input.FtpOutputSettings))
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && 
                (
                    this.SystemLookup == input.SystemLookup ||
                    (this.SystemLookup != null &&
                    this.SystemLookup.Equals(input.SystemLookup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessRights != null)
                    hashCode = hashCode * 59 + this.AccessRights.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.BroadcastOutputSettings != null)
                    hashCode = hashCode * 59 + this.BroadcastOutputSettings.GetHashCode();
                if (this.FileOutputSettings != null)
                    hashCode = hashCode * 59 + this.FileOutputSettings.GetHashCode();
                if (this.FtpOutputSettings != null)
                    hashCode = hashCode * 59 + this.FtpOutputSettings.GetHashCode();
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                if (this.SystemLookup != null)
                    hashCode = hashCode * 59 + this.SystemLookup.GetHashCode();
                return hashCode;
            }
        }
    }
}
