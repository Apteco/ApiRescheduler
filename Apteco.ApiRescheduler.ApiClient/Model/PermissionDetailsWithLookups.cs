/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// PermissionDetailsWithLookups
    /// </summary>
    [DataContract]
        public partial class PermissionDetailsWithLookups :  IEquatable<PermissionDetailsWithLookups>
    {
        /// <summary>
        /// Defines ResourceType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ResourceTypeEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum File for value: File
            /// </summary>
            [EnumMember(Value = "File")]
            File = 2,
            /// <summary>
            /// Enum PeopleStageElement for value: PeopleStageElement
            /// </summary>
            [EnumMember(Value = "PeopleStageElement")]
            PeopleStageElement = 3,
            /// <summary>
            /// Enum PeopleStageDiagram for value: PeopleStageDiagram
            /// </summary>
            [EnumMember(Value = "PeopleStageDiagram")]
            PeopleStageDiagram = 4,
            /// <summary>
            /// Enum PeopleStageSeed for value: PeopleStageSeed
            /// </summary>
            [EnumMember(Value = "PeopleStageSeed")]
            PeopleStageSeed = 5,
            /// <summary>
            /// Enum PeopleStageSeedSet for value: PeopleStageSeedSet
            /// </summary>
            [EnumMember(Value = "PeopleStageSeedSet")]
            PeopleStageSeedSet = 6,
            /// <summary>
            /// Enum PeopleStageChannel for value: PeopleStageChannel
            /// </summary>
            [EnumMember(Value = "PeopleStageChannel")]
            PeopleStageChannel = 7,
            /// <summary>
            /// Enum PeopleStageAggregation for value: PeopleStageAggregation
            /// </summary>
            [EnumMember(Value = "PeopleStageAggregation")]
            PeopleStageAggregation = 8,
            /// <summary>
            /// Enum PeopleStageVoucherSet for value: PeopleStageVoucherSet
            /// </summary>
            [EnumMember(Value = "PeopleStageVoucherSet")]
            PeopleStageVoucherSet = 9,
            /// <summary>
            /// Enum PeopleStageTemplate for value: PeopleStageTemplate
            /// </summary>
            [EnumMember(Value = "PeopleStageTemplate")]
            PeopleStageTemplate = 10,
            /// <summary>
            /// Enum CascadeElement for value: CascadeElement
            /// </summary>
            [EnumMember(Value = "CascadeElement")]
            CascadeElement = 11,
            /// <summary>
            /// Enum FastStatsElement for value: FastStatsElement
            /// </summary>
            [EnumMember(Value = "FastStatsElement")]
            FastStatsElement = 12,
            /// <summary>
            /// Enum UserElement for value: UserElement
            /// </summary>
            [EnumMember(Value = "UserElement")]
            UserElement = 13,
            /// <summary>
            /// Enum FtpSite for value: FtpSite
            /// </summary>
            [EnumMember(Value = "FtpSite")]
            FtpSite = 14,
            /// <summary>
            /// Enum StorageQuota for value: StorageQuota
            /// </summary>
            [EnumMember(Value = "StorageQuota")]
            StorageQuota = 15,
            /// <summary>
            /// Enum Velocity for value: Velocity
            /// </summary>
            [EnumMember(Value = "Velocity")]
            Velocity = 16,
            /// <summary>
            /// Enum RowFilter for value: RowFilter
            /// </summary>
            [EnumMember(Value = "RowFilter")]
            RowFilter = 17,
            /// <summary>
            /// Enum UsersAdmin for value: UsersAdmin
            /// </summary>
            [EnumMember(Value = "UsersAdmin")]
            UsersAdmin = 18,
            /// <summary>
            /// Enum DataControlAdmin for value: DataControlAdmin
            /// </summary>
            [EnumMember(Value = "DataControlAdmin")]
            DataControlAdmin = 19,
            /// <summary>
            /// Enum IntegrationsAdmin for value: IntegrationsAdmin
            /// </summary>
            [EnumMember(Value = "IntegrationsAdmin")]
            IntegrationsAdmin = 20,
            /// <summary>
            /// Enum OrbitFeatures for value: OrbitFeatures
            /// </summary>
            [EnumMember(Value = "OrbitFeatures")]
            OrbitFeatures = 21,
            /// <summary>
            /// Enum OrbitDashboard for value: OrbitDashboard
            /// </summary>
            [EnumMember(Value = "OrbitDashboard")]
            OrbitDashboard = 22,
            /// <summary>
            /// Enum OrbitAudience for value: OrbitAudience
            /// </summary>
            [EnumMember(Value = "OrbitAudience")]
            OrbitAudience = 23,
            /// <summary>
            /// Enum OrbitAudienceExportTemplate for value: OrbitAudienceExportTemplate
            /// </summary>
            [EnumMember(Value = "OrbitAudienceExportTemplate")]
            OrbitAudienceExportTemplate = 24,
            /// <summary>
            /// Enum SupportAdmin for value: SupportAdmin
            /// </summary>
            [EnumMember(Value = "SupportAdmin")]
            SupportAdmin = 25,
            /// <summary>
            /// Enum OrbitCollection for value: OrbitCollection
            /// </summary>
            [EnumMember(Value = "OrbitCollection")]
            OrbitCollection = 26        }
        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [DataMember(Name="resourceType", EmitDefaultValue=false)]
        public ResourceTypeEnum ResourceType { get; set; }
        /// <summary>
        /// Defines PermissionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PermissionTypeEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum AccessRights for value: AccessRights
            /// </summary>
            [EnumMember(Value = "AccessRights")]
            AccessRights = 2,
            /// <summary>
            /// Enum UsageRights for value: UsageRights
            /// </summary>
            [EnumMember(Value = "UsageRights")]
            UsageRights = 3,
            /// <summary>
            /// Enum VariableUsageRights for value: VariableUsageRights
            /// </summary>
            [EnumMember(Value = "VariableUsageRights")]
            VariableUsageRights = 4        }
        /// <summary>
        /// Gets or Sets PermissionType
        /// </summary>
        [DataMember(Name="permissionType", EmitDefaultValue=false)]
        public PermissionTypeEnum PermissionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionDetailsWithLookups" /> class.
        /// </summary>
        /// <param name="targetId">targetId (required).</param>
        /// <param name="targetResource">targetResource (required).</param>
        /// <param name="resourceType">resourceType (required).</param>
        /// <param name="permissionType">permissionType (required).</param>
        /// <param name="lookups">lookups (required).</param>
        /// <param name="details">details (required).</param>
        public PermissionDetailsWithLookups(Id targetId = default(Id), string targetResource = default(string), ResourceTypeEnum resourceType = default(ResourceTypeEnum), PermissionTypeEnum permissionType = default(PermissionTypeEnum), Lookups lookups = default(Lookups), List<PermissionDetail> details = default(List<PermissionDetail>))
        {
            // to ensure "targetId" is required (not null)
            if (targetId == null)
            {
                throw new InvalidDataException("targetId is a required property for PermissionDetailsWithLookups and cannot be null");
            }
            else
            {
                this.TargetId = targetId;
            }
            // to ensure "targetResource" is required (not null)
            if (targetResource == null)
            {
                throw new InvalidDataException("targetResource is a required property for PermissionDetailsWithLookups and cannot be null");
            }
            else
            {
                this.TargetResource = targetResource;
            }
            // to ensure "resourceType" is required (not null)
            if (resourceType == null)
            {
                throw new InvalidDataException("resourceType is a required property for PermissionDetailsWithLookups and cannot be null");
            }
            else
            {
                this.ResourceType = resourceType;
            }
            // to ensure "permissionType" is required (not null)
            if (permissionType == null)
            {
                throw new InvalidDataException("permissionType is a required property for PermissionDetailsWithLookups and cannot be null");
            }
            else
            {
                this.PermissionType = permissionType;
            }
            // to ensure "lookups" is required (not null)
            if (lookups == null)
            {
                throw new InvalidDataException("lookups is a required property for PermissionDetailsWithLookups and cannot be null");
            }
            else
            {
                this.Lookups = lookups;
            }
            // to ensure "details" is required (not null)
            if (details == null)
            {
                throw new InvalidDataException("details is a required property for PermissionDetailsWithLookups and cannot be null");
            }
            else
            {
                this.Details = details;
            }
        }
        
        /// <summary>
        /// Gets or Sets TargetId
        /// </summary>
        [DataMember(Name="targetId", EmitDefaultValue=false)]
        public Id TargetId { get; set; }

        /// <summary>
        /// Gets or Sets TargetResource
        /// </summary>
        [DataMember(Name="targetResource", EmitDefaultValue=false)]
        public string TargetResource { get; set; }



        /// <summary>
        /// Gets or Sets Lookups
        /// </summary>
        [DataMember(Name="lookups", EmitDefaultValue=false)]
        public Lookups Lookups { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public List<PermissionDetail> Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PermissionDetailsWithLookups {\n");
            sb.Append("  TargetId: ").Append(TargetId).Append("\n");
            sb.Append("  TargetResource: ").Append(TargetResource).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  PermissionType: ").Append(PermissionType).Append("\n");
            sb.Append("  Lookups: ").Append(Lookups).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PermissionDetailsWithLookups);
        }

        /// <summary>
        /// Returns true if PermissionDetailsWithLookups instances are equal
        /// </summary>
        /// <param name="input">Instance of PermissionDetailsWithLookups to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PermissionDetailsWithLookups input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TargetId == input.TargetId ||
                    (this.TargetId != null &&
                    this.TargetId.Equals(input.TargetId))
                ) && 
                (
                    this.TargetResource == input.TargetResource ||
                    (this.TargetResource != null &&
                    this.TargetResource.Equals(input.TargetResource))
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    (this.ResourceType != null &&
                    this.ResourceType.Equals(input.ResourceType))
                ) && 
                (
                    this.PermissionType == input.PermissionType ||
                    (this.PermissionType != null &&
                    this.PermissionType.Equals(input.PermissionType))
                ) && 
                (
                    this.Lookups == input.Lookups ||
                    (this.Lookups != null &&
                    this.Lookups.Equals(input.Lookups))
                ) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    input.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TargetId != null)
                    hashCode = hashCode * 59 + this.TargetId.GetHashCode();
                if (this.TargetResource != null)
                    hashCode = hashCode * 59 + this.TargetResource.GetHashCode();
                if (this.ResourceType != null)
                    hashCode = hashCode * 59 + this.ResourceType.GetHashCode();
                if (this.PermissionType != null)
                    hashCode = hashCode * 59 + this.PermissionType.GetHashCode();
                if (this.Lookups != null)
                    hashCode = hashCode * 59 + this.Lookups.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                return hashCode;
            }
        }
    }
}
