/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details for a velocity band
    /// </summary>
    [DataContract]
        public partial class VelocityBand :  IEquatable<VelocityBand>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VelocityBand" /> class.
        /// </summary>
        /// <param name="id">The velocity band Id.</param>
        /// <param name="actionType">The velocity action type (EXPORT / PURCHASE) (required).</param>
        /// <param name="band">The velocity band (required).</param>
        /// <param name="warningTransactionMaximum">The warning transaction maximum (required).</param>
        /// <param name="warningDailyMaximum">The warning daily maximum (required).</param>
        /// <param name="warningWeeklyMaximum">The warning weekly maximum (required).</param>
        /// <param name="warningPerpetuityMaximum">The warning perpetuity maximum (required).</param>
        /// <param name="suspendTransactionMaximum">The suspend transaction maximum (required).</param>
        /// <param name="suspendDailyMaximum">The suspend daily maximum (required).</param>
        /// <param name="suspendWeeklyMaximum">The suspend weekly maximum (required).</param>
        /// <param name="suspendPerpetuityMaximum">The suspend perpetuity maximum (required).</param>
        public VelocityBand(string id = default(string), string actionType = default(string), string band = default(string), long? warningTransactionMaximum = default(long?), long? warningDailyMaximum = default(long?), long? warningWeeklyMaximum = default(long?), long? warningPerpetuityMaximum = default(long?), long? suspendTransactionMaximum = default(long?), long? suspendDailyMaximum = default(long?), long? suspendWeeklyMaximum = default(long?), long? suspendPerpetuityMaximum = default(long?))
        {
            // to ensure "actionType" is required (not null)
            if (actionType == null)
            {
                throw new InvalidDataException("actionType is a required property for VelocityBand and cannot be null");
            }
            else
            {
                this.ActionType = actionType;
            }
            // to ensure "band" is required (not null)
            if (band == null)
            {
                throw new InvalidDataException("band is a required property for VelocityBand and cannot be null");
            }
            else
            {
                this.Band = band;
            }
            // to ensure "warningTransactionMaximum" is required (not null)
            if (warningTransactionMaximum == null)
            {
                throw new InvalidDataException("warningTransactionMaximum is a required property for VelocityBand and cannot be null");
            }
            else
            {
                this.WarningTransactionMaximum = warningTransactionMaximum;
            }
            // to ensure "warningDailyMaximum" is required (not null)
            if (warningDailyMaximum == null)
            {
                throw new InvalidDataException("warningDailyMaximum is a required property for VelocityBand and cannot be null");
            }
            else
            {
                this.WarningDailyMaximum = warningDailyMaximum;
            }
            // to ensure "warningWeeklyMaximum" is required (not null)
            if (warningWeeklyMaximum == null)
            {
                throw new InvalidDataException("warningWeeklyMaximum is a required property for VelocityBand and cannot be null");
            }
            else
            {
                this.WarningWeeklyMaximum = warningWeeklyMaximum;
            }
            // to ensure "warningPerpetuityMaximum" is required (not null)
            if (warningPerpetuityMaximum == null)
            {
                throw new InvalidDataException("warningPerpetuityMaximum is a required property for VelocityBand and cannot be null");
            }
            else
            {
                this.WarningPerpetuityMaximum = warningPerpetuityMaximum;
            }
            // to ensure "suspendTransactionMaximum" is required (not null)
            if (suspendTransactionMaximum == null)
            {
                throw new InvalidDataException("suspendTransactionMaximum is a required property for VelocityBand and cannot be null");
            }
            else
            {
                this.SuspendTransactionMaximum = suspendTransactionMaximum;
            }
            // to ensure "suspendDailyMaximum" is required (not null)
            if (suspendDailyMaximum == null)
            {
                throw new InvalidDataException("suspendDailyMaximum is a required property for VelocityBand and cannot be null");
            }
            else
            {
                this.SuspendDailyMaximum = suspendDailyMaximum;
            }
            // to ensure "suspendWeeklyMaximum" is required (not null)
            if (suspendWeeklyMaximum == null)
            {
                throw new InvalidDataException("suspendWeeklyMaximum is a required property for VelocityBand and cannot be null");
            }
            else
            {
                this.SuspendWeeklyMaximum = suspendWeeklyMaximum;
            }
            // to ensure "suspendPerpetuityMaximum" is required (not null)
            if (suspendPerpetuityMaximum == null)
            {
                throw new InvalidDataException("suspendPerpetuityMaximum is a required property for VelocityBand and cannot be null");
            }
            else
            {
                this.SuspendPerpetuityMaximum = suspendPerpetuityMaximum;
            }
            this.Id = id;
        }
        
        /// <summary>
        /// The velocity band Id
        /// </summary>
        /// <value>The velocity band Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The velocity action type (EXPORT / PURCHASE)
        /// </summary>
        /// <value>The velocity action type (EXPORT / PURCHASE)</value>
        [DataMember(Name="actionType", EmitDefaultValue=false)]
        public string ActionType { get; set; }

        /// <summary>
        /// The velocity band
        /// </summary>
        /// <value>The velocity band</value>
        [DataMember(Name="band", EmitDefaultValue=false)]
        public string Band { get; set; }

        /// <summary>
        /// The warning transaction maximum
        /// </summary>
        /// <value>The warning transaction maximum</value>
        [DataMember(Name="warningTransactionMaximum", EmitDefaultValue=false)]
        public long? WarningTransactionMaximum { get; set; }

        /// <summary>
        /// The warning daily maximum
        /// </summary>
        /// <value>The warning daily maximum</value>
        [DataMember(Name="warningDailyMaximum", EmitDefaultValue=false)]
        public long? WarningDailyMaximum { get; set; }

        /// <summary>
        /// The warning weekly maximum
        /// </summary>
        /// <value>The warning weekly maximum</value>
        [DataMember(Name="warningWeeklyMaximum", EmitDefaultValue=false)]
        public long? WarningWeeklyMaximum { get; set; }

        /// <summary>
        /// The warning perpetuity maximum
        /// </summary>
        /// <value>The warning perpetuity maximum</value>
        [DataMember(Name="warningPerpetuityMaximum", EmitDefaultValue=false)]
        public long? WarningPerpetuityMaximum { get; set; }

        /// <summary>
        /// The suspend transaction maximum
        /// </summary>
        /// <value>The suspend transaction maximum</value>
        [DataMember(Name="suspendTransactionMaximum", EmitDefaultValue=false)]
        public long? SuspendTransactionMaximum { get; set; }

        /// <summary>
        /// The suspend daily maximum
        /// </summary>
        /// <value>The suspend daily maximum</value>
        [DataMember(Name="suspendDailyMaximum", EmitDefaultValue=false)]
        public long? SuspendDailyMaximum { get; set; }

        /// <summary>
        /// The suspend weekly maximum
        /// </summary>
        /// <value>The suspend weekly maximum</value>
        [DataMember(Name="suspendWeeklyMaximum", EmitDefaultValue=false)]
        public long? SuspendWeeklyMaximum { get; set; }

        /// <summary>
        /// The suspend perpetuity maximum
        /// </summary>
        /// <value>The suspend perpetuity maximum</value>
        [DataMember(Name="suspendPerpetuityMaximum", EmitDefaultValue=false)]
        public long? SuspendPerpetuityMaximum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VelocityBand {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  Band: ").Append(Band).Append("\n");
            sb.Append("  WarningTransactionMaximum: ").Append(WarningTransactionMaximum).Append("\n");
            sb.Append("  WarningDailyMaximum: ").Append(WarningDailyMaximum).Append("\n");
            sb.Append("  WarningWeeklyMaximum: ").Append(WarningWeeklyMaximum).Append("\n");
            sb.Append("  WarningPerpetuityMaximum: ").Append(WarningPerpetuityMaximum).Append("\n");
            sb.Append("  SuspendTransactionMaximum: ").Append(SuspendTransactionMaximum).Append("\n");
            sb.Append("  SuspendDailyMaximum: ").Append(SuspendDailyMaximum).Append("\n");
            sb.Append("  SuspendWeeklyMaximum: ").Append(SuspendWeeklyMaximum).Append("\n");
            sb.Append("  SuspendPerpetuityMaximum: ").Append(SuspendPerpetuityMaximum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VelocityBand);
        }

        /// <summary>
        /// Returns true if VelocityBand instances are equal
        /// </summary>
        /// <param name="input">Instance of VelocityBand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VelocityBand input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ActionType == input.ActionType ||
                    (this.ActionType != null &&
                    this.ActionType.Equals(input.ActionType))
                ) && 
                (
                    this.Band == input.Band ||
                    (this.Band != null &&
                    this.Band.Equals(input.Band))
                ) && 
                (
                    this.WarningTransactionMaximum == input.WarningTransactionMaximum ||
                    (this.WarningTransactionMaximum != null &&
                    this.WarningTransactionMaximum.Equals(input.WarningTransactionMaximum))
                ) && 
                (
                    this.WarningDailyMaximum == input.WarningDailyMaximum ||
                    (this.WarningDailyMaximum != null &&
                    this.WarningDailyMaximum.Equals(input.WarningDailyMaximum))
                ) && 
                (
                    this.WarningWeeklyMaximum == input.WarningWeeklyMaximum ||
                    (this.WarningWeeklyMaximum != null &&
                    this.WarningWeeklyMaximum.Equals(input.WarningWeeklyMaximum))
                ) && 
                (
                    this.WarningPerpetuityMaximum == input.WarningPerpetuityMaximum ||
                    (this.WarningPerpetuityMaximum != null &&
                    this.WarningPerpetuityMaximum.Equals(input.WarningPerpetuityMaximum))
                ) && 
                (
                    this.SuspendTransactionMaximum == input.SuspendTransactionMaximum ||
                    (this.SuspendTransactionMaximum != null &&
                    this.SuspendTransactionMaximum.Equals(input.SuspendTransactionMaximum))
                ) && 
                (
                    this.SuspendDailyMaximum == input.SuspendDailyMaximum ||
                    (this.SuspendDailyMaximum != null &&
                    this.SuspendDailyMaximum.Equals(input.SuspendDailyMaximum))
                ) && 
                (
                    this.SuspendWeeklyMaximum == input.SuspendWeeklyMaximum ||
                    (this.SuspendWeeklyMaximum != null &&
                    this.SuspendWeeklyMaximum.Equals(input.SuspendWeeklyMaximum))
                ) && 
                (
                    this.SuspendPerpetuityMaximum == input.SuspendPerpetuityMaximum ||
                    (this.SuspendPerpetuityMaximum != null &&
                    this.SuspendPerpetuityMaximum.Equals(input.SuspendPerpetuityMaximum))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ActionType != null)
                    hashCode = hashCode * 59 + this.ActionType.GetHashCode();
                if (this.Band != null)
                    hashCode = hashCode * 59 + this.Band.GetHashCode();
                if (this.WarningTransactionMaximum != null)
                    hashCode = hashCode * 59 + this.WarningTransactionMaximum.GetHashCode();
                if (this.WarningDailyMaximum != null)
                    hashCode = hashCode * 59 + this.WarningDailyMaximum.GetHashCode();
                if (this.WarningWeeklyMaximum != null)
                    hashCode = hashCode * 59 + this.WarningWeeklyMaximum.GetHashCode();
                if (this.WarningPerpetuityMaximum != null)
                    hashCode = hashCode * 59 + this.WarningPerpetuityMaximum.GetHashCode();
                if (this.SuspendTransactionMaximum != null)
                    hashCode = hashCode * 59 + this.SuspendTransactionMaximum.GetHashCode();
                if (this.SuspendDailyMaximum != null)
                    hashCode = hashCode * 59 + this.SuspendDailyMaximum.GetHashCode();
                if (this.SuspendWeeklyMaximum != null)
                    hashCode = hashCode * 59 + this.SuspendWeeklyMaximum.GetHashCode();
                if (this.SuspendPerpetuityMaximum != null)
                    hashCode = hashCode * 59 + this.SuspendPerpetuityMaximum.GetHashCode();
                return hashCode;
            }
        }
    }
}
