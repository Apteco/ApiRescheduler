/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Create a job in FastStats
    /// </summary>
    [DataContract]
        public partial class CreateJob :  IEquatable<CreateJob>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateJob" /> class.
        /// </summary>
        /// <param name="jobDescription">Friendly description of the FastStats job (required).</param>
        /// <param name="jobType">The type of FastStats job (required).</param>
        /// <param name="command">Command XML for the job (required).</param>
        public CreateJob(string jobDescription = default(string), string jobType = default(string), string command = default(string))
        {
            // to ensure "jobDescription" is required (not null)
            if (jobDescription == null)
            {
                throw new InvalidDataException("jobDescription is a required property for CreateJob and cannot be null");
            }
            else
            {
                this.JobDescription = jobDescription;
            }
            // to ensure "jobType" is required (not null)
            if (jobType == null)
            {
                throw new InvalidDataException("jobType is a required property for CreateJob and cannot be null");
            }
            else
            {
                this.JobType = jobType;
            }
            // to ensure "command" is required (not null)
            if (command == null)
            {
                throw new InvalidDataException("command is a required property for CreateJob and cannot be null");
            }
            else
            {
                this.Command = command;
            }
        }
        
        /// <summary>
        /// Friendly description of the FastStats job
        /// </summary>
        /// <value>Friendly description of the FastStats job</value>
        [DataMember(Name="jobDescription", EmitDefaultValue=false)]
        public string JobDescription { get; set; }

        /// <summary>
        /// The type of FastStats job
        /// </summary>
        /// <value>The type of FastStats job</value>
        [DataMember(Name="jobType", EmitDefaultValue=false)]
        public string JobType { get; set; }

        /// <summary>
        /// Command XML for the job
        /// </summary>
        /// <value>Command XML for the job</value>
        [DataMember(Name="command", EmitDefaultValue=false)]
        public string Command { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateJob {\n");
            sb.Append("  JobDescription: ").Append(JobDescription).Append("\n");
            sb.Append("  JobType: ").Append(JobType).Append("\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateJob);
        }

        /// <summary>
        /// Returns true if CreateJob instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateJob input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JobDescription == input.JobDescription ||
                    (this.JobDescription != null &&
                    this.JobDescription.Equals(input.JobDescription))
                ) && 
                (
                    this.JobType == input.JobType ||
                    (this.JobType != null &&
                    this.JobType.Equals(input.JobType))
                ) && 
                (
                    this.Command == input.Command ||
                    (this.Command != null &&
                    this.Command.Equals(input.Command))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobDescription != null)
                    hashCode = hashCode * 59 + this.JobDescription.GetHashCode();
                if (this.JobType != null)
                    hashCode = hashCode * 59 + this.JobType.GetHashCode();
                if (this.Command != null)
                    hashCode = hashCode * 59 + this.Command.GetHashCode();
                return hashCode;
            }
        }
    }
}
