/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// TelemetryState
    /// </summary>
    [DataContract]
        public partial class TelemetryState :  IEquatable<TelemetryState>
    {
        /// <summary>
        /// The opt state for this telemetry state
        /// </summary>
        /// <value>The opt state for this telemetry state</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum OptStateEnum
        {
            /// <summary>
            /// Enum NotOpted for value: NotOpted
            /// </summary>
            [EnumMember(Value = "NotOpted")]
            NotOpted = 1,
            /// <summary>
            /// Enum OptedOut for value: OptedOut
            /// </summary>
            [EnumMember(Value = "OptedOut")]
            OptedOut = 2,
            /// <summary>
            /// Enum OptedIn for value: OptedIn
            /// </summary>
            [EnumMember(Value = "OptedIn")]
            OptedIn = 3,
            /// <summary>
            /// Enum ForcedOut for value: ForcedOut
            /// </summary>
            [EnumMember(Value = "ForcedOut")]
            ForcedOut = 4,
            /// <summary>
            /// Enum ForcedIn for value: ForcedIn
            /// </summary>
            [EnumMember(Value = "ForcedIn")]
            ForcedIn = 5        }
        /// <summary>
        /// The opt state for this telemetry state
        /// </summary>
        /// <value>The opt state for this telemetry state</value>
        [DataMember(Name="optState", EmitDefaultValue=false)]
        public OptStateEnum OptState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TelemetryState" /> class.
        /// </summary>
        /// <param name="id">The id for this telemetry state (required).</param>
        /// <param name="optState">The opt state for this telemetry state (required).</param>
        /// <param name="logins">The number of logins for this telemetry state (required).</param>
        public TelemetryState(string id = default(string), OptStateEnum optState = default(OptStateEnum), long? logins = default(long?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for TelemetryState and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "optState" is required (not null)
            if (optState == null)
            {
                throw new InvalidDataException("optState is a required property for TelemetryState and cannot be null");
            }
            else
            {
                this.OptState = optState;
            }
            // to ensure "logins" is required (not null)
            if (logins == null)
            {
                throw new InvalidDataException("logins is a required property for TelemetryState and cannot be null");
            }
            else
            {
                this.Logins = logins;
            }
        }
        
        /// <summary>
        /// The id for this telemetry state
        /// </summary>
        /// <value>The id for this telemetry state</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// The number of logins for this telemetry state
        /// </summary>
        /// <value>The number of logins for this telemetry state</value>
        [DataMember(Name="logins", EmitDefaultValue=false)]
        public long? Logins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TelemetryState {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OptState: ").Append(OptState).Append("\n");
            sb.Append("  Logins: ").Append(Logins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TelemetryState);
        }

        /// <summary>
        /// Returns true if TelemetryState instances are equal
        /// </summary>
        /// <param name="input">Instance of TelemetryState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TelemetryState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OptState == input.OptState ||
                    (this.OptState != null &&
                    this.OptState.Equals(input.OptState))
                ) && 
                (
                    this.Logins == input.Logins ||
                    (this.Logins != null &&
                    this.Logins.Equals(input.Logins))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OptState != null)
                    hashCode = hashCode * 59 + this.OptState.GetHashCode();
                if (this.Logins != null)
                    hashCode = hashCode * 59 + this.Logins.GetHashCode();
                return hashCode;
            }
        }
    }
}
