/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Summary information on a licence bundle for a user
    /// </summary>
    [DataContract]
        public partial class LicensedUserBundle :  IEquatable<LicensedUserBundle>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicensedUserBundle" /> class.
        /// </summary>
        /// <param name="licenceId">The id of the licence (required).</param>
        /// <param name="bundleId">The id of the bundle (required).</param>
        /// <param name="name">The general name of the bundle (i.e. \&quot;Orchestrator\&quot;) (required).</param>
        public LicensedUserBundle(int? licenceId = default(int?), int? bundleId = default(int?), string name = default(string))
        {
            // to ensure "licenceId" is required (not null)
            if (licenceId == null)
            {
                throw new InvalidDataException("licenceId is a required property for LicensedUserBundle and cannot be null");
            }
            else
            {
                this.LicenceId = licenceId;
            }
            // to ensure "bundleId" is required (not null)
            if (bundleId == null)
            {
                throw new InvalidDataException("bundleId is a required property for LicensedUserBundle and cannot be null");
            }
            else
            {
                this.BundleId = bundleId;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for LicensedUserBundle and cannot be null");
            }
            else
            {
                this.Name = name;
            }
        }
        
        /// <summary>
        /// The id of the licence
        /// </summary>
        /// <value>The id of the licence</value>
        [DataMember(Name="licenceId", EmitDefaultValue=false)]
        public int? LicenceId { get; set; }

        /// <summary>
        /// The id of the bundle
        /// </summary>
        /// <value>The id of the bundle</value>
        [DataMember(Name="bundleId", EmitDefaultValue=false)]
        public int? BundleId { get; set; }

        /// <summary>
        /// The general name of the bundle (i.e. \&quot;Orchestrator\&quot;)
        /// </summary>
        /// <value>The general name of the bundle (i.e. \&quot;Orchestrator\&quot;)</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicensedUserBundle {\n");
            sb.Append("  LicenceId: ").Append(LicenceId).Append("\n");
            sb.Append("  BundleId: ").Append(BundleId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LicensedUserBundle);
        }

        /// <summary>
        /// Returns true if LicensedUserBundle instances are equal
        /// </summary>
        /// <param name="input">Instance of LicensedUserBundle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicensedUserBundle input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LicenceId == input.LicenceId ||
                    (this.LicenceId != null &&
                    this.LicenceId.Equals(input.LicenceId))
                ) && 
                (
                    this.BundleId == input.BundleId ||
                    (this.BundleId != null &&
                    this.BundleId.Equals(input.BundleId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LicenceId != null)
                    hashCode = hashCode * 59 + this.LicenceId.GetHashCode();
                if (this.BundleId != null)
                    hashCode = hashCode * 59 + this.BundleId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }
    }
}
