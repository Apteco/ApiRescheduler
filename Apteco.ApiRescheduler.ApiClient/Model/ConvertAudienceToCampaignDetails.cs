/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// ConvertAudienceToCampaignDetails
    /// </summary>
    [DataContract]
        public partial class ConvertAudienceToCampaignDetails :  IEquatable<ConvertAudienceToCampaignDetails>
    {
        /// <summary>
        /// The channel type to use in the delivery step of the new campaign
        /// </summary>
        /// <value>The channel type to use in the delivery step of the new campaign</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ChannelTypeEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum Control for value: Control
            /// </summary>
            [EnumMember(Value = "Control")]
            Control = 2,
            /// <summary>
            /// Enum Broadcast for value: Broadcast
            /// </summary>
            [EnumMember(Value = "Broadcast")]
            Broadcast = 3,
            /// <summary>
            /// Enum File for value: File
            /// </summary>
            [EnumMember(Value = "File")]
            File = 4,
            /// <summary>
            /// Enum Ftp for value: Ftp
            /// </summary>
            [EnumMember(Value = "Ftp")]
            Ftp = 5,
            /// <summary>
            /// Enum Facebook for value: Facebook
            /// </summary>
            [EnumMember(Value = "Facebook")]
            Facebook = 6,
            /// <summary>
            /// Enum MicrosoftDynamics for value: MicrosoftDynamics
            /// </summary>
            [EnumMember(Value = "MicrosoftDynamics")]
            MicrosoftDynamics = 7,
            /// <summary>
            /// Enum SalesForce for value: SalesForce
            /// </summary>
            [EnumMember(Value = "SalesForce")]
            SalesForce = 8,
            /// <summary>
            /// Enum PushNotification for value: PushNotification
            /// </summary>
            [EnumMember(Value = "PushNotification")]
            PushNotification = 9,
            /// <summary>
            /// Enum Twitter for value: Twitter
            /// </summary>
            [EnumMember(Value = "Twitter")]
            Twitter = 10,
            /// <summary>
            /// Enum Google for value: Google
            /// </summary>
            [EnumMember(Value = "Google")]
            Google = 11,
            /// <summary>
            /// Enum LinkedIn for value: LinkedIn
            /// </summary>
            [EnumMember(Value = "LinkedIn")]
            LinkedIn = 12,
            /// <summary>
            /// Enum PullMarketing for value: PullMarketing
            /// </summary>
            [EnumMember(Value = "PullMarketing")]
            PullMarketing = 13,
            /// <summary>
            /// Enum Composite for value: Composite
            /// </summary>
            [EnumMember(Value = "Composite")]
            Composite = 14,
            /// <summary>
            /// Enum Email for value: Email
            /// </summary>
            [EnumMember(Value = "Email")]
            Email = 15,
            /// <summary>
            /// Enum Sms for value: Sms
            /// </summary>
            [EnumMember(Value = "Sms")]
            Sms = 16,
            /// <summary>
            /// Enum Waba for value: Waba
            /// </summary>
            [EnumMember(Value = "Waba")]
            Waba = 17,
            /// <summary>
            /// Enum Mock for value: Mock
            /// </summary>
            [EnumMember(Value = "Mock")]
            Mock = 18        }
        /// <summary>
        /// The channel type to use in the delivery step of the new campaign
        /// </summary>
        /// <value>The channel type to use in the delivery step of the new campaign</value>
        [DataMember(Name="channelType", EmitDefaultValue=false)]
        public ChannelTypeEnum ChannelType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertAudienceToCampaignDetails" /> class.
        /// </summary>
        /// <param name="description">The description to use for the new campaign (required).</param>
        /// <param name="channelId">The id of the channel to use in the delivery step of the new campaign (required).</param>
        /// <param name="channelType">The channel type to use in the delivery step of the new campaign (required).</param>
        /// <param name="broadcastMessageName">The name of the message name to use for the channel (assuming it is a email channel) or filename (assuming ftp or file channel).</param>
        /// <param name="broadcastListName">The name of the list name to use for the channel (assuming it is a email channel) - defaults to BroadcastMessageName if not supplied.</param>
        /// <param name="folderPath">The folder path to use for the channel (assuming it is a file channel).</param>
        /// <param name="includeFinalPool">Whether to create a pool for the people to flow into or not (so they they can be recorded and referred to).</param>
        /// <param name="pathToCampaign">The path of (possibly non-existent) areas going from the programme to where the campaign is to be saved.</param>
        /// <param name="exportVariables">Details for each column being added to the content step.</param>
        /// <param name="schedule">schedule.</param>
        public ConvertAudienceToCampaignDetails(string description = default(string), string channelId = default(string), ChannelTypeEnum channelType = default(ChannelTypeEnum), string broadcastMessageName = default(string), string broadcastListName = default(string), string folderPath = default(string), bool? includeFinalPool = default(bool?), List<string> pathToCampaign = default(List<string>), List<Column> exportVariables = default(List<Column>), Schedule schedule = default(Schedule))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for ConvertAudienceToCampaignDetails and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "channelId" is required (not null)
            if (channelId == null)
            {
                throw new InvalidDataException("channelId is a required property for ConvertAudienceToCampaignDetails and cannot be null");
            }
            else
            {
                this.ChannelId = channelId;
            }
            // to ensure "channelType" is required (not null)
            if (channelType == null)
            {
                throw new InvalidDataException("channelType is a required property for ConvertAudienceToCampaignDetails and cannot be null");
            }
            else
            {
                this.ChannelType = channelType;
            }
            this.BroadcastMessageName = broadcastMessageName;
            this.BroadcastListName = broadcastListName;
            this.FolderPath = folderPath;
            this.IncludeFinalPool = includeFinalPool;
            this.PathToCampaign = pathToCampaign;
            this.ExportVariables = exportVariables;
            this.Schedule = schedule;
        }
        
        /// <summary>
        /// The description to use for the new campaign
        /// </summary>
        /// <value>The description to use for the new campaign</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The id of the channel to use in the delivery step of the new campaign
        /// </summary>
        /// <value>The id of the channel to use in the delivery step of the new campaign</value>
        [DataMember(Name="channelId", EmitDefaultValue=false)]
        public string ChannelId { get; set; }


        /// <summary>
        /// The name of the message name to use for the channel (assuming it is a email channel) or filename (assuming ftp or file channel)
        /// </summary>
        /// <value>The name of the message name to use for the channel (assuming it is a email channel) or filename (assuming ftp or file channel)</value>
        [DataMember(Name="broadcastMessageName", EmitDefaultValue=false)]
        public string BroadcastMessageName { get; set; }

        /// <summary>
        /// The name of the list name to use for the channel (assuming it is a email channel) - defaults to BroadcastMessageName if not supplied
        /// </summary>
        /// <value>The name of the list name to use for the channel (assuming it is a email channel) - defaults to BroadcastMessageName if not supplied</value>
        [DataMember(Name="broadcastListName", EmitDefaultValue=false)]
        public string BroadcastListName { get; set; }

        /// <summary>
        /// The folder path to use for the channel (assuming it is a file channel)
        /// </summary>
        /// <value>The folder path to use for the channel (assuming it is a file channel)</value>
        [DataMember(Name="folderPath", EmitDefaultValue=false)]
        public string FolderPath { get; set; }

        /// <summary>
        /// Whether to create a pool for the people to flow into or not (so they they can be recorded and referred to)
        /// </summary>
        /// <value>Whether to create a pool for the people to flow into or not (so they they can be recorded and referred to)</value>
        [DataMember(Name="includeFinalPool", EmitDefaultValue=false)]
        public bool? IncludeFinalPool { get; set; }

        /// <summary>
        /// The path of (possibly non-existent) areas going from the programme to where the campaign is to be saved
        /// </summary>
        /// <value>The path of (possibly non-existent) areas going from the programme to where the campaign is to be saved</value>
        [DataMember(Name="pathToCampaign", EmitDefaultValue=false)]
        public List<string> PathToCampaign { get; set; }

        /// <summary>
        /// Details for each column being added to the content step
        /// </summary>
        /// <value>Details for each column being added to the content step</value>
        [DataMember(Name="exportVariables", EmitDefaultValue=false)]
        public List<Column> ExportVariables { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name="schedule", EmitDefaultValue=false)]
        public Schedule Schedule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConvertAudienceToCampaignDetails {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  ChannelType: ").Append(ChannelType).Append("\n");
            sb.Append("  BroadcastMessageName: ").Append(BroadcastMessageName).Append("\n");
            sb.Append("  BroadcastListName: ").Append(BroadcastListName).Append("\n");
            sb.Append("  FolderPath: ").Append(FolderPath).Append("\n");
            sb.Append("  IncludeFinalPool: ").Append(IncludeFinalPool).Append("\n");
            sb.Append("  PathToCampaign: ").Append(PathToCampaign).Append("\n");
            sb.Append("  ExportVariables: ").Append(ExportVariables).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConvertAudienceToCampaignDetails);
        }

        /// <summary>
        /// Returns true if ConvertAudienceToCampaignDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ConvertAudienceToCampaignDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConvertAudienceToCampaignDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.ChannelType == input.ChannelType ||
                    (this.ChannelType != null &&
                    this.ChannelType.Equals(input.ChannelType))
                ) && 
                (
                    this.BroadcastMessageName == input.BroadcastMessageName ||
                    (this.BroadcastMessageName != null &&
                    this.BroadcastMessageName.Equals(input.BroadcastMessageName))
                ) && 
                (
                    this.BroadcastListName == input.BroadcastListName ||
                    (this.BroadcastListName != null &&
                    this.BroadcastListName.Equals(input.BroadcastListName))
                ) && 
                (
                    this.FolderPath == input.FolderPath ||
                    (this.FolderPath != null &&
                    this.FolderPath.Equals(input.FolderPath))
                ) && 
                (
                    this.IncludeFinalPool == input.IncludeFinalPool ||
                    (this.IncludeFinalPool != null &&
                    this.IncludeFinalPool.Equals(input.IncludeFinalPool))
                ) && 
                (
                    this.PathToCampaign == input.PathToCampaign ||
                    this.PathToCampaign != null &&
                    input.PathToCampaign != null &&
                    this.PathToCampaign.SequenceEqual(input.PathToCampaign)
                ) && 
                (
                    this.ExportVariables == input.ExportVariables ||
                    this.ExportVariables != null &&
                    input.ExportVariables != null &&
                    this.ExportVariables.SequenceEqual(input.ExportVariables)
                ) && 
                (
                    this.Schedule == input.Schedule ||
                    (this.Schedule != null &&
                    this.Schedule.Equals(input.Schedule))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ChannelId != null)
                    hashCode = hashCode * 59 + this.ChannelId.GetHashCode();
                if (this.ChannelType != null)
                    hashCode = hashCode * 59 + this.ChannelType.GetHashCode();
                if (this.BroadcastMessageName != null)
                    hashCode = hashCode * 59 + this.BroadcastMessageName.GetHashCode();
                if (this.BroadcastListName != null)
                    hashCode = hashCode * 59 + this.BroadcastListName.GetHashCode();
                if (this.FolderPath != null)
                    hashCode = hashCode * 59 + this.FolderPath.GetHashCode();
                if (this.IncludeFinalPool != null)
                    hashCode = hashCode * 59 + this.IncludeFinalPool.GetHashCode();
                if (this.PathToCampaign != null)
                    hashCode = hashCode * 59 + this.PathToCampaign.GetHashCode();
                if (this.ExportVariables != null)
                    hashCode = hashCode * 59 + this.ExportVariables.GetHashCode();
                if (this.Schedule != null)
                    hashCode = hashCode * 59 + this.Schedule.GetHashCode();
                return hashCode;
            }
        }
    }
}
