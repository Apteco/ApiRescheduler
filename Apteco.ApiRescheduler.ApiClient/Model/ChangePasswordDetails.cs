/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details to change a user&#x27;s password with
    /// </summary>
    [DataContract]
        public partial class ChangePasswordDetails :  IEquatable<ChangePasswordDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangePasswordDetails" /> class.
        /// </summary>
        /// <param name="currentPassword">The user&#x27;s current password (required).</param>
        /// <param name="newPassword">The new password to use (required).</param>
        public ChangePasswordDetails(string currentPassword = default(string), string newPassword = default(string))
        {
            // to ensure "currentPassword" is required (not null)
            if (currentPassword == null)
            {
                throw new InvalidDataException("currentPassword is a required property for ChangePasswordDetails and cannot be null");
            }
            else
            {
                this.CurrentPassword = currentPassword;
            }
            // to ensure "newPassword" is required (not null)
            if (newPassword == null)
            {
                throw new InvalidDataException("newPassword is a required property for ChangePasswordDetails and cannot be null");
            }
            else
            {
                this.NewPassword = newPassword;
            }
        }
        
        /// <summary>
        /// The user&#x27;s current password
        /// </summary>
        /// <value>The user&#x27;s current password</value>
        [DataMember(Name="currentPassword", EmitDefaultValue=false)]
        public string CurrentPassword { get; set; }

        /// <summary>
        /// The new password to use
        /// </summary>
        /// <value>The new password to use</value>
        [DataMember(Name="newPassword", EmitDefaultValue=false)]
        public string NewPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangePasswordDetails {\n");
            sb.Append("  CurrentPassword: ").Append(CurrentPassword).Append("\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangePasswordDetails);
        }

        /// <summary>
        /// Returns true if ChangePasswordDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangePasswordDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangePasswordDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentPassword == input.CurrentPassword ||
                    (this.CurrentPassword != null &&
                    this.CurrentPassword.Equals(input.CurrentPassword))
                ) && 
                (
                    this.NewPassword == input.NewPassword ||
                    (this.NewPassword != null &&
                    this.NewPassword.Equals(input.NewPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentPassword != null)
                    hashCode = hashCode * 59 + this.CurrentPassword.GetHashCode();
                if (this.NewPassword != null)
                    hashCode = hashCode * 59 + this.NewPassword.GetHashCode();
                return hashCode;
            }
        }
    }
}
