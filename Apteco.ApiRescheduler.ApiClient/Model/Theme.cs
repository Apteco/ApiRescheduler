/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Theme
    /// </summary>
    [DataContract]
        public partial class Theme :  IEquatable<Theme>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Theme" /> class.
        /// </summary>
        /// <param name="id">The theme&#x27;s id (required).</param>
        /// <param name="name">The name of the theme (required).</param>
        /// <param name="_default">If this is the default theme to use (required).</param>
        /// <param name="systemThemeId">If this is a system theme - the Id of the theme (required).</param>
        /// <param name="published">If this theme has been published (required).</param>
        /// <param name="definition">definition (required).</param>
        /// <param name="logoId">The Id of the Logo to use (required).</param>
        public Theme(int? id = default(int?), string name = default(string), bool? _default = default(bool?), int? systemThemeId = default(int?), bool? published = default(bool?), ThemeDefinition definition = default(ThemeDefinition), int? logoId = default(int?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Theme and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Theme and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "_default" is required (not null)
            if (_default == null)
            {
                throw new InvalidDataException("_default is a required property for Theme and cannot be null");
            }
            else
            {
                this._Default = _default;
            }
            // to ensure "systemThemeId" is required (not null)
            if (systemThemeId == null)
            {
                throw new InvalidDataException("systemThemeId is a required property for Theme and cannot be null");
            }
            else
            {
                this.SystemThemeId = systemThemeId;
            }
            // to ensure "published" is required (not null)
            if (published == null)
            {
                throw new InvalidDataException("published is a required property for Theme and cannot be null");
            }
            else
            {
                this.Published = published;
            }
            // to ensure "definition" is required (not null)
            if (definition == null)
            {
                throw new InvalidDataException("definition is a required property for Theme and cannot be null");
            }
            else
            {
                this.Definition = definition;
            }
            // to ensure "logoId" is required (not null)
            if (logoId == null)
            {
                throw new InvalidDataException("logoId is a required property for Theme and cannot be null");
            }
            else
            {
                this.LogoId = logoId;
            }
        }
        
        /// <summary>
        /// The theme&#x27;s id
        /// </summary>
        /// <value>The theme&#x27;s id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The name of the theme
        /// </summary>
        /// <value>The name of the theme</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// If this is the default theme to use
        /// </summary>
        /// <value>If this is the default theme to use</value>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public bool? _Default { get; set; }

        /// <summary>
        /// If this is a system theme - the Id of the theme
        /// </summary>
        /// <value>If this is a system theme - the Id of the theme</value>
        [DataMember(Name="systemThemeId", EmitDefaultValue=false)]
        public int? SystemThemeId { get; set; }

        /// <summary>
        /// If this theme has been published
        /// </summary>
        /// <value>If this theme has been published</value>
        [DataMember(Name="published", EmitDefaultValue=false)]
        public bool? Published { get; set; }

        /// <summary>
        /// Gets or Sets Definition
        /// </summary>
        [DataMember(Name="definition", EmitDefaultValue=false)]
        public ThemeDefinition Definition { get; set; }

        /// <summary>
        /// The Id of the Logo to use
        /// </summary>
        /// <value>The Id of the Logo to use</value>
        [DataMember(Name="logoId", EmitDefaultValue=false)]
        public int? LogoId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Theme {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("  SystemThemeId: ").Append(SystemThemeId).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  LogoId: ").Append(LogoId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Theme);
        }

        /// <summary>
        /// Returns true if Theme instances are equal
        /// </summary>
        /// <param name="input">Instance of Theme to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Theme input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this._Default == input._Default ||
                    (this._Default != null &&
                    this._Default.Equals(input._Default))
                ) && 
                (
                    this.SystemThemeId == input.SystemThemeId ||
                    (this.SystemThemeId != null &&
                    this.SystemThemeId.Equals(input.SystemThemeId))
                ) && 
                (
                    this.Published == input.Published ||
                    (this.Published != null &&
                    this.Published.Equals(input.Published))
                ) && 
                (
                    this.Definition == input.Definition ||
                    (this.Definition != null &&
                    this.Definition.Equals(input.Definition))
                ) && 
                (
                    this.LogoId == input.LogoId ||
                    (this.LogoId != null &&
                    this.LogoId.Equals(input.LogoId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this._Default != null)
                    hashCode = hashCode * 59 + this._Default.GetHashCode();
                if (this.SystemThemeId != null)
                    hashCode = hashCode * 59 + this.SystemThemeId.GetHashCode();
                if (this.Published != null)
                    hashCode = hashCode * 59 + this.Published.GetHashCode();
                if (this.Definition != null)
                    hashCode = hashCode * 59 + this.Definition.GetHashCode();
                if (this.LogoId != null)
                    hashCode = hashCode * 59 + this.LogoId.GetHashCode();
                return hashCode;
            }
        }
    }
}
