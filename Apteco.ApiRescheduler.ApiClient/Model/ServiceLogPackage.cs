/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details for a job to retrieve logs for a FastStats system
    /// </summary>
    [DataContract]
        public partial class ServiceLogPackage :  IEquatable<ServiceLogPackage>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceLogPackage" /> class.
        /// </summary>
        /// <param name="filename">The name of the file produced containing the logs (required).</param>
        /// <param name="includeExtendedLogs">If extended logs are included (required).</param>
        /// <param name="includeFs32SvrLogs">If fs32 svr logs are included (required).</param>
        /// <param name="numberOfDaysWorthOfFs32SvrLogs">Number of days of Fs32svr logs included (required).</param>
        public ServiceLogPackage(string filename = default(string), bool? includeExtendedLogs = default(bool?), bool? includeFs32SvrLogs = default(bool?), int? numberOfDaysWorthOfFs32SvrLogs = default(int?))
        {
            // to ensure "filename" is required (not null)
            if (filename == null)
            {
                throw new InvalidDataException("filename is a required property for ServiceLogPackage and cannot be null");
            }
            else
            {
                this.Filename = filename;
            }
            // to ensure "includeExtendedLogs" is required (not null)
            if (includeExtendedLogs == null)
            {
                throw new InvalidDataException("includeExtendedLogs is a required property for ServiceLogPackage and cannot be null");
            }
            else
            {
                this.IncludeExtendedLogs = includeExtendedLogs;
            }
            // to ensure "includeFs32SvrLogs" is required (not null)
            if (includeFs32SvrLogs == null)
            {
                throw new InvalidDataException("includeFs32SvrLogs is a required property for ServiceLogPackage and cannot be null");
            }
            else
            {
                this.IncludeFs32SvrLogs = includeFs32SvrLogs;
            }
            // to ensure "numberOfDaysWorthOfFs32SvrLogs" is required (not null)
            if (numberOfDaysWorthOfFs32SvrLogs == null)
            {
                throw new InvalidDataException("numberOfDaysWorthOfFs32SvrLogs is a required property for ServiceLogPackage and cannot be null");
            }
            else
            {
                this.NumberOfDaysWorthOfFs32SvrLogs = numberOfDaysWorthOfFs32SvrLogs;
            }
        }
        
        /// <summary>
        /// The name of the file produced containing the logs
        /// </summary>
        /// <value>The name of the file produced containing the logs</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// If extended logs are included
        /// </summary>
        /// <value>If extended logs are included</value>
        [DataMember(Name="includeExtendedLogs", EmitDefaultValue=false)]
        public bool? IncludeExtendedLogs { get; set; }

        /// <summary>
        /// If fs32 svr logs are included
        /// </summary>
        /// <value>If fs32 svr logs are included</value>
        [DataMember(Name="includeFs32SvrLogs", EmitDefaultValue=false)]
        public bool? IncludeFs32SvrLogs { get; set; }

        /// <summary>
        /// Number of days of Fs32svr logs included
        /// </summary>
        /// <value>Number of days of Fs32svr logs included</value>
        [DataMember(Name="numberOfDaysWorthOfFs32SvrLogs", EmitDefaultValue=false)]
        public int? NumberOfDaysWorthOfFs32SvrLogs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceLogPackage {\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  IncludeExtendedLogs: ").Append(IncludeExtendedLogs).Append("\n");
            sb.Append("  IncludeFs32SvrLogs: ").Append(IncludeFs32SvrLogs).Append("\n");
            sb.Append("  NumberOfDaysWorthOfFs32SvrLogs: ").Append(NumberOfDaysWorthOfFs32SvrLogs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceLogPackage);
        }

        /// <summary>
        /// Returns true if ServiceLogPackage instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceLogPackage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceLogPackage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.IncludeExtendedLogs == input.IncludeExtendedLogs ||
                    (this.IncludeExtendedLogs != null &&
                    this.IncludeExtendedLogs.Equals(input.IncludeExtendedLogs))
                ) && 
                (
                    this.IncludeFs32SvrLogs == input.IncludeFs32SvrLogs ||
                    (this.IncludeFs32SvrLogs != null &&
                    this.IncludeFs32SvrLogs.Equals(input.IncludeFs32SvrLogs))
                ) && 
                (
                    this.NumberOfDaysWorthOfFs32SvrLogs == input.NumberOfDaysWorthOfFs32SvrLogs ||
                    (this.NumberOfDaysWorthOfFs32SvrLogs != null &&
                    this.NumberOfDaysWorthOfFs32SvrLogs.Equals(input.NumberOfDaysWorthOfFs32SvrLogs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.IncludeExtendedLogs != null)
                    hashCode = hashCode * 59 + this.IncludeExtendedLogs.GetHashCode();
                if (this.IncludeFs32SvrLogs != null)
                    hashCode = hashCode * 59 + this.IncludeFs32SvrLogs.GetHashCode();
                if (this.NumberOfDaysWorthOfFs32SvrLogs != null)
                    hashCode = hashCode * 59 + this.NumberOfDaysWorthOfFs32SvrLogs.GetHashCode();
                return hashCode;
            }
        }
    }
}
