/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details for a visualisation
    /// </summary>
    [DataContract]
        public partial class FileEntry :  IEquatable<FileEntry>
    {
        /// <summary>
        /// The file&#x27;s type
        /// </summary>
        /// <value>The file&#x27;s type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum File for value: File
            /// </summary>
            [EnumMember(Value = "File")]
            File = 2,
            /// <summary>
            /// Enum Directory for value: Directory
            /// </summary>
            [EnumMember(Value = "Directory")]
            Directory = 3,
            /// <summary>
            /// Enum FTPDirectory for value: FTPDirectory
            /// </summary>
            [EnumMember(Value = "FTPDirectory")]
            FTPDirectory = 4,
            /// <summary>
            /// Enum Chart for value: Chart
            /// </summary>
            [EnumMember(Value = "Chart")]
            Chart = 5,
            /// <summary>
            /// Enum Cluster for value: Cluster
            /// </summary>
            [EnumMember(Value = "Cluster")]
            Cluster = 6,
            /// <summary>
            /// Enum Map for value: Map
            /// </summary>
            [EnumMember(Value = "Map")]
            Map = 7,
            /// <summary>
            /// Enum Cube for value: Cube
            /// </summary>
            [EnumMember(Value = "Cube")]
            Cube = 8,
            /// <summary>
            /// Enum Tree for value: Tree
            /// </summary>
            [EnumMember(Value = "Tree")]
            Tree = 9,
            /// <summary>
            /// Enum Venn for value: Venn
            /// </summary>
            [EnumMember(Value = "Venn")]
            Venn = 10,
            /// <summary>
            /// Enum DataGrid for value: DataGrid
            /// </summary>
            [EnumMember(Value = "DataGrid")]
            DataGrid = 11,
            /// <summary>
            /// Enum DecisionTree for value: DecisionTree
            /// </summary>
            [EnumMember(Value = "DecisionTree")]
            DecisionTree = 12,
            /// <summary>
            /// Enum Expression for value: Expression
            /// </summary>
            [EnumMember(Value = "Expression")]
            Expression = 13,
            /// <summary>
            /// Enum ModellingEnvironment for value: ModellingEnvironment
            /// </summary>
            [EnumMember(Value = "ModellingEnvironment")]
            ModellingEnvironment = 14,
            /// <summary>
            /// Enum ModelReport for value: ModelReport
            /// </summary>
            [EnumMember(Value = "ModelReport")]
            ModelReport = 15,
            /// <summary>
            /// Enum Profile for value: Profile
            /// </summary>
            [EnumMember(Value = "Profile")]
            Profile = 16,
            /// <summary>
            /// Enum Report for value: Report
            /// </summary>
            [EnumMember(Value = "Report")]
            Report = 17,
            /// <summary>
            /// Enum Segmentation for value: Segmentation
            /// </summary>
            [EnumMember(Value = "Segmentation")]
            Segmentation = 18,
            /// <summary>
            /// Enum Selection for value: Selection
            /// </summary>
            [EnumMember(Value = "Selection")]
            Selection = 19,
            /// <summary>
            /// Enum Storyboard for value: Storyboard
            /// </summary>
            [EnumMember(Value = "Storyboard")]
            Storyboard = 20,
            /// <summary>
            /// Enum WordCloud for value: WordCloud
            /// </summary>
            [EnumMember(Value = "WordCloud")]
            WordCloud = 21,
            /// <summary>
            /// Enum Csv for value: Csv
            /// </summary>
            [EnumMember(Value = "Csv")]
            Csv = 22,
            /// <summary>
            /// Enum Txt for value: Txt
            /// </summary>
            [EnumMember(Value = "Txt")]
            Txt = 23,
            /// <summary>
            /// Enum Urn for value: Urn
            /// </summary>
            [EnumMember(Value = "Urn")]
            Urn = 24        }
        /// <summary>
        /// The file&#x27;s type
        /// </summary>
        /// <value>The file&#x27;s type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileEntry" /> class.
        /// </summary>
        /// <param name="name">The file entry&#x27;s name (required).</param>
        /// <param name="path">The file entry&#x27;s full path (required).</param>
        /// <param name="type">The file&#x27;s type (required).</param>
        /// <param name="tableName">The file&#x27;s table name.</param>
        /// <param name="records">The file&#x27;s record count.</param>
        /// <param name="variableList">The file&#x27;s used variables.</param>
        public FileEntry(string name = default(string), string path = default(string), TypeEnum type = default(TypeEnum), string tableName = default(string), int? records = default(int?), List<string> variableList = default(List<string>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for FileEntry and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new InvalidDataException("path is a required property for FileEntry and cannot be null");
            }
            else
            {
                this.Path = path;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for FileEntry and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.TableName = tableName;
            this.Records = records;
            this.VariableList = variableList;
        }
        
        /// <summary>
        /// The file entry&#x27;s name
        /// </summary>
        /// <value>The file entry&#x27;s name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The file entry&#x27;s full path
        /// </summary>
        /// <value>The file entry&#x27;s full path</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }


        /// <summary>
        /// The file&#x27;s table name
        /// </summary>
        /// <value>The file&#x27;s table name</value>
        [DataMember(Name="tableName", EmitDefaultValue=false)]
        public string TableName { get; set; }

        /// <summary>
        /// The file&#x27;s record count
        /// </summary>
        /// <value>The file&#x27;s record count</value>
        [DataMember(Name="records", EmitDefaultValue=false)]
        public int? Records { get; set; }

        /// <summary>
        /// The file&#x27;s used variables
        /// </summary>
        /// <value>The file&#x27;s used variables</value>
        [DataMember(Name="variableList", EmitDefaultValue=false)]
        public List<string> VariableList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileEntry {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TableName: ").Append(TableName).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("  VariableList: ").Append(VariableList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileEntry);
        }

        /// <summary>
        /// Returns true if FileEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of FileEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TableName == input.TableName ||
                    (this.TableName != null &&
                    this.TableName.Equals(input.TableName))
                ) && 
                (
                    this.Records == input.Records ||
                    (this.Records != null &&
                    this.Records.Equals(input.Records))
                ) && 
                (
                    this.VariableList == input.VariableList ||
                    this.VariableList != null &&
                    input.VariableList != null &&
                    this.VariableList.SequenceEqual(input.VariableList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TableName != null)
                    hashCode = hashCode * 59 + this.TableName.GetHashCode();
                if (this.Records != null)
                    hashCode = hashCode * 59 + this.Records.GetHashCode();
                if (this.VariableList != null)
                    hashCode = hashCode * 59 + this.VariableList.GetHashCode();
                return hashCode;
            }
        }
    }
}
