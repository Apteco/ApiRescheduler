/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Approval
    /// </summary>
    [DataContract]
        public partial class Approval :  IEquatable<Approval>
    {
        /// <summary>
        /// Defines JobType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum JobTypeEnum
        {
            /// <summary>
            /// Enum Output for value: Output
            /// </summary>
            [EnumMember(Value = "Output")]
            Output = 1,
            /// <summary>
            /// Enum Broadcast for value: Broadcast
            /// </summary>
            [EnumMember(Value = "Broadcast")]
            Broadcast = 2,
            /// <summary>
            /// Enum Ftp for value: Ftp
            /// </summary>
            [EnumMember(Value = "Ftp")]
            Ftp = 3,
            /// <summary>
            /// Enum SalesForce for value: SalesForce
            /// </summary>
            [EnumMember(Value = "SalesForce")]
            SalesForce = 4,
            /// <summary>
            /// Enum MicrosoftDynamics for value: MicrosoftDynamics
            /// </summary>
            [EnumMember(Value = "MicrosoftDynamics")]
            MicrosoftDynamics = 5,
            /// <summary>
            /// Enum Control for value: Control
            /// </summary>
            [EnumMember(Value = "Control")]
            Control = 6,
            /// <summary>
            /// Enum Facebook for value: Facebook
            /// </summary>
            [EnumMember(Value = "Facebook")]
            Facebook = 7,
            /// <summary>
            /// Enum PushNotification for value: PushNotification
            /// </summary>
            [EnumMember(Value = "PushNotification")]
            PushNotification = 8,
            /// <summary>
            /// Enum Twitter for value: Twitter
            /// </summary>
            [EnumMember(Value = "Twitter")]
            Twitter = 9,
            /// <summary>
            /// Enum Google for value: Google
            /// </summary>
            [EnumMember(Value = "Google")]
            Google = 10,
            /// <summary>
            /// Enum LinkedIn for value: LinkedIn
            /// </summary>
            [EnumMember(Value = "LinkedIn")]
            LinkedIn = 11,
            /// <summary>
            /// Enum PullMarketing for value: PullMarketing
            /// </summary>
            [EnumMember(Value = "PullMarketing")]
            PullMarketing = 12,
            /// <summary>
            /// Enum Email for value: Email
            /// </summary>
            [EnumMember(Value = "Email")]
            Email = 13,
            /// <summary>
            /// Enum Sms for value: Sms
            /// </summary>
            [EnumMember(Value = "Sms")]
            Sms = 14,
            /// <summary>
            /// Enum Waba for value: Waba
            /// </summary>
            [EnumMember(Value = "Waba")]
            Waba = 15,
            /// <summary>
            /// Enum Mock for value: Mock
            /// </summary>
            [EnumMember(Value = "Mock")]
            Mock = 16        }
        /// <summary>
        /// Gets or Sets JobType
        /// </summary>
        [DataMember(Name="jobType", EmitDefaultValue=false)]
        public JobTypeEnum? JobType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Approval" /> class.
        /// </summary>
        /// <param name="jobDescription">jobDescription.</param>
        /// <param name="jobType">jobType.</param>
        /// <param name="jobIdentifier">jobIdentifier.</param>
        /// <param name="numberOfCommunications">numberOfCommunications.</param>
        /// <param name="maxmiumSampleSize">maxmiumSampleSize.</param>
        /// <param name="dateAdded">dateAdded.</param>
        /// <param name="stepId">stepId.</param>
        /// <param name="run">run.</param>
        /// <param name="manualApproval">manualApproval.</param>
        public Approval(string jobDescription = default(string), JobTypeEnum? jobType = default(JobTypeEnum?), string jobIdentifier = default(string), long? numberOfCommunications = default(long?), int? maxmiumSampleSize = default(int?), DateTime? dateAdded = default(DateTime?), int? stepId = default(int?), int? run = default(int?), bool? manualApproval = default(bool?))
        {
            this.JobDescription = jobDescription;
            this.JobType = jobType;
            this.JobIdentifier = jobIdentifier;
            this.NumberOfCommunications = numberOfCommunications;
            this.MaxmiumSampleSize = maxmiumSampleSize;
            this.DateAdded = dateAdded;
            this.StepId = stepId;
            this.Run = run;
            this.ManualApproval = manualApproval;
        }
        
        /// <summary>
        /// Gets or Sets JobDescription
        /// </summary>
        [DataMember(Name="jobDescription", EmitDefaultValue=false)]
        public string JobDescription { get; set; }


        /// <summary>
        /// Gets or Sets JobIdentifier
        /// </summary>
        [DataMember(Name="jobIdentifier", EmitDefaultValue=false)]
        public string JobIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfCommunications
        /// </summary>
        [DataMember(Name="numberOfCommunications", EmitDefaultValue=false)]
        public long? NumberOfCommunications { get; set; }

        /// <summary>
        /// Gets or Sets MaxmiumSampleSize
        /// </summary>
        [DataMember(Name="maxmiumSampleSize", EmitDefaultValue=false)]
        public int? MaxmiumSampleSize { get; set; }

        /// <summary>
        /// Gets or Sets DateAdded
        /// </summary>
        [DataMember(Name="dateAdded", EmitDefaultValue=false)]
        public DateTime? DateAdded { get; set; }

        /// <summary>
        /// Gets or Sets StepId
        /// </summary>
        [DataMember(Name="stepId", EmitDefaultValue=false)]
        public int? StepId { get; set; }

        /// <summary>
        /// Gets or Sets Run
        /// </summary>
        [DataMember(Name="run", EmitDefaultValue=false)]
        public int? Run { get; set; }

        /// <summary>
        /// Gets or Sets ManualApproval
        /// </summary>
        [DataMember(Name="manualApproval", EmitDefaultValue=false)]
        public bool? ManualApproval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Approval {\n");
            sb.Append("  JobDescription: ").Append(JobDescription).Append("\n");
            sb.Append("  JobType: ").Append(JobType).Append("\n");
            sb.Append("  JobIdentifier: ").Append(JobIdentifier).Append("\n");
            sb.Append("  NumberOfCommunications: ").Append(NumberOfCommunications).Append("\n");
            sb.Append("  MaxmiumSampleSize: ").Append(MaxmiumSampleSize).Append("\n");
            sb.Append("  DateAdded: ").Append(DateAdded).Append("\n");
            sb.Append("  StepId: ").Append(StepId).Append("\n");
            sb.Append("  Run: ").Append(Run).Append("\n");
            sb.Append("  ManualApproval: ").Append(ManualApproval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Approval);
        }

        /// <summary>
        /// Returns true if Approval instances are equal
        /// </summary>
        /// <param name="input">Instance of Approval to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Approval input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JobDescription == input.JobDescription ||
                    (this.JobDescription != null &&
                    this.JobDescription.Equals(input.JobDescription))
                ) && 
                (
                    this.JobType == input.JobType ||
                    (this.JobType != null &&
                    this.JobType.Equals(input.JobType))
                ) && 
                (
                    this.JobIdentifier == input.JobIdentifier ||
                    (this.JobIdentifier != null &&
                    this.JobIdentifier.Equals(input.JobIdentifier))
                ) && 
                (
                    this.NumberOfCommunications == input.NumberOfCommunications ||
                    (this.NumberOfCommunications != null &&
                    this.NumberOfCommunications.Equals(input.NumberOfCommunications))
                ) && 
                (
                    this.MaxmiumSampleSize == input.MaxmiumSampleSize ||
                    (this.MaxmiumSampleSize != null &&
                    this.MaxmiumSampleSize.Equals(input.MaxmiumSampleSize))
                ) && 
                (
                    this.DateAdded == input.DateAdded ||
                    (this.DateAdded != null &&
                    this.DateAdded.Equals(input.DateAdded))
                ) && 
                (
                    this.StepId == input.StepId ||
                    (this.StepId != null &&
                    this.StepId.Equals(input.StepId))
                ) && 
                (
                    this.Run == input.Run ||
                    (this.Run != null &&
                    this.Run.Equals(input.Run))
                ) && 
                (
                    this.ManualApproval == input.ManualApproval ||
                    (this.ManualApproval != null &&
                    this.ManualApproval.Equals(input.ManualApproval))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobDescription != null)
                    hashCode = hashCode * 59 + this.JobDescription.GetHashCode();
                if (this.JobType != null)
                    hashCode = hashCode * 59 + this.JobType.GetHashCode();
                if (this.JobIdentifier != null)
                    hashCode = hashCode * 59 + this.JobIdentifier.GetHashCode();
                if (this.NumberOfCommunications != null)
                    hashCode = hashCode * 59 + this.NumberOfCommunications.GetHashCode();
                if (this.MaxmiumSampleSize != null)
                    hashCode = hashCode * 59 + this.MaxmiumSampleSize.GetHashCode();
                if (this.DateAdded != null)
                    hashCode = hashCode * 59 + this.DateAdded.GetHashCode();
                if (this.StepId != null)
                    hashCode = hashCode * 59 + this.StepId.GetHashCode();
                if (this.Run != null)
                    hashCode = hashCode * 59 + this.Run.GetHashCode();
                if (this.ManualApproval != null)
                    hashCode = hashCode * 59 + this.ManualApproval.GetHashCode();
                return hashCode;
            }
        }
    }
}
