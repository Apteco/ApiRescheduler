/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details for a meta data item
    /// </summary>
    [DataContract]
        public partial class MetaDataItem :  IEquatable<MetaDataItem>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetaDataItem" /> class.
        /// </summary>
        /// <param name="id">The meta data item Id (required).</param>
        /// <param name="key">The meta data item key (required).</param>
        /// <param name="metaDataType">The meta data item type (required).</param>
        /// <param name="value">The meta data item value (required).</param>
        public MetaDataItem(int? id = default(int?), string key = default(string), string metaDataType = default(string), string value = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for MetaDataItem and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new InvalidDataException("key is a required property for MetaDataItem and cannot be null");
            }
            else
            {
                this.Key = key;
            }
            // to ensure "metaDataType" is required (not null)
            if (metaDataType == null)
            {
                throw new InvalidDataException("metaDataType is a required property for MetaDataItem and cannot be null");
            }
            else
            {
                this.MetaDataType = metaDataType;
            }
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for MetaDataItem and cannot be null");
            }
            else
            {
                this.Value = value;
            }
        }
        
        /// <summary>
        /// The meta data item Id
        /// </summary>
        /// <value>The meta data item Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The meta data item key
        /// </summary>
        /// <value>The meta data item key</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// The meta data item type
        /// </summary>
        /// <value>The meta data item type</value>
        [DataMember(Name="metaDataType", EmitDefaultValue=false)]
        public string MetaDataType { get; set; }

        /// <summary>
        /// The meta data item value
        /// </summary>
        /// <value>The meta data item value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetaDataItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  MetaDataType: ").Append(MetaDataType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetaDataItem);
        }

        /// <summary>
        /// Returns true if MetaDataItem instances are equal
        /// </summary>
        /// <param name="input">Instance of MetaDataItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetaDataItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.MetaDataType == input.MetaDataType ||
                    (this.MetaDataType != null &&
                    this.MetaDataType.Equals(input.MetaDataType))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.MetaDataType != null)
                    hashCode = hashCode * 59 + this.MetaDataType.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }
    }
}
