/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Hold information for a string attribute value
    /// </summary>
    [DataContract]
        public partial class AttributeValue :  IEquatable<AttributeValue>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttributeValue" /> class.
        /// </summary>
        /// <param name="singleAttributeValue">singleAttributeValue.</param>
        /// <param name="compositeAttributeValue">compositeAttributeValue.</param>
        public AttributeValue(SingleAttributeValue singleAttributeValue = default(SingleAttributeValue), CompositeAttributeValue compositeAttributeValue = default(CompositeAttributeValue))
        {
            this.SingleAttributeValue = singleAttributeValue;
            this.CompositeAttributeValue = compositeAttributeValue;
        }
        
        /// <summary>
        /// Gets or Sets SingleAttributeValue
        /// </summary>
        [DataMember(Name="singleAttributeValue", EmitDefaultValue=false)]
        public SingleAttributeValue SingleAttributeValue { get; set; }

        /// <summary>
        /// Gets or Sets CompositeAttributeValue
        /// </summary>
        [DataMember(Name="compositeAttributeValue", EmitDefaultValue=false)]
        public CompositeAttributeValue CompositeAttributeValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttributeValue {\n");
            sb.Append("  SingleAttributeValue: ").Append(SingleAttributeValue).Append("\n");
            sb.Append("  CompositeAttributeValue: ").Append(CompositeAttributeValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttributeValue);
        }

        /// <summary>
        /// Returns true if AttributeValue instances are equal
        /// </summary>
        /// <param name="input">Instance of AttributeValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttributeValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SingleAttributeValue == input.SingleAttributeValue ||
                    (this.SingleAttributeValue != null &&
                    this.SingleAttributeValue.Equals(input.SingleAttributeValue))
                ) && 
                (
                    this.CompositeAttributeValue == input.CompositeAttributeValue ||
                    (this.CompositeAttributeValue != null &&
                    this.CompositeAttributeValue.Equals(input.CompositeAttributeValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SingleAttributeValue != null)
                    hashCode = hashCode * 59 + this.SingleAttributeValue.GetHashCode();
                if (this.CompositeAttributeValue != null)
                    hashCode = hashCode * 59 + this.CompositeAttributeValue.GetHashCode();
                return hashCode;
            }
        }
    }
}
