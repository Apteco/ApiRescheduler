/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details for an audience viewable by a given user
    /// </summary>
    [DataContract]
        public partial class UserAudienceExportTemplateDetail :  IEquatable<UserAudienceExportTemplateDetail>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAudienceExportTemplateDetail" /> class.
        /// </summary>
        /// <param name="viewingUsername">The username of the user that has access to this export template (required).</param>
        /// <param name="sharedToMe">Whether this export template has been shared to the given user by someone else (required).</param>
        /// <param name="sharedByMe">Whether this export template has been shared to others by the given user (required).</param>
        /// <param name="accessRights">The access rights for this export template for the given user.</param>
        /// <param name="exportTemplateDefinition">exportTemplateDefinition (required).</param>
        /// <param name="exportTemplateLookup">exportTemplateLookup.</param>
        /// <param name="id">The id of this export template (required).</param>
        /// <param name="title">The title of this export template (required).</param>
        /// <param name="systemName">The name of the FastStats system that this export template is for (required).</param>
        /// <param name="owner">owner (required).</param>
        /// <param name="numberOfUsersSharedWith">The number of people this export template has been shared with (required).</param>
        /// <param name="sharedToAll">Whether this export template has been shared to all users (required).</param>
        /// <param name="shareId">The id of the share associated with this export template, or null if the  export template has not yet been shared.</param>
        public UserAudienceExportTemplateDetail(string viewingUsername = default(string), bool? sharedToMe = default(bool?), bool? sharedByMe = default(bool?), int? accessRights = default(int?), ExportTemplateDefinition exportTemplateDefinition = default(ExportTemplateDefinition), SystemLookup exportTemplateLookup = default(SystemLookup), int? id = default(int?), string title = default(string), string systemName = default(string), UserDisplayDetails owner = default(UserDisplayDetails), int? numberOfUsersSharedWith = default(int?), bool? sharedToAll = default(bool?), int? shareId = default(int?))
        {
            // to ensure "viewingUsername" is required (not null)
            if (viewingUsername == null)
            {
                throw new InvalidDataException("viewingUsername is a required property for UserAudienceExportTemplateDetail and cannot be null");
            }
            else
            {
                this.ViewingUsername = viewingUsername;
            }
            // to ensure "sharedToMe" is required (not null)
            if (sharedToMe == null)
            {
                throw new InvalidDataException("sharedToMe is a required property for UserAudienceExportTemplateDetail and cannot be null");
            }
            else
            {
                this.SharedToMe = sharedToMe;
            }
            // to ensure "sharedByMe" is required (not null)
            if (sharedByMe == null)
            {
                throw new InvalidDataException("sharedByMe is a required property for UserAudienceExportTemplateDetail and cannot be null");
            }
            else
            {
                this.SharedByMe = sharedByMe;
            }
            // to ensure "exportTemplateDefinition" is required (not null)
            if (exportTemplateDefinition == null)
            {
                throw new InvalidDataException("exportTemplateDefinition is a required property for UserAudienceExportTemplateDetail and cannot be null");
            }
            else
            {
                this.ExportTemplateDefinition = exportTemplateDefinition;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for UserAudienceExportTemplateDetail and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for UserAudienceExportTemplateDetail and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            // to ensure "systemName" is required (not null)
            if (systemName == null)
            {
                throw new InvalidDataException("systemName is a required property for UserAudienceExportTemplateDetail and cannot be null");
            }
            else
            {
                this.SystemName = systemName;
            }
            // to ensure "owner" is required (not null)
            if (owner == null)
            {
                throw new InvalidDataException("owner is a required property for UserAudienceExportTemplateDetail and cannot be null");
            }
            else
            {
                this.Owner = owner;
            }
            // to ensure "numberOfUsersSharedWith" is required (not null)
            if (numberOfUsersSharedWith == null)
            {
                throw new InvalidDataException("numberOfUsersSharedWith is a required property for UserAudienceExportTemplateDetail and cannot be null");
            }
            else
            {
                this.NumberOfUsersSharedWith = numberOfUsersSharedWith;
            }
            // to ensure "sharedToAll" is required (not null)
            if (sharedToAll == null)
            {
                throw new InvalidDataException("sharedToAll is a required property for UserAudienceExportTemplateDetail and cannot be null");
            }
            else
            {
                this.SharedToAll = sharedToAll;
            }
            this.AccessRights = accessRights;
            this.ExportTemplateLookup = exportTemplateLookup;
            this.ShareId = shareId;
        }
        
        /// <summary>
        /// The username of the user that has access to this export template
        /// </summary>
        /// <value>The username of the user that has access to this export template</value>
        [DataMember(Name="viewingUsername", EmitDefaultValue=false)]
        public string ViewingUsername { get; set; }

        /// <summary>
        /// Whether this export template has been shared to the given user by someone else
        /// </summary>
        /// <value>Whether this export template has been shared to the given user by someone else</value>
        [DataMember(Name="sharedToMe", EmitDefaultValue=false)]
        public bool? SharedToMe { get; set; }

        /// <summary>
        /// Whether this export template has been shared to others by the given user
        /// </summary>
        /// <value>Whether this export template has been shared to others by the given user</value>
        [DataMember(Name="sharedByMe", EmitDefaultValue=false)]
        public bool? SharedByMe { get; set; }

        /// <summary>
        /// The access rights for this export template for the given user
        /// </summary>
        /// <value>The access rights for this export template for the given user</value>
        [DataMember(Name="accessRights", EmitDefaultValue=false)]
        public int? AccessRights { get; set; }

        /// <summary>
        /// Gets or Sets ExportTemplateDefinition
        /// </summary>
        [DataMember(Name="exportTemplateDefinition", EmitDefaultValue=false)]
        public ExportTemplateDefinition ExportTemplateDefinition { get; set; }

        /// <summary>
        /// Gets or Sets ExportTemplateLookup
        /// </summary>
        [DataMember(Name="exportTemplateLookup", EmitDefaultValue=false)]
        public SystemLookup ExportTemplateLookup { get; set; }

        /// <summary>
        /// The id of this export template
        /// </summary>
        /// <value>The id of this export template</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The title of this export template
        /// </summary>
        /// <value>The title of this export template</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The name of the FastStats system that this export template is for
        /// </summary>
        /// <value>The name of the FastStats system that this export template is for</value>
        [DataMember(Name="systemName", EmitDefaultValue=false)]
        public string SystemName { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public UserDisplayDetails Owner { get; set; }

        /// <summary>
        /// The number of people this export template has been shared with
        /// </summary>
        /// <value>The number of people this export template has been shared with</value>
        [DataMember(Name="numberOfUsersSharedWith", EmitDefaultValue=false)]
        public int? NumberOfUsersSharedWith { get; set; }

        /// <summary>
        /// Whether this export template has been shared to all users
        /// </summary>
        /// <value>Whether this export template has been shared to all users</value>
        [DataMember(Name="sharedToAll", EmitDefaultValue=false)]
        public bool? SharedToAll { get; set; }

        /// <summary>
        /// The id of the share associated with this export template, or null if the  export template has not yet been shared
        /// </summary>
        /// <value>The id of the share associated with this export template, or null if the  export template has not yet been shared</value>
        [DataMember(Name="shareId", EmitDefaultValue=false)]
        public int? ShareId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAudienceExportTemplateDetail {\n");
            sb.Append("  ViewingUsername: ").Append(ViewingUsername).Append("\n");
            sb.Append("  SharedToMe: ").Append(SharedToMe).Append("\n");
            sb.Append("  SharedByMe: ").Append(SharedByMe).Append("\n");
            sb.Append("  AccessRights: ").Append(AccessRights).Append("\n");
            sb.Append("  ExportTemplateDefinition: ").Append(ExportTemplateDefinition).Append("\n");
            sb.Append("  ExportTemplateLookup: ").Append(ExportTemplateLookup).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  SystemName: ").Append(SystemName).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  NumberOfUsersSharedWith: ").Append(NumberOfUsersSharedWith).Append("\n");
            sb.Append("  SharedToAll: ").Append(SharedToAll).Append("\n");
            sb.Append("  ShareId: ").Append(ShareId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserAudienceExportTemplateDetail);
        }

        /// <summary>
        /// Returns true if UserAudienceExportTemplateDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of UserAudienceExportTemplateDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAudienceExportTemplateDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ViewingUsername == input.ViewingUsername ||
                    (this.ViewingUsername != null &&
                    this.ViewingUsername.Equals(input.ViewingUsername))
                ) && 
                (
                    this.SharedToMe == input.SharedToMe ||
                    (this.SharedToMe != null &&
                    this.SharedToMe.Equals(input.SharedToMe))
                ) && 
                (
                    this.SharedByMe == input.SharedByMe ||
                    (this.SharedByMe != null &&
                    this.SharedByMe.Equals(input.SharedByMe))
                ) && 
                (
                    this.AccessRights == input.AccessRights ||
                    (this.AccessRights != null &&
                    this.AccessRights.Equals(input.AccessRights))
                ) && 
                (
                    this.ExportTemplateDefinition == input.ExportTemplateDefinition ||
                    (this.ExportTemplateDefinition != null &&
                    this.ExportTemplateDefinition.Equals(input.ExportTemplateDefinition))
                ) && 
                (
                    this.ExportTemplateLookup == input.ExportTemplateLookup ||
                    (this.ExportTemplateLookup != null &&
                    this.ExportTemplateLookup.Equals(input.ExportTemplateLookup))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.SystemName == input.SystemName ||
                    (this.SystemName != null &&
                    this.SystemName.Equals(input.SystemName))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.NumberOfUsersSharedWith == input.NumberOfUsersSharedWith ||
                    (this.NumberOfUsersSharedWith != null &&
                    this.NumberOfUsersSharedWith.Equals(input.NumberOfUsersSharedWith))
                ) && 
                (
                    this.SharedToAll == input.SharedToAll ||
                    (this.SharedToAll != null &&
                    this.SharedToAll.Equals(input.SharedToAll))
                ) && 
                (
                    this.ShareId == input.ShareId ||
                    (this.ShareId != null &&
                    this.ShareId.Equals(input.ShareId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ViewingUsername != null)
                    hashCode = hashCode * 59 + this.ViewingUsername.GetHashCode();
                if (this.SharedToMe != null)
                    hashCode = hashCode * 59 + this.SharedToMe.GetHashCode();
                if (this.SharedByMe != null)
                    hashCode = hashCode * 59 + this.SharedByMe.GetHashCode();
                if (this.AccessRights != null)
                    hashCode = hashCode * 59 + this.AccessRights.GetHashCode();
                if (this.ExportTemplateDefinition != null)
                    hashCode = hashCode * 59 + this.ExportTemplateDefinition.GetHashCode();
                if (this.ExportTemplateLookup != null)
                    hashCode = hashCode * 59 + this.ExportTemplateLookup.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.SystemName != null)
                    hashCode = hashCode * 59 + this.SystemName.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.NumberOfUsersSharedWith != null)
                    hashCode = hashCode * 59 + this.NumberOfUsersSharedWith.GetHashCode();
                if (this.SharedToAll != null)
                    hashCode = hashCode * 59 + this.SharedToAll.GetHashCode();
                if (this.ShareId != null)
                    hashCode = hashCode * 59 + this.ShareId.GetHashCode();
                return hashCode;
            }
        }
    }
}
