/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Details for creating or updating a StoreHistory action
    /// </summary>
    [DataContract]
        public partial class StoreHistorySettingsAction :  IEquatable<StoreHistorySettingsAction>
    {
        /// <summary>
        /// How to store communications history
        /// </summary>
        /// <value>How to store communications history</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SettingsTypeCommsEnum
        {
            /// <summary>
            /// Enum StoreNoComms for value: StoreNoComms
            /// </summary>
            [EnumMember(Value = "StoreNoComms")]
            StoreNoComms = 1,
            /// <summary>
            /// Enum StoreAllComms for value: StoreAllComms
            /// </summary>
            [EnumMember(Value = "StoreAllComms")]
            StoreAllComms = 2        }
        /// <summary>
        /// How to store communications history
        /// </summary>
        /// <value>How to store communications history</value>
        [DataMember(Name="settingsTypeComms", EmitDefaultValue=false)]
        public SettingsTypeCommsEnum SettingsTypeComms { get; set; }
        /// <summary>
        /// How to store communications content history
        /// </summary>
        /// <value>How to store communications content history</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SettingsTypeCommsContentEnum
        {
            /// <summary>
            /// Enum StoreNoCommsContent for value: StoreNoCommsContent
            /// </summary>
            [EnumMember(Value = "StoreNoCommsContent")]
            StoreNoCommsContent = 1,
            /// <summary>
            /// Enum StoreAllCommsContent for value: StoreAllCommsContent
            /// </summary>
            [EnumMember(Value = "StoreAllCommsContent")]
            StoreAllCommsContent = 2        }
        /// <summary>
        /// How to store communications content history
        /// </summary>
        /// <value>How to store communications content history</value>
        [DataMember(Name="settingsTypeCommsContent", EmitDefaultValue=false)]
        public SettingsTypeCommsContentEnum SettingsTypeCommsContent { get; set; }
        /// <summary>
        /// How to store journey history
        /// </summary>
        /// <value>How to store journey history</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SettingsTypeJourneyHistoryEnum
        {
            /// <summary>
            /// Enum StoreNoHistory for value: StoreNoHistory
            /// </summary>
            [EnumMember(Value = "StoreNoHistory")]
            StoreNoHistory = 1,
            /// <summary>
            /// Enum StoreAllHistory for value: StoreAllHistory
            /// </summary>
            [EnumMember(Value = "StoreAllHistory")]
            StoreAllHistory = 2        }
        /// <summary>
        /// How to store journey history
        /// </summary>
        /// <value>How to store journey history</value>
        [DataMember(Name="settingsTypeJourneyHistory", EmitDefaultValue=false)]
        public SettingsTypeJourneyHistoryEnum SettingsTypeJourneyHistory { get; set; }
        /// <summary>
        /// How to store state history
        /// </summary>
        /// <value>How to store state history</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SettingsTypeStateHistoryEnum
        {
            /// <summary>
            /// Enum StoreNoHistory for value: StoreNoHistory
            /// </summary>
            [EnumMember(Value = "StoreNoHistory")]
            StoreNoHistory = 1,
            /// <summary>
            /// Enum StoreAllHistory for value: StoreAllHistory
            /// </summary>
            [EnumMember(Value = "StoreAllHistory")]
            StoreAllHistory = 2        }
        /// <summary>
        /// How to store state history
        /// </summary>
        /// <value>How to store state history</value>
        [DataMember(Name="settingsTypeStateHistory", EmitDefaultValue=false)]
        public SettingsTypeStateHistoryEnum SettingsTypeStateHistory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreHistorySettingsAction" /> class.
        /// </summary>
        /// <param name="settingsTypeComms">How to store communications history (required).</param>
        /// <param name="settingsTypeCommsContent">How to store communications content history (required).</param>
        /// <param name="settingsTypeJourneyHistory">How to store journey history (required).</param>
        /// <param name="settingsTypeStateHistory">How to store state history (required).</param>
        public StoreHistorySettingsAction(SettingsTypeCommsEnum settingsTypeComms = default(SettingsTypeCommsEnum), SettingsTypeCommsContentEnum settingsTypeCommsContent = default(SettingsTypeCommsContentEnum), SettingsTypeJourneyHistoryEnum settingsTypeJourneyHistory = default(SettingsTypeJourneyHistoryEnum), SettingsTypeStateHistoryEnum settingsTypeStateHistory = default(SettingsTypeStateHistoryEnum))
        {
            // to ensure "settingsTypeComms" is required (not null)
            if (settingsTypeComms == null)
            {
                throw new InvalidDataException("settingsTypeComms is a required property for StoreHistorySettingsAction and cannot be null");
            }
            else
            {
                this.SettingsTypeComms = settingsTypeComms;
            }
            // to ensure "settingsTypeCommsContent" is required (not null)
            if (settingsTypeCommsContent == null)
            {
                throw new InvalidDataException("settingsTypeCommsContent is a required property for StoreHistorySettingsAction and cannot be null");
            }
            else
            {
                this.SettingsTypeCommsContent = settingsTypeCommsContent;
            }
            // to ensure "settingsTypeJourneyHistory" is required (not null)
            if (settingsTypeJourneyHistory == null)
            {
                throw new InvalidDataException("settingsTypeJourneyHistory is a required property for StoreHistorySettingsAction and cannot be null");
            }
            else
            {
                this.SettingsTypeJourneyHistory = settingsTypeJourneyHistory;
            }
            // to ensure "settingsTypeStateHistory" is required (not null)
            if (settingsTypeStateHistory == null)
            {
                throw new InvalidDataException("settingsTypeStateHistory is a required property for StoreHistorySettingsAction and cannot be null");
            }
            else
            {
                this.SettingsTypeStateHistory = settingsTypeStateHistory;
            }
        }
        




        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreHistorySettingsAction {\n");
            sb.Append("  SettingsTypeComms: ").Append(SettingsTypeComms).Append("\n");
            sb.Append("  SettingsTypeCommsContent: ").Append(SettingsTypeCommsContent).Append("\n");
            sb.Append("  SettingsTypeJourneyHistory: ").Append(SettingsTypeJourneyHistory).Append("\n");
            sb.Append("  SettingsTypeStateHistory: ").Append(SettingsTypeStateHistory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoreHistorySettingsAction);
        }

        /// <summary>
        /// Returns true if StoreHistorySettingsAction instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreHistorySettingsAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreHistorySettingsAction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SettingsTypeComms == input.SettingsTypeComms ||
                    (this.SettingsTypeComms != null &&
                    this.SettingsTypeComms.Equals(input.SettingsTypeComms))
                ) && 
                (
                    this.SettingsTypeCommsContent == input.SettingsTypeCommsContent ||
                    (this.SettingsTypeCommsContent != null &&
                    this.SettingsTypeCommsContent.Equals(input.SettingsTypeCommsContent))
                ) && 
                (
                    this.SettingsTypeJourneyHistory == input.SettingsTypeJourneyHistory ||
                    (this.SettingsTypeJourneyHistory != null &&
                    this.SettingsTypeJourneyHistory.Equals(input.SettingsTypeJourneyHistory))
                ) && 
                (
                    this.SettingsTypeStateHistory == input.SettingsTypeStateHistory ||
                    (this.SettingsTypeStateHistory != null &&
                    this.SettingsTypeStateHistory.Equals(input.SettingsTypeStateHistory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SettingsTypeComms != null)
                    hashCode = hashCode * 59 + this.SettingsTypeComms.GetHashCode();
                if (this.SettingsTypeCommsContent != null)
                    hashCode = hashCode * 59 + this.SettingsTypeCommsContent.GetHashCode();
                if (this.SettingsTypeJourneyHistory != null)
                    hashCode = hashCode * 59 + this.SettingsTypeJourneyHistory.GetHashCode();
                if (this.SettingsTypeStateHistory != null)
                    hashCode = hashCode * 59 + this.SettingsTypeStateHistory.GetHashCode();
                return hashCode;
            }
        }
    }
}
