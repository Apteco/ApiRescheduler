/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Lookup information for variable and var code descriptions returned in a result
    /// </summary>
    [DataContract]
        public partial class SystemLookup :  IEquatable<SystemLookup>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemLookup" /> class.
        /// </summary>
        /// <param name="variablesLookup">A list of variable and var code descriptions (required).</param>
        /// <param name="audiencesLookup">A list of referenced audience descriptions (required).</param>
        /// <param name="foldersLookup">A list of folder descriptions.</param>
        /// <param name="dashboardsLookup">A list of referenced dashboard descriptions.</param>
        public SystemLookup(List<VariableLookup> variablesLookup = default(List<VariableLookup>), List<AudienceLookup> audiencesLookup = default(List<AudienceLookup>), List<Folder> foldersLookup = default(List<Folder>), List<DashboardLookup> dashboardsLookup = default(List<DashboardLookup>))
        {
            // to ensure "variablesLookup" is required (not null)
            if (variablesLookup == null)
            {
                throw new InvalidDataException("variablesLookup is a required property for SystemLookup and cannot be null");
            }
            else
            {
                this.VariablesLookup = variablesLookup;
            }
            // to ensure "audiencesLookup" is required (not null)
            if (audiencesLookup == null)
            {
                throw new InvalidDataException("audiencesLookup is a required property for SystemLookup and cannot be null");
            }
            else
            {
                this.AudiencesLookup = audiencesLookup;
            }
            this.FoldersLookup = foldersLookup;
            this.DashboardsLookup = dashboardsLookup;
        }
        
        /// <summary>
        /// A list of variable and var code descriptions
        /// </summary>
        /// <value>A list of variable and var code descriptions</value>
        [DataMember(Name="variablesLookup", EmitDefaultValue=false)]
        public List<VariableLookup> VariablesLookup { get; set; }

        /// <summary>
        /// A list of referenced audience descriptions
        /// </summary>
        /// <value>A list of referenced audience descriptions</value>
        [DataMember(Name="audiencesLookup", EmitDefaultValue=false)]
        public List<AudienceLookup> AudiencesLookup { get; set; }

        /// <summary>
        /// A list of folder descriptions
        /// </summary>
        /// <value>A list of folder descriptions</value>
        [DataMember(Name="foldersLookup", EmitDefaultValue=false)]
        public List<Folder> FoldersLookup { get; set; }

        /// <summary>
        /// A list of referenced dashboard descriptions
        /// </summary>
        /// <value>A list of referenced dashboard descriptions</value>
        [DataMember(Name="dashboardsLookup", EmitDefaultValue=false)]
        public List<DashboardLookup> DashboardsLookup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemLookup {\n");
            sb.Append("  VariablesLookup: ").Append(VariablesLookup).Append("\n");
            sb.Append("  AudiencesLookup: ").Append(AudiencesLookup).Append("\n");
            sb.Append("  FoldersLookup: ").Append(FoldersLookup).Append("\n");
            sb.Append("  DashboardsLookup: ").Append(DashboardsLookup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemLookup);
        }

        /// <summary>
        /// Returns true if SystemLookup instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemLookup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemLookup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VariablesLookup == input.VariablesLookup ||
                    this.VariablesLookup != null &&
                    input.VariablesLookup != null &&
                    this.VariablesLookup.SequenceEqual(input.VariablesLookup)
                ) && 
                (
                    this.AudiencesLookup == input.AudiencesLookup ||
                    this.AudiencesLookup != null &&
                    input.AudiencesLookup != null &&
                    this.AudiencesLookup.SequenceEqual(input.AudiencesLookup)
                ) && 
                (
                    this.FoldersLookup == input.FoldersLookup ||
                    this.FoldersLookup != null &&
                    input.FoldersLookup != null &&
                    this.FoldersLookup.SequenceEqual(input.FoldersLookup)
                ) && 
                (
                    this.DashboardsLookup == input.DashboardsLookup ||
                    this.DashboardsLookup != null &&
                    input.DashboardsLookup != null &&
                    this.DashboardsLookup.SequenceEqual(input.DashboardsLookup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VariablesLookup != null)
                    hashCode = hashCode * 59 + this.VariablesLookup.GetHashCode();
                if (this.AudiencesLookup != null)
                    hashCode = hashCode * 59 + this.AudiencesLookup.GetHashCode();
                if (this.FoldersLookup != null)
                    hashCode = hashCode * 59 + this.FoldersLookup.GetHashCode();
                if (this.DashboardsLookup != null)
                    hashCode = hashCode * 59 + this.DashboardsLookup.GetHashCode();
                return hashCode;
            }
        }
    }
}
