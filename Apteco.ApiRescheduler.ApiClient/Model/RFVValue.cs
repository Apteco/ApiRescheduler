/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// RFVValue
    /// </summary>
    [DataContract]
        public partial class RFVValue :  IEquatable<RFVValue>
    {
        /// <summary>
        /// Defines Action
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ActionEnum
        {
            /// <summary>
            /// Enum Sum for value: Sum
            /// </summary>
            [EnumMember(Value = "Sum")]
            Sum = 1,
            /// <summary>
            /// Enum Average for value: Average
            /// </summary>
            [EnumMember(Value = "Average")]
            Average = 2,
            /// <summary>
            /// Enum Median for value: Median
            /// </summary>
            [EnumMember(Value = "Median")]
            Median = 3,
            /// <summary>
            /// Enum Mode for value: Mode
            /// </summary>
            [EnumMember(Value = "Mode")]
            Mode = 4,
            /// <summary>
            /// Enum Minimum for value: Minimum
            /// </summary>
            [EnumMember(Value = "Minimum")]
            Minimum = 5,
            /// <summary>
            /// Enum Maximum for value: Maximum
            /// </summary>
            [EnumMember(Value = "Maximum")]
            Maximum = 6,
            /// <summary>
            /// Enum Distinct for value: Distinct
            /// </summary>
            [EnumMember(Value = "Distinct")]
            Distinct = 7,
            /// <summary>
            /// Enum RankCoefficient for value: RankCoefficient
            /// </summary>
            [EnumMember(Value = "RankCoefficient")]
            RankCoefficient = 8        }
        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RFVValue" /> class.
        /// </summary>
        /// <param name="variableName">variableName.</param>
        /// <param name="action">action.</param>
        /// <param name="values">values.</param>
        public RFVValue(string variableName = default(string), ActionEnum? action = default(ActionEnum?), string values = default(string))
        {
            this.VariableName = variableName;
            this.Action = action;
            this.Values = values;
        }
        
        /// <summary>
        /// Gets or Sets VariableName
        /// </summary>
        [DataMember(Name="variableName", EmitDefaultValue=false)]
        public string VariableName { get; set; }


        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public string Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RFVValue {\n");
            sb.Append("  VariableName: ").Append(VariableName).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RFVValue);
        }

        /// <summary>
        /// Returns true if RFVValue instances are equal
        /// </summary>
        /// <param name="input">Instance of RFVValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RFVValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VariableName == input.VariableName ||
                    (this.VariableName != null &&
                    this.VariableName.Equals(input.VariableName))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Values == input.Values ||
                    (this.Values != null &&
                    this.Values.Equals(input.Values))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VariableName != null)
                    hashCode = hashCode * 59 + this.VariableName.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }
    }
}
