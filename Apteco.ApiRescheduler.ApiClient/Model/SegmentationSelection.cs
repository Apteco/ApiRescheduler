/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// The details for a segmentation selection
    /// </summary>
    [DataContract]
        public partial class SegmentationSelection :  IEquatable<SegmentationSelection>
    {
        /// <summary>
        /// The type of this selection.
        /// </summary>
        /// <value>The type of this selection.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum QueryTypeEnum
        {
            /// <summary>
            /// Enum Regular for value: Regular
            /// </summary>
            [EnumMember(Value = "Regular")]
            Regular = 1,
            /// <summary>
            /// Enum Equal for value: Equal
            /// </summary>
            [EnumMember(Value = "Equal")]
            Equal = 2,
            /// <summary>
            /// Enum NotACustomer for value: NotACustomer
            /// </summary>
            [EnumMember(Value = "NotACustomer")]
            NotACustomer = 3,
            /// <summary>
            /// Enum NeverACustomer for value: NeverACustomer
            /// </summary>
            [EnumMember(Value = "NeverACustomer")]
            NeverACustomer = 4        }
        /// <summary>
        /// The type of this selection.
        /// </summary>
        /// <value>The type of this selection.</value>
        [DataMember(Name="queryType", EmitDefaultValue=false)]
        public QueryTypeEnum? QueryType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentationSelection" /> class.
        /// </summary>
        /// <param name="query">query.</param>
        /// <param name="queryGroup">The index of the group for this selection.  Multiple segementation selections with the same group number will be in the same group..</param>
        /// <param name="queryLetter">The name of the selection, which is used in some segmentation reports to identify the selection..</param>
        /// <param name="queryType">The type of this selection..</param>
        public SegmentationSelection(Query query = default(Query), int? queryGroup = default(int?), string queryLetter = default(string), QueryTypeEnum? queryType = default(QueryTypeEnum?))
        {
            this.Query = query;
            this.QueryGroup = queryGroup;
            this.QueryLetter = queryLetter;
            this.QueryType = queryType;
        }
        
        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public Query Query { get; set; }

        /// <summary>
        /// The index of the group for this selection.  Multiple segementation selections with the same group number will be in the same group.
        /// </summary>
        /// <value>The index of the group for this selection.  Multiple segementation selections with the same group number will be in the same group.</value>
        [DataMember(Name="queryGroup", EmitDefaultValue=false)]
        public int? QueryGroup { get; set; }

        /// <summary>
        /// The name of the selection, which is used in some segmentation reports to identify the selection.
        /// </summary>
        /// <value>The name of the selection, which is used in some segmentation reports to identify the selection.</value>
        [DataMember(Name="queryLetter", EmitDefaultValue=false)]
        public string QueryLetter { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SegmentationSelection {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  QueryGroup: ").Append(QueryGroup).Append("\n");
            sb.Append("  QueryLetter: ").Append(QueryLetter).Append("\n");
            sb.Append("  QueryType: ").Append(QueryType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SegmentationSelection);
        }

        /// <summary>
        /// Returns true if SegmentationSelection instances are equal
        /// </summary>
        /// <param name="input">Instance of SegmentationSelection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SegmentationSelection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.QueryGroup == input.QueryGroup ||
                    (this.QueryGroup != null &&
                    this.QueryGroup.Equals(input.QueryGroup))
                ) && 
                (
                    this.QueryLetter == input.QueryLetter ||
                    (this.QueryLetter != null &&
                    this.QueryLetter.Equals(input.QueryLetter))
                ) && 
                (
                    this.QueryType == input.QueryType ||
                    (this.QueryType != null &&
                    this.QueryType.Equals(input.QueryType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this.QueryGroup != null)
                    hashCode = hashCode * 59 + this.QueryGroup.GetHashCode();
                if (this.QueryLetter != null)
                    hashCode = hashCode * 59 + this.QueryLetter.GetHashCode();
                if (this.QueryType != null)
                    hashCode = hashCode * 59 + this.QueryType.GetHashCode();
                return hashCode;
            }
        }
    }
}
