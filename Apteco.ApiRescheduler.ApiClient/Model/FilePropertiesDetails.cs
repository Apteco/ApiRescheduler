/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// FilePropertiesDetails
    /// </summary>
    [DataContract]
        public partial class FilePropertiesDetails :  IEquatable<FilePropertiesDetails>
    {
        /// <summary>
        /// Whether the file can be written to
        /// </summary>
        /// <value>Whether the file can be written to</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum WriteStatusEnum
        {
            /// <summary>
            /// Enum PermissionDenied for value: PermissionDenied
            /// </summary>
            [EnumMember(Value = "PermissionDenied")]
            PermissionDenied = 1,
            /// <summary>
            /// Enum CanOverwriteFile for value: CanOverwriteFile
            /// </summary>
            [EnumMember(Value = "CanOverwriteFile")]
            CanOverwriteFile = 2,
            /// <summary>
            /// Enum CanWrite for value: CanWrite
            /// </summary>
            [EnumMember(Value = "CanWrite")]
            CanWrite = 3        }
        /// <summary>
        /// Whether the file can be written to
        /// </summary>
        /// <value>Whether the file can be written to</value>
        [DataMember(Name="writeStatus", EmitDefaultValue=false)]
        public WriteStatusEnum WriteStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilePropertiesDetails" /> class.
        /// </summary>
        /// <param name="system">The system the file is on (required).</param>
        /// <param name="path">The path to the file (required).</param>
        /// <param name="writeStatus">Whether the file can be written to (required).</param>
        public FilePropertiesDetails(string system = default(string), string path = default(string), WriteStatusEnum writeStatus = default(WriteStatusEnum))
        {
            // to ensure "system" is required (not null)
            if (system == null)
            {
                throw new InvalidDataException("system is a required property for FilePropertiesDetails and cannot be null");
            }
            else
            {
                this.System = system;
            }
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new InvalidDataException("path is a required property for FilePropertiesDetails and cannot be null");
            }
            else
            {
                this.Path = path;
            }
            // to ensure "writeStatus" is required (not null)
            if (writeStatus == null)
            {
                throw new InvalidDataException("writeStatus is a required property for FilePropertiesDetails and cannot be null");
            }
            else
            {
                this.WriteStatus = writeStatus;
            }
        }
        
        /// <summary>
        /// The system the file is on
        /// </summary>
        /// <value>The system the file is on</value>
        [DataMember(Name="system", EmitDefaultValue=false)]
        public string System { get; set; }

        /// <summary>
        /// The path to the file
        /// </summary>
        /// <value>The path to the file</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilePropertiesDetails {\n");
            sb.Append("  System: ").Append(System).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  WriteStatus: ").Append(WriteStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilePropertiesDetails);
        }

        /// <summary>
        /// Returns true if FilePropertiesDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of FilePropertiesDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilePropertiesDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.System == input.System ||
                    (this.System != null &&
                    this.System.Equals(input.System))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.WriteStatus == input.WriteStatus ||
                    (this.WriteStatus != null &&
                    this.WriteStatus.Equals(input.WriteStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.System != null)
                    hashCode = hashCode * 59 + this.System.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.WriteStatus != null)
                    hashCode = hashCode * 59 + this.WriteStatus.GetHashCode();
                return hashCode;
            }
        }
    }
}
