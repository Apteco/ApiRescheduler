/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiRescheduler.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiRescheduler.ApiClient.Model
{
    /// <summary>
    /// Criteria
    /// </summary>
    [DataContract]
        public partial class Criteria :  IEquatable<Criteria>
    {
        /// <summary>
        /// Defines Logic
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum LogicEnum
        {
            /// <summary>
            /// Enum OR for value: OR
            /// </summary>
            [EnumMember(Value = "OR")]
            OR = 1,
            /// <summary>
            /// Enum AND for value: AND
            /// </summary>
            [EnumMember(Value = "AND")]
            AND = 2        }
        /// <summary>
        /// Gets or Sets Logic
        /// </summary>
        [DataMember(Name="logic", EmitDefaultValue=false)]
        public LogicEnum? Logic { get; set; }
        /// <summary>
        /// Defines TextMatchType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TextMatchTypeEnum
        {
            /// <summary>
            /// Enum Ranges for value: Ranges
            /// </summary>
            [EnumMember(Value = "Ranges")]
            Ranges = 1,
            /// <summary>
            /// Enum Is for value: Is
            /// </summary>
            [EnumMember(Value = "Is")]
            Is = 2,
            /// <summary>
            /// Enum Begins for value: Begins
            /// </summary>
            [EnumMember(Value = "Begins")]
            Begins = 3,
            /// <summary>
            /// Enum Ends for value: Ends
            /// </summary>
            [EnumMember(Value = "Ends")]
            Ends = 4,
            /// <summary>
            /// Enum Contains for value: Contains
            /// </summary>
            [EnumMember(Value = "Contains")]
            Contains = 5        }
        /// <summary>
        /// Gets or Sets TextMatchType
        /// </summary>
        [DataMember(Name="textMatchType", EmitDefaultValue=false)]
        public TextMatchTypeEnum? TextMatchType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Criteria" /> class.
        /// </summary>
        /// <param name="variableName">variableName.</param>
        /// <param name="path">path.</param>
        /// <param name="include">include.</param>
        /// <param name="logic">logic.</param>
        /// <param name="ignoreCase">ignoreCase.</param>
        /// <param name="textMatchType">textMatchType.</param>
        /// <param name="valueRules">valueRules.</param>
        /// <param name="expressionRule">expressionRule.</param>
        /// <param name="todayAt">todayAt.</param>
        /// <param name="tableName">tableName (required).</param>
        /// <param name="name">name.</param>
        public Criteria(string variableName = default(string), string path = default(string), bool? include = default(bool?), LogicEnum? logic = default(LogicEnum?), bool? ignoreCase = default(bool?), TextMatchTypeEnum? textMatchType = default(TextMatchTypeEnum?), List<ValueRule> valueRules = default(List<ValueRule>), Expression expressionRule = default(Expression), string todayAt = default(string), string tableName = default(string), string name = default(string))
        {
            // to ensure "tableName" is required (not null)
            if (tableName == null)
            {
                throw new InvalidDataException("tableName is a required property for Criteria and cannot be null");
            }
            else
            {
                this.TableName = tableName;
            }
            this.VariableName = variableName;
            this.Path = path;
            this.Include = include;
            this.Logic = logic;
            this.IgnoreCase = ignoreCase;
            this.TextMatchType = textMatchType;
            this.ValueRules = valueRules;
            this.ExpressionRule = expressionRule;
            this.TodayAt = todayAt;
            this.Name = name;
        }
        
        /// <summary>
        /// Gets or Sets VariableName
        /// </summary>
        [DataMember(Name="variableName", EmitDefaultValue=false)]
        public string VariableName { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Include
        /// </summary>
        [DataMember(Name="include", EmitDefaultValue=false)]
        public bool? Include { get; set; }


        /// <summary>
        /// Gets or Sets IgnoreCase
        /// </summary>
        [DataMember(Name="ignoreCase", EmitDefaultValue=false)]
        public bool? IgnoreCase { get; set; }


        /// <summary>
        /// Gets or Sets ValueRules
        /// </summary>
        [DataMember(Name="valueRules", EmitDefaultValue=false)]
        public List<ValueRule> ValueRules { get; set; }

        /// <summary>
        /// Gets or Sets ExpressionRule
        /// </summary>
        [DataMember(Name="expressionRule", EmitDefaultValue=false)]
        public Expression ExpressionRule { get; set; }

        /// <summary>
        /// Gets or Sets TodayAt
        /// </summary>
        [DataMember(Name="todayAt", EmitDefaultValue=false)]
        public string TodayAt { get; set; }

        /// <summary>
        /// Gets or Sets TableName
        /// </summary>
        [DataMember(Name="tableName", EmitDefaultValue=false)]
        public string TableName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Criteria {\n");
            sb.Append("  VariableName: ").Append(VariableName).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("  Logic: ").Append(Logic).Append("\n");
            sb.Append("  IgnoreCase: ").Append(IgnoreCase).Append("\n");
            sb.Append("  TextMatchType: ").Append(TextMatchType).Append("\n");
            sb.Append("  ValueRules: ").Append(ValueRules).Append("\n");
            sb.Append("  ExpressionRule: ").Append(ExpressionRule).Append("\n");
            sb.Append("  TodayAt: ").Append(TodayAt).Append("\n");
            sb.Append("  TableName: ").Append(TableName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Criteria);
        }

        /// <summary>
        /// Returns true if Criteria instances are equal
        /// </summary>
        /// <param name="input">Instance of Criteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Criteria input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VariableName == input.VariableName ||
                    (this.VariableName != null &&
                    this.VariableName.Equals(input.VariableName))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Include == input.Include ||
                    (this.Include != null &&
                    this.Include.Equals(input.Include))
                ) && 
                (
                    this.Logic == input.Logic ||
                    (this.Logic != null &&
                    this.Logic.Equals(input.Logic))
                ) && 
                (
                    this.IgnoreCase == input.IgnoreCase ||
                    (this.IgnoreCase != null &&
                    this.IgnoreCase.Equals(input.IgnoreCase))
                ) && 
                (
                    this.TextMatchType == input.TextMatchType ||
                    (this.TextMatchType != null &&
                    this.TextMatchType.Equals(input.TextMatchType))
                ) && 
                (
                    this.ValueRules == input.ValueRules ||
                    this.ValueRules != null &&
                    input.ValueRules != null &&
                    this.ValueRules.SequenceEqual(input.ValueRules)
                ) && 
                (
                    this.ExpressionRule == input.ExpressionRule ||
                    (this.ExpressionRule != null &&
                    this.ExpressionRule.Equals(input.ExpressionRule))
                ) && 
                (
                    this.TodayAt == input.TodayAt ||
                    (this.TodayAt != null &&
                    this.TodayAt.Equals(input.TodayAt))
                ) && 
                (
                    this.TableName == input.TableName ||
                    (this.TableName != null &&
                    this.TableName.Equals(input.TableName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VariableName != null)
                    hashCode = hashCode * 59 + this.VariableName.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Include != null)
                    hashCode = hashCode * 59 + this.Include.GetHashCode();
                if (this.Logic != null)
                    hashCode = hashCode * 59 + this.Logic.GetHashCode();
                if (this.IgnoreCase != null)
                    hashCode = hashCode * 59 + this.IgnoreCase.GetHashCode();
                if (this.TextMatchType != null)
                    hashCode = hashCode * 59 + this.TextMatchType.GetHashCode();
                if (this.ValueRules != null)
                    hashCode = hashCode * 59 + this.ValueRules.GetHashCode();
                if (this.ExpressionRule != null)
                    hashCode = hashCode * 59 + this.ExpressionRule.GetHashCode();
                if (this.TodayAt != null)
                    hashCode = hashCode * 59 + this.TodayAt.GetHashCode();
                if (this.TableName != null)
                    hashCode = hashCode * 59 + this.TableName.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }
    }
}
